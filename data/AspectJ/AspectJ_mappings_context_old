
======= dd88d21^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java"

======= dd88d21^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java"

======= dd88d21^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java"

======= dd88d21^:"tests/src/org/aspectj/systemtest/AllTests17.java"

======= dd88d21^:"tests/src/org/aspectj/systemtest/AllTests17.java"

======= dd88d21^:"tests/src/org/aspectj/systemtest/AllTests17.java"

======= dd88d21^:"tests/src/org/aspectj/systemtest/AllTests17.java"

======= dd88d21^:"tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java"

======= dd88d21^:"tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java"

======= dd88d21^:"tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java"

======= dd88d21^:"weaver/src/org/aspectj/weaver/bcel/asm/StackMapAdder.java"


======= 9319e34^:"org.aspectj.matcher/src/org/aspectj/weaver/Checker.java"

======= 9319e34^:"org.aspectj.matcher/src/org/aspectj/weaver/Checker.java"

======= 9319e34^:"tests/src/org/aspectj/systemtest/ajc174/Ajc174Tests.java"


======= b2cd5fa^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java"

======= b2cd5fa^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java"

======= b2cd5fa^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java"

======= b2cd5fa^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"

======= b2cd5fa^:"org.aspectj.matcher/src/org/aspectj/weaver/Lint.java"

======= b2cd5fa^:"testing/newsrc/org/aspectj/testing/CompileSpec.java"

======= b2cd5fa^:"testing/newsrc/org/aspectj/testing/CompileSpec.java"

======= b2cd5fa^:"tests/src/org/aspectj/systemtest/ajc174/Ajc174Tests.java"


======= 9e992d6^:"loadtime/src/org/aspectj/weaver/loadtime/Aj.java"

                if(loader.equals(myClassLoader)){
                    adaptor = myClassLoaderAdpator;
                }
                else{
======= 9e992d6^:"loadtime/src/org/aspectj/weaver/loadtime/Aj.java"

======= 9e992d6^:"loadtime/src/org/aspectj/weaver/loadtime/Aj.java"


======= 2393bef^:"tests/src/org/aspectj/systemtest/ajc174/Ajc174Tests.java"

======= 2393bef^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"

======= 2393bef^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"

======= 2393bef^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"

======= 2393bef^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"

======= 2393bef^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"

======= 2393bef^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"

======= 2393bef^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"

======= 2393bef^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"

======= 2393bef^:"weaver/src/org/aspectj/weaver/bcel/BcelWorld.java"

======= 2393bef^:"weaver/src/org/aspectj/weaver/bcel/BcelWorld.java"

======= 2393bef^:"weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java"

======= 2393bef^:"weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java"


======= 0c0adc5^:"loadtime/src/org/aspectj/weaver/loadtime/Aj.java"

======= 0c0adc5^:"loadtime/src/org/aspectj/weaver/loadtime/Aj.java"

======= 0c0adc5^:"loadtime/src/org/aspectj/weaver/loadtime/Aj.java"

======= 0c0adc5^:"loadtime/src/org/aspectj/weaver/loadtime/Aj.java"

======= 0c0adc5^:"loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java"

======= 0c0adc5^:"loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java"

======= 0c0adc5^:"loadtime/src/org/aspectj/weaver/loadtime/Options.java"

======= 0c0adc5^:"loadtime/src/org/aspectj/weaver/loadtime/Options.java"

======= 0c0adc5^:"loadtime/src/org/aspectj/weaver/loadtime/Options.java"

======= 0c0adc5^:"loadtime/src/org/aspectj/weaver/loadtime/Options.java"

======= 0c0adc5^:"loadtime/src/org/aspectj/weaver/loadtime/Options.java"

======= 0c0adc5^:"loadtime/src/org/aspectj/weaver/loadtime/Options.java"

======= 0c0adc5^:"loadtime/src/org/aspectj/weaver/loadtime/Options.java"

======= 0c0adc5^:"loadtime/src/org/aspectj/weaver/loadtime/Options.java"

======= 0c0adc5^:"loadtime/src/org/aspectj/weaver/loadtime/Options.java"

======= 0c0adc5^:"loadtime/src/org/aspectj/weaver/loadtime/Options.java"

======= 0c0adc5^:"tests/src/org/aspectj/systemtest/ajc174/Ajc174Tests.java"


======= 302c14e^:"tests/src/org/aspectj/systemtest/AllTests17.java"

======= 302c14e^:"tests/src/org/aspectj/systemtest/AllTests17.java"

======= 302c14e^:"tests/src/org/aspectj/systemtest/AllTests17.java"

======= 302c14e^:"tests/src/org/aspectj/systemtest/AllTests17.java"

======= 302c14e^:"weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java"

======= 302c14e^:"weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java"

======= 302c14e^:"weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java"


======= e6cb508^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java"


======= 3f6e166^:"org.aspectj.matcher/src/org/aspectj/weaver/ReferenceType.java"

======= 3f6e166^:"org.aspectj.matcher/src/org/aspectj/weaver/ReferenceType.java"

======= 3f6e166^:"org.aspectj.matcher/src/org/aspectj/weaver/ReferenceType.java"

======= 3f6e166^:"org.aspectj.matcher/src/org/aspectj/weaver/ReferenceType.java"


======= ff0859d^:"weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java"


======= 4e34477^:"org.aspectj.matcher/src/org/aspectj/weaver/ResolvedType.java"


======= be5a530^:"org.aspectj.matcher/src/org/aspectj/weaver/AjcMemberMaker.java"


======= edb41e3^:"org.aspectj.matcher/src/org/aspectj/weaver/WeaverMessages.java"

======= edb41e3^:"org.aspectj.matcher/src/org/aspectj/weaver/patterns/WildAnnotationTypePattern.java"

======= edb41e3^:"tests/src/org/aspectj/systemtest/ajc172/Ajc172Tests.java"


======= 46f9079^:"org.aspectj.matcher/src/org/aspectj/weaver/TypeVariable.java"

======= 46f9079^:"org.aspectj.matcher/src/org/aspectj/weaver/TypeVariable.java"

======= 46f9079^:"org.aspectj.matcher/src/org/aspectj/weaver/TypeVariable.java"

======= 46f9079^:"org.aspectj.matcher/src/org/aspectj/weaver/TypeVariable.java"

======= 46f9079^:"tests/src/org/aspectj/systemtest/ajc172/Ajc172Tests.java"

======= 46f9079^:"tests/src/org/aspectj/systemtest/ajc172/Ajc172Tests.java"

======= 46f9079^:"tests/src/org/aspectj/systemtest/ajc172/Ajc172Tests.java"

======= 46f9079^:"tests/src/org/aspectj/systemtest/ajc172/Ajc172Tests.java"

======= 46f9079^:"tests/src/org/aspectj/systemtest/ajc172/Ajc172Tests.java"

======= 46f9079^:"tests/src/org/aspectj/systemtest/ajc172/Ajc172Tests.java"


======= 4af4b1e^:"org.aspectj.matcher/src/org/aspectj/weaver/BoundedReferenceType.java"

======= 4af4b1e^:"org.aspectj.matcher/src/org/aspectj/weaver/BoundedReferenceType.java"

======= 4af4b1e^:"org.aspectj.matcher/src/org/aspectj/weaver/BoundedReferenceType.java"

======= 4af4b1e^:"org.aspectj.matcher/src/org/aspectj/weaver/BoundedReferenceType.java"

======= 4af4b1e^:"org.aspectj.matcher/src/org/aspectj/weaver/BoundedReferenceType.java"

======= 4af4b1e^:"org.aspectj.matcher/src/org/aspectj/weaver/BoundedReferenceType.java"

======= 4af4b1e^:"org.aspectj.matcher/src/org/aspectj/weaver/BoundedReferenceType.java"

======= 4af4b1e^:"org.aspectj.matcher/src/org/aspectj/weaver/BoundedReferenceType.java"

======= 4af4b1e^:"org.aspectj.matcher/src/org/aspectj/weaver/BoundedReferenceType.java"

======= 4af4b1e^:"org.aspectj.matcher/src/org/aspectj/weaver/BoundedReferenceType.java"

======= 4af4b1e^:"org.aspectj.matcher/src/org/aspectj/weaver/BoundedReferenceType.java"

======= 4af4b1e^:"tests/src/org/aspectj/systemtest/ajc172/Ajc172Tests.java"


======= d524403^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseSourceType.java"


======= 96ebaae^:"tests/src/org/aspectj/systemtest/ajc172/Ajc172Tests.java"

 */ 
======= 96ebaae^:"tests/src/org/aspectj/systemtest/ajc172/Ajc172Tests.java"

======= 96ebaae^:"weaver/src/org/aspectj/weaver/bcel/BcelWorld.java"


======= 3e5af0f^:"org.aspectj.matcher/src/org/aspectj/weaver/patterns/AndPointcut.java"


======= fc55431^:"weaver/src/org/aspectj/weaver/bcel/asm/StackMapAdder.java"


======= df1823b^:"build/src/org/aspectj/internal/tools/ant/taskdefs/Checklics.java"

======= df1823b^:"build/src/org/aspectj/internal/tools/ant/taskdefs/Checklics.java"

======= df1823b^:"build/src/org/aspectj/internal/tools/ant/taskdefs/Checklics.java"

======= df1823b^:"util/src/org/aspectj/util/LangUtil.java"

======= df1823b^:"weaver/src/org/aspectj/weaver/tools/cache/AbstractIndexedFileCacheBacking.java"

======= df1823b^:"weaver/src/org/aspectj/weaver/tools/cache/AbstractIndexedFileCacheBacking.java"

======= df1823b^:"weaver/src/org/aspectj/weaver/tools/cache/AbstractIndexedFileCacheBacking.java"

======= df1823b^:"weaver/src/org/aspectj/weaver/tools/cache/DefaultFileCacheBacking.java"

======= df1823b^:"weaver/src/org/aspectj/weaver/tools/cache/DefaultFileCacheBacking.java"

======= df1823b^:"weaver/src/org/aspectj/weaver/tools/cache/DefaultFileCacheBacking.java"

======= df1823b^:"weaver/src/org/aspectj/weaver/tools/cache/DefaultFileCacheBacking.java"

======= df1823b^:"weaver/src/org/aspectj/weaver/tools/cache/DefaultFileCacheBacking.java"

======= df1823b^:"weaver/testsrc/org/aspectj/weaver/tools/cache/CacheTests.java"

======= df1823b^:"weaver/testsrc/org/aspectj/weaver/tools/cache/DefaultCacheKeyResolverTest.java"

======= df1823b^:"weaver/testsrc/org/aspectj/weaver/tools/cache/DefaultFileCacheBackingTest.java"

======= df1823b^:"weaver/testsrc/org/aspectj/weaver/tools/cache/DefaultFileCacheBackingTest.java"

======= df1823b^:"weaver/testsrc/org/aspectj/weaver/tools/cache/SimpleClassCacheTest.java"

======= df1823b^:"weaver/testsrc/org/aspectj/weaver/tools/cache/WeavedClassCacheTest.java"

======= df1823b^:"weaver/testsrc/org/aspectj/weaver/tools/cache/WeavedClassCacheTest.java"

======= df1823b^:"weaver/testsrc/org/aspectj/weaver/tools/cache/WeavedClassCacheTest.java"

======= df1823b^:"weaver/testsrc/org/aspectj/weaver/tools/cache/WeavedClassCacheTest.java"

======= df1823b^:"weaver/testsrc/org/aspectj/weaver/tools/cache/WeavedClassCacheTest.java"


======= 9a3cc2b^:"loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java"

======= 9a3cc2b^:"loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java"

======= 9a3cc2b^:"loadtime/src/org/aspectj/weaver/loadtime/WeavingURLClassLoader.java"

======= 9a3cc2b^:"org.aspectj.matcher/src/org/aspectj/weaver/tools/GeneratedClassHandler.java"

======= 9a3cc2b^:"util/src/org/aspectj/util/LangUtil.java"

======= 9a3cc2b^:"util/src/org/aspectj/util/LangUtil.java"

======= 9a3cc2b^:"weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java"

 *     Matthew Webster, Adrian Colyer, John Kew (caching)
======= 9a3cc2b^:"weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java"

======= 9a3cc2b^:"weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java"

======= 9a3cc2b^:"weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java"

======= 9a3cc2b^:"weaver/src/org/aspectj/weaver/tools/cache/CacheBacking.java"

 *   John Kew (vmware)         initial implementation
======= 9a3cc2b^:"weaver/src/org/aspectj/weaver/tools/cache/CacheBacking.java"

======= 9a3cc2b^:"weaver/src/org/aspectj/weaver/tools/cache/CacheStatistics.java"

======= 9a3cc2b^:"weaver/src/org/aspectj/weaver/tools/cache/CachedClassEntry.java"

 *   John Kew (vmware)         initial implementation
======= 9a3cc2b^:"weaver/src/org/aspectj/weaver/tools/cache/CachedClassEntry.java"

======= 9a3cc2b^:"weaver/src/org/aspectj/weaver/tools/cache/CachedClassReference.java"

 *   John Kew (vmware)         initial implementation
======= 9a3cc2b^:"weaver/src/org/aspectj/weaver/tools/cache/CachedClassReference.java"

======= 9a3cc2b^:"weaver/src/org/aspectj/weaver/tools/cache/CachedClassReference.java"

======= 9a3cc2b^:"weaver/src/org/aspectj/weaver/tools/cache/CachedClassReference.java"

======= 9a3cc2b^:"weaver/src/org/aspectj/weaver/tools/cache/DefaultCacheFactory.java"

======= 9a3cc2b^:"weaver/src/org/aspectj/weaver/tools/cache/DefaultCacheKeyResolver.java"

======= 9a3cc2b^:"weaver/src/org/aspectj/weaver/tools/cache/DefaultFileCacheBacking.java"

 *   John Kew (vmware)         initial implementation
======= 9a3cc2b^:"weaver/src/org/aspectj/weaver/tools/cache/DefaultFileCacheBacking.java"

======= 9a3cc2b^:"weaver/src/org/aspectj/weaver/tools/cache/DefaultFileCacheBacking.java"

======= 9a3cc2b^:"weaver/src/org/aspectj/weaver/tools/cache/DefaultFileCacheBacking.java"

======= 9a3cc2b^:"weaver/src/org/aspectj/weaver/tools/cache/GeneratedCachedClassHandler.java"

 *   John Kew (vmware)         initial implementation
======= 9a3cc2b^:"weaver/src/org/aspectj/weaver/tools/cache/GeneratedCachedClassHandler.java"

======= 9a3cc2b^:"weaver/src/org/aspectj/weaver/tools/cache/WeavedClassCache.java"

 *   John Kew (vmware)         initial implementation
======= 9a3cc2b^:"weaver/src/org/aspectj/weaver/tools/cache/WeavedClassCache.java"

======= 9a3cc2b^:"weaver/src/org/aspectj/weaver/tools/cache/WeavedClassCache.java"

======= 9a3cc2b^:"weaver/src/org/aspectj/weaver/tools/cache/WeavedClassCache.java"

======= 9a3cc2b^:"weaver/src/org/aspectj/weaver/tools/cache/WeavedClassCache.java"

======= 9a3cc2b^:"weaver/src/org/aspectj/weaver/tools/cache/WeavedClassCache.java"

======= 9a3cc2b^:"weaver/testsrc/org/aspectj/weaver/tools/cache/DefaultFileCacheBackingTest.java"

======= 9a3cc2b^:"weaver/testsrc/org/aspectj/weaver/tools/cache/DefaultFileCacheBackingTest.java"

======= 9a3cc2b^:"weaver/testsrc/org/aspectj/weaver/tools/cache/DefaultFileCacheBackingTest.java"

======= 9a3cc2b^:"weaver/testsrc/org/aspectj/weaver/tools/cache/DefaultFileCacheBackingTest.java"

======= 9a3cc2b^:"weaver/testsrc/org/aspectj/weaver/tools/cache/WeavedClassCacheTest.java"

======= 9a3cc2b^:"weaver/testsrc/org/aspectj/weaver/tools/cache/WeavedClassCacheTest.java"

======= 9a3cc2b^:"weaver/testsrc/org/aspectj/weaver/tools/cache/WeavedClassCacheTest.java"

======= 9a3cc2b^:"weaver/testsrc/org/aspectj/weaver/tools/cache/WeavedClassCacheTest.java"


======= b8ebdc3^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseTypeMunger.java"

======= b8ebdc3^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseTypeMunger.java"


======= 0d69bd3^:"org.aspectj.matcher/src/org/aspectj/weaver/EnumAnnotationValue.java"

======= 0d69bd3^:"org.aspectj.matcher/src/org/aspectj/weaver/StandardAnnotation.java"

======= 0d69bd3^:"org.aspectj.matcher/src/org/aspectj/weaver/patterns/WildAnnotationTypePattern.java"

======= 0d69bd3^:"org.aspectj.matcher/src/org/aspectj/weaver/patterns/WildAnnotationTypePattern.java"

======= 0d69bd3^:"org.aspectj.matcher/src/org/aspectj/weaver/patterns/WildAnnotationTypePattern.java"

======= 0d69bd3^:"org.aspectj.matcher/src/org/aspectj/weaver/patterns/WildAnnotationTypePattern.java"

======= 0d69bd3^:"org.aspectj.matcher/src/org/aspectj/weaver/patterns/WildAnnotationTypePattern.java"

======= 0d69bd3^:"org.aspectj.matcher/src/org/aspectj/weaver/patterns/WildAnnotationTypePattern.java"

======= 0d69bd3^:"org.aspectj.matcher/src/org/aspectj/weaver/patterns/WildAnnotationTypePattern.java"

======= 0d69bd3^:"org.aspectj.matcher/src/org/aspectj/weaver/patterns/WildAnnotationTypePattern.java"

======= 0d69bd3^:"org.aspectj.matcher/src/org/aspectj/weaver/patterns/WildAnnotationTypePattern.java"

======= 0d69bd3^:"org.aspectj.matcher/src/org/aspectj/weaver/patterns/WildAnnotationTypePattern.java"

======= 0d69bd3^:"org.aspectj.matcher/src/org/aspectj/weaver/patterns/WildAnnotationTypePattern.java"

======= 0d69bd3^:"org.aspectj.matcher/src/org/aspectj/weaver/patterns/WildAnnotationTypePattern.java"

======= 0d69bd3^:"org.aspectj.matcher/src/org/aspectj/weaver/patterns/WildAnnotationTypePattern.java"

======= 0d69bd3^:"org.aspectj.matcher/src/org/aspectj/weaver/patterns/WildAnnotationTypePattern.java"

======= 0d69bd3^:"tests/src/org/aspectj/systemtest/ajc172/Ajc172Tests.java"


======= b9c7a19^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AstUtil.java"

======= b9c7a19^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AstUtil.java"

======= b9c7a19^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AstUtil.java"

======= b9c7a19^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeMethodDeclaration.java"

======= b9c7a19^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeMethodDeclaration.java"

======= b9c7a19^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeMethodDeclaration.java"

======= b9c7a19^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeMethodDeclaration.java"

======= b9c7a19^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeMethodDeclaration.java"

======= b9c7a19^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeMethodDeclaration.java"

======= b9c7a19^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeMethodDeclaration.java"

======= b9c7a19^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeMethodDeclaration.java"

======= b9c7a19^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeMethodDeclaration.java"

======= b9c7a19^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeMethodDeclaration.java"

======= b9c7a19^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeMethodDeclaration.java"

======= b9c7a19^:"tests/src/org/aspectj/systemtest/AllTests17.java"

======= b9c7a19^:"tests/src/org/aspectj/systemtest/AllTests17.java"

======= b9c7a19^:"tests/src/org/aspectj/systemtest/AllTests17.java"

======= b9c7a19^:"tests/src/org/aspectj/systemtest/AllTests17.java"


======= c2ff74f^:"weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java"

======= c2ff74f^:"weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java"


======= 55ebaa1^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/ValidateAtAspectJAnnotationsVisitor.java"

======= 55ebaa1^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/ValidateAtAspectJAnnotationsVisitor.java"

======= 55ebaa1^:"tests/src/org/aspectj/systemtest/ajc171/Ajc171Tests.java"


======= 76d695f^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java"

======= 76d695f^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java"

======= 76d695f^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java"

======= 76d695f^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java"

======= 76d695f^:"tests/src/org/aspectj/systemtest/ajc171/Ajc171Tests.java"

======= 76d695f^:"tests/src/org/aspectj/systemtest/ajc171/Ajc171Tests.java"

      <compile files="Color.java Code.java" options="-1.5"/>
      <!-- 
      <run class="de.scrum_master.galileo.filter.JsoupFilter">
          <line text="JsoupFilter.getLogMessage()"/>
          <line text="run()"/>
      -->

======= cbb6f5a^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java"

======= cbb6f5a^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java"


======= 7c6e936^:"org.aspectj.matcher/src/org/aspectj/weaver/ResolvedType.java"

======= 7c6e936^:"org.aspectj.matcher/src/org/aspectj/weaver/ResolvedType.java"

======= 7c6e936^:"org.aspectj.matcher/src/org/aspectj/weaver/ResolvedType.java"

======= 7c6e936^:"org.aspectj.matcher/src/org/aspectj/weaver/ResolvedType.java"

======= 7c6e936^:"org.aspectj.matcher/src/org/aspectj/weaver/ResolvedType.java"

======= 7c6e936^:"tests/src/org/aspectj/systemtest/ajc171/Ajc171Tests.java"

======= 7c6e936^:"weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java"


======= bf949d3^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java"

======= bf949d3^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java"

======= bf949d3^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java"

======= bf949d3^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java"

======= bf949d3^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java"

======= bf949d3^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java"

======= bf949d3^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java"

======= bf949d3^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java"

======= bf949d3^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java"

======= bf949d3^:"tests/src/org/aspectj/systemtest/AllTests17.java"

======= bf949d3^:"tests/src/org/aspectj/systemtest/AllTests17.java"

======= bf949d3^:"tests/src/org/aspectj/systemtest/AllTests17.java"

======= bf949d3^:"tests/src/org/aspectj/systemtest/AllTests17.java"


======= 5d0e186^:"org.aspectj.matcher/src/org/aspectj/weaver/Dump.java"

======= 5d0e186^:"org.aspectj.matcher/src/org/aspectj/weaver/Dump.java"


======= a748303^:"org.aspectj.matcher/src/org/aspectj/weaver/ResolvedType.java"

======= a748303^:"org.aspectj.matcher/src/org/aspectj/weaver/ResolvedType.java"

======= a748303^:"org.aspectj.matcher/src/org/aspectj/weaver/ResolvedType.java"

======= a748303^:"org.aspectj.matcher/src/org/aspectj/weaver/ResolvedType.java"

======= a748303^:"org.aspectj.matcher/src/org/aspectj/weaver/ResolvedType.java"

======= a748303^:"org.aspectj.matcher/src/org/aspectj/weaver/ResolvedType.java"

======= a748303^:"org.aspectj.matcher/src/org/aspectj/weaver/ResolvedType.java"

======= a748303^:"org.aspectj.matcher/src/org/aspectj/weaver/ResolvedType.java"

======= a748303^:"org.aspectj.matcher/src/org/aspectj/weaver/ResolvedType.java"

======= a748303^:"org.aspectj.matcher/src/org/aspectj/weaver/ResolvedType.java"

======= a748303^:"org.aspectj.matcher/src/org/aspectj/weaver/ResolvedType.java"

======= a748303^:"org.aspectj.matcher/src/org/aspectj/weaver/ResolvedType.java"

======= a748303^:"org.aspectj.matcher/src/org/aspectj/weaver/ResolvedType.java"

======= a748303^:"org.aspectj.matcher/src/org/aspectj/weaver/ResolvedType.java"

======= a748303^:"org.aspectj.matcher/src/org/aspectj/weaver/ResolvedType.java"

======= a748303^:"org.aspectj.matcher/src/org/aspectj/weaver/ResolvedType.java"

======= a748303^:"org.aspectj.matcher/src/org/aspectj/weaver/ResolvedType.java"

======= a748303^:"org.aspectj.matcher/src/org/aspectj/weaver/ResolvedType.java"

======= a748303^:"org.aspectj.matcher/src/org/aspectj/weaver/ResolvedType.java"

======= a748303^:"org.aspectj.matcher/src/org/aspectj/weaver/ResolvedType.java"

======= a748303^:"org.aspectj.matcher/src/org/aspectj/weaver/ResolvedType.java"

======= a748303^:"org.aspectj.matcher/src/org/aspectj/weaver/ResolvedType.java"

======= a748303^:"org.aspectj.matcher/src/org/aspectj/weaver/ResolvedType.java"

======= a748303^:"org.aspectj.matcher/src/org/aspectj/weaver/ResolvedType.java"

======= a748303^:"org.aspectj.matcher/src/org/aspectj/weaver/ResolvedType.java"

======= a748303^:"org.aspectj.matcher/src/org/aspectj/weaver/ResolvedType.java"

======= a748303^:"org.aspectj.matcher/src/org/aspectj/weaver/ResolvedType.java"

======= a748303^:"org.aspectj.matcher/src/org/aspectj/weaver/ResolvedType.java"

======= a748303^:"org.aspectj.matcher/src/org/aspectj/weaver/ResolvedType.java"

======= a748303^:"org.aspectj.matcher/src/org/aspectj/weaver/ResolvedType.java"

======= a748303^:"tests/src/org/aspectj/systemtest/ajc170/Ajc170Tests.java"

======= a748303^:"tests/src/org/aspectj/systemtest/ajc170/Ajc170Tests.java"

======= a748303^:"weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java"

======= a748303^:"weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java"


======= ba9d43c^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AccessForInlineVisitor.java"

======= ba9d43c^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AccessForInlineVisitor.java"

======= ba9d43c^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AccessForInlineVisitor.java"

======= ba9d43c^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AccessForInlineVisitor.java"

======= ba9d43c^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AccessForInlineVisitor.java"

======= ba9d43c^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AccessForInlineVisitor.java"

======= ba9d43c^:"tests/src/org/aspectj/systemtest/ajc170/Ajc170Tests.java"


======= 89c178f^:"taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java"


======= be063b8^:"tests/src/org/aspectj/systemtest/ajc170/Ajc170Tests.java"

======= be063b8^:"weaver/src/org/aspectj/weaver/bcel/asm/StackMapAdder.java"

======= be063b8^:"weaver/src/org/aspectj/weaver/bcel/asm/StackMapAdder.java"


======= 62fca9a^:"tests/src/org/aspectj/systemtest/ajc170/Ajc170Tests.java"


======= f85631f^:"org.aspectj.matcher/src/org/aspectj/weaver/patterns/PointcutEvaluationExpenseComparator.java"

======= f85631f^:"org.aspectj.matcher/src/org/aspectj/weaver/patterns/PointcutEvaluationExpenseComparator.java"

======= f85631f^:"tests/src/org/aspectj/systemtest/ajc170/Ajc170Tests.java"


======= 549d227^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java"

======= 549d227^:"org.aspectj.matcher/src/org/aspectj/weaver/ReferenceType.java"

======= 549d227^:"org.aspectj.matcher/src/org/aspectj/weaver/ReferenceType.java"

======= 549d227^:"org.aspectj.matcher/src/org/aspectj/weaver/ReferenceType.java"

======= 549d227^:"org.aspectj.matcher/src/org/aspectj/weaver/ReferenceType.java"

======= 549d227^:"org.aspectj.matcher/src/org/aspectj/weaver/ReferenceType.java"

======= 549d227^:"org.aspectj.matcher/src/org/aspectj/weaver/ReferenceType.java"

======= 549d227^:"org.aspectj.matcher/src/org/aspectj/weaver/ReferenceType.java"

======= 549d227^:"org.aspectj.matcher/src/org/aspectj/weaver/ReferenceType.java"

======= 549d227^:"org.aspectj.matcher/src/org/aspectj/weaver/ReferenceType.java"

======= 549d227^:"org.aspectj.matcher/src/org/aspectj/weaver/ReferenceType.java"

======= 549d227^:"org.aspectj.matcher/src/org/aspectj/weaver/ResolvedType.java"

======= 549d227^:"org.aspectj.matcher/src/org/aspectj/weaver/ResolvedType.java"

======= 549d227^:"org.aspectj.matcher/src/org/aspectj/weaver/TypeFactory.java"

======= 549d227^:"org.aspectj.matcher/src/org/aspectj/weaver/TypeVariableReferenceType.java"

 * Copyright (c) 2005-2010 Contributors.
======= 549d227^:"org.aspectj.matcher/src/org/aspectj/weaver/TypeVariableReferenceType.java"

 * ReferenceType representing a type variable. The delegate for this reference type is the upperbound on the type variable (so
======= 549d227^:"org.aspectj.matcher/src/org/aspectj/weaver/TypeVariableReferenceType.java"

======= 549d227^:"org.aspectj.matcher/src/org/aspectj/weaver/TypeVariableReferenceType.java"

======= 549d227^:"org.aspectj.matcher/src/org/aspectj/weaver/UnresolvedType.java"

======= 549d227^:"org.aspectj.matcher/src/org/aspectj/weaver/UnresolvedTypeVariableReferenceType.java"

======= 549d227^:"org.aspectj.matcher/src/org/aspectj/weaver/World.java"

======= 549d227^:"org.aspectj.matcher/src/org/aspectj/weaver/World.java"


======= 6defb4e^:"bridge/src/org/aspectj/bridge/context/CompilationAndWeavingContext.java"

 * Copyright (c) 2005 Contributors.
======= 6defb4e^:"bridge/src/org/aspectj/bridge/context/CompilationAndWeavingContext.java"

 * @author colyer This class is responsible for tracking progress through the various phases of compilation and weaving. When an
 *         exception occurs (or a message is issued, if desired), you can ask this class for a "stack trace" that gives information
 *         about what the compiler was doing at the time. The trace will say something like:
 * 
 *         when matching pointcut xyz when matching shadow sss when weaving type ABC when weaving shadow mungers
 * 
 *         Since we can't use ThreadLocal (have to work on 1.3), we use a map from Thread -> ContextStack.
======= 6defb4e^:"bridge/src/org/aspectj/bridge/context/CompilationAndWeavingContext.java"

======= 6defb4e^:"bridge/src/org/aspectj/bridge/context/CompilationAndWeavingContext.java"

======= 6defb4e^:"bridge/src/org/aspectj/bridge/context/CompilationAndWeavingContext.java"

======= 6defb4e^:"bridge/src/org/aspectj/bridge/context/CompilationAndWeavingContext.java"


======= f37c56e^:"tests/src/org/aspectj/systemtest/ajc170/Ajc170Tests.java"

======= f37c56e^:"weaver/src/org/aspectj/weaver/bcel/AtAjAttributes.java"

======= f37c56e^:"weaver/src/org/aspectj/weaver/bcel/AtAjAttributes.java"


======= 89756cd^:"org.aspectj.matcher/src/org/aspectj/weaver/TypeFactory.java"

======= 89756cd^:"org.aspectj.matcher/src/org/aspectj/weaver/TypeFactory.java"

======= 89756cd^:"tests/src/org/aspectj/systemtest/ajc170/Ajc170Tests.java"


======= 942da06^:"org.aspectj.matcher/src/org/aspectj/weaver/ReferenceType.java"

======= 942da06^:"org.aspectj.matcher/src/org/aspectj/weaver/ReferenceType.java"

======= 942da06^:"org.aspectj.matcher/src/org/aspectj/weaver/ReferenceType.java"

======= 942da06^:"org.aspectj.matcher/src/org/aspectj/weaver/ReferenceType.java"

======= 942da06^:"org.aspectj.matcher/src/org/aspectj/weaver/ReferenceType.java"

======= 942da06^:"org.aspectj.matcher/src/org/aspectj/weaver/ReferenceType.java"

======= 942da06^:"org.aspectj.matcher/src/org/aspectj/weaver/ReferenceType.java"

======= 942da06^:"org.aspectj.matcher/src/org/aspectj/weaver/ReferenceType.java"


======= 14a6eac^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"


======= e71e287^:"weaver/src/org/aspectj/weaver/loadtime/definition/DocumentParser.java"

======= e71e287^:"weaver/src/org/aspectj/weaver/loadtime/definition/DocumentParser.java"

======= e71e287^:"weaver/src/org/aspectj/weaver/loadtime/definition/DocumentParser.java"


======= 0f506ab^:"org.aspectj.matcher/src/org/aspectj/weaver/ShadowMunger.java"

======= 0f506ab^:"org.aspectj.matcher/src/org/aspectj/weaver/ShadowMunger.java"


======= 6ae463a^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"

======= 6ae463a^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"

======= 6ae463a^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"

======= 6ae463a^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"


======= 167b801^:"weaver5/java5-src/org/aspectj/weaver/reflect/JavaLangTypeToResolvedTypeConverter.java"


======= e8ef5bf^:"weaver/src/org/aspectj/weaver/bcel/BcelShadow.java"

======= e8ef5bf^:"weaver/src/org/aspectj/weaver/bcel/BcelShadow.java"

======= e8ef5bf^:"weaver/src/org/aspectj/weaver/bcel/BcelShadow.java"

======= e8ef5bf^:"weaver/src/org/aspectj/weaver/bcel/BcelShadow.java"


======= c6fb752^:"loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java"

======= c6fb752^:"loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java"

======= c6fb752^:"loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java"

======= c6fb752^:"loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java"

======= c6fb752^:"loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java"

======= c6fb752^:"loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java"

======= c6fb752^:"loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java"


======= 8553b30^:"weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java"

======= 8553b30^:"weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java"


======= 2302e94^:"weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java"


======= bb2aea4^:"org.aspectj.matcher/src/org/aspectj/weaver/World.java"

======= bb2aea4^:"org.aspectj.matcher/src/org/aspectj/weaver/World.java"

======= bb2aea4^:"org.aspectj.matcher/src/org/aspectj/weaver/World.java"


======= f7b1193^:"weaver/src/org/aspectj/weaver/bcel/Utility.java"

======= f7b1193^:"weaver/src/org/aspectj/weaver/bcel/Utility.java"



======= 95e70d2^:"weaver/src/org/aspectj/weaver/bcel/AtAjAttributes.java"

======= 95e70d2^:"weaver/src/org/aspectj/weaver/bcel/AtAjAttributes.java"


======= 199299c^:"tests/src/org/aspectj/systemtest/ajc1612/Ajc1612Tests.java"


======= 249f832^:"tests/src/org/aspectj/systemtest/ajc1612/Ajc1612Tests.java"


======= 293a075^:"org.aspectj.matcher/testdata/AnnotatedClass.java"

  @MethodLevelAnnotation
  public void annotatedMethod() { }
  public void nonAnnotatedMethod() {
  }
======= 293a075^:"org.aspectj.matcher/testdata/MethodLevelAnnotation.java"

======= 293a075^:"org.aspectj.matcher/testdata/SomeAnnotation.java"

======= 293a075^:"org.aspectj.matcher/testsrc/org/aspectj/matcher/tools/CommonAdvancedPointcutExpressionTests.java"

 * TESTDATA. The testdata for these tests is kept in org.aspectj.matcher/testdata. It is a series of .java files that need to be
 * compiled and available at runtime. Since they are java5 (they include annotations) they cannot be in a source folder for the
 * project, so they are compiled separately and then jar'd into a testdata.jar file in that folder. This folder is defined to be on
 * the classpath for org.aspectj.matcher, this enables them to be seen by a simple world that uses the classpath of the matcher
 * project as the definition of what it can see. Other worlds, for example JDT World, will need to have those types defined in a
 * project that is accessible in the JDT World instance. Because these tests exercise Java5 matching, the concrete ReflectionWorld
 * subtype is not defined in here, it is defined in weaver5 (messy, but works well).
 * 
======= 293a075^:"org.aspectj.matcher/testsrc/org/aspectj/matcher/tools/CommonAdvancedPointcutExpressionTests.java"

======= 293a075^:"org.aspectj.matcher/testsrc/org/aspectj/matcher/tools/CommonAdvancedPointcutExpressionTests.java"

======= 293a075^:"org.aspectj.matcher/testsrc/org/aspectj/matcher/tools/CommonAdvancedPointcutExpressionTests.java"


======= a8e6797^:"weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java"


======= 945402f^:"weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java"

======= 945402f^:"weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java"

======= 945402f^:"weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java"


======= 80785bf^:"org.aspectj.matcher/src/org/aspectj/weaver/TypeVariable.java"

======= 80785bf^:"org.aspectj.matcher/src/org/aspectj/weaver/TypeVariable.java"

======= 80785bf^:"org.aspectj.matcher/src/org/aspectj/weaver/TypeVariableReferenceType.java"

======= 80785bf^:"org.aspectj.matcher/src/org/aspectj/weaver/TypeVariableReferenceType.java"

======= 80785bf^:"org.aspectj.matcher/src/org/aspectj/weaver/World.java"


======= 5648105^:"util/src/org/aspectj/util/FileUtil.java"

======= 5648105^:"util/src/org/aspectj/util/FileUtil.java"

 * 
======= 5648105^:"util/src/org/aspectj/util/FileUtil.java"


======= 6249672^:"asm/src/org/aspectj/asm/internal/AspectJElementHierarchy.java"

======= 6249672^:"asm/src/org/aspectj/asm/internal/AspectJElementHierarchy.java"

======= 6249672^:"asm/src/org/aspectj/asm/internal/AspectJElementHierarchy.java"


======= 03c43f5^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"


======= 2a8d684^:"org.aspectj.matcher/src/org/aspectj/weaver/reflect/ShadowMatchImpl.java"

======= 2a8d684^:"org.aspectj.matcher/testsrc/org/aspectj/weaver/patterns/ThisOrTargetTestCase.java"

======= 2a8d684^:"org.aspectj.matcher/testsrc/org/aspectj/weaver/patterns/ThisOrTargetTestCase.java"

======= 2a8d684^:"org.aspectj.matcher/testsrc/org/aspectj/weaver/patterns/ThisOrTargetTestCase.java"

======= 2a8d684^:"org.aspectj.matcher/testsrc/org/aspectj/weaver/patterns/ThisOrTargetTestCase.java"

======= 2a8d684^:"org.aspectj.matcher/testsrc/org/aspectj/weaver/patterns/ThisOrTargetTestCase.java"


======= 88fab6a^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java"

======= 88fab6a^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java"


======= e0e1330^:"org.aspectj.matcher/src/org/aspectj/weaver/patterns/ModifiersPattern.java"

======= e0e1330^:"org.aspectj.matcher/src/org/aspectj/weaver/patterns/ModifiersPattern.java"


======= ce16a06^:"org.aspectj.matcher/src/org/aspectj/weaver/ReferenceType.java"


======= f631ad6^:"org.aspectj.matcher/src/org/aspectj/weaver/World.java"

======= f631ad6^:"org.aspectj.matcher/src/org/aspectj/weaver/World.java"


======= 6b35ea4^:"tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java"


======= 16adee6^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java"

======= 16adee6^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java"

======= 16adee6^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java"

======= 16adee6^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java"

======= 16adee6^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java"

======= 16adee6^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java"

======= 16adee6^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java"

======= 16adee6^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java"


======= 85fd25d^:"loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java"

======= 85fd25d^:"loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java"

======= 85fd25d^:"loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java"

======= 85fd25d^:"loadtime/testsrc/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptorTest.java"

======= 85fd25d^:"loadtime/testsrc/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptorTest.java"

======= 85fd25d^:"loadtime/testsrc/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptorTest.java"

======= 85fd25d^:"loadtime/testsrc/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptorTest.java"

======= 85fd25d^:"loadtime/testsrc/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptorTest.java"

======= 85fd25d^:"loadtime/testsrc/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptorTest.java"

======= 85fd25d^:"loadtime/testsrc/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptorTest.java"


======= fe049ea^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseSourceType.java"


======= 767bb85^:"org.aspectj.matcher/src/org/aspectj/weaver/BindingScope.java"

======= 767bb85^:"org.aspectj.matcher/src/org/aspectj/weaver/patterns/IScope.java"

======= 767bb85^:"org.aspectj.matcher/src/org/aspectj/weaver/patterns/IScope.java"

    /** returns the type corresponding to the name in this scope
     *  returns ResolvedType.MISSING if no such type exists and reports a problem
     */
    UnresolvedType lookupType(String name, IHasPosition location);
    // these next three are used to create {@link BindingTypePattern} objects.
    /** returns the formal associated with the name, or null if no such formal exists */
    FormalBinding lookupFormal(String name);
    /** returns the formal with the index.  Throws ArrayOutOfBounds exception if out of bounds */
======= 767bb85^:"org.aspectj.matcher/src/org/aspectj/weaver/patterns/SimpleScope.java"

======= 767bb85^:"org.aspectj.matcher/src/org/aspectj/weaver/patterns/SimpleScope.java"

======= 767bb85^:"org.aspectj.matcher/src/org/aspectj/weaver/patterns/SimpleScope.java"

======= 767bb85^:"org.aspectj.matcher/src/org/aspectj/weaver/patterns/SimpleScope.java"

======= 767bb85^:"org.aspectj.matcher/src/org/aspectj/weaver/patterns/SimpleScope.java"

======= 767bb85^:"org.aspectj.matcher/src/org/aspectj/weaver/patterns/WildTypePattern.java"

======= 767bb85^:"org.aspectj.matcher/src/org/aspectj/weaver/patterns/WildTypePattern.java"

======= 767bb85^:"org.aspectj.matcher/src/org/aspectj/weaver/patterns/WildTypePattern.java"

======= 767bb85^:"org.aspectj.matcher/src/org/aspectj/weaver/patterns/WildTypePattern.java"

======= 767bb85^:"org.aspectj.matcher/testsrc/org/aspectj/weaver/patterns/PatternsTests.java"

======= 767bb85^:"org.aspectj.matcher/testsrc/org/aspectj/weaver/patterns/PatternsTests.java"

======= 767bb85^:"org.aspectj.matcher/testsrc/org/aspectj/weaver/patterns/PatternsTests.java"

======= 767bb85^:"org.aspectj.matcher/testsrc/org/aspectj/weaver/patterns/TypePatternTestCase.java"


======= 92a52a2^:"weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java"


======= 0e5ecd3^:"org.aspectj.matcher/src/org/aspectj/weaver/Advice.java"


======= cf0ee0c^:"weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java"

======= cf0ee0c^:"weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java"

======= cf0ee0c^:"weaver/src/org/aspectj/weaver/bcel/BcelWorld.java"

======= cf0ee0c^:"weaver/src/org/aspectj/weaver/bcel/BcelWorld.java"

======= cf0ee0c^:"weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java"


======= 1e28b92^:"org.aspectj.matcher/src/org/aspectj/weaver/patterns/PointcutEvaluationExpenseComparator.java"

======= 1e28b92^:"org.aspectj.matcher/src/org/aspectj/weaver/patterns/PointcutEvaluationExpenseComparator.java"

======= 1e28b92^:"org.aspectj.matcher/src/org/aspectj/weaver/patterns/PointcutEvaluationExpenseComparator.java"

======= 1e28b92^:"org.aspectj.matcher/testsrc/org/aspectj/weaver/patterns/PointcutRewriterTest.java"

 * @author colyer
 *         TODO To change the template for this generated type comment go to Window - Preferences - Java - Code Style - Code
 *         Templates
======= 1e28b92^:"org.aspectj.matcher/testsrc/org/aspectj/weaver/patterns/PointcutRewriterTest.java"


======= 3be69a2^:"weaver/src/org/aspectj/weaver/model/AsmRelationshipProvider.java"

======= 3be69a2^:"weaver/src/org/aspectj/weaver/model/AsmRelationshipProvider.java"

======= 3be69a2^:"weaver/src/org/aspectj/weaver/model/AsmRelationshipProvider.java"

======= 3be69a2^:"weaver/src/org/aspectj/weaver/model/AsmRelationshipProvider.java"

======= 3be69a2^:"weaver/src/org/aspectj/weaver/model/AsmRelationshipProvider.java"


======= 728ecb8^:"asm/src/org/aspectj/asm/AsmManager.java"


======= a502da8^:"asm/src/org/aspectj/asm/internal/ProgramElement.java"

======= a502da8^:"asm/src/org/aspectj/asm/internal/ProgramElement.java"

======= a502da8^:"asm/src/org/aspectj/asm/internal/ProgramElement.java"

======= a502da8^:"asm/src/org/aspectj/asm/internal/ProgramElement.java"

======= a502da8^:"asm/src/org/aspectj/asm/internal/ProgramElement.java"

======= a502da8^:"asm/src/org/aspectj/asm/internal/ProgramElement.java"

======= a502da8^:"asm/src/org/aspectj/asm/internal/ProgramElement.java"

======= a502da8^:"asm/src/org/aspectj/asm/internal/ProgramElement.java"

======= a502da8^:"asm/src/org/aspectj/asm/internal/ProgramElement.java"

======= a502da8^:"asm/src/org/aspectj/asm/internal/ProgramElement.java"

======= a502da8^:"asm/src/org/aspectj/asm/internal/ProgramElement.java"

======= a502da8^:"asm/src/org/aspectj/asm/internal/ProgramElement.java"

======= a502da8^:"asm/src/org/aspectj/asm/internal/ProgramElement.java"

======= a502da8^:"asm/src/org/aspectj/asm/internal/ProgramElement.java"

======= a502da8^:"asm/src/org/aspectj/asm/internal/ProgramElement.java"

======= a502da8^:"asm/src/org/aspectj/asm/internal/ProgramElement.java"

======= a502da8^:"asm/src/org/aspectj/asm/internal/ProgramElement.java"


======= b21eb05^:"org.aspectj.ajdt.core/src/org/aspectj/tools/ajc/Main.java"

======= b21eb05^:"org.aspectj.ajdt.core/src/org/aspectj/tools/ajc/Main.java"

======= b21eb05^:"org.aspectj.ajdt.core/src/org/aspectj/tools/ajc/Main.java"


======= 94d0a4e^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseResolvedMember.java"

======= 94d0a4e^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseResolvedMember.java"

======= 94d0a4e^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseResolvedMember.java"



======= 4b43dc6^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java"


======= 749078d^:"asm/src/org/aspectj/asm/internal/AspectJElementHierarchy.java"

======= 749078d^:"asm/src/org/aspectj/asm/internal/AspectJElementHierarchy.java"

======= 749078d^:"asm/src/org/aspectj/asm/internal/AspectJElementHierarchy.java"

======= 749078d^:"asm/src/org/aspectj/asm/internal/AspectJElementHierarchy.java"

======= 749078d^:"asm/src/org/aspectj/asm/internal/AspectJElementHierarchy.java"

======= 749078d^:"asm/src/org/aspectj/asm/internal/AspectJElementHierarchy.java"

======= 749078d^:"asm/src/org/aspectj/asm/internal/AspectJElementHierarchy.java"

======= 749078d^:"asm/src/org/aspectj/asm/internal/AspectJElementHierarchy.java"

======= 749078d^:"asm/src/org/aspectj/asm/internal/AspectJElementHierarchy.java"

======= 749078d^:"asm/src/org/aspectj/asm/internal/AspectJElementHierarchy.java"


======= a968890^:"loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java"


======= 28fb861^:"org.aspectj.matcher/src/org/aspectj/weaver/AjAttribute.java"

======= 28fb861^:"org.aspectj.matcher/src/org/aspectj/weaver/AjAttribute.java"


======= 19355dd^:"loadtime5/java5-src/org/aspectj/weaver/loadtime/ClassPreProcessorAgentAdapter.java"


======= dc53b77^:"tests/src/org/aspectj/systemtest/ajc167/Ajc167Tests.java"

======= dc53b77^:"tests/src/org/aspectj/systemtest/ajc167/Ajc167Tests.java"


======= a23c7e4^:"org.aspectj.matcher/src/org/aspectj/weaver/MissingResolvedTypeWithKnownSignature.java"

======= a23c7e4^:"org.aspectj.matcher/src/org/aspectj/weaver/MissingResolvedTypeWithKnownSignature.java"

======= a23c7e4^:"org.aspectj.matcher/src/org/aspectj/weaver/MissingResolvedTypeWithKnownSignature.java"

======= a23c7e4^:"org.aspectj.matcher/src/org/aspectj/weaver/MissingResolvedTypeWithKnownSignature.java"

======= a23c7e4^:"org.aspectj.matcher/src/org/aspectj/weaver/MissingResolvedTypeWithKnownSignature.java"

======= a23c7e4^:"org.aspectj.matcher/src/org/aspectj/weaver/MissingResolvedTypeWithKnownSignature.java"

======= a23c7e4^:"org.aspectj.matcher/src/org/aspectj/weaver/MissingResolvedTypeWithKnownSignature.java"

======= a23c7e4^:"org.aspectj.matcher/src/org/aspectj/weaver/MissingResolvedTypeWithKnownSignature.java"

======= a23c7e4^:"org.aspectj.matcher/src/org/aspectj/weaver/MissingResolvedTypeWithKnownSignature.java"

======= a23c7e4^:"org.aspectj.matcher/src/org/aspectj/weaver/MissingResolvedTypeWithKnownSignature.java"


======= 35a9649^:"weaver/src/org/aspectj/weaver/bcel/AtAjAttributes.java"


======= 4d200d1^:"weaver/src/org/aspectj/weaver/bcel/ExtensibleURLClassLoader.java"


======= 67ffda8^:"weaver/src/org/aspectj/weaver/bcel/BcelWorld.java"


======= b29f839^:"util/src/org/aspectj/util/LangUtil.java"

======= b29f839^:"util/src/org/aspectj/util/LangUtil.java"

======= b29f839^:"util/src/org/aspectj/util/LangUtil.java"

======= b29f839^:"util/src/org/aspectj/util/LangUtil.java"

======= b29f839^:"util/src/org/aspectj/util/LangUtil.java"

======= b29f839^:"util/src/org/aspectj/util/LangUtil.java"

======= b29f839^:"util/src/org/aspectj/util/LangUtil.java"

======= b29f839^:"util/src/org/aspectj/util/LangUtil.java"

======= b29f839^:"util/src/org/aspectj/util/LangUtil.java"

======= b29f839^:"util/src/org/aspectj/util/LangUtil.java"

======= b29f839^:"util/src/org/aspectj/util/LangUtil.java"

======= b29f839^:"util/src/org/aspectj/util/LangUtil.java"

======= b29f839^:"util/src/org/aspectj/util/LangUtil.java"

======= b29f839^:"util/src/org/aspectj/util/LangUtil.java"

======= b29f839^:"util/src/org/aspectj/util/LangUtil.java"

======= b29f839^:"util/src/org/aspectj/util/LangUtil.java"

======= b29f839^:"util/src/org/aspectj/util/LangUtil.java"

======= b29f839^:"util/src/org/aspectj/util/LangUtil.java"

======= b29f839^:"util/src/org/aspectj/util/LangUtil.java"

======= b29f839^:"util/src/org/aspectj/util/LangUtil.java"

======= b29f839^:"util/src/org/aspectj/util/LangUtil.java"

======= b29f839^:"util/src/org/aspectj/util/LangUtil.java"

======= b29f839^:"util/src/org/aspectj/util/LangUtil.java"

======= b29f839^:"util/src/org/aspectj/util/LangUtil.java"

======= b29f839^:"util/src/org/aspectj/util/LangUtil.java"

======= b29f839^:"util/src/org/aspectj/util/LangUtil.java"


======= 3d3d03b^:"org.aspectj.matcher/src/org/aspectj/weaver/Lint.java"


======= b664969^:"weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java"

======= b664969^:"weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java"

======= b664969^:"weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java"


======= dd7d879^:"org.aspectj.matcher/src/org/aspectj/weaver/World.java"


======= 59d5c3b^:"ajdoc/src/org/aspectj/tools/ajdoc/JavadocRunner.java"

            Class jdMainClass = com.sun.tools.javadoc.Main.class;
        } catch (NoClassDefFoundError e) {
            return false;
        } catch (UnsupportedClassVersionError e) {
            return false;
        } catch (NoSuchMethodException e) {
     static void callJavadoc( String[] javadocargs ){
        final SecurityManager defaultSecurityManager = System.getSecurityManager();
        System.setSecurityManager( new SecurityManager() {
            public void checkExit(int status) {
                if (status == 0) {
                   throw new SecurityException();
                }
                else {
                     System.setSecurityManager(defaultSecurityManager);
                //System.out.println("Error: javadoc exited unexpectedly");
                     System.exit(0);
                     throw new SecurityException();
                }
            }
            public void checkPermission( java.security.Permission permission ) {
               if ( defaultSecurityManager  != null )
                defaultSecurityManager.checkPermission( permission );
            }
             public void checkPermission( java.security.Permission permission,
               if ( defaultSecurityManager  != null )
                 defaultSecurityManager.checkPermission( permission, context );
            }
            } );
        try {
        	// for JDK 1.4 and above call the execute method...
        	Class jdMainClass = com.sun.tools.javadoc.Main.class;
        	Method executeMethod = null;
======= 59d5c3b^:"ajdoc/src/org/aspectj/tools/ajdoc/JavadocRunner.java"

        	// main method is documented as calling System.exit() - which stops us dead in our tracks
            //com.sun.tools.javadoc.Main.main( javadocargs );
        }
        catch ( SecurityException se ) {
            // Do nothing since we expect it to be thrown
            //System.out.println( ">> se: " + se.getMessage() );
        }
        // Set the security manager back
        System.setSecurityManager( defaultSecurityManager );
    }

======= 3417cbe^:"weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java"

======= 3417cbe^:"weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java"

======= 3417cbe^:"weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java"


======= 66235e8^:"weaver/src/org/aspectj/weaver/loadtime/definition/DocumentParser.java"

======= 66235e8^:"weaver/src/org/aspectj/weaver/loadtime/definition/DocumentParser.java"


======= f9578da^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeMethodDeclaration.java"


======= 1b663a9^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"

======= 1b663a9^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"

======= 1b663a9^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"

======= 1b663a9^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"


======= 6dbb5f3^:"asm/src/org/aspectj/asm/internal/JDTLikeHandleProvider.java"


======= b23cc1a^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java"

======= b23cc1a^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java"

======= b23cc1a^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java"

======= b23cc1a^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java"

======= b23cc1a^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java"

======= b23cc1a^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java"

======= b23cc1a^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java"

======= b23cc1a^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java"

======= b23cc1a^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java"

======= b23cc1a^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java"

======= b23cc1a^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java"


======= d5e900d^:"weaver/src/org/aspectj/weaver/model/AsmRelationshipProvider.java"


======= c732808^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"

======= c732808^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/EclipseAdapterUtils.java"

======= c732808^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/EclipseAdapterUtils.java"


======= 752f895^:"aspectj5rt/java5-src/org/aspectj/lang/reflect/AjTypeSystem.java"

======= 752f895^:"aspectj5rt/java5-src/org/aspectj/lang/reflect/AjTypeSystem.java"


======= 7a7d6f0^:"asm/src/org/aspectj/asm/internal/AspectJElementHierarchy.java"


======= 5c49c0b^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"

======= 5c49c0b^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"

======= 5c49c0b^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java"

======= 5c49c0b^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java"

======= 5c49c0b^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java"

======= 5c49c0b^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java"


======= 2309f7b^:"asm/src/org/aspectj/asm/internal/AspectJElementHierarchy.java"


======= 2f36e7f^:"weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java"

======= 2f36e7f^:"weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java"

======= 2f36e7f^:"weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java"

======= 2f36e7f^:"weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java"

======= 2f36e7f^:"weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java"


======= 9f80317^:"org.aspectj.matcher/src/org/aspectj/weaver/ShadowMunger.java"


======= 0af658e^:"asm/src/org/aspectj/asm/internal/JDTLikeHandleProvider.java"


======= 1b54b4b^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"

======= 1b54b4b^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"

======= 1b54b4b^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"

======= 1b54b4b^:"weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java"

======= 1b54b4b^:"weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java"

======= 1b54b4b^:"weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java"


======= 1da1f7c^:"taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java"

======= 1da1f7c^:"taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java"

 * This runs the AspectJ 1.1 compiler, 
 * supporting all the command-line options.
 * In 1.1.1, ajc copies resources from input jars, 
 * but you can copy resources from the source directories
 * using sourceRootCopyFilter.
 * When not forking, things will be copied as needed 
 * for each iterative compile,
 * but when forking things are only copied at the 
 * completion of a successful compile.
 * See the development environment guide for 
 * usage documentation.
    /*
     * This task mainly converts ant specification for ajc,
     * verbosely ignoring improper input.
     * It also has some special features for non-obvious clients:
     * (1) Javac compiler adapter supported in 
     *    <code>setupAjc(AjcTask, Javac, File)</code>
     * and
     *    <code>readArguments(String[])</code>;
     * (2) testing is supported by
     * (a) permitting the same specification to be re-run
     *     with added flags (settings once made cannot be
     *     removed); and
     * (b) permitting recycling the task with 
     *     <code>reset()</code> (untested).
     * 
     * The parts that do more than convert ant specs are
     * (a) code for forking;
     * (b) code for copying resources.
     * 
     * If you maintain/upgrade this task, keep in mind:
     * (1) changes to the semantics of ajc (new options, new
     *     values permitted, etc.) will have to be reflected here. 
     * (2) the clients:
     * the iajc ant script, Javac compiler adapter,
     * maven clients of iajc, and testing code.
     */
    // XXX move static methods after static initializer
    /**
     * This method extracts javac arguments to ajc,
     * and add arguments to make ajc behave more like javac
     * in copying resources.
     * <p>
     * Pass ajc-specific options using compilerarg sub-element:
     * <pre>
     * &lt;javac srcdir="src">
     *     &lt;compilerarg compiler="..." line="-argfile src/args.lst"/>
     * &lt;javac>
     * </pre>
     * Some javac arguments are not supported in this component (yet):
     * <pre>
     * String memoryInitialSize;
     * boolean includeAntRuntime = true;
     * boolean includeJavaRuntime = false;
     * </pre>
     * Other javac arguments are not supported in ajc 1.1:
     * <pre>
     * boolean optimize;
     * String forkedExecutable;
     * FacadeTaskHelper facade;
     * boolean depend;
     * String debugLevel;
     * Path compileSourcepath;
     * </pre>
     * @param javac the Javac command to implement (not null)
     * @param ajc the AjcTask to adapt (not null)
     * @param destDir the File class destination directory (may be null)
     * @return null if no error, or String error otherwise
     */
    public String setupAjc(Javac javac) {        
        if (null == javac) {
            return "null javac";
        }
        AjcTask ajc = this;
        // no null checks b/c AjcTask handles null input gracefully
        ajc.setProject(javac.getProject());
        ajc.setLocation(javac.getLocation());
        ajc.setTaskName("javac-iajc");
        
        ajc.setDebug(javac.getDebug());
        ajc.setDeprecation(javac.getDeprecation());
        ajc.setFailonerror(javac.getFailonerror());
        final boolean fork = javac.isForkedJavac();
        ajc.setFork(fork);        
        if (fork) {
            ajc.setMaxmem(javac.getMemoryMaximumSize());
        }
        ajc.setNowarn(javac.getNowarn()); 
        ajc.setListFileArgs(javac.getListfiles());
        ajc.setVerbose(javac.getVerbose());               
        ajc.setTarget(javac.getTarget());        
        ajc.setSource(javac.getSource());        
        ajc.setEncoding(javac.getEncoding());
        File javacDestDir = javac.getDestdir();
        if (null != javacDestDir) {
            ajc.setDestdir(javacDestDir);
            // filter requires dest dir
            // mimic Javac task's behavior in copying resources,
            ajc.setSourceRootCopyFilter("**/CVS/*,**/*.java,**/*.aj");
        }        
        ajc.setBootclasspath(javac.getBootclasspath());
        ajc.setExtdirs(javac.getExtdirs());
        ajc.setClasspath(javac.getClasspath());        
        // ignore srcDir -- all files picked up in recalculated file list
        ajc.addFiles(javac.getFileList());
        // arguments can override the filter, add to paths, override options
        ajc.readArguments(javac.getCurrentCompilerArgs());
        
        return null;
    }
    
   /**
     * Find aspectjtools.jar on the task or system classpath.
     * Accept <code>aspectj{-}tools{...}.jar</code>
     * mainly to support build systems using maven-style 
     * re-naming 
     * (e.g., <code>aspectj-tools-1.1.0.jar</code>.
     * Note that we search the task classpath first, 
     * though an entry on the system classpath would be loaded first,
     * because it seems more correct as the more specific one.
     * @return readable File for aspectjtools.jar, or null if not found.
     */            
    public static File findAspectjtoolsJar() {
        File result = null;
        ClassLoader loader = AjcTask.class.getClassLoader();
        if (loader instanceof AntClassLoader) {
            AntClassLoader taskLoader = (AntClassLoader) loader;
            String cp = taskLoader.getClasspath();
            String[] cps = LangUtil.splitClasspath(cp);
            for (int i = 0; (i < cps.length) && (null == result); i++) {
                result = isAspectjtoolsjar(cps[i]);
            }
        }
        if (null == result) {
            final Path classpath = Path.systemClasspath;
            final String[] paths = classpath.list();
            for (int i = 0; (i < paths.length) && (null == result); i++) {
                result = isAspectjtoolsjar(paths[i]);
            }
        }
        return (null == result? null : result.getAbsoluteFile());
    }
    
    /** @return File if readable jar with aspectj tools name, or null */
    private static File isAspectjtoolsjar(String path) {
        if (null == path) {
            return null;
        }
        final String prefix = "aspectj";        
        final String infix = "tools";        
        final String altInfix = "-tools";        
        final String suffix = ".jar";
        final int prefixLength = 7; // prefix.length();
        final int minLength = 16;
        // prefixLength + infix.length() + suffix.length();        
        if (!path.endsWith(suffix)) {
            return null;
        }
        int loc = path.lastIndexOf(prefix);
        if ((-1 != loc) && ((loc + minLength) <= path.length())) {
            String rest = path.substring(loc+prefixLength);
            if (-1 != rest.indexOf(File.pathSeparator)) {
                return null;
            }
            if (rest.startsWith(infix)
                || rest.startsWith(altInfix)) {
                File result = new File(path);
                if (result.canRead() && result.isFile()) {
                    return result;
                }
            }
        }        
        return null;
    }
    /** 
     * Maximum length (in chars) of command line 
     * before converting to an argfile when forking 
     */
    private static final int MAX_COMMANDLINE = 4096;
    
    private static final File DEFAULT_DESTDIR = new File(".") {
        public String toString() {
            return "(no destination dir specified)";
        }
    };
    
    /** do not throw BuildException on fail/abort message with usage */
    private static final String USAGE_SUBSTRING = "AspectJ-specific options";
    /** valid -X[...] options other than -Xlint variants */
    private static final List VALID_XOPTIONS;
    private static final List VALID_WARNINGS;
    
    private static final List VALID_DEBUG;
    private static final List VALID_XLINT;
    public static final String COMMAND_EDITOR_NAME
        = AjcTask.class.getName() + ".COMMAND_EDITOR";
    static final String[] TARGET_INPUTS = new String [] 
    { "1.1", "1.2", "1.3", "1.4", "1.5", "1.6" };
    static final String[] SOURCE_INPUTS = new String [] 
    { "1.3", "1.4", "1.5", "1.6" };
    static final String[] COMPLIANCE_INPUTS = new String [] 
    { "-1.3", "-1.4", "-1.5", "-1.6" };
    private static final ICommandEditor COMMAND_EDITOR;
            
    static {
        // many now deprecated: reweavable*
        String[] xs = new String[] 
            {   "serializableAspects", "incrementalFile", "lazyTjp",
        		"reweavable", "reweavable:compress", "notReweavable", "noInline",
            	"terminateAfterCompilation","hasMember",
                "ajruntimetarget:1.2", "ajruntimetarget:1.5", 
                "addSerialVersionUID"
                
                //, "targetNearSource", "OcodeSize",
                 };
        VALID_XOPTIONS = Collections.unmodifiableList(Arrays.asList(xs));
        xs = new String[]
        	{   "constructorName", "packageDefaultMethod", "deprecation",
        		"maskedCatchBlocks", "unusedLocals", "unusedArguments",
        		"unusedImports", "syntheticAccess", "assertIdentifier",
        		"allDeprecation","allJavadoc","charConcat","conditionAssign",
        		
        		"emptyBlock",
        		"fieldHiding",
        		"finally",
        		"indirectStatic",
        		"intfNonInherited",
        		"javadoc",
        		"localHiding",
        		"nls",
        		"noEffectAssign",
        		"pkgDefaultMethod",
        		"semicolon",
        		"unqualifiedField",
        		"unusedPrivate",
        		"unusedThrown",
        		"uselessTypeCheck",
        		"specialParamHiding",
        		"staticReceiver",
        		"syntheticAccess",
        		"none" };
        VALID_WARNINGS = Collections.unmodifiableList(Arrays.asList(xs));
        xs = new String[] {"none", "lines", "vars", "source" };
        VALID_DEBUG = Collections.unmodifiableList(Arrays.asList(xs));
        
        
        xs = new String[] { "error", "warning", "ignore"};
        VALID_XLINT = Collections.unmodifiableList(Arrays.asList(xs));
    
        ICommandEditor editor = null;
        try {
            String editorClassName = System.getProperty(COMMAND_EDITOR_NAME);
            if (null != editorClassName) {
                ClassLoader cl = AjcTask.class.getClassLoader();
                Class editorClass = cl.loadClass(editorClassName);
                editor = (ICommandEditor) editorClass.newInstance();
            }
        } catch (Throwable t) {
            System.err.println("Warning: unable to load command editor");
            t.printStackTrace(System.err);
        }
        COMMAND_EDITOR = editor;
    }
    private boolean verbose;
    private boolean listFileArgs;
    private boolean failonerror;
    private boolean fork;
    private String maxMem;
    private TaskLogger logger;
    protected GuardedCommand cmd;
    private Path srcdir;
    private Path injars;
    private Path inpath;
    private Path classpath;
    private Path bootclasspath;
    private Path forkclasspath;
    private Path extdirs;
    private Path aspectpath;
    private Path argfiles;
    private List ignored;
    private Path sourceRoots;
    private File xweaveDir;
    private String xdoneSignal;
    
    // ----- added by adapter - integrate better?
    private List /* File */ adapterFiles;
    private String[] adapterArguments;
    private IMessageHolder messageHolder;
    private ICommandEditor commandEditor;
    // -------- resource-copying
    /** true if copying injar non-.class files to the output jar */
    private boolean copyInjars;
    private boolean copyInpath;
    
    /** non-null if copying all source root files but the filtered ones */
    private String sourceRootCopyFilter;
    /** non-null if copying all inpath dir files but the filtered ones */
    private String inpathDirCopyFilter;
    /** directory sink for classes */
    private File destDir;
    
    /** zip file sink for classes */
    private File outjar;
    
    /** track whether we've supplied any temp outjar */
    private boolean outjarFixedup;
    /** 
     * When possibly copying resources to the output jar,
     * pass ajc a fake output jar to copy from,
     * so we don't change the modification time of the output jar
     * when copying injars/inpath into the actual outjar.
     */
    private File tmpOutjar;
    private boolean executing;
    /** non-null only while executing in same vm */
    private Main main;
    
    /** true only when executing in other vm */
    private boolean executingInOtherVM;
    /** true if -incremental  */
    private boolean inIncrementalMode;
    /** true if -XincrementalFile (i.e, setTagFile)*/
    private boolean inIncrementalFileMode; 
    /** log command in non-verbose mode */
    private boolean logCommand; 
    /** used when forking */
    private CommandlineJava javaCmd = new CommandlineJava();
    // also note MatchingTask grabs source files...
    
    public AjcTask() {
    	reset();
    }
    public void reset() { // XXX possible to reset MatchingTask?
        // need declare for "all fields initialized in ..."
        adapterArguments = null;
        adapterFiles = new ArrayList();
        argfiles = null;
        executing = false;
        aspectpath = null;
        bootclasspath = null;
        classpath = null;
        cmd = new GuardedCommand();
        copyInjars = false;
        copyInpath = false;
        destDir = DEFAULT_DESTDIR;
        executing = false;
        executingInOtherVM = false;
        extdirs = null;
        failonerror = true;  // non-standard default
        forkclasspath = null;
        inIncrementalMode = false;
        inIncrementalFileMode = false;
        ignored = new ArrayList();
        injars = null;
        inpath = null;
        listFileArgs = false;
        maxMem = null;
        messageHolder = null;
        outjar = null;
        sourceRootCopyFilter = null;
        inpathDirCopyFilter = null;
        sourceRoots = null;
        srcdir = null;
        tmpOutjar = null;
        verbose = false;
        xweaveDir = null;
        xdoneSignal = null;
        logCommand = false;
        javaCmd = new CommandlineJava();
    }
    protected void ignore(String ignored) {
        this.ignored.add(ignored + " at " + getLocation());
    }
    
    //---------------------- option values
    // used by entries with internal commas
    protected String validCommaList(String list, List valid, String label) {
    	return validCommaList(list, valid, label, valid.size());
    }
    
    protected String validCommaList(String list, List valid, String label, int max) {
    	StringBuffer result = new StringBuffer();
    	StringTokenizer st = new StringTokenizer(list, ",");
    	while (st.hasMoreTokens()) {
    	}
    	return (0 == result.length() ? null : result.toString());
    }
    
    public void setIncremental(boolean incremental) {  
        cmd.addFlag("-incremental", incremental);
        inIncrementalMode = incremental;
    }
    public void setLogCommand(boolean logCommand) {
        this.logCommand = logCommand;
    }
    
    public void setHelp(boolean help) {  
        cmd.addFlag("-help", help);
    }
    public void setVersion(boolean version) {  
    	cmd.addFlag("-version", version);
    }
    public void setXTerminateAfterCompilation(boolean b) {  
        cmd.addFlag("-XterminateAfterCompilation", b);
    }
    public void setXReweavable(boolean reweavable) {
    	cmd.addFlag("-Xreweavable",reweavable);
    }
    
    public void setXJoinpoints(String optionalJoinpoints) {
      	cmd.addFlag("-Xjoinpoints:"+optionalJoinpoints,true);
    }
    public void setCheckRuntimeVersion(boolean b) {
      	cmd.addFlag("-checkRuntimeVersion:"+b,true);
    }
    
    public void setXNoWeave(boolean b) {
    	if (logger!=null) logger.warning("the noweave option is no longer required and is being ignored");
    }
    
    public void setNoWeave(boolean b) {
    	if (logger!=null) logger.warning("the noweave option is no longer required and is being ignored");
    }
    
    public void setXNotReweavable(boolean notReweavable) {
    	cmd.addFlag("-XnotReweavable",notReweavable);
    }
    public void setXaddSerialVersionUID(boolean addUID) {
    	cmd.addFlag("-XaddSerialVersionUID",addUID);
    }
    
    public void setXNoInline(boolean noInline) {
    	cmd.addFlag("-XnoInline",noInline);
    }
    public void setShowWeaveInfo(boolean showweaveinfo) {
    	cmd.addFlag("-showWeaveInfo",showweaveinfo);
    }
    public void setNowarn(boolean nowarn) {  
        cmd.addFlag("-nowarn", nowarn);
    }
    public void setDeprecation(boolean deprecation) {  
        cmd.addFlag("-deprecation", deprecation);
    }
    public void setWarn(String warnings) {
    	warnings = validCommaList(warnings, VALID_WARNINGS, "warn");
        cmd.addFlag("-warn:" + warnings, (null != warnings));
    }
    public void setDebug(boolean debug) {
        cmd.addFlag("-g", debug);
    }
    
    public void setDebugLevel(String level) {
    	level = validCommaList(level, VALID_DEBUG, "g");
        cmd.addFlag("-g:" + level, (null != level));
    }
    public void setEmacssym(boolean emacssym) {
        cmd.addFlag("-emacssym", emacssym);
    }
    public void setCrossrefs(boolean on) {
        cmd.addFlag("-crossrefs", on);
    }
    
        cmd.addFlag("-Xlint", xlintwarnings);
    public void setXlint(String xlint) {
    	xlint = validCommaList(xlint, VALID_XLINT, "Xlint", 1);
        cmd.addFlag("-Xlint:" + xlint, (null != xlint));
    }
    public void setXlintfile(File xlintFile) { 
        cmd.addFlagged("-Xlintfile", xlintFile.getAbsolutePath());
    }
    public void setPreserveAllLocals(boolean preserveAllLocals) {  
        cmd.addFlag("-preserveAllLocals", preserveAllLocals);
    }
    public void setNoImportError(boolean noImportError) {  
        cmd.addFlag("-warn:-unusedImport", noImportError);
    }
    public void setEncoding(String encoding) {   
        cmd.addFlagged("-encoding", encoding);
    }
    public void setLog(File file) {
        cmd.addFlagged("-log", file.getAbsolutePath());
    }
    
    public void setProceedOnError(boolean proceedOnError) {  
        cmd.addFlag("-proceedOnError", proceedOnError);
    }
    public void setVerbose(boolean verbose) {  
        cmd.addFlag("-verbose", verbose);
        this.verbose = verbose;
    }
    
    public void setListFileArgs(boolean listFileArgs) { 
        this.listFileArgs = listFileArgs;
    }
    public void setReferenceInfo(boolean referenceInfo) {  
        cmd.addFlag("-referenceInfo", referenceInfo);
    }
    public void setTime(boolean time) {  
        cmd.addFlag("-time", time);
    }
    public void setNoExit(boolean noExit) {  
        cmd.addFlag("-noExit", noExit);
    }
    public void setFailonerror(boolean failonerror) {  
        this.failonerror = failonerror;
    }
    /**
     * @return true if fork was set
     */
    public boolean isForked() {
        return fork;
    }
    
    public void setFork(boolean fork) {  
        this.fork = fork;
    }
    
    public void setMaxmem(String maxMem) {
        this.maxMem = maxMem;
    }
    
    /** support for nested &lt;jvmarg&gt; elements */
    public Commandline.Argument createJvmarg() {
    	return this.javaCmd.createVmArgument();
    }
    public void setTagFile(File file) {
        inIncrementalMode = true;
        cmd.addFlagged(Main.CommandController.TAG_FILE_OPTION,
        inIncrementalFileMode = true;
    }
    
    public void setOutjar(File file) {
        if (DEFAULT_DESTDIR != destDir) {
            String e = "specifying both output jar ("
                + file 
                + ") and destination dir ("
                + destDir
                + ")";
            throw new BuildException(e);
        }
        outjar = file;
        outjarFixedup = false;
        tmpOutjar = null;
    }
    public void setOutxml(boolean outxml) {
    	cmd.addFlag("-outxml",outxml);
    }
    public void setOutxmlfile(String name) {
        cmd.addFlagged("-outxmlfile", name);
    }
    public void setDestdir(File dir) {
        if (null != outjar) {
            String e = "specifying both output jar ("
                + outjar 
                + ") and destination dir ("
                + dir
                + ")";
            throw new BuildException(e);
        }
        cmd.addFlagged("-d", dir.getAbsolutePath());
        destDir = dir;        
    }
    
    /**
     * @param input a String in TARGET_INPUTS
     */
    public void setTarget(String input) {
        String ignore = cmd.addOption("-target", TARGET_INPUTS, input);
        if (null != ignore) {
            ignore(ignore);
        }
    }
    
    /** 
     * Language compliance level.
     * If not set explicitly, eclipse default holds.
     * @param input a String in COMPLIANCE_INPUTS
     */
    public void setCompliance(String input) {
        String ignore = cmd.addOption(null, COMPLIANCE_INPUTS, input);
        if (null != ignore) {
            ignore(ignore);
        }
    }
    
    /** 
     * Source compliance level.
     * If not set explicitly, eclipse default holds.
     * @param input a String in SOURCE_INPUTS
     */
    public void setSource(String input) {
        String ignore = cmd.addOption("-source", SOURCE_INPUTS, input);
        if (null != ignore) {
            ignore(ignore);
        }
    }
    /**
     * Flag to copy all non-.class contents of injars
     * to outjar after compile completes.
     * Requires both injars and outjar.
     * @param doCopy
     */
    public void setCopyInjars(boolean doCopy){
        ignore("copyInJars");
        log("copyInjars not required since 1.1.1.\n", Project.MSG_WARN);
        //this.copyInjars = doCopy;
    }
    
    /**
     * Option to copy all files from
     * all source root directories
     * except those specified here.
     * If this is specified and sourceroots are specified,
     * then this will copy all files except 
     * those specified in the filter pattern.
     * Requires sourceroots.
     * 
     * @param filter a String acceptable as an excludes
     *        filter for an Ant Zip fileset.
     */
    public void setSourceRootCopyFilter(String filter){
        this.sourceRootCopyFilter = filter;
    }
    /**
     * Option to copy all files from
     * all inpath directories
     * except the files specified here.
     * If this is specified and inpath directories are specified,
     * then this will copy all files except 
     * those specified in the filter pattern.
     * Requires inpath.
     * If the input does not contain "**\/*.class", then
     * this prepends it, to avoid overwriting woven classes
     * with unwoven input.
     * @param filter a String acceptable as an excludes
     *        filter for an Ant Zip fileset.
     */
    public void setInpathDirCopyFilter(String filter){
        if (null != filter) {
            if (-1 == filter.indexOf("**/*.class")) {
                filter = "**/*.class," + filter;
            }
        }
        this.inpathDirCopyFilter = filter;
    }
    public void setX(String input) {  // ajc-only eajc-also docDone
        StringTokenizer tokens = new StringTokenizer(input, ",", false);
        while (tokens.hasMoreTokens()) {
            String token = tokens.nextToken().trim();
            if (1 < token.length()) {
            	// new special case: allow -Xset:anything
                if (VALID_XOPTIONS.contains(token) || token.indexOf("set:")==0 ||
                		token.indexOf("joinpoints:")==0) {
                    cmd.addFlag("-X" + token, true); 
                } else {
                    ignore("-X" + token);
                }
            }
        }
    }
    public void setXDoneSignal(String doneSignal) {
        this.xdoneSignal = doneSignal;
    }
    /** direct API for testing */
    public void setMessageHolder(IMessageHolder holder) {
        this.messageHolder = holder;
    }
    
    /** 
     * Setup custom message handling.
     * @param className the String fully-qualified-name of a class
     *          reachable from this object's class loader,
     *          implementing IMessageHolder, and 
     *          having a public no-argument constructor.
     * @throws BuildException if unable to create instance of className
     */
    public void setMessageHolderClass(String className) {
        try {
            Class mclass = Class.forName(className);
            IMessageHolder holder = (IMessageHolder) mclass.newInstance();
            setMessageHolder(holder);
        } catch (Throwable t) {
            String m = "unable to instantiate message holder: " + className;
            throw new BuildException(m, t);
        }
    }
    
    /** direct API for testing */
    public void setCommandEditor(ICommandEditor editor) {
        this.commandEditor = editor;
    }
    
    /**
     * Setup command-line filter.
     * To do this staticly, define the environment variable
     * <code>org.aspectj.tools.ant.taskdefs.AjcTask.COMMAND_EDITOR</code>
     * with the <code>className</code> parameter.
     * @param className the String fully-qualified-name of a class
     *          reachable from this object's class loader,
     *          implementing ICommandEditor, and 
     *          having a public no-argument constructor.
     * @throws BuildException if unable to create instance of className
     */
    public void setCommandEditorClass(String className) { // skip Ant interface?
        try {
            Class mclass = Class.forName(className);
            setCommandEditor((ICommandEditor) mclass.newInstance());
        } catch (Throwable t) {
            String m = "unable to instantiate command editor: " + className;
            throw new BuildException(m, t);
        }
    }
    //---------------------- Path lists
    /**
     * Add path elements to source path and return result.
     * Elements are added even if they do not exist.
     * @param source the Path to add to - may be null
     * @param toAdd the Path to add - may be null
     * @return the (never-null) Path that results
     */
    protected Path incPath(Path source, Path toAdd) {
        if (null == source) {
            source = new Path(project); 
        }
        if (null != toAdd) {
            source.append(toAdd);
        }
        return source;
    }
    public void setSourcerootsref(Reference ref) {
        createSourceRoots().setRefid(ref);
    }
    
    public void setSourceRoots(Path roots) {
        sourceRoots = incPath(sourceRoots, roots);
    }
    public Path createSourceRoots() {
        if (sourceRoots == null) {
            sourceRoots = new Path(project);
        }
        return sourceRoots.createPath();
    }        
    public void setXWeaveDir(File file) {
        if ((null != file) && file.isDirectory()
            && file.canRead()) {
            xweaveDir = file;
        }
    }       
    public void setInjarsref(Reference ref) {
        createInjars().setRefid(ref);
    }
    
    public void setInpathref(Reference ref) {
    	createInpath().setRefid(ref);
    }
    
    public void setInjars(Path path) {
        injars = incPath(injars, path);
    }
    
    public void setInpath(Path path) {
    	inpath = incPath(inpath,path);
    }
    public Path createInjars() {
        if (injars == null) {
            injars = new Path(project);
        }
        return injars.createPath();
    }        
    
    public Path createInpath() {
    	if (inpath == null) {
    		inpath = new Path(project);
    	}
    	return inpath.createPath();
    }
    
    public void setClasspath(Path path) {
        classpath = incPath(classpath, path);
    }
    public void setClasspathref(Reference classpathref) {
        createClasspath().setRefid(classpathref);
    }
        
    public Path createClasspath() {
        if (classpath == null) {
            classpath = new Path(project);
        }
        return classpath.createPath();
    }        
    public void setBootclasspath(Path path) {
        bootclasspath = incPath(bootclasspath, path);  
    }
    
    public void setBootclasspathref(Reference bootclasspathref) {
        createBootclasspath().setRefid(bootclasspathref);
    }
    
    public Path createBootclasspath() {
        if (bootclasspath == null) {
            bootclasspath = new Path(project);
        }
        return bootclasspath.createPath();
    }        
    
    public void setForkclasspath(Path path) {
        forkclasspath = incPath(forkclasspath, path);  
    }
    
    public void setForkclasspathref(Reference forkclasspathref) {
        createForkclasspath().setRefid(forkclasspathref);
    }
    
    public Path createForkclasspath() {
        if (forkclasspath == null) {
            forkclasspath = new Path(project);
        }
        return forkclasspath.createPath();
    }        
    
    public void setExtdirs(Path path) {
        extdirs = incPath(extdirs, path);
    }
    public void setExtdirsref(Reference ref) {
        createExtdirs().setRefid(ref);
    }
        
    public Path createExtdirs() {
        if (extdirs == null) {
            extdirs = new Path(project);
        }
        return extdirs.createPath();
    }        
   
    public void setAspectpathref(Reference ref) {
        createAspectpath().setRefid(ref);
    }
    public void setAspectpath(Path path) {
        aspectpath = incPath(aspectpath, path);
    }
    public Path createAspectpath() {
        if (aspectpath == null) {
            aspectpath = new Path(project);
        }
        return aspectpath.createPath();
    }        
    public void setSrcDir(Path path) {
        srcdir = incPath(srcdir, path);
    }
    public Path createSrc() {
        return createSrcdir();
    }
    public Path createSrcdir() {
        if (srcdir == null) {
            srcdir = new Path(project);
        }
        return srcdir.createPath();
    }
    
    /** @return true if in incremental mode (command-line or file) */
    public boolean isInIncrementalMode() {
        return inIncrementalMode;
    }
    /** @return true if in incremental file mode */
    public boolean isInIncrementalFileMode() {
        return inIncrementalFileMode;
    }
    public void setArgfilesref(Reference ref) {
        createArgfiles().setRefid(ref);
    }
    
    public void setArgfiles(Path path) { // ajc-only eajc-also docDone
        argfiles = incPath(argfiles, path);
    }
    public Path createArgfiles() {
        if (argfiles == null) {
            argfiles = new Path(project);
        }
        return argfiles.createPath();
    }
                
    // ------------------------------ run
  
    /**
     * Compile using ajc per settings.
     * @exception BuildException if the compilation has problems
     *             or if there were compiler errors and failonerror is true.
     */
    public void execute() throws BuildException {
    	this.logger = new TaskLogger(this);
        if (executing) {
            throw new IllegalStateException("already executing");
        } else {
            executing = true;
        }
        setupOptions();
        verifyOptions();
        try {
            String[] args = makeCommand();
            if (logCommand) {
                log("ajc " + Arrays.asList(args));                
            } else {
                logVerbose("ajc " + Arrays.asList(args));
            }
            if (!fork) {
                executeInSameVM(args);
            } else { // when forking, Adapter handles failonerror
                executeInOtherVM(args);
            }
        } catch (BuildException e) {
            throw e;
        } catch (Throwable x) {
        	this.logger.error(Main.renderExceptionForUser(x));
            throw new BuildException("IGNORE -- See " 
            	+ LangUtil.unqualifiedClassName(x) 
            	+ " rendered to ant logger");
        } finally {
            executing = false;
            if (null != tmpOutjar) {
                tmpOutjar.delete();
            }
        }        
    }
    /** 
     * Halt processing.
     * This tells main in the same vm to quit.
     * It fails when running in forked mode.
     * @return true if not in forked mode
     *         and main has quit or been told to quit
     */
    public boolean quit() {
        if (executingInOtherVM) {
            return false;
        }
        Main me = main;
        if (null != me) {
            me.quit();
        }
        return true;
    }
    // package-private for testing
    String[] makeCommand() {
        ArrayList result = new ArrayList();
        if (0 < ignored.size()) {
            for (Iterator iter = ignored.iterator(); iter.hasNext();) {
            	logVerbose("ignored: " + iter.next());
            }
        }
        // when copying resources, use temp jar for class output
        // then copy temp jar contents and resources to output jar
        if ((null != outjar) && !outjarFixedup) {
            if (copyInjars || copyInpath || (null != sourceRootCopyFilter)
                    || (null != inpathDirCopyFilter)) {
                String path = outjar.getAbsolutePath();
                int len = FileUtil.zipSuffixLength(path);
                path = path.substring(0, path.length()-len) + ".tmp.jar";
                tmpOutjar = new File(path);
            }
            if (null == tmpOutjar) {                
                cmd.addFlagged("-outjar", outjar.getAbsolutePath());        
            } else {
                cmd.addFlagged("-outjar", tmpOutjar.getAbsolutePath());        
            }
            outjarFixedup = true;
        }
        result.addAll(cmd.extractArguments());        
        addListArgs(result);
        String[] command = (String[]) result.toArray(new String[0]);
        if (null != commandEditor) {
            command = commandEditor.editCommand(command);
        } else if (null != COMMAND_EDITOR) {
            command = COMMAND_EDITOR.editCommand(command);
        }
        return command;
    }   
    /**
     * Create any pseudo-options required to implement
     * some of the macro options
     * @throws BuildException if options conflict
     */
    protected void setupOptions() {
        if (null != xweaveDir) {
           if (DEFAULT_DESTDIR != destDir) {
               throw new BuildException("weaveDir forces destdir"); 
           }
           if (null != outjar) {
               throw new BuildException("weaveDir forces outjar"); 
           }
           if (null != injars) {
               throw new BuildException("weaveDir incompatible with injars now"); 
           }
           if (null != inpath) {
               throw new BuildException("weaveDir incompatible with inpath now"); 
           }
           
           File injar = zipDirectory(xweaveDir);
           setInjars(new Path(getProject(), injar.getAbsolutePath()));
           setDestdir(xweaveDir);
        }
    }
    
    protected File zipDirectory(File dir) {
        File tempDir = new File(".");
        try {
            tempDir = File.createTempFile("AjcTest", ".tmp");
            tempDir.mkdirs();
            tempDir.deleteOnExit(); // XXX remove zip explicitly..
        } catch (IOException e) {
            // ignore
        }
        String filename = "AjcTask-" 
            + System.currentTimeMillis() 
            + ".zip";
        File result = new File(filename);
        Zip zip = new Zip();
        zip.setProject(getProject());
        zip.setDestFile(result);
        zip.setTaskName(getTaskName() + " - zip");
        FileSet fileset = new FileSet();
        fileset.setDir(dir);
        zip.addFileset(fileset);
        zip.execute();
        Delete delete = new Delete();
        delete.setProject(getProject());
        delete.setTaskName(getTaskName() + " - delete");
        delete.setDir(dir);
        delete.execute();
        Mkdir mkdir = new Mkdir();
        mkdir.setProject(getProject());
        mkdir.setTaskName(getTaskName() + " - mkdir");
        mkdir.setDir(dir);
        mkdir.execute();
        return result;
    }
    
    /**
     * @throw BuildException if options conflict
     */
    protected void verifyOptions() {
        StringBuffer sb = new StringBuffer();
        if (fork && isInIncrementalMode() && !isInIncrementalFileMode()) {
            sb.append("can fork incremental only using tag file.\n");
        }
        if (((null != inpathDirCopyFilter) || (null != sourceRootCopyFilter)) 
                && (null == outjar) && (DEFAULT_DESTDIR == destDir)) {        	
            final String REQ = " requires dest dir or output jar.\n";
            if (null == inpathDirCopyFilter) {
                sb.append("sourceRootCopyFilter");
            } else if (null == sourceRootCopyFilter) {
                sb.append("inpathDirCopyFilter");
            } else {
                sb.append("sourceRootCopyFilter and inpathDirCopyFilter");
            }
            sb.append(REQ);
        }
        if (0 < sb.length()) {
            throw new BuildException(sb.toString());
        }
    }
    /**
     * Run the compile in the same VM by
     * loading the compiler (Main), 
     * setting up any message holders,
     * doing the compile,
     * and converting abort/failure and error messages
     * to BuildException, as appropriate.
     * @throws BuildException if abort or failure messages
     *         or if errors and failonerror.
     * 
     */
    protected void executeInSameVM(String[] args) {
        if (null != maxMem) {
            log("maxMem ignored unless forked: " + maxMem, Project.MSG_WARN);
        }
        IMessageHolder holder = messageHolder;
        int numPreviousErrors;
        if (null == holder) {
            MessageHandler mhandler = new MessageHandler(true);
              delegate  = new AntMessageHandler(this.logger,this.verbose, false);
            mhandler.setInterceptor(delegate);
            holder = mhandler;
            numPreviousErrors = 0;
        } else {
            numPreviousErrors = holder.numMessages(IMessage.ERROR, true);
        }
        {
            Main newmain = new Main();
            newmain.setHolder(holder);
            newmain.setCompletionRunner(new Runnable() {
                public void run() {
                    doCompletionTasks();
                }
            });
            if (null != main) {
                MessageUtil.fail(holder, "still running prior main");
                return;
            }
            main = newmain;          
        }
        main.runMain(args, false);
        if (failonerror) {
            int errs = holder.numMessages(IMessage.ERROR, false);
            errs -= numPreviousErrors;
            if (0 < errs) {
                String m =  errs + " errors";
                MessageUtil.print(System.err, holder, "", MessageUtil.MESSAGE_ALL, MessageUtil.PICK_ERROR, true);
                throw new BuildException(m); 
            }
        } 
        // Throw BuildException if there are any fail or abort
        // messages.
        // The BuildException message text has a list of class names
        // for the exceptions found in the messages, or the
        // number of fail/abort messages found if there were
        // no exceptions for any of the fail/abort messages.
        // The interceptor message handler should have already
        // printed the messages, including any stack traces.
        // HACK: this ignores the Usage message
        {
            IMessage[] fails = holder.getMessages(IMessage.FAIL, true);
            if (!LangUtil.isEmpty(fails)) {
                StringBuffer sb = new StringBuffer();
                String prefix = "fail due to ";
                int numThrown = 0;
                for (int i = 0; i < fails.length; i++) {
                    String message = fails[i].getMessage();
                    if (LangUtil.isEmpty(message)) {
                        message = "<no message>";
                    } else if (-1 != message.indexOf(USAGE_SUBSTRING)) {
                        continue;
                    }
                    Throwable t = fails[i].getThrown();
                    if (null != t) {
                        numThrown++;
                        sb.append(prefix);
                        sb.append(LangUtil.unqualifiedClassName(t.getClass()));
                        String thrownMessage = t.getMessage();
                        if (!LangUtil.isEmpty(thrownMessage)) {
                            sb.append(" \"" + thrownMessage + "\"");
                        }
                    } 
                    sb.append("\"" + message + "\"");
                    prefix = ", ";
                }
                if (0 < sb.length()) {
                    sb.append(" (" + numThrown + " exceptions)");
                    throw new BuildException(sb.toString());
                }
            }
        }
    }
    
    /**
     * Execute in a separate VM.
     * Differences from normal same-VM execution:
     * <ul>
     * <li>ignores any message holder {class} set</li>
     * <li>No resource-copying between interative runs</li>
     * <li>failonerror fails when process interface fails 
     *     to return negative values</li>
     * </ul>
     * @param args String[] of the complete compiler command to execute
     * 
     * @see DefaultCompilerAdapter#executeExternalCompile(String[], int)
     * @throws BuildException if ajc aborts (negative value)
     *         or if failonerror and there were compile errors.
     */
    protected void executeInOtherVM(String[] args) {
        javaCmd.setClassname(org.aspectj.tools.ajc.Main.class.getName());
        
        final Path vmClasspath = javaCmd.createClasspath(getProject());
        {
            File aspectjtools = null;
            int vmClasspathSize = vmClasspath.size();
            if ((null != forkclasspath) 
                && (0 != forkclasspath.size())) {
                vmClasspath.addExisting(forkclasspath);
            } else {                
                aspectjtools = findAspectjtoolsJar();
                if (null != aspectjtools) {
                    vmClasspath.createPathElement().setLocation(aspectjtools);
                }
            }
            int newVmClasspathSize = vmClasspath.size();
            if (vmClasspathSize == newVmClasspathSize) {
                String m = "unable to find aspectjtools to fork - ";
                if (null != aspectjtools) {
                    m += "tried " + aspectjtools.toString();
                } else if (null != forkclasspath) {
                    m += "tried " + forkclasspath.toString();
                } else {
                    m += "define forkclasspath or put aspectjtools on classpath";
                }
                throw new BuildException(m);
            }
        }
        if (null != maxMem) {
            javaCmd.setMaxmemory(maxMem);
        }
        File tempFile = null;
        int numArgs = args.length;
        args = GuardedCommand.limitTo(args, MAX_COMMANDLINE, getLocation());
        if (args.length != numArgs) {
            tempFile = new File(args[1]);
        }
        try {
        	boolean setMessageHolderOnForking = (this.messageHolder != null); 
            String[] javaArgs = javaCmd.getCommandline();
            String[] both = new String[javaArgs.length + args.length + (setMessageHolderOnForking ? 2 : 0)];
            System.arraycopy(javaArgs,0,both,0,javaArgs.length);
            System.arraycopy(args,0,both,javaArgs.length,args.length);
            if (setMessageHolderOnForking) {
            	both[both.length - 2] = "-messageHolder";
            	both[both.length - 1] = this.messageHolder.getClass().getName();
            }
            // try to use javaw instead on windows
            if (both[0].endsWith("java.exe")) {
                String path = both[0];
                path = path.substring(0, path.length()-4);
                path = path + "w.exe";
                File javaw = new File(path);
                if (javaw.canRead() && javaw.isFile()) {
                    both[0] = path;
                }
            }
            logVerbose("forking " + Arrays.asList(both));
            int result = execInOtherVM(both);
            if (0 > result) {
                throw new BuildException("failure[" + result + "] running ajc");
            } else if (failonerror && (0 < result)) {
                throw new BuildException("compile errors: " + result);                
            }
            // when forking, do completion only at end and when successful
            doCompletionTasks();
        } finally {
            if (null != tempFile) {
                tempFile.delete();
            }
        }
    }
    
    /**
     * Execute in another process using the same JDK
     * and the base directory of the project. XXX correct?
     * @param args
     * @return
     */
    protected int execInOtherVM(String[] args) {
        try {			
            Project project = getProject();
            exe.setAntRun(project);
            exe.setWorkingDirectory(project.getBaseDir());
            exe.setCommandline(args);
            try {
                if (executingInOtherVM) {
                    String s = "already running in other vm?";
                    throw new BuildException(s, location);
                }
                executingInOtherVM = true;
                exe.execute();
            } finally {
                executingInOtherVM = false;
            }
            return exe.getExitValue();
        } catch (IOException e) {
            String m = "Error executing command " + Arrays.asList(args);
            throw new BuildException(m, e, location);
        }
    }
    // ------------------------------ setup and reporting
    /** @return null if path null or empty, String rendition otherwise */
    protected static void addFlaggedPath(String flag, Path path, List list) {
        if (!LangUtil.isEmpty(flag) 
            && ((null != path) && (0 < path.size()))) {
            list.add(flag);
            list.add(path.toString());
        }
    }
    
    /** 
     * Add to list any path or plural arguments.
     */
        addFlaggedPath("-classpath", classpath, list);       
        addFlaggedPath("-bootclasspath", bootclasspath, list);
        addFlaggedPath("-extdirs", extdirs, list);
        addFlaggedPath("-aspectpath", aspectpath, list);
        addFlaggedPath("-injars", injars, list);
        addFlaggedPath("-inpath", inpath, list);
        addFlaggedPath("-sourceroots", sourceRoots, list);
        
        if (argfiles != null) {
            String[] files = argfiles.list();
            for (int i = 0; i < files.length; i++) {
                File argfile = project.resolveFile(files[i]);
                if (check(argfile, files[i], false, location)) {
                    list.add("-argfile");
                    list.add(argfile.getAbsolutePath());
                }
            }
        }
        if (srcdir != null) {
            // todo: ignore any srcdir if any argfiles and no explicit includes
            String[] dirs = srcdir.list();
            for (int i = 0; i < dirs.length; i++) {
                File dir = project.resolveFile(dirs[i]);
                check(dir, dirs[i], true, location);
                // relies on compiler to prune non-source files
                String[] files = getDirectoryScanner(dir).getIncludedFiles();
                for (int j = 0; j < files.length; j++) {
                    File file = new File(dir, files[j]);
                    if (FileUtil.hasSourceSuffix(file)) {
                        list.add(file.getAbsolutePath());
                    }
                }
            }
        }
        if (0 < adapterFiles.size()) {
            for (Iterator iter = adapterFiles.iterator(); iter.hasNext();) {
                File file = (File) iter.next();
                if (file.canRead() && FileUtil.hasSourceSuffix(file)) {
                    list.add(file.getAbsolutePath());
                } else {
                    this.logger.warning("skipping file: " + file);
                }
            }
        }
    /** 
     * Throw BuildException unless file is valid.
     * @param file the File to check
     * @param name the symbolic name to print on error
     * @param isDir if true, verify file is a directory
     * @param loc the Location used to create sensible BuildException
     * @return
     * @throws BuildException unless file valid
     */
    protected final boolean check(File file, String name,
                                  boolean isDir, Location loc) {
        loc = loc != null ? loc : location;
        if (file == null) {
            throw new BuildException(name + " is null!", loc);
        }
        if (!file.exists()) {
            throw new BuildException(file + " doesn't exist!", loc);
        }
        if (isDir ^ file.isDirectory()) {
            String e = file + " should" + (isDir ? "" : "n't")  +
                " be a directory!";
            throw new BuildException(e, loc);
        }
        return true;
    }
    
    /** 
     * Called when compile or incremental compile is completing,
     * this completes the output jar or directory
     * by copying resources if requested.
     * Note: this is a callback run synchronously by the compiler.
     * That means exceptions thrown here are caught by Main.run(..)
     * and passed to the message handler.
     */
    protected void doCompletionTasks() {
        if (!executing) {
            throw new IllegalStateException("should be executing");
        }
        if (null != outjar) {
            completeOutjar();
        } else {
            completeDestdir();
        }
        if (null != xdoneSignal) {
            MessageUtil.info(messageHolder, xdoneSignal);
        }
    }
    
    /** 
     * Complete the destination directory
     * by copying resources from the source root directories
     * (if the filter is specified)
     * and non-.class files from the input jars 
     * (if XCopyInjars is enabled).
     */
    private void completeDestdir() {
        if (!copyInjars && (null == sourceRootCopyFilter)
                && (null == inpathDirCopyFilter)) {
            return;
        } else if ((destDir == DEFAULT_DESTDIR)
                    || !destDir.canWrite()) {
            String s = "unable to copy resources to destDir: " + destDir;
            throw new BuildException(s);
        }
        final Project project = getProject();
        if (copyInjars) { // XXXX remove as unused since 1.1.1
            if (null != inpath) {
                log("copyInjars does not support inpath.\n", Project.MSG_WARN);
            }
            String taskName = getTaskName() + " - unzip";
            String[] paths = injars.list();            
            if (!LangUtil.isEmpty(paths)) {
                PatternSet patternSet = new PatternSet();
                patternSet.setProject(project);        
                patternSet.setIncludes("**/*");
                patternSet.setExcludes("**/*.class");  
                for (int i = 0; i < paths.length; i++) {
                    Expand unzip = new Expand();
                    unzip.setProject(project);
                    unzip.setTaskName(taskName);
                    unzip.setDest(destDir);
                    unzip.setSrc(new File(paths[i]));
                    unzip.addPatternset(patternSet);
                    unzip.execute();
                }
            }
        }
        if ((null != sourceRootCopyFilter) && (null != sourceRoots)) {
            String[] paths = sourceRoots.list();
            if (!LangUtil.isEmpty(paths)) {
                Copy copy = new Copy();
                copy.setProject(project);
                copy.setTodir(destDir);
                for (int i = 0; i < paths.length; i++) {
                    FileSet fileSet = new FileSet();
                    fileSet.setDir(new File(paths[i]));
                    fileSet.setIncludes("**/*");
                    fileSet.setExcludes(sourceRootCopyFilter);  
                    copy.addFileset(fileSet);
                }
                copy.execute();
            }
        }        
        if ((null != inpathDirCopyFilter) && (null != inpath)) {
            String[] paths = inpath.list();
            if (!LangUtil.isEmpty(paths)) {
                Copy copy = new Copy();
                copy.setProject(project);
                copy.setTodir(destDir);
                boolean gotDir = false;
                for (int i = 0; i < paths.length; i++) {
                    File inpathDir = new File(paths[i]);
                    if (inpathDir.isDirectory() && inpathDir.canRead()) {
                        if (!gotDir) {
                            gotDir = true;
                        }
                        FileSet fileSet = new FileSet();
                        fileSet.setDir(inpathDir);
                        fileSet.setIncludes("**/*");
                        fileSet.setExcludes(inpathDirCopyFilter);  
                        copy.addFileset(fileSet);
                    }
                }
                if (gotDir) {
                    copy.execute();
                }
            }
        }        
    }
    
    /** 
     * Complete the output jar
     * by copying resources from the source root directories
     * if the filter is specified.
     * and non-.class files from the input jars if enabled.
     */
    private void completeOutjar() {
        if (((null == tmpOutjar) || !tmpOutjar.canRead()) 
            || (!copyInjars && (null == sourceRootCopyFilter)
                    && (null == inpathDirCopyFilter))) {
            return;
        }
        Zip zip = new Zip();
        Project project = getProject();
        zip.setProject(project);        
        zip.setTaskName(getTaskName() + " - zip");
        zip.setDestFile(outjar);
        ZipFileSet zipfileset = new ZipFileSet();
        zipfileset.setProject(project);        
        zipfileset.setSrc(tmpOutjar);
        zipfileset.setIncludes("**/*.class");
        zip.addZipfileset(zipfileset);
        if (copyInjars) {
            String[] paths = injars.list();
            if (!LangUtil.isEmpty(paths)) {
                for (int i = 0; i < paths.length; i++) {
                    File jarFile = new File(paths[i]);
                    zipfileset = new ZipFileSet();
                    zipfileset.setProject(project);
                    zipfileset.setSrc(jarFile);
                    zipfileset.setIncludes("**/*");
                    zipfileset.setExcludes("**/*.class");  
                    zip.addZipfileset(zipfileset);
                }
            }
        }
        if ((null != sourceRootCopyFilter) && (null != sourceRoots)) {
            String[] paths = sourceRoots.list();
            if (!LangUtil.isEmpty(paths)) {
                for (int i = 0; i < paths.length; i++) {
                    File srcRoot = new File(paths[i]);
                    FileSet fileset = new FileSet();
                    fileset.setProject(project);
                    fileset.setDir(srcRoot);
                    fileset.setIncludes("**/*");
                    fileset.setExcludes(sourceRootCopyFilter);  
                    zip.addFileset(fileset);
                }
            }
        }        
        if ((null != inpathDirCopyFilter) && (null != inpath)) {
            String[] paths = inpath.list();
            if (!LangUtil.isEmpty(paths)) {
                for (int i = 0; i < paths.length; i++) {
                    File inpathDir = new File(paths[i]);
                    if (inpathDir.isDirectory() && inpathDir.canRead()) {
                        FileSet fileset = new FileSet();
                        fileset.setProject(project);
                        fileset.setDir(inpathDir);
                        fileset.setIncludes("**/*");
                        fileset.setExcludes(inpathDirCopyFilter);  
                        zip.addFileset(fileset);
                    }
                }
            }
        }        
        zip.execute();
    }
    
    // -------------------------- compiler adapter interface extras
    /**
     * Add specified source files.
     */
    void addFiles(File[] paths) {
        for (int i = 0; i < paths.length; i++) {
            addFile(paths[i]);
        }
    }
    /**
     * Add specified source file.
     */
    void addFile(File path) {
        if (null != path) {
            adapterFiles.add(path);
        }
    }
    /**
     * Read arguments in as if from a command line, 
     * mainly to support compiler adapter compilerarg subelement. 
     * 
     * @param args the String[] of arguments to read
     */
    public void readArguments(String[] args) { // XXX slow, stupid, unmaintainable
        if ((null == args) || (0 == args.length)) {
            return;
        }
        /** String[] wrapper with increment, error reporting */
        class Args {
            final String[] args;
            int index = 0;
            Args(String[] args) {
                this.args = args; // not null or empty
            }
            boolean hasNext() {
                return index < args.length;
            }
            String next() {
                String err = null;
                if (!hasNext()) {
                    err = "need arg for flag " + args[args.length-1];
                } else {
                    String s = args[index++];
                    if (null == s) {
                        err = "null value";                                            
                    } else {
                        s = s.trim();
                        if (0 == s.trim().length()) {
                            err = "no value";                                            
                        } else {
                            return s;
                        }
                    }
                }
                err += " at [" + index + "] of " + Arrays.asList(args);
                throw new BuildException(err);
            }
        } // class Args
        Args in = new Args(args);
        String flag;
        while (in.hasNext()) {
            flag = in.next();
            if ("-1.3".equals(flag)) {
                setCompliance(flag);
            } else if ("-1.4".equals(flag)) {
            	setCompliance(flag);
            } else if ("-1.5".equals(flag)) {
                setCompliance("1.5");
            } else if ("-argfile".equals(flag)) {
                setArgfiles(new Path(project, in.next()));
            } else if ("-aspectpath".equals(flag)) {
                setAspectpath(new Path(project, in.next()));
            } else if ("-classpath".equals(flag)) {
                setClasspath(new Path(project, in.next()));
            } else if ("-Xcopyinjars".equals(flag)) {
                setCopyInjars(true); // ignored - will be flagged by setter
            } else if ("-g".equals(flag)) {
                setDebug(true);
            } else if (flag.startsWith("-g:")) {
                setDebugLevel(flag.substring(2));
            } else if ("-deprecation".equals(flag)) {
                setDeprecation(true);
            } else if ("-d".equals(flag)) {
                setDestdir(new File(in.next()));
            } else if ("-crossrefs".equals(flag)) {
                setCrossrefs(true);
            } else if ("-emacssym".equals(flag)) {
                setEmacssym(true);
            } else if ("-encoding".equals(flag)) {
                setEncoding(in.next());
            } else if ("-Xfailonerror".equals(flag)) {
                setFailonerror(true);
            } else if ("-fork".equals(flag)) {
                setFork(true);
            } else if ("-forkclasspath".equals(flag)) {
                setForkclasspath(new Path(project, in.next()));
            } else if ("-help".equals(flag)) {
                setHelp(true);
            } else if ("-incremental".equals(flag)) {
                setIncremental(true);
            } else if ("-injars".equals(flag)) {
                setInjars(new Path(project, in.next()));
            } else if ("-inpath".equals(flag)) {
            	setInpath(new Path(project,in.next()));
            } else if ("-Xlistfileargs".equals(flag)) {
                setListFileArgs(true);
            } else if ("-Xmaxmem".equals(flag)) {
                setMaxmem(in.next());
            } else if ("-Xmessageholderclass".equals(flag)) {
                setMessageHolderClass(in.next());
            } else if ("-noexit".equals(flag)) {
                setNoExit(true);
            } else if ("-noimport".equals(flag)) {
                setNoExit(true);
            } else if ("-noExit".equals(flag)) {
                setNoExit(true);
            } else if ("-noImportError".equals(flag)) {
                setNoImportError(true);
            } else if ("-noWarn".equals(flag)) {
                setNowarn(true);
            } else if ("-noexit".equals(flag)) {
                setNoExit(true);
            } else if ("-outjar".equals(flag)) {
                setOutjar(new File(in.next()));
            } else if ("-outxml".equals(flag)) {
                setOutxml(true);
            } else if ("-outxmlfile".equals(flag)) {
                setOutxmlfile(in.next());
            } else if ("-preserveAllLocals".equals(flag)) {
                setPreserveAllLocals(true);
            } else if ("-proceedOnError".equals(flag)) {
                setProceedOnError(true);
            }  else if ("-referenceInfo".equals(flag)) {
                setReferenceInfo(true);
            } else if ("-source".equals(flag)) {
                setSource(in.next());
            } else if ("-Xsourcerootcopyfilter".equals(flag)) {
                setSourceRootCopyFilter(in.next());
            } else if ("-sourceroots".equals(flag)) {
                setSourceRoots(new Path(project, in.next()));
            } else if ("-Xsrcdir".equals(flag)) {
                setSrcDir(new Path(project, in.next()));
            } else if ("-Xtagfile".equals(flag)) {
                setTagFile(new File(in.next()));
            } else if ("-target".equals(flag)) {
                setTarget(in.next());
            } else if ("-time".equals(flag)) {
                setTime(true);
            } else if ("-time".equals(flag)) {
                setTime(true);
            } else if ("-verbose".equals(flag)) {
                setVerbose(true); 
            } else if ("-showWeaveInfo".equals(flag)) {
                setShowWeaveInfo(true);
            } else if ("-version".equals(flag)) {
                setVersion(true);
            } else if ("-warn".equals(flag)) {
                setWarn(in.next());
            } else if (flag.startsWith("-warn:")) {
                setWarn(flag.substring(6));
            } else if ("-Xlint".equals(flag)) {
                setXlintwarnings(true);
            } else if (flag.startsWith("-Xlint:")) {
                setXlint(flag.substring(7));
            } else if ("-Xlintfile".equals(flag)) {
                setXlintfile(new File(in.next()));
            } else if ("-XterminateAfterCompilation".equals(flag)) {
                setXTerminateAfterCompilation(true);
            } else if ("-XnotReweavable".equals(flag)) {
            } else if (flag.startsWith("@")) {
                File file = new File(flag.substring(1));
                if (file.canRead()) {
                    setArgfiles(new Path(project, file.getPath()));
                } else {
                    ignore(flag);            
                }
            } else {
                File file = new File(flag);
                if (file.isFile() 
                	&& file.canRead() 
                	&& FileUtil.hasSourceSuffix(file)) {
                    addFile(file);
                } else {
                    ignore(flag);
                }
            }
        }
        
    }
    protected void logVerbose(String text) {
    	if (this.verbose) {
    		this.logger.info(text);
    	} else {
    		this.logger.verbose(text);
    	}
    }
 * Commandline wrapper that 
 * only permits addition of non-empty values
 * and converts to argfile form if necessary.
 */
    Commandline command;
    //int size;
    static boolean isEmpty(String s) {
        return ((null == s) || (0 == s.trim().length()));
    }
    GuardedCommand() {
        command = new Commandline();
    }
    void addFlag(String flag, boolean doAdd) {
        if (doAdd && !isEmpty(flag)) {
            command.createArgument().setValue(flag);
            //size += 1 + flag.length();
        }
    }
    
    /** @return null if added or ignoreString otherwise */
    String addOption(String prefix, String[] validOptions, String input) {
        if (isEmpty(input)) {
            return null;
        }
        for (int i = 0; i < validOptions.length; i++) {
                if (isEmpty(prefix)) {
                    addFlag(input, true);
                } else {
                    addFlagged(prefix, input);
                }
                return null;
        return (null == prefix ? input : prefix + " " + input);
    }
    
    void addFlagged(String flag, String argument) {
        if (!isEmpty(flag) && !isEmpty(argument)) {
            command.addArguments(new String[] {flag, argument});
            //size += 1 + flag.length() + argument.length();
        }
    }
    
    
    List extractArguments() {
        ArrayList result = new ArrayList();
        String[] cmds = command.getArguments();
        if (!LangUtil.isEmpty(cmds)) {
            result.addAll(Arrays.asList(cmds));
        }
        return result;
    }
     /**
     * Adjust args for size if necessary by creating
     * an argument file, which should be deleted by the client
     * after the compiler run has completed.
     * @param max the int maximum length of the command line (in char)
     * @return the temp File for the arguments (if generated), 
     *         for deletion when done.
     * @throws IllegalArgumentException if max is negative
     */
    static String[] limitTo(String[] args, int max, 
        Location location) {       
        if (max < 0) {
            throw new IllegalArgumentException("negative max: " + max);
        }
        // sigh - have to count anyway for now
        int size = 0;
        for (int i = 0; (i < args.length) && (size < max); i++) {
            size += 1 + (null == args[i] ? 0 : args[i].length());    
        }
        if (size <= max) {
            return args;
        }
        File tmpFile = null;
        PrintWriter out = null;
        // adapted from DefaultCompilerAdapter.executeExternalCompile
        try {
            String userDirName = System.getProperty("user.dir");
            File userDir = new File(userDirName);
            tmpFile = File.createTempFile("argfile", "", userDir);
            out = new PrintWriter(new FileWriter(tmpFile));
            for (int i = 0; i < args.length; i++) {
                out.println(args[i]);
            }
            out.flush();
            return new String[] {"-argfile", tmpFile.getAbsolutePath()};
        } catch (IOException e) {
            throw new BuildException("Error creating temporary file", 
                                     e, location);
        } finally {
            if (out != null) {
                try {out.close();} catch (Throwable t) {}
            }
        }
    }     
    private final boolean taskLevelVerbose;
    private final boolean handledMessage;
    
        this.handledMessage = handledMessage;

======= d9bd46d^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/ConfigParser.java"



======= f1a83b5^:"tests/src/org/aspectj/systemtest/ajc163/Ajc163Tests.java"


======= 120b47f^:"weaver/src/org/aspectj/weaver/bcel/AtAjAttributes.java"

======= 120b47f^:"weaver/src/org/aspectj/weaver/bcel/AtAjAttributes.java"

======= 120b47f^:"weaver/src/org/aspectj/weaver/model/AsmRelationshipProvider.java"

======= 120b47f^:"weaver/src/org/aspectj/weaver/model/AsmRelationshipProvider.java"


======= 155a888^:"asm/src/org/aspectj/asm/internal/JDTLikeHandleProvider.java"


======= cffe291^:"tests/src/org/aspectj/systemtest/ajc163/Ajc163Tests.java"


======= 7a398a2^:"weaver/src/org/aspectj/weaver/bcel/BcelShadow.java"

======= 7a398a2^:"weaver/src/org/aspectj/weaver/bcel/BcelShadow.java"

======= 7a398a2^:"weaver/src/org/aspectj/weaver/bcel/BcelShadow.java"


======= 9b68a31^:"tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java"

======= 9b68a31^:"tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java"

======= 9b68a31^:"tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java"


======= f376a21^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseResolvedMember.java"


======= 78a483d^:"weaver/src/org/aspectj/weaver/bcel/BcelShadow.java"

======= 78a483d^:"weaver/src/org/aspectj/weaver/bcel/BcelShadow.java"

======= 78a483d^:"weaver/src/org/aspectj/weaver/bcel/BcelShadow.java"

======= 78a483d^:"weaver/src/org/aspectj/weaver/bcel/BcelShadow.java"

======= 78a483d^:"weaver/src/org/aspectj/weaver/bcel/BcelShadow.java"

======= 78a483d^:"weaver/src/org/aspectj/weaver/bcel/BcelShadow.java"

======= 78a483d^:"weaver/src/org/aspectj/weaver/bcel/BcelShadow.java"

======= 78a483d^:"weaver/src/org/aspectj/weaver/bcel/BcelShadow.java"


======= d5c2ead^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java"

======= d5c2ead^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"

======= d5c2ead^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"

    private static boolean DO_RUNTIME_VERSION_CHECK = false;
    // If runtime version check fails, warn or fail? (unset?)
    static final boolean FAIL_IF_RUNTIME_NOT_FOUND = false;
    
    
    private static final FileFilter binarySourceFilter = 
    	CompilationAndWeavingContext.setMultiThreaded(false);
======= d5c2ead^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"

    
    /**
     * Enable check for runtime version, used only by Ant/command-line Main.
     * @param main Main unused except to limit to non-null clients.
     */
    public static void enableRuntimeVersionCheck(Main caller) {
    }
    
        this.handler = CountingMessageHandler.makeCountingMessageHandler(holder);
    /** @return true if we should generate a model as a side-effect */
    public boolean doGenerateModel() {
        return buildConfig.isGenerateModelMode();
    }
        AjBuildConfig buildConfig, 
        IMessageHandler baseHandler) 
        throws IOException, AbortException {
        return doBuild(buildConfig, baseHandler, true);
    }
    public boolean incrementalBuild(
        AjBuildConfig buildConfig, 
        IMessageHandler baseHandler) 
        throws IOException, AbortException {
        return doBuild(buildConfig, baseHandler, false);
    }
    /** @throws AbortException if check for runtime fails */
    protected boolean doBuild(
        AjBuildConfig buildConfig, 
        IMessageHandler baseHandler, 
        boolean batch) throws IOException, AbortException {
        boolean ret = true;
    	batchCompile = batch;
    	wasFullBuild = batch;
    	if (baseHandler instanceof ILifecycleAware) {
    		((ILifecycleAware)baseHandler).buildStarting(!batch);
    	}
    	CompilationAndWeavingContext.reset();
    	int phase = batch ? CompilationAndWeavingContext.BATCH_BUILD : CompilationAndWeavingContext.INCREMENTAL_BUILD;
    	ContextToken ct = CompilationAndWeavingContext.enteringPhase(phase ,buildConfig);
        try {
        	if (batch) {
        		this.state = new AjState(this);
        	}
        	
        	this.state.setCouldBeSubsequentIncrementalBuild(this.environmentSupportsIncrementalCompilation);
        	
            boolean canIncremental = state.prepareForNextBuild(buildConfig);
            if (!canIncremental && !batch) { // retry as batch?
             CompilationAndWeavingContext.leavingPhase(ct);
             if (state.listenerDefined()) state.getListener().recordDecision("Falling back to batch compilation");
            	return doBuild(buildConfig, baseHandler, true);
            }
            this.handler = 
                CountingMessageHandler.makeCountingMessageHandler(baseHandler);
    		if (buildConfig==null || buildConfig.isCheckRuntimeVersion()) {
    		}
            // if (batch) {
                setBuildConfig(buildConfig);
            //}
            if (batch || !AsmManager.attemptIncrementalModelRepairs) {
                	setupModel(buildConfig);
            }
            if (batch) {
                initBcelWorld(handler);
            }
            if (handler.hasErrors()) {
               	CompilationAndWeavingContext.leavingPhase(ct);
                return false;
            }
            
            if (buildConfig.getOutputJar() != null) {
            	 if (!openOutputStream(buildConfig.getOutputJar())) {
                CompilationAndWeavingContext.leavingPhase(ct);
                return false;
            	 }
            }
            
            if (batch) {
                // System.err.println("XXXX batch: " + buildConfig.getFiles());
                if (buildConfig.isEmacsSymMode() || buildConfig.isGenerateModelMode()) {  
                    getWorld().setModel(AsmManager.getDefault().getHierarchy());
                    // in incremental build, only get updated model?
                }
                binarySourcesForTheNextCompile = state.getBinaryFilesToCompile(true);
                performCompilation(buildConfig.getFiles());
                state.clearBinarySourceFiles(); // we don't want these hanging around...
                if (!proceedOnError() && handler.hasErrors()) {
                   	CompilationAndWeavingContext.leavingPhase(ct);
                  	if (AsmManager.isReporting())
    				    AsmManager.getDefault().reportModelInfo("After a batch build");
                    return false;
                }
            } else {
                // System.err.println("XXXX start inc ");
                binarySourcesForTheNextCompile = state.getBinaryFilesToCompile(true);
                Set files = state.getFilesToCompile(true);
                boolean hereWeGoAgain = !(files.isEmpty() && binarySourcesForTheNextCompile.isEmpty());
                for (int i = 0; (i < 5) && hereWeGoAgain; i++) {
                	   if (state.listenerDefined()) 
                		   state.getListener().recordInformation("Starting incremental compilation loop "+(i+1)+" of possibly 5");
                    // System.err.println("XXXX inc: " + files);
               
                    performCompilation(files);
                    if ((!proceedOnError() && handler.hasErrors()) || (progressListener!=null && progressListener.isCancelledRequested())) {
                        CompilationAndWeavingContext.leavingPhase(ct);
                        return false;
                    } 
                    
                    if (state.requiresFullBatchBuild()) {
                    	if (state.listenerDefined()) 
                 		   state.getListener().recordInformation(" Dropping back to full build");
                    	return batchBuild(buildConfig, baseHandler);
                    }
                    
                    binarySourcesForTheNextCompile = state.getBinaryFilesToCompile(false);
                    files = state.getFilesToCompile(false);
                    hereWeGoAgain = !(files.isEmpty() && binarySourcesForTheNextCompile.isEmpty());
                    // TODO Andy - Needs some thought here...
                    // I think here we might want to pass empty addedFiles/deletedFiles as they were
                    // dealt with on the first call to processDelta - we are going through this loop
                    // again because in compiling something we found something else we needed to
                    // rebuild.  But what case causes this?
                    if (hereWeGoAgain) {
                    }
                }
                if (!files.isEmpty()) {
                   	CompilationAndWeavingContext.leavingPhase(ct);
                    return batchBuild(buildConfig, baseHandler);
                } else {                
                	if (AsmManager.isReporting()) 
                }
            }
            // XXX not in Mik's incremental
            if (buildConfig.isEmacsSymMode()) {
                new org.aspectj.ajdt.internal.core.builder.EmacsStructureModelManager().externalizeModel();
            }
            
            // for bug 113554: support ajsym file generation for command line builds
            if (buildConfig.isGenerateCrossRefsMode()) {
            }
            
            // have to tell state we succeeded or next is not incremental
            state.successfulCompile(buildConfig,batch);
            if (batch) {
            	copyResourcesToDestination();
            }
            
            if (buildConfig.getOutxmlName() != null) {
            	writeOutxmlFile();
            }
            
            /*boolean weaved = *///weaveAndGenerateClassFiles();
            // if not weaved, then no-op build, no model changes
            // but always returns true
            // XXX weaved not in Mik's incremental
            if (buildConfig.isGenerateModelMode()) {
                AsmManager.getDefault().fireModelUpdated();  
            }
           	CompilationAndWeavingContext.leavingPhase(ct);
            
        } finally {
        	if (baseHandler instanceof ILifecycleAware) {
        		((ILifecycleAware)baseHandler).buildFinished(!batch);
        	}
        	if (zos != null) {
        		closeOutputStream(buildConfig.getOutputJar());
        	}
            ret = !handler.hasErrors();
            if (getBcelWorld()!=null) getBcelWorld().tidyUp();
            if (getWeaver()!=null) getWeaver().tidyUp();
            // bug 59895, don't release reference to handler as may be needed by a nested call
            //handler = null;
        }
        return ret;
    }
    
======= d5c2ead^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"

    }
    
======= d5c2ead^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"

======= d5c2ead^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"

======= d5c2ead^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"

======= d5c2ead^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"

======= d5c2ead^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"

======= d5c2ead^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"

    /**
     * Responsible for managing the ASM model between builds.  Contains the policy for
     * maintaining the persistance of elements in the model.
     * 
     * This code is driven before each 'fresh' (batch) build to create
     * a new model.
     */
     private void setupModel(AjBuildConfig config) {
     	AsmManager.setCreatingModel(config.isEmacsSymMode() || config.isGenerateModelMode());
     	if (!AsmManager.isCreatingModel()) return;
        String rootLabel = "<root>";
        	
        IProgramElement.Kind kind = IProgramElement.Kind.FILE_JAVA;
        if (buildConfig.getConfigFile() != null) {
           	rootLabel = buildConfig.getConfigFile().getName();
           	model.setConfigFile(buildConfig.getConfigFile().getAbsolutePath());
           	kind = IProgramElement.Kind.FILE_LST;  
        }
        model.setRoot(new ProgramElement(rootLabel, kind, new ArrayList()));
                
        model.setFileMap(new HashMap());
        setStructureModel(model);
    }
    
    
    //LTODO delegate to BcelWeaver?
     // XXX hideous, should not be Object
    public void setCustomMungerFactory(Object o) {
    }
    
    /** init only on initial batch compile? no file-specific options */
======= d5c2ead^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"

======= d5c2ead^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"

======= d5c2ead^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"

======= d5c2ead^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"

======= d5c2ead^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"

    
    
======= d5c2ead^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"

    
    
        for (Iterator fIterator = files.iterator(); fIterator.hasNext();) {
            File f = (File) fIterator.next();
            filenames[ii++] = f.getPath();
        }
======= d5c2ead^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"

======= d5c2ead^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"

        // omitting dev info
                    String version = null;
                    Manifest manifest = new JarFile(p).getManifest();
                    if (manifest == null) {
                    	ret = "no manifest found in " + p.getAbsolutePath() + 
                    	continue;
                    }
                    Attributes attr = manifest.getAttributes("org/aspectj/lang/");
                    if (null != attr) {
                        version = attr.getValue(Attributes.Name.IMPLEMENTATION_VERSION);
                        if (null != version) {
                            version = version.trim();
                        }
                    }
                        return null;
======= d5c2ead^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"

======= d5c2ead^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"

======= d5c2ead^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"

    
======= d5c2ead^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"

======= d5c2ead^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"

    public static AsmHierarchyBuilder getAsmHierarchyBuilder() {
        return asmHierarchyBuilder;
    }
    /**
     * Override the the default hierarchy builder.
     */
    public static void setAsmHierarchyBuilder(AsmHierarchyBuilder newBuilder) {
        asmHierarchyBuilder = newBuilder;
    }
    
    public AjState getState() {
        return state;
    }
======= d5c2ead^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"


======= 6d906dc^:"docs/dist/doc/examples/introduction/Point.java"


======= df49b5c^:"loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java"

======= df49b5c^:"loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java"

    			Enumeration xmls = weavingContext.getResources(st.nextToken());
    			Set seenBefore = new HashSet();
    			while (xmls.hasMoreElements()) {
    			    URL xml = (URL) xmls.nextElement();
    			    if (trace.isTraceEnabled()) trace.event("parseDefinitions",this,xml);
    			    if (!seenBefore.contains(xml)) {
    			    	info("using configuration " + weavingContext.getFile(xml));
    			    	definitions.add(DocumentParser.parse(xml));
        			    seenBefore.add(xml);
    			    }
    			    else {
    			    	warn("ignoring duplicate definition: " + xml);
    			    }

======= e9823aa^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseSourceType.java"


======= be03167^:"weaver/src/org/aspectj/weaver/patterns/AndAnnotationTypePattern.java"

======= be03167^:"weaver/src/org/aspectj/weaver/patterns/NotAnnotationTypePattern.java"

======= be03167^:"weaver/src/org/aspectj/weaver/patterns/OrAnnotationTypePattern.java"

======= be03167^:"weaver/src/org/aspectj/weaver/patterns/WildAnnotationTypePattern.java"


======= 11ebdd8^:"tests/src/org/aspectj/systemtest/ajc161/Ajc161Tests.java"


======= 248962b^:"weaver/src/org/aspectj/weaver/patterns/IfPointcut.java"

======= 248962b^:"weaver/src/org/aspectj/weaver/patterns/IfPointcut.java"

======= 248962b^:"weaver/src/org/aspectj/weaver/patterns/IfPointcut.java"

                                testMethod.getParameterTypes()[i].resolve(shadow.getIWorld())));

======= 3b2109a^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java"

======= 3b2109a^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java"


======= 93b7bed^:"weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java"


======= f014275^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"


======= a8739e3^:"weaver/src/org/aspectj/weaver/TypeFactory.java"


======= d3c3e32^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/EclipseAdapterUtils.java"

        ISourceLocation[] seeAlsoLocations = new ISourceLocation[seeAlso.length];
        	seeAlsoLocations[i] = new SourceLocation(new File(new String(seeAlso[i].getOriginatingFileName())),
        											 seeAlso[i].getSourceLineNumber());

======= 5f97d46^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"

======= 5f97d46^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"

======= 5f97d46^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"

======= 5f97d46^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"

======= 5f97d46^:"weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java"

            gen.addExceptionHandler(
                remap(r.getRealStart(), map), 
                remap(r.getRealEnd(), map),
                remap(r.getHandler(), map),
                (r.getCatchType() == null)
                ? null 
                : (ObjectType) BcelWorld.makeBcelType(r.getCatchType()));
======= 5f97d46^:"weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java"

======= 5f97d46^:"weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java"

    private static void assertGoodRangeHandle(InstructionHandle ih, Set body, Stack ranges, String from) {
======= 5f97d46^:"weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java"

    private static void assertGoodRange(Range r, Set body, String from) {
======= 5f97d46^:"weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java"

        String from)

======= bed3f4e^:"org.aspectj.ajdt.core/src/org/aspectj/org/eclipse/jdt/core/dom/AjASTMatcher.java"

======= bed3f4e^:"org.aspectj.ajdt.core/src/org/aspectj/org/eclipse/jdt/core/dom/AjASTMatcher.java"


======= 6bdb87d^:"taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java"

    { "1.1", "1.2", "1.3", "1.4", "1.5" };
    { "1.3", "1.4", "1.5" };
    { "-1.3", "-1.4", "-1.5" };

======= 8ce9dcf^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java"


======= fe99e6b^:"weaver/src/org/aspectj/weaver/ResolvedType.java"


======= 6c54db9^:"weaver5/java5-src/org/aspectj/weaver/reflect/Java15AnnotationFinder.java"


======= 906c849^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"

======= 906c849^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"

======= 906c849^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"

======= 906c849^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"


======= a31b3de^:"weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java"


======= caf8960^:"weaver/src/org/aspectj/weaver/World.java"

======= caf8960^:"weaver/src/org/aspectj/weaver/World.java"


======= 1bbe6f9^:"weaver5/java5-src/org/aspectj/weaver/reflect/Java15ReflectionBasedReferenceTypeDelegate.java"


======= 9bbdb41^:"weaver5/java5-src/org/aspectj/weaver/reflect/Java15AnnotationFinder.java"

======= 9bbdb41^:"weaver5/java5-src/org/aspectj/weaver/reflect/Java15AnnotationFinder.java"

======= 9bbdb41^:"weaver5/java5-src/org/aspectj/weaver/reflect/Java15AnnotationFinder.java"

======= 9bbdb41^:"weaver5/java5-src/org/aspectj/weaver/reflect/Java15AnnotationFinder.java"

======= 9bbdb41^:"weaver5/java5-src/org/aspectj/weaver/reflect/Java15AnnotationFinder.java"


======= 5beab0e^:"weaver/src/org/aspectj/weaver/Shadow.java"

    	return getKind() + "(" + world.resolve(getSignature()).toGenericString() + ")";

======= b4715bc^:"runtime/src/org/aspectj/lang/ProceedingJoinPoint.java"

     * The given args Object[] must be in the same order and size as the advice signature but
     * without the actual joinpoint instance

======= 114db35^:"org.aspectj.ajdt.core/src/org/aspectj/org/eclipse/jdt/core/dom/AjASTConverter.java"

======= 114db35^:"org.aspectj.ajdt.core/src/org/aspectj/org/eclipse/jdt/core/dom/AjASTConverter.java"

======= 114db35^:"org.aspectj.ajdt.core/src/org/aspectj/org/eclipse/jdt/core/dom/InterTypeFieldDeclaration.java"

======= 114db35^:"org.aspectj.ajdt.core/src/org/aspectj/org/eclipse/jdt/core/dom/InterTypeMethodDeclaration.java"


======= 9de03b7^:"tests/src/org/aspectj/systemtest/ajc154/Ajc154Tests.java"


======= 797ec4d^:"weaver/src/org/aspectj/weaver/ResolvedType.java"


======= 579ec14^:"weaver/src/org/aspectj/weaver/TypeFactory.java"

======= 579ec14^:"weaver/src/org/aspectj/weaver/TypeFactory.java"

======= 579ec14^:"weaver/src/org/aspectj/weaver/TypeFactory.java"

======= 579ec14^:"weaver/testsrc/org/aspectj/weaver/TypeXTestCase.java"


======= 4177bed^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java"


======= 5336603^:"taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java"

        	{"constructorName", "packageDefaultMethod", "deprecation",
        		"unusedImports", "syntheticAccess", "assertIdentifier", "none" };

======= e8d2556^:"loadtime/src/org/aspectj/weaver/loadtime/ConcreteAspectCodeGen.java"

======= e8d2556^:"loadtime/src/org/aspectj/weaver/loadtime/ConcreteAspectCodeGen.java"

        ResolvedType current = m_world.resolve(m_concreteAspect.name, true);
        if (!current.isMissing()) {
======= e8d2556^:"loadtime/src/org/aspectj/weaver/loadtime/ConcreteAspectCodeGen.java"

        BcelPerClauseAspectAdder perClauseMunger = new BcelPerClauseAspectAdder(
                ResolvedType.forName(m_concreteAspect.name).resolve(m_world),
                m_perClause.getKind()
        );

======= c54fa62^:"ajde/src/org/aspectj/ajde/BuildOptionsAdapter.java"

======= c54fa62^:"ajde/src/org/aspectj/ajde/internal/CompilerAdapter.java"

======= c54fa62^:"ajde/src/org/aspectj/ajde/internal/CompilerAdapter.java"

======= c54fa62^:"ajde/src/org/aspectj/ajde/internal/CompilerAdapter.java"

======= c54fa62^:"ajde/testsrc/org/aspectj/ajde/BuildConfigurationTests.java"

======= c54fa62^:"ajde/testsrc/org/aspectj/ajde/BuildConfigurationTests.java"

======= c54fa62^:"ajde/testsrc/org/aspectj/ajde/BuildConfigurationTests.java"


======= 7b40e7e^:"tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/BoundedReferenceType.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/BoundedReferenceType.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/BoundedReferenceType.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/Checker.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/ReferenceType.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/ReferenceType.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/ResolvedPointcutDefinition.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/ResolvedType.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/ResolvedType.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/TypeVariable.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/TypeVariableReferenceType.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/TypeVariableReferenceType.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/TypeVariableReferenceType.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java"

        		ResolvedMember declaredSig = munger.getDeclaredSignature();
        		if (declaredSig==null) declaredSig= munger.getSignature();
======= 7b40e7e^:"weaver/src/org/aspectj/weaver/internal/tools/PointcutDesignatorHandlerBasedPointcut.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/internal/tools/PointcutDesignatorHandlerBasedPointcut.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/AndAnnotationTypePattern.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/AndPointcut.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/AndPointcut.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/AndTypePattern.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/AndTypePattern.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/AnnotationPatternList.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/AnnotationPointcut.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/AnnotationPointcut.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/AnnotationTypePattern.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/AnnotationTypePattern.java"

    public AnnotationTypePattern parameterizeWith(Map arg0) {
======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/AnnotationTypePattern.java"

    public AnnotationTypePattern parameterizeWith(Map arg0) {
======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/ArgsAnnotationPointcut.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/ArgsAnnotationPointcut.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/ArgsPointcut.java"

    public Pointcut parameterizeWith(Map typeVariableMap) {
    	ArgsPointcut ret = new ArgsPointcut(this.arguments.parameterizeWith(typeVariableMap));
======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/BindingAnnotationTypePattern.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/BindingTypePattern.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/BindingTypePattern.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/CflowPointcut.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/ConcreteCflowPointcut.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/ConcreteCflowPointcut.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/Declare.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/Declare.java"

    public abstract Declare parameterizeWith(Map typeVariableBindingMap);
======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/DeclareAnnotation.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/DeclareErrorOrWarning.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/DeclareErrorOrWarning.java"

    public Declare parameterizeWith(Map typeVariableBindingMap) {
    	Declare ret = new DeclareErrorOrWarning(isError,pointcut.parameterizeWith(typeVariableBindingMap),message);
======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/DeclareParents.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/DeclarePrecedence.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/DeclarePrecedence.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/DeclareSoft.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/DeclareSoft.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/ExactAnnotationTypePattern.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/ExactTypePattern.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/ExactTypePattern.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/ExactTypePattern.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/HandlerPointcut.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/HandlerPointcut.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/HasMemberTypePattern.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/IfPointcut.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/IfPointcut.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/KindedPointcut.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/NotAnnotationTypePattern.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/NotPointcut.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/NotPointcut.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/NotTypePattern.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/NotTypePattern.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/OrAnnotationTypePattern.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/OrPointcut.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/OrPointcut.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/OrTypePattern.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/OrTypePattern.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/PerCflow.java"

    public Pointcut parameterizeWith(Map typeVariableMap) {
    	PerCflow ret = new PerCflow(entry.parameterizeWith(typeVariableMap),isBelow);
======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/PerFromSuper.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/PerFromSuper.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/PerObject.java"

    public Pointcut parameterizeWith(Map typeVariableMap) {
    	PerObject ret = new PerObject(entry.parameterizeWith(typeVariableMap),isThis);
======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/PerSingleton.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/PerSingleton.java"

    public Pointcut parameterizeWith(Map typeVariableMap) {
======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/PerTypeWithin.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/Pointcut.java"

        public Pointcut parameterizeWith(Map typeVariableMap) {
======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/Pointcut.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/ReferencePointcut.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/ReferencePointcut.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/ReferencePointcut.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/ReferencePointcut.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/SignaturePattern.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/ThisOrTargetAnnotationPointcut.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/ThisOrTargetAnnotationPointcut.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/ThisOrTargetPointcut.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/ThisOrTargetPointcut.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/ThrowsPattern.java"

    public ThrowsPattern parameterizeWith(Map/*name -> resolved type*/ typeVariableMap) {
    			required.parameterizeWith(typeVariableMap),
    			forbidden.parameterizeWith(typeVariableMap));
======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/TypePattern.java"

    public abstract TypePattern parameterizeWith(Map typeVariableMap);
======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/TypePattern.java"

    public TypePattern parameterizeWith(Map typeVariableMap) {
======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/TypePattern.java"

    public TypePattern parameterizeWith(Map arg0) {
======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/TypePattern.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/TypePattern.java"

    public TypePattern parameterizeWith(Map arg0) {
======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/TypePatternList.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/TypePatternList.java"

    public TypePatternList parameterizeWith(Map typeVariableMap) {
======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/WildAnnotationTypePattern.java"

    public AnnotationTypePattern parameterizeWith(Map typeVariableMap) {
    	WildAnnotationTypePattern ret = new WildAnnotationTypePattern(typePattern.parameterizeWith(typeVariableMap));
======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/WildTypePattern.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/WildTypePattern.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/WithinAnnotationPointcut.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/WithinAnnotationPointcut.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/WithinCodeAnnotationPointcut.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/WithinCodeAnnotationPointcut.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/WithinPointcut.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/WithinPointcut.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/WithincodePointcut.java"

======= 7b40e7e^:"weaver/src/org/aspectj/weaver/patterns/WithincodePointcut.java"


======= 757004c^:"tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java"

======= 757004c^:"weaver/src/org/aspectj/weaver/MemberImpl.java"

======= 757004c^:"weaver/src/org/aspectj/weaver/MemberImpl.java"

        return resolve(world).getModifiers();
        return resolve(world).getExceptions();
======= 757004c^:"weaver/src/org/aspectj/weaver/MemberImpl.java"

    	return resolve(world).getParameterNames();
======= 757004c^:"weaver/src/org/aspectj/weaver/MemberImpl.java"


======= efe6cc7^:"ajdoc/src/org/aspectj/tools/ajdoc/Main.java"

                //signatureFiles[i] = createSignatureFile(inputFiles[i]);
            ajcOptions.addElement("-noExit");
            ajcOptions.addElement("-d"); 
            ajcOptions.addElement(rootDir.getAbsolutePath());
            int i = 0;
            for ( ; i < ajcOptions.size(); i++ ) {
                argsToCompiler[i] = (String)ajcOptions.elementAt(i);
            }
            for ( int j = 0; j < inputFiles.length; j++) {
                argsToCompiler[i] = inputFiles[j].getAbsolutePath();
                //System.out.println(">> file to ajc: " + inputFiles[j].getAbsolutePath());
                i++;
            }
            System.out.println( "> Calling ajc..." );
            CompilerWrapper.main(argsToCompiler);
            }
            for (int ii = 0; ii < inputFiles.length; ii++) {
                String tempFP = inputFiles[ii].getAbsolutePath();
                tempFP = tempFP.substring(0, tempFP.length()-4);
                tempFP += "ajsym";
                System.out.println( ">> checking: " + tempFP);
                File tempF = new File(tempFP);
                if ( !tempF.exists() ) System.out.println( ">>> doesn't exist!" );
            }
======= efe6cc7^:"ajdoc/src/org/aspectj/tools/ajdoc/Main.java"

            StubFileGenerator.doFiles(declIDTable, inputFiles, signatureFiles);
            System.out.println( "> Calling javadoc..." );
            String[] javadocargs = null;
            if ( packageMode ) {
                int numExtraArgs = 2;
                if (authorStandardDocletSwitch) numExtraArgs++;
                if (versionStandardDocletSwitch) numExtraArgs++;
                javadocargs = new String[numExtraArgs + options.size() + packageList.size() +
                                         fileList.size() ];
                javadocargs[0] = "-sourcepath";
                javadocargs[1] = outputWorkingDir;
                int argIndex = 2;
                if (authorStandardDocletSwitch) {
                    javadocargs[argIndex] = "-author";
                    argIndex++;
                }
                if (versionStandardDocletSwitch) {
                    javadocargs[argIndex] = "-version";
                }
                //javadocargs[1] = getSourcepathAsString();
                for (int k = 0; k < options.size(); k++) {
                    javadocargs[numExtraArgs+k] = (String)options.elementAt(k);
                }
                for (int k = 0; k < packageList.size(); k++) {
                    javadocargs[numExtraArgs+options.size() + k] = (String)packageList.elementAt(k);
                }
                for (int k = 0; k < fileList.size(); k++) {
                    javadocargs[numExtraArgs+options.size() + packageList.size() + k] = (String)fileList.elementAt(k);
                }
            }
            else {
                javadocargs = new String[options.size() + signatureFiles.length];
                for (int k = 0; k < options.size(); k++) {
                    javadocargs[k] = (String)options.elementAt(k);
                }
                for (int k = 0; k < signatureFiles.length; k++) {
                    javadocargs[options.size() + k] = StructureUtil.translateAjPathName(signatureFiles[k].getCanonicalPath());
                }
            }
         
            JavadocRunner.callJavadoc(javadocargs);
            //for ( int o = 0; o < inputFiles.length; o++ ) {
            //    System.out.println( "file: " + inputFiles[o] );
            //}
            /** We start with the known HTML files (the ones that correspond directly to the
            * input files.)  As we go along, we may learn that Javadoc split one .java file
            * into multiple .html files to handle inner classes or local classes.  The html
            * file decorator picks that up.
            */
            System.out.println( "> Decorating html files..." );
            HtmlDecorator.decorateHTMLFromInputFiles(declIDTable,
                                              rootDir,
                                              inputFiles,
                                              docModifier); 
            
            System.out.println( "> Removing generated tags (this may take a while)..." );
            removeDeclIDsFromFile("index-all.html", true);
            removeDeclIDsFromFile("serialized-form.html", true);
            if (packageList.size() > 0) {
            } else {
            	files = FileUtil.listFiles(rootDir, new FileFilter() {
            		public boolean accept(File f) {
            	});
            	for (int j = 0; j < files.length; j++) {
            		removeDeclIDsFromFile(files[j].getAbsolutePath(), false);
            	}
            }
======= efe6cc7^:"ajdoc/src/org/aspectj/tools/ajdoc/Main.java"

======= efe6cc7^:"ajdoc/src/org/aspectj/tools/ajdoc/Main.java"

            if ( addNextAsClasspath ) {
            if ( addNextAsSourcePath ) {
            }
            else if ( arg.equals( "-argfile" ) ) {
            }
            else if ( addNextAsArgFile ) {
            }
            else if (arg.equals("-d") ) {
            }
            else if ( arg.equals( "-bootclasspath" ) ) {
            } 
            else if ( arg.equals( "-source" ) ) {
            }
            else if ( arg.equals( "-classpath" ) ) {
            }
            else if ( arg.equals( "-encoding" ) ) {
            }
            else if ( arg.equals( "-docencoding" ) ) {
            }
            else if ( arg.equals( "-charset" ) ) {
            }
            else if ( arg.equals( "-sourcepath" ) ) {
            }
            else if (arg.equals("-XajdocDebug")) {
            } 
            else if (arg.equals("-use")) {
            } 
            else if (arg.equals("-splitindex")) {
            } 
            else if (arg.startsWith("-") || addNextAsOption) {
                }else if ( arg.equals( "-package" ) ) {
======= efe6cc7^:"ajdoc/src/org/aspectj/tools/ajdoc/Main.java"

            } 
            else { 
                if (FileUtil.hasSourceSuffix(arg)
                	|| arg.endsWith(".lst") 
                         filenames.addElement(arg);
                         filenames.addElement( currentWorkingDir + Config.DIR_SEP_CHAR + arg );

======= 044542c^:"tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java"

======= 044542c^:"weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java"

        		&& !thrownExceptions.isEmpty()) {

======= bc2f36f^:"tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java"

======= bc2f36f^:"tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java"


======= f7508cf^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"

                String configFileProxy = buildConfig.getOutputDir().getAbsolutePath() 
            		+ File.separator 
            		+ CROSSREFS_FILE_NAME; 
            	AsmManager.getDefault().writeStructureModel(configFileProxy);

======= d532892^:"tests/src/org/aspectj/systemtest/ajc153/JDTLikeHandleProviderTests.java"

======= d532892^:"weaver/src/org/aspectj/weaver/ShadowMunger.java"

======= d532892^:"weaver/src/org/aspectj/weaver/patterns/DeclareErrorOrWarning.java"

======= d532892^:"weaver/src/org/aspectj/weaver/patterns/DeclareErrorOrWarning.java"


======= 513564a^:"tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java"


======= 782ade2^:"tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java"

    /////////////////////////////////////////
======= 782ade2^:"weaver/src/org/aspectj/weaver/patterns/WildTypePattern.java"

======= 782ade2^:"weaver/src/org/aspectj/weaver/patterns/WildTypePattern.java"


======= 7b831ff^:"loadtime/src/org/aspectj/weaver/loadtime/definition/DocumentParser.java"

            String typePattern = attributes.getValue(WITHIN_ATTRIBUTE);
            String typePattern = attributes.getValue(WITHIN_ATTRIBUTE);
            String typePattern = attributes.getValue(WITHIN_ATTRIBUTE);
======= 7b831ff^:"loadtime/src/org/aspectj/weaver/loadtime/definition/DocumentParser.java"

            String typePattern = attributes.getValue(WITHIN_ATTRIBUTE);
            String typePattern = attributes.getValue(WITHIN_ATTRIBUTE);
======= 7b831ff^:"loadtime/src/org/aspectj/weaver/loadtime/definition/DocumentParser.java"

======= 7b831ff^:"loadtime/src/org/aspectj/weaver/loadtime/definition/DocumentParser.java"

======= 7b831ff^:"loadtime/src/org/aspectj/weaver/loadtime/definition/DocumentParser.java"

======= 7b831ff^:"loadtime/src/org/aspectj/weaver/loadtime/definition/DocumentParser.java"

======= 7b831ff^:"loadtime/src/org/aspectj/weaver/loadtime/definition/DocumentParser.java"

======= 7b831ff^:"loadtime/src/org/aspectj/weaver/loadtime/definition/DocumentParser.java"

======= 7b831ff^:"loadtime/src/org/aspectj/weaver/loadtime/definition/DocumentParser.java"

======= 7b831ff^:"loadtime/src/org/aspectj/weaver/loadtime/definition/DocumentParser.java"

======= 7b831ff^:"loadtime/src/org/aspectj/weaver/loadtime/definition/DocumentParser.java"

======= 7b831ff^:"tests/src/org/aspectj/systemtest/ajc150/ltw/LTWTests.java"


======= cd9fd11^:"tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java"

======= cd9fd11^:"weaver/src/org/aspectj/weaver/CrosscuttingMembers.java"

======= cd9fd11^:"weaver/src/org/aspectj/weaver/CrosscuttingMembers.java"

======= cd9fd11^:"weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java"


======= ea4ff8a^:"tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java"

======= ea4ff8a^:"weaver/src/org/aspectj/weaver/ResolvedMemberImpl.java"

======= ea4ff8a^:"weaver/src/org/aspectj/weaver/ResolvedMemberImpl.java"


======= fc39df1^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmHierarchyBuilder.java"

======= fc39df1^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmHierarchyBuilder.java"

======= fc39df1^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmHierarchyBuilder.java"

======= fc39df1^:"tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java"

======= fc39df1^:"tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java"

  /////////////////////////////////////////

======= e56a69a^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseSourceType.java"

======= e56a69a^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseSourceType.java"

======= e56a69a^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseSourceType.java"

======= e56a69a^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseSourceType.java"

======= e56a69a^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseSourceType.java"

======= e56a69a^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseSourceType.java"

======= e56a69a^:"tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java"


======= 70ae0f8^:"tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java"

======= 70ae0f8^:"weaver/src/org/aspectj/weaver/ReferenceType.java"


======= 090de7e^:"runtime/src/org/aspectj/runtime/reflect/ConstructorSignatureImpl.java"

======= 090de7e^:"runtime/src/org/aspectj/runtime/reflect/FieldSignatureImpl.java"

======= 090de7e^:"runtime/src/org/aspectj/runtime/reflect/InitializerSignatureImpl.java"

======= 090de7e^:"runtime/src/org/aspectj/runtime/reflect/InitializerSignatureImpl.java"

======= 090de7e^:"runtime/src/org/aspectj/runtime/reflect/InitializerSignatureImpl.java"

======= 090de7e^:"runtime/src/org/aspectj/runtime/reflect/InitializerSignatureImpl.java"

======= 090de7e^:"runtime/src/org/aspectj/runtime/reflect/InitializerSignatureImpl.java"

======= 090de7e^:"tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java"


======= 14e8b7d^:"loadtime/src/org/aspectj/weaver/loadtime/DefaultWeavingContext.java"

    	return ((loader!=null)?loader.getClass().getName()+"@"+Integer.toHexString(loader.hashCode()):"null");
======= 14e8b7d^:"weaver/src/org/aspectj/weaver/tools/AbstractTrace.java"


======= 6be7097^:"loadtime/src/org/aspectj/weaver/loadtime/DefaultWeavingContext.java"

    	return ((loader!=null)?loader.getClass().getName()+"@"+loader.hashCode():"null");
======= 6be7097^:"weaver/src/org/aspectj/weaver/tools/AbstractTrace.java"

======= 6be7097^:"weaver/src/org/aspectj/weaver/tools/AbstractTrace.java"

======= 6be7097^:"weaver/testsrc/org/aspectj/weaver/AbstractTraceTest.java"

======= 6be7097^:"weaver5/java5-src/org/aspectj/weaver/tools/Jdk14Trace.java"

======= 6be7097^:"weaver5/java5-src/org/aspectj/weaver/tools/Jdk14Trace.java"

======= 6be7097^:"weaver5/java5-src/org/aspectj/weaver/tools/Jdk14Trace.java"


======= 40cf610^:"ajde/src/org/aspectj/ajde/ui/swing/OptionsFrame.java"

======= 40cf610^:"bridge/src/org/aspectj/bridge/Version.java"

    public static final long time;
    // if not DEVELOPMENT version, read time text using format used to set time 
    static {
        long foundTime = NOTIME;
        time = foundTime;
======= 40cf610^:"bridge/testsrc/org/aspectj/bridge/VersionTest.java"

        Date date = new Date(Version.time);
======= 40cf610^:"weaver/src/org/aspectj/weaver/AjAttribute.java"


======= 04fa1dc^:"loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java"

======= 04fa1dc^:"loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java"

======= 04fa1dc^:"loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java"

        if (namespace == null) {
======= 04fa1dc^:"loadtime/src/org/aspectj/weaver/loadtime/WeavingURLClassLoader.java"

======= 04fa1dc^:"loadtime/src/org/aspectj/weaver/loadtime/WeavingURLClassLoader.java"

======= 04fa1dc^:"loadtime/src/org/aspectj/weaver/loadtime/WeavingURLClassLoader.java"

======= 04fa1dc^:"loadtime/src/org/aspectj/weaver/loadtime/WeavingURLClassLoader.java"

======= 04fa1dc^:"loadtime/src/org/aspectj/weaver/loadtime/WeavingURLClassLoader.java"

======= 04fa1dc^:"loadtime/src/org/aspectj/weaver/loadtime/WeavingURLClassLoader.java"

======= 04fa1dc^:"loadtime/src/org/aspectj/weaver/loadtime/WeavingURLClassLoader.java"

            <line text="warning register definition failed"/>
            <line text="warning register definition failed"/>
======= 04fa1dc^:"tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java"

======= 04fa1dc^:"weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java"

======= 04fa1dc^:"weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java"

======= 04fa1dc^:"weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java"

======= 04fa1dc^:"weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java"

======= 04fa1dc^:"weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java"


======= 8549d86^:"loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java"

======= 8549d86^:"loadtime/src/org/aspectj/weaver/loadtime/DefaultMessageHandler.java"

======= 8549d86^:"loadtime/src/org/aspectj/weaver/loadtime/DefaultMessageHandler.java"

======= 8549d86^:"loadtime/src/org/aspectj/weaver/loadtime/Options.java"

======= 8549d86^:"loadtime/src/org/aspectj/weaver/loadtime/Options.java"

======= 8549d86^:"loadtime/src/org/aspectj/weaver/loadtime/Options.java"

======= 8549d86^:"loadtime/src/org/aspectj/weaver/loadtime/Options.java"

    <target name="javac.ltw" depends="compile:javac, ltw"/>
    <target name="ltw.oldAspectsDeclared">
======= 8549d86^:"tests/java5/ataspectj/ataspectj/TestHelper.java"

        if (message.getKind().isSameOrLessThan(IMessage.INFO)) {
            ;
        } else {
    <weaver options="-XlazyTjp -verbose">
    <weaver options="-verbose"/>
    <weaver options="-showWeaveInfo -verbose"/>
    <weaver options="-verbose -showWeaveInfo"/>
    <weaver options="-verbose -showWeaveInfo -Xlint:warning"/>
    <weaver options="-verbose -showWeaveInfo -Xlintfile:Xlint-nomatch.properties"/>
        <ant file="ajc-ant.xml" target="javac.ltw" verbose="true"/>
        		<line text="info not weaving 'com.foo.bar.Test$$EnhancerByCGLIB$$12345'"/>
        		<line text="info weaving 'com.foo.bar.Test'"/>
        <ant file="ajc-ant.xml" target="ltw.oldAspectsDeclared" verbose="true"/>
            options="-showWeaveInfo"
            options="-showWeaveInfo"
                <line text="info generating class 'ConcreteAspect'"/>
                <line text="info weaving 'Main'"/>
          <line text="info weaving"/>
          <line text="info not weaving"/>
======= 8549d86^:"weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java"

======= 8549d86^:"weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java"

======= 8549d86^:"weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java"


======= 945a257^:"tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java"

======= 945a257^:"tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java"

======= 945a257^:"weaver/src/org/aspectj/weaver/bcel/BcelPerClauseAspectAdder.java"

            tryStart, handler, handler, new ObjectType("java.lang.Throwable"), false
======= 945a257^:"weaver/src/org/aspectj/weaver/patterns/PerSingleton.java"

            inAspect.crosscuttingMembers.addLateTypeMunger(
                    inAspect.getWorld().makePerClauseAspect(inAspect, getKind())
            );

======= 59123b0^:"tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java"

======= 59123b0^:"weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java"


======= 82e3e13^:"weaver/src/org/aspectj/weaver/reflect/ReflectionWorld.java"

======= 82e3e13^:"weaver/testsrc/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegateTest.java"

======= 82e3e13^:"weaver/testsrc/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegateTest.java"

======= 82e3e13^:"weaver5/java5-testsrc/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegateTest.java"

======= 82e3e13^:"weaver5/java5-testsrc/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegateTest.java"


======= 07c2189^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java"

======= 07c2189^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java"

======= 07c2189^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java"

======= 07c2189^:"tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java"


======= 039be68^:"loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java"

======= 039be68^:"loadtime/src/org/aspectj/weaver/loadtime/Options.java"

======= 039be68^:"loadtime/src/org/aspectj/weaver/loadtime/Options.java"

======= 039be68^:"loadtime/src/org/aspectj/weaver/loadtime/Options.java"

        boolean java5;
======= 039be68^:"loadtime/src/org/aspectj/weaver/loadtime/Options.java"

======= 039be68^:"loadtime/src/org/aspectj/weaver/loadtime/Options.java"

======= 039be68^:"loadtime/src/org/aspectj/weaver/loadtime/Options.java"

======= 039be68^:"tests/src/org/aspectj/systemtest/ajc150/ltw/LTWTests.java"


======= a38edd3^:"bridge/src/org/aspectj/bridge/MessageUtil.java"


======= 387c3ac^:"bcel-builder/src/org/aspectj/apache/bcel/util/ClassLoaderRepository.java"

======= 387c3ac^:"bcel-builder/src/org/aspectj/apache/bcel/util/ClassLoaderRepository.java"

 * @version $Id: ClassLoaderRepository.java,v 1.5 2006/03/10 13:29:05 aclement Exp $
  implements Repository
  private WeakHashMap loadedClasses =
    new WeakHashMap(); // CLASSNAME X JAVACLASS
    loadedClasses.put( clazz.getClassName(),
    clazz.setRepository( this );
    loadedClasses.remove(clazz.getClassName());
   * Find an already defined JavaClass.
    if ( loadedClasses.containsKey( className )) {
      return (JavaClass) loadedClasses.get( className );
    } else {
      return null;
  public JavaClass loadClass( String className ) 
    throws ClassNotFoundException
  {
    JavaClass RC = findClass( className );
    if (RC != null) { return RC; }
      InputStream is = 
      if(is == null) {
      }
      ClassParser parser = new ClassParser( is, className );
      RC = parser.parse();
      storeClass( RC );
      return RC;
  /** Clear all entries from cache.
   */
    loadedClasses.clear();
======= 387c3ac^:"bcel-builder/testsrc/org/aspectj/apache/bcel/classfile/tests/AllTests.java"

======= 387c3ac^:"bcel-builder/testsrc/org/aspectj/apache/bcel/classfile/tests/AllTests.java"


======= f239f2a^:"testing/newsrc/org/aspectj/testing/AntSpec.java"

            + File.pathSeparator + ".." + File.separator + "lib/bcel/bcel.jar";
======= f239f2a^:"testing/newsrc/org/aspectj/testing/AntSpec.java"

======= f239f2a^:"testing/newsrc/org/aspectj/testing/AntSpec.java"

======= f239f2a^:"testing/newsrc/org/aspectj/testing/AntSpec.java"

======= f239f2a^:"tests/src/org/aspectj/systemtest/ajc150/ataspectj/AtAjLTWTests.java"

======= f239f2a^:"weaver/src/org/aspectj/weaver/World.java"

======= f239f2a^:"weaver/src/org/aspectj/weaver/World.java"

======= f239f2a^:"weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java"

======= f239f2a^:"weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java"

======= f239f2a^:"weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java"

     * @return true if should weave (but maybe we still need to munge it for @AspectJ aspectof support)
    private boolean shouldWeave (String name, byte[] bytes) {
        return b && accept(name, bytes);
======= f239f2a^:"weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java"

        // we reuse bytes[] here to do a fast lookup for @Aspect annotation

======= 908b405^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/EclipseAdapterUtils.java"


======= ff2377a^:"tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java"

======= ff2377a^:"weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java"

                            if (m.getMunger().getKind() == ResolvedTypeMunger.Method) {
======= ff2377a^:"weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java"

                            } else if (m.getMunger().getKind() == ResolvedTypeMunger.MethodDelegate) {

======= 7aa6cfe^:"build/testsrc/org/aspectj/build/BuildModuleTests.java"

            Arrays.asList(new String[]{"src", "testsrc", "java5-src", "aspectj-src"}));
======= 7aa6cfe^:"build/testsrc/org/aspectj/build/BuildModuleTests.java"


======= 9664058^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/AjPipeliningCompilerAdapter.java"

======= 9664058^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/AjPipeliningCompilerAdapter.java"

======= 9664058^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/AjPipeliningCompilerAdapter.java"

======= 9664058^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/AjPipeliningCompilerAdapter.java"

    		weaveQueuedEntries();
======= 9664058^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/AjPipeliningCompilerAdapter.java"

======= 9664058^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/AjPipeliningCompilerAdapter.java"

======= 9664058^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/AjPipeliningCompilerAdapter.java"

======= 9664058^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/AjPipeliningCompilerAdapter.java"

======= 9664058^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/AjPipeliningCompilerAdapter.java"

======= 9664058^:"tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java"


======= bebb364^:"loadtime5/java5-src/org/aspectj/weaver/loadtime/Agent.java"

======= bebb364^:"loadtime5/java5-src/org/aspectj/weaver/loadtime/Agent.java"

======= bebb364^:"loadtime5/java5-src/org/aspectj/weaver/loadtime/Agent.java"

======= bebb364^:"loadtime5/java5-src/org/aspectj/weaver/loadtime/Agent.java"

======= bebb364^:"tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java"

  

======= 68c36e3^:"tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java"

   public void testMissingLineNumbersInStacktraceBefore_pr145442() { runTest("missing line numbers in stacktrace before");}
   public void testMissingLineNumbersInStacktraceAfter_pr145442() { runTest("missing line numbers in stacktrace after");}
   public void testMissingLineNumbersInStacktraceAround_pr145442() { runTest("missing line numbers in stacktrace around");}

                    RETURN
                    RETURN
                    RETURN
======= e4ab0ae^:"weaver/src/org/aspectj/weaver/bcel/BcelShadow.java"

======= e4ab0ae^:"weaver/src/org/aspectj/weaver/bcel/BcelShadow.java"

======= e4ab0ae^:"weaver/src/org/aspectj/weaver/bcel/BcelShadow.java"

    	InstructionHandle lastReturnHandle = (InstructionHandle)returns.get(returns.size() - 1);
    	Instruction newReturnInstruction = Utility.copyInstruction(lastReturnHandle.getInstruction());
    	returnInstructions.append(newReturnInstruction);
    |               RETURN
    |               RETURN
    |               RETURN
    |               RETURN
    |               RETURN
    |               RETURN
    |               RETURN
    |               RETURN
    |               RETURN
    |               RETURN
    |               RETURN
    |               RETURN
    |               RETURN

======= 54f7bb4^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/EclipseSourceContext.java"


======= 397a19d^:"loadtime/src/org/aspectj/weaver/loadtime/Aj.java"

            WeavingAdaptor weavingAdaptor = WeaverContainer.getWeaver(loader, weavingContext);
            if (weavingAdaptor == null) {
        		if (trace.isTraceEnabled()) trace.exit("preProcess",bytes);
            	return bytes;
            }
            return weavingAdaptor.weaveClass(className, bytes);

======= 357bbe9^:"tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java"

======= 357bbe9^:"weaver/src/org/aspectj/weaver/ResolvedMemberImpl.java"

    	return (modifiers & Constants.ACC_BRIDGE)!=0;

======= 369de87^:"tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java"

  //public void testVisibilityProblem_pr149071()                 { runTest("visibility problem");}
  //public void testAdviceNotWovenAspectPath_pr147841() { runTest("advice not woven on aspectpath");}
======= 369de87^:"weaver/src/org/aspectj/weaver/UnresolvedType.java"


======= 82f217f^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectDeclaration.java"

======= 82f217f^:"tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java"

======= 82f217f^:"tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java"

  // work in progress
======= 82f217f^:"tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java"


======= f6834c7^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java"

            		if (level.equals("1.5")){
======= f6834c7^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java"

======= f6834c7^:"tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java"


======= 2f2f568^:"tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java"

======= 2f2f568^:"tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java"

  //public void testSuperITDExplosion_pr134425() { runTest("super ITDs");}
  //public void testMisbehavingDeclareAnnotation_pr135865() { runTest("misbehaving declare annotation");}
  //public void testMisbehavingDeclareAnnotation_pr135865_2() { runTest("misbehaving declare annotation - 2");}
======= 2f2f568^:"tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java"

======= 2f2f568^:"weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java"

======= 2f2f568^:"weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java"

======= 2f2f568^:"weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java"


======= 21e06a6^:"tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java"

======= 21e06a6^:"tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java"

======= 21e06a6^:"weaver/src/org/aspectj/weaver/NameMangler.java"


======= b59b036^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmElementFormatter.java"


======= 99d1c18^:"weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java"


======= 792d1df^:"tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java"

======= 792d1df^:"weaver/src/org/aspectj/weaver/bcel/BcelWorld.java"


======= c9f311a^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AdviceDeclaration.java"

======= c9f311a^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AdviceDeclaration.java"

======= c9f311a^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/DeclareDeclaration.java"

======= c9f311a^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/DeclareDeclaration.java"

======= c9f311a^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/PointcutDeclaration.java"

======= c9f311a^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java"

======= c9f311a^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java"

======= c9f311a^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java"

======= c9f311a^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java"

======= c9f311a^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java"

          <line text="public java.lang.String Test.ajc$interField$Declaration1$TestInterface$secondProperty has annotation:true"/>
          <line text="public java.lang.String Test.ajc$interField$Declaration2$TestInterface$secondProperty has annotation:true"/>
======= c9f311a^:"tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java"

======= c9f311a^:"weaver/src/org/aspectj/weaver/NameMangler.java"

======= c9f311a^:"weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java"

======= c9f311a^:"weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java"

======= c9f311a^:"weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java"

======= c9f311a^:"weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java"

======= c9f311a^:"weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java"

======= c9f311a^:"weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java"

======= c9f311a^:"weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java"

======= c9f311a^:"weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java"

    public void makeSynthetic() {
  private static final org.aspectj.lang.JoinPoint$EnclosingStaticPart ajc$tjp_0
  private static final org.aspectj.lang.JoinPoint$EnclosingStaticPart ajc$tjp_1
                    ALOAD_0     // HelloWorld this   (line 5)
  private static final org.aspectj.lang.JoinPoint$StaticPart ajc$tjp_0
  private static final org.aspectj.lang.JoinPoint$StaticPart ajc$tjp_1
  private static final org.aspectj.lang.JoinPoint$StaticPart ajc$tjp_2
  private static final org.aspectj.lang.JoinPoint$StaticPart ajc$tjp_3
                    ALOAD_0     // HelloWorld this   (line 5)
  private static final org.aspectj.lang.JoinPoint$StaticPart ajc$tjp_0
  private static final org.aspectj.lang.JoinPoint$StaticPart ajc$tjp_1
  private static final org.aspectj.lang.JoinPoint$StaticPart ajc$tjp_2
  private static final org.aspectj.lang.JoinPoint$StaticPart ajc$tjp_3
                    ALOAD_0     // HelloWorld this   (line 5)
  private static final org.aspectj.lang.JoinPoint$StaticPart ajc$tjp_0
  private static final org.aspectj.lang.JoinPoint$StaticPart ajc$tjp_1
  private static final org.aspectj.lang.JoinPoint$StaticPart ajc$tjp_2
  private static final org.aspectj.lang.JoinPoint$StaticPart ajc$tjp_3
                    ALOAD_0     // HelloWorld this   (line 5)
  private static final org.aspectj.lang.JoinPoint$StaticPart ajc$tjp_0
  private static final org.aspectj.lang.JoinPoint$StaticPart ajc$tjp_1
  private static final org.aspectj.lang.JoinPoint$StaticPart ajc$tjp_2
  private static final org.aspectj.lang.JoinPoint$StaticPart ajc$tjp_3
                    ALOAD_0     // HelloWorld this   (line 5)

                L0: GOTO L1   (line 33)
                L1: INVOKESTATIC Three.aspectOf ()LThree;
======= 426cbdc^:"tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java"

    
======= 426cbdc^:"weaver/src/org/aspectj/weaver/bcel/BcelShadow.java"

            retList = new InstructionList(ret);
======= 426cbdc^:"weaver/src/org/aspectj/weaver/bcel/BcelShadow.java"

======= 426cbdc^:"weaver/src/org/aspectj/weaver/bcel/BcelShadow.java"

======= 426cbdc^:"weaver/src/org/aspectj/weaver/bcel/BcelShadow.java"

======= 426cbdc^:"weaver/src/org/aspectj/weaver/bcel/Utility.java"

                    ALOAD_0     // FancyHelloWorld this   (line 7)
    | | | |         ALOAD_1     // java.io.PrintStream out   (line 11)
    | | |           ALOAD_1     // java.io.PrintStream out   (line 13)
    | | |           ALOAD_2     // java.lang.Exception e
    | |             ALOAD_1     // java.io.PrintStream out   (line 15)
    | |             ILOAD_0     // int x   (line 21)
    | |             ISTORE_0     // int x
    | |             ILOAD_0     // int x
                    ALOAD_0     // HelloWorld this   (line 5)
                    ALOAD_0     // FancyHelloWorld this   (line 7)
    | | |           ALOAD_1     // java.io.PrintStream out   (line 11)
    | |             ALOAD_1     // java.io.PrintStream out   (line 13)
    | |             ALOAD_2     // java.lang.Exception e
    |               ALOAD_1     // java.io.PrintStream out   (line 15)
    |               ILOAD_0     // int x   (line 21)
    |               ISTORE_0     // int x
    |               ILOAD_0     // int x
                    ALOAD_0     // HelloWorld this   (line 5)
                    ALOAD_0     // FancyHelloWorld this   (line 7)
    | | |           ALOAD_1     // java.io.PrintStream out   (line 11)
    | |             ALOAD_1     // java.io.PrintStream out   (line 13)
    | |             ALOAD_2     // java.lang.Exception e
    |               ALOAD_1     // java.io.PrintStream out   (line 15)
    |               ILOAD_0     // int x   (line 21)
    |               ISTORE_0     // int x
    |               ILOAD_0     // int x
                    ALOAD_0     // FancyHelloWorld this   (line 7)
    |               GOTO L0
    |           L0: INVOKESTATIC Aspect.ajc_afterReturning_constructor_execution ()V
    | | |           ALOAD_1     // java.io.PrintStream out   (line 11)
    | |             ALOAD_1     // java.io.PrintStream out   (line 13)
    | |             ALOAD_2     // java.lang.Exception e
    |               ALOAD_1     // java.io.PrintStream out   (line 15)
    |           L2: GOTO L3   (line 17)
    |           L3: INVOKESTATIC Aspect.ajc_afterReturning_method_execution ()V
    |               ILOAD_0     // int x   (line 21)
    |               ISTORE_0     // int x
    |               ILOAD_0     // int x
    |               GOTO L0
    |           L0: INVOKESTATIC Aspect.ajc_afterReturning_method_execution ()V
                    ALOAD_0     // HelloWorld this   (line 5)
    |               GOTO L0
    |           L0: INVOKESTATIC Aspect.ajc_afterReturning_constructor_execution ()V
    |               GOTO L0   (line 11)
    |           L0: INVOKESTATIC Aspect.ajc_afterReturning_method_execution ()V
                    ALOAD_0     // FancyHelloWorld this   (line 7)
    | | |           ALOAD_1     // java.io.PrintStream out   (line 11)
    | |             ALOAD_1     // java.io.PrintStream out   (line 13)
    | |             ALOAD_2     // java.lang.Exception e
    |               ALOAD_1     // java.io.PrintStream out   (line 15)
    |               ILOAD_0     // int x   (line 21)
    |               ISTORE_0     // int x
    |               ILOAD_0     // int x
                    ALOAD_0     // HelloWorld this   (line 5)
                    ALOAD_0     // FancyHelloWorld this   (line 7)
    | | |           ALOAD_1     // java.io.PrintStream out   (line 11)
    | |             ALOAD_1     // java.io.PrintStream out   (line 13)
    | |             ALOAD_2     // java.lang.Exception e
    |               ALOAD_1     // java.io.PrintStream out   (line 15)
    |           L2: GOTO L3   (line 17)
    |           L3: ALOAD 8
    |               ILOAD_0     // int x   (line 21)
    |               ISTORE_0     // int x
    |               ILOAD_0     // int x
                    ALOAD_0     // HelloWorld this   (line 5)
    |               GOTO L0   (line 11)
    |           L0: ALOAD_2
                    ALOAD_0     // HelloWorld this   (line 5)
                    ALOAD_0     // HelloWorld this   (line 5)
                    ALOAD_0     // FancyHelloWorld this   (line 7)
    | | | |         ALOAD_1     // java.io.PrintStream out   (line 11)
    | | |           ALOAD_1     // java.io.PrintStream out   (line 13)
    | | |           ALOAD_2     // java.lang.Exception e
    | |             ALOAD_1     // java.io.PrintStream out   (line 15)
    |               ILOAD_0     // int x   (line 21)
    |               ISTORE_0     // int x
    |               ILOAD_0     // int x
                    ALOAD_0     // HelloWorld this   (line 5)
                    ALOAD_0     // FancyHelloWorld this   (line 7)
    | |             ALOAD_1     // java.io.PrintStream out   (line 11)
    |               ALOAD_1     // java.io.PrintStream out   (line 13)
    |               ALOAD 7
                    ALOAD_1     // java.io.PrintStream out   (line 15)
                    ILOAD_0     // int x   (line 21)
                    ISTORE_0     // int x
                    ILOAD_0     // int x
                    ALOAD_0     // HelloWorld this   (line 5)
                    ALOAD_0     // FancyHelloWorld this   (line 7)
    | | |           ALOAD_1     // java.io.PrintStream out   (line 11)
    | |             ALOAD_1     // java.io.PrintStream out   (line 13)
    | |             ALOAD_2     // java.lang.Exception e
    |               ALOAD_1     // java.io.PrintStream out   (line 15)
    |               ILOAD_0     // int x   (line 21)
    |               ISTORE_0     // int x
    |               ILOAD_0     // int x
                    ALOAD_0     // HelloWorld this   (line 5)
                    ALOAD_0     // FancyHelloWorld this   (line 7)
    | | |           ALOAD_1     // java.io.PrintStream out   (line 11)
    | |             ALOAD_1     // java.io.PrintStream out   (line 13)
    | |             ALOAD_2     // java.lang.Exception e
    |               ALOAD_1     // java.io.PrintStream out   (line 15)
    |               ILOAD_0     // int x   (line 21)
    |               ISTORE_0     // int x
    |               ILOAD_0     // int x
                    ALOAD_0     // HelloWorld this   (line 5)
                    ALOAD_0     // DynamicHelloWorld this   (line 8)
                    ALOAD_1     // java.lang.UnsupportedOperationException t
    |               GOTO L0
    |           L0: DUP
    |               ALOAD 7
                    ALOAD_2     // java.util.List l   (line 21)
                    ALOAD_1     // java.lang.String s
                    ALOAD_2     // java.util.List l   (line 22)

======= 13dde4e^:"tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java"

======= 13dde4e^:"weaver/src/org/aspectj/weaver/World.java"

======= 13dde4e^:"weaver/src/org/aspectj/weaver/World.java"

======= 13dde4e^:"weaver/src/org/aspectj/weaver/World.java"

======= 13dde4e^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"

======= 13dde4e^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"

    // debug flag for bridge method creation
    
======= 13dde4e^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"

======= 13dde4e^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"

======= 13dde4e^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"

    	if (debug) System.err.println("  Checking for override of "+mname+" in "+typeToCheck);
======= 13dde4e^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"

======= 13dde4e^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"

======= 13dde4e^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"

======= 13dde4e^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"

======= 13dde4e^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"


======= 791f8a7^:"tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java"

======= 791f8a7^:"weaver/src/org/aspectj/weaver/TypeVariable.java"


======= 008efca^:"taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java"

======= 008efca^:"taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java"

======= 008efca^:"taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java"

======= 008efca^:"taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java"

            logVerbose("ajc " + Arrays.asList(args));
======= 008efca^:"taskdefs/testsrc/org/aspectj/tools/ant/taskdefs/AjcTaskTest.java"

======= 008efca^:"taskdefs/testsrc/org/aspectj/tools/ant/taskdefs/AjcTaskTest.java"

======= 008efca^:"taskdefs/testsrc/org/aspectj/tools/ant/taskdefs/AjcTaskTest.java"


======= 38cc0dd^:"asm/src/org/aspectj/asm/AsmManager.java"

======= 38cc0dd^:"asm/src/org/aspectj/asm/internal/AspectJElementHierarchy.java"

    // XXX shouldn't be aware of the delimiter

======= 75afb31^:"loadtime/src/org/aspectj/weaver/loadtime/Aj.java"

        } catch (Throwable t) {
======= 75afb31^:"loadtime/src/org/aspectj/weaver/loadtime/JRockitAgent.java"

 * Copyright (c) 2005 Contributors.
 * All rights reserved. 
 * This program and the accompanying materials are made available 
 * under the terms of the Eclipse Public License v1.0 
 * which accompanies this distribution and is available at 
 * http://eclipse.org/legal/epl-v10.html 
 *   Alexandre Vasseur         initial implementation (derivative from AspectWerkz)
 * JRockit (tested with 7SP4 and 8.1) preprocessor Adapter based on JMAPI <p/>JRockit has a low
 * level API for hooking ClassPreProcessor, allowing the use of online weaving at full speed.
 * Moreover, JRockit does not allow java.lang.ClassLoader overriding thru -Xbootclasspath/p option.
 * <p/>The ClassPreProcessor
 * implementation and all third party jars CAN reside in the standard classpath. <p/>The command
 * line will look like:
 * <code>"%JAVA_COMMAND%" -Xmanagement:class=org.aspectj.weaver.loadtime.JRockitAgent -cp ...</code>
 * Note: there can be some NoClassDefFoundError due to classpath limitation - as described in
 * http://edocs.bea.com/wls/docs81/adminguide/winservice.html <p/>In order to use the BEA JRockit
 * management server (for further connection of management console or runtime analyzer), the regular
 * option -Xmanagement will not have any effect prior to JRockit 8.1 SP2. Instead, use <code>-Dmanagement</code>.
 *
 * @author <a href="mailto:alex AT gnilux DOT com">Alexandre Vasseur</a>
    /**
     * Concrete preprocessor
     */
    private final static ClassPreProcessor s_preProcessor;
    private static boolean START_RMP_SERVER = false;
    static {
        START_RMP_SERVER = System.getProperties().containsKey("management");
        try {
            s_preProcessor = new Aj();
            s_preProcessor.initialize();
        } catch (Exception e) {
            throw new ExceptionInInitializerError("could not initialize JRockitAgent preprocessor due to: " + e.toString());
        }
    }
    /**
     * The JMAPI ClassPreProcessor must be self registrating
     */
    public JRockitAgent() {
        if (START_RMP_SERVER) {
            // the management server will be spawned in a new thread
            /*RmpSocketListener management = */new RmpSocketListener();
        }
        JVMFactory.getJVM().getClassLibrary().setClassPreProcessor(this);
    }
    /**
     * Weave a class
     *
     * @param caller   classloader
     * @param name     of the class to weave
     * @param bytecode original
     * @return bytecode weaved
     */
    public byte[] preProcess(ClassLoader caller, String name, byte[] bytecode) {
        if (caller == null || caller.getParent() == null) {
            return bytecode;
        } else {
            return s_preProcessor.preProcess(name, bytecode, caller);
        }
    }
======= 75afb31^:"loadtime/testsrc/LoadtimeModuleTests.java"

======= 75afb31^:"loadtime/testsrc/LoadtimeModuleTests.java"

======= 75afb31^:"loadtime/testsrc/LoadtimeModuleTests.java"

======= 75afb31^:"loadtime/testsrc/LoadtimeModuleTests.java"

======= 75afb31^:"loadtime/testsrc/LoadtimeModuleTests.java"


======= 3e0650d^:"weaver/testsrc/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegateTest.java"


======= f821ca3^:"runtime/src/org/aspectj/runtime/reflect/SignatureImpl.java"

          String[] cachedArray = array();
          if (cachedArray == null) {
 		     return null;
 		  }
 		  return cachedArray[cacheOffset];
======= f821ca3^:"runtime/testsrc/org/aspectj/runtime/reflect/JoinPointImplTest.java"

 * TODO To change the template for this generated type comment go to
 * Window - Preferences - Java - Code Style - Code Templates
======= f821ca3^:"runtime/testsrc/org/aspectj/runtime/reflect/SignatureTest.java"

======= f821ca3^:"runtime/testsrc/org/aspectj/runtime/reflect/SignatureTest.java"


======= 319a0d1^:"ajde/testsrc/org/aspectj/ajde/NullIdeProperties.java"

======= 319a0d1^:"ajde/testsrc/org/aspectj/ajde/OutxmlTest.java"

======= 319a0d1^:"ajde/testsrc/org/aspectj/ajde/OutxmlTest.java"

======= 319a0d1^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"

======= 319a0d1^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"

======= 319a0d1^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"


======= 4513e92^:"loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java"

        //bcelWorld.setResolutionLoader(loader.getParent());//(ClassLoader)null);//
        
        // after adding aspects
        weaver.prepareForWeave();
======= 4513e92^:"loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java"

======= 4513e92^:"loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java"

    <aspects/>
                files="ataspectj/ltwlog/MessageHolder.java,ataspectj/ltwreweavable/MainReweavableLogging.java,ataspectj/ltwreweavable/AspectReweavableLogging.java,ataspectj/ltwreweavable/Advisable.java"
======= 4513e92^:"tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java"

======= 4513e92^:"tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java"


======= 97cd71a^:"weaver/src/org/aspectj/weaver/tools/PointcutParser.java"

======= 97cd71a^:"weaver/src/org/aspectj/weaver/tools/PointcutParser.java"

======= 97cd71a^:"weaver5/java5-src/org/aspectj/weaver/reflect/Java15ReflectionBasedReferenceTypeDelegate.java"

======= 97cd71a^:"weaver5/java5-testsrc/org/aspectj/weaver/tools/Java15PointcutExpressionTest.java"

======= 97cd71a^:"weaver5/java5-testsrc/org/aspectj/weaver/tools/Java15PointcutExpressionTest.java"

======= 97cd71a^:"weaver5/java5-testsrc/org/aspectj/weaver/tools/Java15PointcutExpressionTest.java"


======= 26a8a86^:"ajdoc/testsrc/org/aspectj/tools/ajdoc/CoverageTestCase.java"

======= 26a8a86^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmElementFormatter.java"

======= 26a8a86^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmElementFormatter.java"

======= 26a8a86^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmHierarchyBuilder.java"

======= 26a8a86^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmHierarchyBuilder.java"

======= 26a8a86^:"tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java"

  			  IProgramElement.Kind.CONSTRUCTOR,"BankAccount(String,int)");
======= 26a8a86^:"tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java"

======= 26a8a86^:"tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java"

======= 26a8a86^:"weaver/src/org/aspectj/weaver/AsmRelationshipProvider.java"


======= 69e24e9^:"loadtime/src/org/aspectj/weaver/loadtime/ConcreteAspectCodeGen.java"

======= 69e24e9^:"loadtime/src/org/aspectj/weaver/loadtime/ConcreteAspectCodeGen.java"

        Iterator methods = m_parent.getMethods();
        while (methods.hasNext()) {
            ResolvedMember method = (ResolvedMember) methods.next();
            if (method.isAbstract()) {
                if ("()V".equals(method.getSignature())) {
                	String n = method.getName();
                	if (n.startsWith("ajc$pointcut")) { // Allow for the abstract pointcut being from a code style aspect compiled with -1.5 (see test for 128744)
                		n = n.substring(14);
                		n = n.substring(0,n.indexOf("$"));
                		elligibleAbstractions.add(n);
                	} else {
                		// Only interested in abstract methods that take no parameters and are marked @Pointcut
                		if (hasPointcutAnnotation(method))
                			elligibleAbstractions.add(method.getName());
                	}
                } else {
                    reportError("Abstract method '" + method.getName() + "' cannot be concretized as a pointcut (illegal signature, must have no arguments, must return void): " + stringify());
                    return false;
                }
        }
======= 69e24e9^:"loadtime/src/org/aspectj/weaver/loadtime/ConcreteAspectCodeGen.java"

    /**
======= 69e24e9^:"loadtime/src/org/aspectj/weaver/loadtime/ConcreteAspectCodeGen.java"

======= 69e24e9^:"loadtime/src/org/aspectj/weaver/loadtime/ConcreteAspectCodeGen.java"

======= 69e24e9^:"loadtime/src/org/aspectj/weaver/loadtime/ConcreteAspectCodeGen.java"

======= 69e24e9^:"loadtime/src/org/aspectj/weaver/loadtime/ConcreteAspectCodeGen.java"

======= 69e24e9^:"loadtime/src/org/aspectj/weaver/loadtime/ConcreteAspectCodeGen.java"

======= 69e24e9^:"loadtime/src/org/aspectj/weaver/loadtime/ConcreteAspectCodeGen.java"

======= 69e24e9^:"loadtime/src/org/aspectj/weaver/loadtime/ConcreteAspectCodeGen.java"

======= 69e24e9^:"loadtime/src/org/aspectj/weaver/loadtime/ConcreteAspectCodeGen.java"

======= 69e24e9^:"loadtime/src/org/aspectj/weaver/loadtime/ConcreteAspectCodeGen.java"

======= 69e24e9^:"loadtime/src/org/aspectj/weaver/loadtime/ConcreteAspectCodeGen.java"

======= 69e24e9^:"tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java"


  boolean readOnly() default false;
 pointcut methodInTxType(Tx tx) : 
   execution(* *(..)) && @this(tx) && if(tx.readOnly());
 pointcut txMethod(Tx tx) :
   execution(* *(..)) && @annotation(tx) && if(tx.readOnly());
 pointcut transactionalOperation() :
   methodInTxType(Tx) || txMethod(Tx);
 before() : transactionalOperation() {
   // do something
 }
  public void foo() {}
  
  @Tx public void bar() {}
======= 6b2d9ae^:"tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java"

======= 6b2d9ae^:"weaver/src/org/aspectj/weaver/patterns/AnnotationPointcut.java"

======= 6b2d9ae^:"weaver/src/org/aspectj/weaver/patterns/AnnotationPointcut.java"


======= 5f6a6b1^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java"

======= 5f6a6b1^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java"

        baseTypeMungers.addAll(getWorld().getCrosscuttingMembersSet().getLateTypeMungers());
======= 5f6a6b1^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java"

======= 5f6a6b1^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java"

======= 5f6a6b1^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java"

======= 5f6a6b1^:"tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java"

======= 5f6a6b1^:"tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java"

======= 5f6a6b1^:"weaver/src/org/aspectj/weaver/ResolvedType.java"

                if (munger.getMunger().getKind() == ResolvedTypeMunger.Parent) {

  pointcut mypc() : SomeOtherType.pc();
======= b166a7e^:"tests/src/org/aspectj/systemtest/ajc150/GenericITDsDesign.java"

======= b166a7e^:"tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java"

      <compile files="PerThisWithReference.aj,SomeOtherType.aj" options="-1.5">
======= b166a7e^:"weaver/src/org/aspectj/weaver/CrosscuttingMembers.java"

======= b166a7e^:"weaver/src/org/aspectj/weaver/CrosscuttingMembers.java"

======= b166a7e^:"weaver/src/org/aspectj/weaver/CrosscuttingMembers.java"

======= b166a7e^:"weaver/src/org/aspectj/weaver/CrosscuttingMembersSet.java"

======= b166a7e^:"weaver/src/org/aspectj/weaver/CrosscuttingMembersSet.java"

======= b166a7e^:"weaver/src/org/aspectj/weaver/CrosscuttingMembersSet.java"

======= b166a7e^:"weaver/src/org/aspectj/weaver/ResolvedType.java"

======= b166a7e^:"weaver/testsrc/org/aspectj/weaver/bcel/NonstaticWeaveTestCase.java"

======= b166a7e^:"weaver/testsrc/org/aspectj/weaver/bcel/NonstaticWeaveTestCase.java"

======= b166a7e^:"weaver/testsrc/org/aspectj/weaver/bcel/PointcutResidueTestCase.java"

======= b166a7e^:"weaver/testsrc/org/aspectj/weaver/bcel/WeaveOrderTestCase.java"

======= b166a7e^:"weaver/testsrc/org/aspectj/weaver/bcel/WeaveOrderTestCase.java"


======= fc7db25^:"tests/java5/ataspectj/ataspectj/ltwreweavable/MainReweavableLogging.java"

        String ERROR_STRING = "error aspect 'ataspectj.ltwreweavable.AspectReweavableLogging' woven into 'ataspectj.ltwreweavable.MainReweavableLogging' must be declared in an aop.xml file.";

======= 9ffc63b^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/ValidateAtAspectJAnnotationsVisitor.java"

======= 9ffc63b^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/ValidateAtAspectJAnnotationsVisitor.java"

======= 9ffc63b^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/ValidateAtAspectJAnnotationsVisitor.java"

======= 9ffc63b^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/ValidateAtAspectJAnnotationsVisitor.java"

======= 9ffc63b^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/ValidateAtAspectJAnnotationsVisitor.java"

======= 9ffc63b^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/ValidateAtAspectJAnnotationsVisitor.java"

======= 9ffc63b^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/ValidateAtAspectJAnnotationsVisitor.java"

======= 9ffc63b^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/ValidateAtAspectJAnnotationsVisitor.java"

======= 9ffc63b^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/ValidateAtAspectJAnnotationsVisitor.java"

======= 9ffc63b^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/ValidateAtAspectJAnnotationsVisitor.java"

======= 9ffc63b^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/ValidateAtAspectJAnnotationsVisitor.java"

======= 9ffc63b^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/ValidateAtAspectJAnnotationsVisitor.java"

======= 9ffc63b^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/ValidateAtAspectJAnnotationsVisitor.java"

======= 9ffc63b^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/ValidateAtAspectJAnnotationsVisitor.java"

======= 9ffc63b^:"tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java"

======= 9ffc63b^:"weaver/src/org/aspectj/weaver/bcel/AtAjAttributes.java"

======= 9ffc63b^:"weaver/src/org/aspectj/weaver/bcel/AtAjAttributes.java"


======= 3fa4d24^:"tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java"

======= 3fa4d24^:"weaver/src/org/aspectj/weaver/Lint.java"

======= 3fa4d24^:"weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java"

======= 3fa4d24^:"weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java"

======= 3fa4d24^:"weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java"


======= 3ca976f^:"tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java"

======= 3ca976f^:"weaver/src/org/aspectj/weaver/bcel/BcelShadow.java"

    	
    	if (getKind() == Shadow.StaticInitialization) {
======= 3ca976f^:"weaver/src/org/aspectj/weaver/bcel/BcelShadow.java"

    		annotations = getAnnotations(foundMember, relevantMember,relevantType);

======= 5d2b5b8^:"bcel-builder/src/org/aspectj/apache/bcel/generic/InstructionList.java"

 * @version $Id: InstructionList.java,v 1.3 2006/02/14 13:32:07 aclement Exp $
======= 5d2b5b8^:"bcel-builder/src/org/aspectj/apache/bcel/generic/InstructionList.java"

    return b.toByteArray();
======= 5d2b5b8^:"bcel-builder/src/org/aspectj/apache/bcel/generic/InstructionList.java"

======= 5d2b5b8^:"tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java"


======= b954b26^:"weaver/src/org/aspectj/weaver/tools/PointcutParser.java"

    private PointcutParser() {
======= b954b26^:"weaver/src/org/aspectj/weaver/tools/PointcutParser.java"

    public void setWorld(ReflectionWorld aWorld) {
======= b954b26^:"weaver/src/org/aspectj/weaver/tools/PointcutParser.java"

    private void setClassLoader(ClassLoader aLoader) {
======= b954b26^:"weaver/src/org/aspectj/weaver/tools/PointcutParser.java"

        	 PatternParser parser = new PatternParser(expression);
        	 parser.setPointcutDesignatorHandlers(pointcutDesignators, world);
             Pointcut pc = parser.parsePointcut();
             validateAgainstSupportedPrimitives(pc,expression);
             IScope resolutionScope = buildResolutionScope((inScope == null ? Object.class : inScope),formalParameters);
             pc = pc.resolve(resolutionScope);
             ResolvedType declaringTypeForResolution = null;
             if (inScope != null) {
            	 declaringTypeForResolution = getWorld().resolve(inScope.getName());
             } else {
            	 declaringTypeForResolution = ResolvedType.OBJECT.resolve(getWorld());
             }
             IntMap arity = new IntMap(formalParameters.length);
             for (int i = 0; i < formalParameters.length; i++) {
            	 arity.put(i, i);
             }             
             pc = pc.concretize(declaringTypeForResolution, declaringTypeForResolution, arity);
======= b954b26^:"weaver/src/org/aspectj/weaver/tools/PointcutParser.java"

======= b954b26^:"weaver/src/org/aspectj/weaver/tools/PointcutParser.java"

======= b954b26^:"weaver/src/org/aspectj/weaver/tools/PointcutParser.java"

======= b954b26^:"weaver5/java5-src/org/aspectj/weaver/reflect/Java15ReflectionBasedReferenceTypeDelegate.java"

======= b954b26^:"weaver5/java5-src/org/aspectj/weaver/reflect/Java15ReflectionBasedReferenceTypeDelegate.java"

======= b954b26^:"weaver5/java5-testsrc/org/aspectj/weaver/tools/Java15PointcutExpressionTest.java"

======= b954b26^:"weaver5/java5-testsrc/org/aspectj/weaver/tools/Java15PointcutExpressionTest.java"


======= 299c3a4^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectDeclaration.java"

======= 299c3a4^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectDeclaration.java"

======= 299c3a4^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java"

======= 299c3a4^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java"

======= 299c3a4^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java"

======= 299c3a4^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java"

======= 299c3a4^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java"

======= 299c3a4^:"tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java"


======= cb5dfe7^:"runtime/src/org/aspectj/runtime/reflect/SignatureImpl.java"

======= cb5dfe7^:"runtime/src/org/aspectj/runtime/reflect/SignatureImpl.java"

    SoftReference toStringCacheRef;
======= cb5dfe7^:"runtime/src/org/aspectj/runtime/reflect/SignatureImpl.java"

======= cb5dfe7^:"runtime/src/org/aspectj/runtime/reflect/SignatureImpl.java"


======= c5c18aa^:"tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java"


======= c667bcb^:"tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java"

======= c667bcb^:"weaver/src/org/aspectj/weaver/patterns/PerThisOrTargetPointcutVisitor.java"

            return node.getAnnotationTypePattern();
======= c667bcb^:"weaver/src/org/aspectj/weaver/patterns/PerThisOrTargetPointcutVisitor.java"

            return node.getAnnotationTypePattern();
            return node.getAnnotationTypePattern();

======= 99882cb^:"taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java"

                if (VALID_XOPTIONS.contains(token)) {

======= 1535ee7^:"tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java"

======= 1535ee7^:"weaver/src/org/aspectj/weaver/PerObjectInterfaceTypeMunger.java"

    	if (!(other instanceof PerObjectInterfaceTypeMunger)) return false;
    	return ((o.testPointcut == null) ? (testPointcut == null ) : testPointcut.equals(o.testPointcut))
    			&& ((o.lazyTestTypePattern == null) ? (lazyTestTypePattern == null ) : lazyTestTypePattern.equals(o.lazyTestTypePattern));

======= d1a252e^:"weaver/src/org/aspectj/weaver/bcel/ClassPathManager.java"

======= d1a252e^:"weaver/src/org/aspectj/weaver/bcel/ClassPathManager.java"

======= d1a252e^:"weaver/src/org/aspectj/weaver/bcel/ClassPathManager.java"

======= d1a252e^:"weaver/src/org/aspectj/weaver/bcel/ClassPathManager.java"

======= d1a252e^:"weaver/src/org/aspectj/weaver/bcel/ClassPathManager.java"

======= d1a252e^:"weaver/src/org/aspectj/weaver/bcel/ClassPathManager.java"

======= d1a252e^:"weaver/src/org/aspectj/weaver/bcel/ClassPathManager.java"


======= 1a6f695^:"tests/src/org/aspectj/systemtest/AllTests15.java"

======= 1a6f695^:"tests/src/org/aspectj/systemtest/AllTests15.java"

======= 1a6f695^:"tests/src/org/aspectj/systemtest/AllTests15.java"

======= 1a6f695^:"tests/src/org/aspectj/systemtest/AllTests15.java"

======= 1a6f695^:"tests/src/org/aspectj/systemtest/AllTests15.java"

======= 1a6f695^:"weaver/src/org/aspectj/weaver/bcel/BcelShadow.java"

======= 1a6f695^:"weaver/src/org/aspectj/weaver/bcel/BcelShadow.java"

        BcelObjectType ot = BcelWorld.getBcelObjectType((declaringType.isParameterizedType()?declaringType.getGenericType():declaringType)); 
        
======= 1a6f695^:"weaver/src/org/aspectj/weaver/bcel/BcelWorld.java"

    }       
======= 1a6f695^:"weaver/src/org/aspectj/weaver/bcel/BcelWorld.java"

======= 1a6f695^:"weaver/testsrc/org/aspectj/weaver/bcel/AsmDelegateTests.java"

======= 1a6f695^:"weaver/testsrc/org/aspectj/weaver/bcel/AsmDelegateTests.java"

    	BcelWorld slowWorld = new BcelWorld(BcweaverTests.TESTDATA_PATH+"/forAsmDelegateTesting/stuff.jar");slowWorld.setFastDelegateSupport(false);
======= 1a6f695^:"weaver/testsrc/org/aspectj/weaver/bcel/AsmDelegateTests.java"

        

======= 94d8b82^:"tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java"

======= 94d8b82^:"weaver/src/org/aspectj/weaver/CrosscuttingMembers.java"

======= 94d8b82^:"weaver/src/org/aspectj/weaver/CrosscuttingMembersSet.java"


======= 41f1f3a^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/ValidateAtAspectJAnnotationsVisitor.java"

======= 41f1f3a^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/ValidateAtAspectJAnnotationsVisitor.java"


======= fa2ed1b^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmHierarchyBuilder.java"


======= 91473b3^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmElementFormatter.java"

                if (true && methodDeclaration!=null && methodDeclaration.annotations != null) {

======= c9a60e5^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java"

======= c9a60e5^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java"

       <message kind="error" line="16" text="The method m4(String) is undefined for the type Base"/>
======= c9a60e5^:"tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java"

======= c9a60e5^:"weaver/src/org/aspectj/weaver/CrosscuttingMembersSet.java"

======= c9a60e5^:"weaver/src/org/aspectj/weaver/CrosscuttingMembersSet.java"

======= c9a60e5^:"weaver/src/org/aspectj/weaver/CrosscuttingMembersSet.java"

======= c9a60e5^:"weaver/src/org/aspectj/weaver/CrosscuttingMembersSet.java"

======= c9a60e5^:"weaver/src/org/aspectj/weaver/patterns/WildTypePattern.java"

======= c9a60e5^:"weaver/src/org/aspectj/weaver/patterns/WildTypePattern.java"


======= 2fb86fe^:"tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java"

======= 2fb86fe^:"weaver/src/org/aspectj/weaver/AnnotationX.java"

  			supportedTargets = new HashSet();
  			List values = atTargetAnnotation.getBcelAnnotation().getValues();
  		  	ElementNameValuePair envp = (ElementNameValuePair)values.get(0);
  		  	ArrayElementValue aev = (ArrayElementValue)envp.getValue();
  		  	ElementValue[] evs = aev.getElementValuesArray();
  		  	for (int i = 0; i < evs.length; i++) {
  				EnumElementValue ev = (EnumElementValue)evs[i];
  				supportedTargets.add(ev.getEnumValueString());
  			}

======= 9dca72e^:"ajde/testsrc/org/aspectj/ajde/AsmDeclarationsTest.java"

======= 9dca72e^:"ajde/testsrc/org/aspectj/ajde/AsmDeclarationsTest.java"

======= 9dca72e^:"ajde/testsrc/org/aspectj/ajde/AsmDeclarationsTest.java"

======= 9dca72e^:"ajde/testsrc/org/aspectj/ajde/AsmRelationshipsTest.java"

======= 9dca72e^:"ajdoc/testsrc/org/aspectj/tools/ajdoc/CoverageTestCase.java"

======= 9dca72e^:"asm/src/org/aspectj/asm/internal/ProgramElement.java"

======= 9dca72e^:"asm/src/org/aspectj/asm/internal/ProgramElement.java"

======= 9dca72e^:"tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java"

  	  assertEquals("foo(int, java.lang.Object)",pe.toLabelString());
  	  assertEquals("C.foo(int, java.lang.Object)",pe.toLinkLabelString());
  	  assertEquals("foo(int, java.lang.Object)",pe.toSignatureString());
  	  assertEquals("foo(int, Object)",pe.toLabelString(false));
  	  assertEquals("C.foo(int, Object)",pe.toLinkLabelString(false));
  	  assertEquals("foo(int, Object)",pe.toSignatureString(false));
======= 9dca72e^:"tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java"


======= e2703cf^:"tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java"

======= e2703cf^:"tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java"

======= e2703cf^:"weaver/src/org/aspectj/weaver/NewConstructorTypeMunger.java"

======= e2703cf^:"weaver/src/org/aspectj/weaver/NewFieldTypeMunger.java"

======= e2703cf^:"weaver/src/org/aspectj/weaver/NewMethodTypeMunger.java"


======= f2cd94f^:"tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java"

======= f2cd94f^:"weaver/src/org/aspectj/weaver/patterns/TypePattern.java"


======= b3cd01d^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"

======= b3cd01d^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"

======= b3cd01d^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"

======= b3cd01d^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"

======= b3cd01d^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java"

======= b3cd01d^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java"

======= b3cd01d^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java"

======= b3cd01d^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java"

======= b3cd01d^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java"

======= b3cd01d^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java"

======= b3cd01d^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java"

======= b3cd01d^:"tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java"

======= b3cd01d^:"tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java"

======= b3cd01d^:"tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java"


======= 6e6658a^:"bcel-builder/src/org/aspectj/apache/bcel/generic/ClassGen.java"

======= 6e6658a^:"bcel-builder/src/org/aspectj/apache/bcel/generic/ClassGen.java"

 * @version $Id: ClassGen.java,v 1.5 2005/03/10 12:15:04 aclement Exp $
======= 6e6658a^:"bcel-builder/src/org/aspectj/apache/bcel/generic/ClassGen.java"

======= 6e6658a^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java"

======= 6e6658a^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java"

======= 6e6658a^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java"

======= 6e6658a^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"

======= 6e6658a^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjCompilerOptions.java"

======= 6e6658a^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjCompilerOptions.java"

======= 6e6658a^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjCompilerOptions.java"

======= 6e6658a^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjCompilerOptions.java"

======= 6e6658a^:"tests/src/org/aspectj/systemtest/ajc151/AllTestsAspectJ151.java"

======= 6e6658a^:"tests/src/org/aspectj/systemtest/ajc151/AllTestsAspectJ151.java"

======= 6e6658a^:"tests/src/org/aspectj/systemtest/ajc151/AllTestsAspectJ151.java"

======= 6e6658a^:"weaver/src/org/aspectj/weaver/Lint.java"

======= 6e6658a^:"weaver/src/org/aspectj/weaver/World.java"

======= 6e6658a^:"weaver/src/org/aspectj/weaver/World.java"

======= 6e6658a^:"weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java"

======= 6e6658a^:"weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java"

======= 6e6658a^:"weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java"

======= 6e6658a^:"weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java"

======= 6e6658a^:"weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java"

    	if (tjpFields.size() == 0) return;
    	InstructionList il = initializeAllTjps();

======= b225911^:"ajde/testsrc/org/aspectj/ajde/BuildConfigurationTests.java"

        <term>-Xnoweave</term>
        <listitem><para>(Experimental) produce unwoven class files
        for input using -injars. (deprecated - .class files are by
        default reweavable and can be input using -inpath.)
            	noWeave,
                    (reweavable, noWeave, etc.).
======= b225911^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java"

        	} else if (arg.equals("-noweave") || arg.equals( "-XnoWeave")) {
======= b225911^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/core/AspectJCore.java"

======= b225911^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/AjCompilerAdapter.java"

======= b225911^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/AjCompilerAdapter.java"

======= b225911^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/AjCompilerAdapter.java"

======= b225911^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/AjCompilerAdapter.java"

======= b225911^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/AjCompilerAdapter.java"

======= b225911^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/AjCompilerAdapter.java"

======= b225911^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java"

        if (!isNoWeave() && global.isNoWeave()) {
            setNoWeave(true);
======= b225911^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java"

======= b225911^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"

======= b225911^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjCompilerOptions.java"

======= b225911^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjCompilerOptions.java"

======= b225911^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjCompilerOptions.java"

======= b225911^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjCompilerOptions.java"

======= b225911^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjCompilerOptions.java"

======= b225911^:"org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/BcweaverJarMaker.java"

======= b225911^:"org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/core/builder/AjCompilerOptionsTest.java"

======= b225911^:"org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/core/builder/AjCompilerOptionsTest.java"

======= b225911^:"org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/core/builder/AjCompilerOptionsTest.java"

======= b225911^:"org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/core/builder/AjCompilerOptionsTest.java"

======= b225911^:"org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/core/builder/AjCompilerOptionsTest.java"

======= b225911^:"taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java"

        // many now deprecated: reweavable*, noWeave, ...
            	"noWeave","hasMember",
======= b225911^:"taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java"

    public void setXNoweave(boolean noweave) {  
        cmd.addFlag("-XnoWeave", noweave);
======= b225911^:"taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java"

            } else if ("-Xnoweave".equals(flag)) {
                setXNoweave(true);
======= b225911^:"taskdefs/testsrc/org/aspectj/tools/ant/taskdefs/AjcTaskTest.java"

======= b225911^:"testing/src/org/aspectj/testing/harness/bridge/CompilerRun.java"

                        factory.create("XnoWeave"),
     -noweave \
======= b225911^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"

  public void testIllegalAccessErrorWithAroundAdviceNoWeaveLTW_pr119657() {
   <ajc-test dir="bugs150/pr119657" title="IllegalAccessError with around advice on interface method call using -XnoWeave and LTW">
     <compile files="accounts/recovery/Recovery.aj" options="-XnoWeave"/>
======= b225911^:"tests/src/org/aspectj/systemtest/ajc150/ataspectj/AtAjLTWTests.java"

======= b225911^:"tests/src/org/aspectj/systemtest/ajc150/ataspectj/AtAjLTWTests.java"

    public void testAjcLTWAroundInlineMungerTest_XnoWeave() {
        runTest("AjcLTW AroundInlineMungerTest -XnoWeave");
    <ajc-test dir="java5/ataspectj" title="AjcLTW PerClauseTest -XnoWeave">
                options="-1.5 -XnoWeave"/>
                options="-1.5 -XnoWeave"/>
    <ajc-test dir="java5/ataspectj" title="AjcLTW AroundInlineMungerTest -XnoWeave">
                options="-1.5 -XnoWeave"/>
    		options="-1.5 -XnoWeave"
    		options="-1.5 -XnoWeave"
    		options="-1.5 -XnoWeave"
    		options="-1.5 -XnoWeave"
            options="-1.5 -XnoWeave"
            options="-1.5 -Xdev:NoAtAspectJProcessing -XnoWeave"
            options="-1.5 -Xdev:NoAtAspectJProcessing -XnoWeave"
            options="-1.5 -XnoWeave"/>
            options="-1.5 -XnoWeave"
======= b225911^:"tests/src/org/aspectj/systemtest/inpath/InPathTests.java"

      title="The compiler crashes when using aspect libraries created without using -noweave">

======= a116142^:"weaver/src/org/aspectj/weaver/JoinPointSignature.java"

======= a116142^:"weaver/src/org/aspectj/weaver/Member.java"

======= a116142^:"weaver/src/org/aspectj/weaver/MemberImpl.java"

======= a116142^:"weaver/src/org/aspectj/weaver/MemberImpl.java"

======= a116142^:"weaver/src/org/aspectj/weaver/MemberImpl.java"

======= a116142^:"weaver/src/org/aspectj/weaver/MemberImpl.java"

    /* (non-Javadoc)

======= cafdecb^:"weaver/src/org/aspectj/weaver/ltw/LTWWorld.java"

 *   Adrian Colyer			Initial implementation
======= cafdecb^:"weaver/src/org/aspectj/weaver/ltw/LTWWorld.java"

 * Problems with classes that are loaded by delegates
 * of our classloader
 * 
======= cafdecb^:"weaver/src/org/aspectj/weaver/ltw/LTWWorld.java"

======= cafdecb^:"weaver/src/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegateFactory.java"

======= cafdecb^:"weaver/src/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegateFactory.java"

======= cafdecb^:"weaver/src/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegateFactory.java"

======= cafdecb^:"weaver/src/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegateFactory.java"

======= cafdecb^:"weaver/src/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegateFactory.java"

======= cafdecb^:"weaver/src/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegateFactory.java"

======= cafdecb^:"weaver/src/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegateFactory.java"

======= cafdecb^:"weaver/src/org/aspectj/weaver/reflect/ReflectionShadow.java"

======= cafdecb^:"weaver/src/org/aspectj/weaver/reflect/ReflectionWorld.java"

======= cafdecb^:"weaver/src/org/aspectj/weaver/reflect/ReflectionWorld.java"

======= cafdecb^:"weaver/src/org/aspectj/weaver/reflect/ReflectionWorld.java"

======= cafdecb^:"weaver/src/org/aspectj/weaver/reflect/ReflectionWorld.java"

======= cafdecb^:"weaver/src/org/aspectj/weaver/reflect/ReflectionWorld.java"

======= cafdecb^:"weaver/testsrc/org/aspectj/weaver/reflect/ReflectionWorldTest.java"


======= 3fa1bdd^:"tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java"

    </ajc-test>  
    
======= 3fa1bdd^:"weaver/src/org/aspectj/weaver/Advice.java"


======= 89d66dc^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/WeaverMessageHandler.java"

======= 89d66dc^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/WeaverMessageHandler.java"

======= 89d66dc^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/WeaverMessageHandler.java"

======= 89d66dc^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/WeaverMessageHandler.java"

======= 89d66dc^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/WeaverMessageHandler.java"

======= 89d66dc^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/WeaverMessageHandler.java"

======= 89d66dc^:"tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java"


======= ba42a09^:"tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java"

======= ba42a09^:"weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java"


======= 7a2087e^:"loadtime/src/org/aspectj/weaver/loadtime/ConcreteAspectCodeGen.java"

                    elligibleAbstractions.add(method.getName());
======= 7a2087e^:"loadtime/src/org/aspectj/weaver/loadtime/ConcreteAspectCodeGen.java"

======= 7a2087e^:"loadtime/src/org/aspectj/weaver/loadtime/ConcreteAspectCodeGen.java"

======= 7a2087e^:"loadtime/src/org/aspectj/weaver/loadtime/ConcreteAspectCodeGen.java"

======= 7a2087e^:"tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java"


======= f95d2c9^:"weaver/src/org/aspectj/weaver/patterns/PatternParser.java"


======= 1f1ace1^:"tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java"


======= e874581^:"tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java"

======= e874581^:"weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java"

            BranchInstruction ifNonNull = InstructionFactory.createBranchInstruction(Constants.IFNULL, null);
            InstructionHandle ifNonNullElse = body.append(InstructionConstants.ALOAD_0);
            body.append(InstructionConstants.ALOAD_0);

======= d4219e1^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/ValidateAtAspectJAnnotationsVisitor.java"

======= d4219e1^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/ValidateAtAspectJAnnotationsVisitor.java"

======= d4219e1^:"tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java"


======= 0b39aa5^:"tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java"

======= 0b39aa5^:"weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java"


======= f743fb2^:"tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java"

======= f743fb2^:"tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java"

======= f743fb2^:"weaver/src/org/aspectj/weaver/bcel/AtAjAttributes.java"

======= f743fb2^:"weaver/src/org/aspectj/weaver/bcel/AtAjAttributes.java"

                    deow.setLocation(struct.context, -1, -1);
======= f743fb2^:"weaver/src/org/aspectj/weaver/bcel/AtAjAttributes.java"

                    deow.setLocation(struct.context, -1, -1);
======= f743fb2^:"weaver/src/org/aspectj/weaver/bcel/AtAjAttributes.java"


======= d856e4f^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"


======= eec4990^:"org.aspectj.ajdt.core/src/org/aspectj/org/eclipse/jdt/core/dom/AjTypeDeclaration.java"

======= eec4990^:"org.aspectj.ajdt.core/src/org/aspectj/org/eclipse/jdt/core/dom/AjTypeDeclaration.java"

======= eec4990^:"org.aspectj.ajdt.core/src/org/aspectj/org/eclipse/jdt/core/dom/AjTypeDeclaration.java"

======= eec4990^:"org.aspectj.ajdt.core/src/org/aspectj/org/eclipse/jdt/core/dom/AjTypeDeclaration.java"

======= eec4990^:"org.aspectj.ajdt.core/src/org/aspectj/org/eclipse/jdt/core/dom/AspectDeclaration.java"

======= eec4990^:"org.aspectj.ajdt.core/src/org/aspectj/org/eclipse/jdt/core/dom/AspectDeclaration.java"

======= eec4990^:"org.aspectj.ajdt.core/testsrc/org/aspectj/tools/ajc/AjASTTest.java"

======= eec4990^:"org.aspectj.ajdt.core/testsrc/org/aspectj/tools/ajc/AjASTTest.java"

======= eec4990^:"org.aspectj.ajdt.core/testsrc/org/aspectj/tools/ajc/AjASTTest.java"

======= eec4990^:"org.aspectj.ajdt.core/testsrc/org/aspectj/tools/ajc/AjASTTest.java"


======= 4934132^:"weaver/src/org/aspectj/weaver/bcel/BcelShadow.java"

            	return lvt.getType();
======= 4934132^:"weaver/src/org/aspectj/weaver/bcel/BcelShadow.java"

              searchPtr.getInstruction());

======= 693945f^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AccessForInlineVisitor.java"

======= 693945f^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AccessForInlineVisitor.java"

======= 693945f^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AccessForInlineVisitor.java"

======= 693945f^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AccessForInlineVisitor.java"

======= 693945f^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AccessForInlineVisitor.java"

======= 693945f^:"tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java"


======= 551b446^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"

======= 551b446^:"tests/src/org/aspectj/systemtest/incremental/tools/AjdeInteractionTestbed.java"

======= 551b446^:"tests/src/org/aspectj/systemtest/incremental/tools/AjdeInteractionTestbed.java"

======= 551b446^:"tests/src/org/aspectj/systemtest/incremental/tools/AjdeInteractionTestbed.java"

======= 551b446^:"tests/src/org/aspectj/systemtest/incremental/tools/AjdeInteractionTestbed.java"

======= 551b446^:"tests/src/org/aspectj/systemtest/incremental/tools/AjdeInteractionTestbed.java"

======= 551b446^:"tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java"

======= 551b446^:"tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java"


======= 7e40a60^:"asm/src/org/aspectj/asm/IProgramElement.java"

======= 7e40a60^:"asm/src/org/aspectj/asm/IProgramElement.java"

======= 7e40a60^:"asm/src/org/aspectj/asm/internal/ProgramElement.java"

======= 7e40a60^:"asm/src/org/aspectj/asm/internal/ProgramElement.java"

======= 7e40a60^:"asm/src/org/aspectj/asm/internal/ProgramElement.java"

======= 7e40a60^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmElementFormatter.java"

======= 7e40a60^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmElementFormatter.java"

======= 7e40a60^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmElementFormatter.java"

======= 7e40a60^:"tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java"

======= 7e40a60^:"tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java"


======= efb20c5^:"weaver/src/org/aspectj/weaver/bcel/BcelWorld.java"


======= a4bd19d^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AccessForInlineVisitor.java"

======= a4bd19d^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AccessForInlineVisitor.java"

======= a4bd19d^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AccessForInlineVisitor.java"

======= a4bd19d^:"tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java"


======= d916002^:"tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java"


======= 28f8c69^:"tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java"

======= 28f8c69^:"weaver/src/org/aspectj/weaver/patterns/ReferencePointcut.java"

======= 28f8c69^:"weaver/src/org/aspectj/weaver/patterns/ReferencePointcut.java"


======= 01a8b2e^:"tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java"

======= 01a8b2e^:"weaver/src/org/aspectj/weaver/patterns/ExactTypePattern.java"

======= 01a8b2e^:"weaver/src/org/aspectj/weaver/patterns/TypePattern.java"

======= 01a8b2e^:"weaver/src/org/aspectj/weaver/patterns/TypePattern.java"


======= 8676df9^:"tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java"

======= 8676df9^:"weaver/src/org/aspectj/weaver/ReferenceType.java"

======= 8676df9^:"weaver/src/org/aspectj/weaver/ReferenceType.java"


======= 04067a6^:"weaver/src/org/aspectj/weaver/World.java"

======= 04067a6^:"weaver/src/org/aspectj/weaver/World.java"

======= 04067a6^:"weaver/src/org/aspectj/weaver/World.java"

    protected TypeMap typeMap = new TypeMap(); // Signature to ResolvedType
======= 04067a6^:"weaver/src/org/aspectj/weaver/World.java"

======= 04067a6^:"weaver/src/org/aspectj/weaver/World.java"

======= 04067a6^:"weaver/src/org/aspectj/weaver/World.java"

======= 04067a6^:"weaver/src/org/aspectj/weaver/bcel/BcelWorld.java"


======= ab2f89b^:"tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java"

======= ab2f89b^:"weaver/src/org/aspectj/weaver/CrosscuttingMembersSet.java"


======= f4c8bf9^:"ajdoc/src/org/aspectj/tools/ajdoc/Declaration.java"

 * Copyright (c) 1999-2001 Xerox Corporation, 
 *               2002 Palo Alto Research Center, Incorporated (PARC).
 * All rights reserved. 
 * This program and the accompanying materials are made available 
 * under the terms of the Common Public License v1.0 
 * which accompanies this distribution and is available at 
 * http://www.eclipse.org/legal/cpl-v10.html 
 *  
 * Contributors: 
 *     Xerox/PARC     initial implementation 
 *     Mik Kersten	  port to AspectJ 1.1+ code base
 * ******************************************************************/
 * @author Mik Kersten
 * @deprecated org.aspectj.asm.IProgramElement should be used instead
 */
    private int beginLine;
    private int endLine;
    private int beginColumn;
    private int endColumn;
    private String modifiers;
    private String fullSignature;
    private String signature;
    private String crosscutDesignator;
    private String packageName;
    private String kind;
    private String declaringType;
    private String filename;
    private String formalComment;
    private Declaration[] declarations;
    private Handle crosscutDeclarationHandle;
    private Handle[] pointedToByHandles;
    private Handle[] pointsToHandles;
    transient private Declaration crosscutDeclaration;
    transient private Declaration[] pointedToBy = null;
    transient private Declaration[] pointsTo = null;
    private Declaration parentDeclaration = null;
    public Declaration(int beginLine, int endLine, int beginColumn, int endColumn,
                       String modifiers, String signature, String fullSignature,
                       String crosscutDesignator,
                       String declaringType, String kind,
                       String filename, String formalComment,
                       String packageName,
    {
        this.beginLine = beginLine;
        this.endLine = endLine;
        this.beginColumn = beginColumn;
        this.endColumn = endColumn;
        this.modifiers = modifiers;
        this.signature = signature;
        this.fullSignature = fullSignature;
        this.crosscutDesignator = crosscutDesignator;
        this.declaringType = declaringType;
        this.kind = kind;
        this.filename = filename;
        this.formalComment = formalComment;
        this.packageName = packageName;
        this.pointedToByHandles = new Handle[0];
        this.pointsToHandles = new Handle[0];
        //???
        this.declarations = new Declaration[0];
        this.node = node;
    }
    public int getBeginLine() { return beginLine; }
    public int getEndLine() { return endLine; }
    public int getBeginColumn() { return beginColumn; }
    public int getEndColumn() { return endColumn; }
    public String getModifiers() { return modifiers; }
    public String getFullSignature() { return fullSignature; }
    public String getSignature() { return signature; }
    public String getPackageName() { return packageName; }
    public String getCrosscutDesignator() { return crosscutDesignator; }
    public Declaration getParentDeclaration() { return parentDeclaration; }
    public Declaration getCrosscutDeclaration() {
        if (crosscutDeclaration == null && crosscutDeclarationHandle != null) {
            crosscutDeclaration = crosscutDeclarationHandle.resolve();
        }
        return crosscutDeclaration;
    }
    public void setCrosscutDeclaration(Declaration _crosscutDeclaration) {
        crosscutDeclaration = _crosscutDeclaration;
    }
    public String getDeclaringType() { return declaringType; }
    public String getKind() {
        if (kind.startsWith("introduced-")) {
            return kind.substring(11);
        } else {
            return kind;
        }
    }
    public String getFilename() { return filename; }
    public String getFormalComment() { return formalComment; }
    public Declaration[] getDeclarations() {
        return declarations;
    }
    public void setDeclarations(Declaration[] decs) {
        declarations = decs;
        if (decs != null) {
            for (int i = 0; i < decs.length; i++) {
                decs[i].parentDeclaration = this;
            }
        }
    }
    public void setPointedToBy(Declaration[] decs) { pointedToBy = decs; }
    public void setPointsTo(Declaration[] decs) { pointsTo = decs; }
    public Declaration[] getPointedToBy() {
        if (pointedToBy == null) {
            pointedToBy = resolveHandles(pointedToByHandles);
        }
        return pointedToBy; //.elements();
    }
    public Declaration[] getPointsTo() {
        if (pointsTo == null) {
            pointsTo = resolveHandles(pointsToHandles);
        }
        return pointsTo; //.elements();
    }
    private Declaration[] filterTypes(Declaration[] a_decs) {
        List decs = new LinkedList(Arrays.asList(a_decs));
        for(Iterator i = decs.iterator(); i.hasNext(); ) {
            Declaration dec = (Declaration)i.next();
            if (!dec.isType()) i.remove();
        }
        return (Declaration[])decs.toArray(new Declaration[decs.size()]);
    }
    public Declaration[] getTargets() {
        Declaration[] pointsTo = getPointsTo();
        if (kind.equals("advice")) {
            return pointsTo;
        } else if (kind.equals("introduction")) {
            return filterTypes(pointsTo);
        } else {
            return new Declaration[0];
        }
    }
    // Handles are used to deal with dependencies between Declarations in different files
    private Handle getHandle() {
        return new Handle(filename, beginLine, beginColumn);
    }
    private Declaration[] resolveHandles(Handle[] handles) {
        Declaration[] declarations = new Declaration[handles.length];
        int missed = 0;
        for(int i=0; i<handles.length; i++) {
            //if (handles[i] == null) continue;
            declarations[i] = handles[i].resolve();
            if (declarations[i] == null) missed++;
        }
        if (missed > 0) {
            Declaration[] decs = new Declaration[declarations.length - missed];
            for (int i=0, j=0; i < declarations.length; i++) {
                if (declarations[i] != null) decs[j++] = declarations[i];
            }
            declarations = decs;
        }
        return declarations;
    }
    private Handle[] getHandles(Declaration[] declarations) {
        Handle[] handles = new Handle[declarations.length];
        for(int i=0; i<declarations.length; i++) {
            //if (declarations[i] == null) continue;
            handles[i] = declarations[i].getHandle();
        }
        return handles;
    }
    // Make sure that all decs are convertted to handles before serialization
    private void writeObject(ObjectOutputStream out) throws IOException {
        pointedToByHandles = getHandles(getPointedToBy());
        pointsToHandles = getHandles(getPointsTo());
        if (crosscutDeclaration != null) {
           crosscutDeclarationHandle = crosscutDeclaration.getHandle();
        }
        out.defaultWriteObject();
    }
    // support functions
    public Declaration[] getCrosscutDeclarations() {
        return getDeclarationsHelper("pointcut");
    }
    public Declaration[] getAdviceDeclarations() {
        return getDeclarationsHelper("advice");
    }
    public Declaration[] getIntroductionDeclarations() {
        return getDeclarationsHelper("introduction");
    }
    private Declaration[] getDeclarationsHelper(String kind) {
        Declaration[] decls  = getDeclarations();
        List result = new ArrayList();
        for ( int i = 0; i < decls.length; i++ ) {
            Declaration decl = decls[i];
            if ( decl.getKind().equals(kind) ) {
                result.add(decl);
            }
        }
        return (Declaration[])result.toArray(new Declaration[result.size()]);
    }
    public boolean isType() {
    }
    public boolean hasBody() {
        String kind = getKind();
        return kind.equals("class") || kind.endsWith("constructor") ||
            (kind.endsWith("method") && getModifiers().indexOf("abstract") == -1 &&
              getModifiers().indexOf("native") == -1);
    }  
    public boolean isIntroduced() {
        return kind.startsWith("introduced-");
    }
    public boolean hasSignature() {
        String kind = getKind();
        if ( kind.equals( "class" ) ||
             kind.equals( "interface" ) ||
             kind.equals( "initializer" ) ||
             kind.equals( "field" ) ||
             kind.equals( "constructor" ) ||
             kind.equals( "method" ) ) {
            return true;
        }
        else {
            return false;
        }
    }
    private static class Handle implements Serializable {
        public String filename;
        public int line, column;
        public Handle(String filename, int line, int column) {
            this.filename = filename;
            this.line = line;
            this.column = column;
        }
        public Declaration resolve() {
            SymbolManager manager = SymbolManager.getDefault();
            return manager.getDeclarationAtPoint(filename, line, column);
        }
    }
======= f4c8bf9^:"ajdoc/src/org/aspectj/tools/ajdoc/HtmlDecorator.java"

======= f4c8bf9^:"ajdoc/src/org/aspectj/tools/ajdoc/HtmlDecorator.java"

    static SymbolManager symbolManager = null;
                                           SymbolManager sm,
        symbolManager = sm;
            decorateHTMLFromDecls(symbolManager.getDeclarations(inputFiles[i].getCanonicalPath()),
                                  rootDir.getCanonicalPath() + Config.DIR_SEP_CHAR,
                                  docModifier,
                                  false);
    static void decorateHTMLFromDecls(Declaration[] decls, String base, String docModifier, boolean exceededNestingLevel) throws IOException {
                Declaration decl = decls[i];
                decorateHTMLFromDecl(decl, base, docModifier, exceededNestingLevel);
======= f4c8bf9^:"ajdoc/src/org/aspectj/tools/ajdoc/HtmlDecorator.java"

    static void decorateHTMLFromDecl(Declaration decl,
                                     String base,
                                     String docModifier,
                                     boolean exceededNestingLevel ) throws IOException {
        boolean nestedClass = false;
        if ( decl.isType() ) {
            boolean decorateFile = true;
            if (isAboveVisibility(decl.getNode())) {
                visibleFileList.add(decl.getSignature());
                String packageName = decl.getPackageName();
                String filename    = "";
                if ( packageName != null ) {
                   
                   int index1 = base.lastIndexOf(Config.DIR_SEP_CHAR);
                   int index2 = base.lastIndexOf(".");
                   String currFileClass = "";
                   if (index1 > -1 && index2 > 0 && index1 < index2) {
                      currFileClass = base.substring(index1+1, index2);
                   }
                   
                   // XXX only one level of nexting
                   if (currFileClass.equals(decl.getDeclaringType())) {
                   	  nestedClass = true;
                      packageName = packageName.replace( '.','/' );
                      String newBase = "";
                      if ( base.lastIndexOf(Config.DIR_SEP_CHAR) > 0 ) {
                         newBase = base.substring(0, base.lastIndexOf(Config.DIR_SEP_CHAR));
                      }
                      String signature = constructNestedTypeName(decl.getNode());
                     
                      filename = newBase + Config.DIR_SEP_CHAR + packageName +
                                 Config.DIR_SEP_CHAR + currFileClass + //"." +
                                 signature + ".html"; 
                   } else {
                       packageName = packageName.replace( '.','/' ); 
                       filename = base + packageName + Config.DIR_SEP_CHAR + decl.getSignature() + ".html";
                   }
                }
                else {
                    filename = base + decl.getSignature() + ".html";
                }
                if (!exceededNestingLevel) {
                    
                   decorateHTMLFile(new File(filename));
                   
                   decorateHTMLFromDecls(decl.getDeclarations(),
                                         base + decl.getSignature() + ".",
                                         docModifier,
                                         nestedClass);
                }
                else {
                   System.out.println("Warning: can not generate documentation for nested " +
                                      "inner class: " + decl.getSignature() );
                }
            }
        }
    }
======= f4c8bf9^:"ajdoc/src/org/aspectj/tools/ajdoc/HtmlDecorator.java"

======= f4c8bf9^:"ajdoc/src/org/aspectj/tools/ajdoc/HtmlDecorator.java"

    
======= f4c8bf9^:"ajdoc/src/org/aspectj/tools/ajdoc/HtmlDecorator.java"

======= f4c8bf9^:"ajdoc/src/org/aspectj/tools/ajdoc/HtmlDecorator.java"

    	//        Declaration[] decls = decl.getDeclarations();
======= f4c8bf9^:"ajdoc/src/org/aspectj/tools/ajdoc/HtmlDecorator.java"

        //String hrefLink = decl.toLabelString().replace("\"", "quot;"); // !!!
======= f4c8bf9^:"ajdoc/src/org/aspectj/tools/ajdoc/HtmlDecorator.java"

======= f4c8bf9^:"ajdoc/src/org/aspectj/tools/ajdoc/Main.java"

    static SymbolManager symbolManager = null;
======= f4c8bf9^:"ajdoc/src/org/aspectj/tools/ajdoc/Main.java"

        symbolManager = null;
======= f4c8bf9^:"ajdoc/src/org/aspectj/tools/ajdoc/Main.java"

        symbolManager = SymbolManager.getDefault();
======= f4c8bf9^:"ajdoc/src/org/aspectj/tools/ajdoc/Main.java"

            StubFileGenerator.doFiles(declIDTable, symbolManager, inputFiles, signatureFiles);
======= f4c8bf9^:"ajdoc/src/org/aspectj/tools/ajdoc/Main.java"

                                              symbolManager,
======= f4c8bf9^:"ajdoc/src/org/aspectj/tools/ajdoc/Main.java"

            	String entryName = arg.substring(arg.lastIndexOf(File.separator)+1);
======= f4c8bf9^:"ajdoc/src/org/aspectj/tools/ajdoc/StubFileGenerator.java"

                        SymbolManager symbolManager,
            processFile(symbolManager, inputFiles[i], signatureFiles[i]);
    static void processFile(SymbolManager symbolManager, File inputFile, File signatureFile) throws DocException {
======= f4c8bf9^:"ajdoc/src/org/aspectj/tools/ajdoc/StubFileGenerator.java"

        boolean appendPeriod = true;
            appendPeriod = false;
======= f4c8bf9^:"ajdoc/src/org/aspectj/tools/ajdoc/SymbolManager.java"

 * Copyright (c) 1999-2001 Xerox Corporation, 
 *               2002 Palo Alto Research Center, Incorporated (PARC).
 * All rights reserved. 
 * This program and the accompanying materials are made available 
 * under the terms of the Common Public License v1.0 
 * which accompanies this distribution and is available at 
 * http://www.eclipse.org/legal/cpl-v10.html 
 *  
 * Contributors: 
 *     Xerox/PARC     initial implementation 
 *     Mik Kersten	  port to AspectJ 1.1+ code base
 * ******************************************************************/
 * @author Mik Kersten
 */
    private static SymbolManager INSTANCE = new SymbolManager();
    public static SymbolManager getDefault() {
        return INSTANCE;
    }
 
    public Declaration[] getDeclarations(String filename) {
    	
    	IProgramElement file = (IProgramElement)AsmManager.getDefault().getHierarchy().findElementForSourceFile(filename);
    }
    
    /**
     * Rejects anonymous kinds by checking if their name is an integer
     */
    
    private String genPartiallyQualifiedName(IProgramElement node, String name) {
        Declaration[] declarations = lookupDeclarations(filename);
        //System.out.println("getting "+filename+", "+line+":"+column);
        //System.out.println("decs: "+declarations);
        return getDeclarationAtPoint(declarations, line, column);
    }
    public Declaration getDeclarationAtPoint(Declaration[] declarations, int line, int column) {
        //!!! when we care about the performance of this method
        //!!! these should be guaranteed to be sorted and a binary search used here
        //!!! for now we use the simple (and reliable) linear search
        if (declarations == null) return null;
        for(int i=0; i<declarations.length; i++) {
            Declaration dec = declarations[i];
            if (dec.getBeginLine() == line) { // && dec.getEndLine() >= line) {
                if (column == -1) return dec;
                if (dec.getBeginColumn() == column) { // && dec.getEndColumn() >= column) {
                    return dec;
                }
            }
            Declaration[] enclosedDecs = dec.getDeclarations();
            if (enclosedDecs.length == 0) continue;
            Declaration dec1 = getDeclarationAtPoint(enclosedDecs, line, column);
            if (dec1 != null) return dec1;
        }
        //??? what should be returned for no declaration found
        return null;
    }
    private Declaration[] lookupDeclarations(String filename) {
    	return null;
    }
    /* generic code for dealing with correlation files, serialization, and caching */
    /**
      * @param      methodName  method name without type or parameter list
      * @return     method name with ajc-specific name mangling removed,
      *             unchanged if there's not ajc name mangling present
      */
    public static String translateMethodName(String methodName) {
        int firstDollar = methodName.indexOf('$');
        if (firstDollar == -1) return methodName;
        String baseName = methodName.substring(firstDollar);
        if (methodName.indexOf("ajc") != -1) {
            return "<" + baseName + " advice>";
        } else {
            return baseName;
        }
    }
    /************************************************************************
      The rest of the code in this file is just for testing purposes
     ************************************************************************/

======= 3f77e75^:"weaver/src/org/aspectj/weaver/bcel/BcelField.java"

======= 3f77e75^:"weaver/src/org/aspectj/weaver/bcel/BcelMethod.java"

======= 3f77e75^:"weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java"

======= 3f77e75^:"weaver/testsrc/org/aspectj/weaver/MemberTestCase15.java"

======= 3f77e75^:"weaver/testsrc/org/aspectj/weaver/MemberTestCase15.java"


======= a9ef1b0^:"runtime/src/org/aspectj/lang/JoinPoint.java"

    static String PREINTIALIZATION = "preinitialization";
======= a9ef1b0^:"weaver/src/org/aspectj/weaver/Shadow.java"

    public static final Kind PreInitialization    = new Kind(JoinPoint.PREINTIALIZATION, 8,  false);

======= 24a785f^:"weaver/src/org/aspectj/weaver/TypeFactory.java"


======= 53284da^:"tests/src/org/aspectj/systemtest/AllTests15.java"

======= 53284da^:"tests/src/org/aspectj/systemtest/AllTests15.java"

======= 53284da^:"tests/src/org/aspectj/systemtest/ajc150/AllTestsAspectJ150.java"

======= 53284da^:"tests/src/org/aspectj/systemtest/ajc150/AllTestsAspectJ150.java"

======= 53284da^:"tests/src/org/aspectj/systemtest/ajc150/AllTestsAspectJ150.java"

======= 53284da^:"tests/src/org/aspectj/systemtest/ajc150/AllTestsAspectJ150.java"

======= 53284da^:"weaver/src/org/aspectj/weaver/TypeFactory.java"


======= d69ce9a^:"ajdoc/src/org/aspectj/tools/ajdoc/StubFileGenerator.java"

======= d69ce9a^:"ajdoc/src/org/aspectj/tools/ajdoc/StubFileGenerator.java"

======= d69ce9a^:"ajdoc/src/org/aspectj/tools/ajdoc/StubFileGenerator.java"

======= d69ce9a^:"ajdoc/src/org/aspectj/tools/ajdoc/StubFileGenerator.java"

======= d69ce9a^:"ajdoc/testsrc/org/aspectj/tools/ajdoc/AjdocTests.java"

======= d69ce9a^:"ajdoc/testsrc/org/aspectj/tools/ajdoc/AjdocTests.java"


======= a778ac4^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"

======= a778ac4^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"

======= a778ac4^:"weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java"

        final boolean isAnnotationStyleAspect = getConcreteAspect()!=null && getConcreteAspect().isAnnotationStyleAspect();
======= a778ac4^:"weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java"

                        //extra var can be null here (@Aj aspect extends abstract code style, advice in code style)
                        if (extraVar != null) {
                        }
======= a778ac4^:"weaver/src/org/aspectj/weaver/bcel/BcelShadow.java"

                    (munger.getConcreteAspect().isAnnotationStyleAspect())?
======= a778ac4^:"weaver/src/org/aspectj/weaver/bcel/BcelShadow.java"

        if (munger.getConcreteAspect()!=null && munger.getConcreteAspect().isAnnotationStyleAspect()) {

======= bbdd496^:"ajdoc/testdata/pr119453/src/pack/C.java"

======= bbdd496^:"ajdoc/testsrc/org/aspectj/tools/ajdoc/AjdocTests.java"

======= bbdd496^:"ajdoc/testsrc/org/aspectj/tools/ajdoc/AjdocTests.java"

======= bbdd496^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmElementFormatter.java"

======= bbdd496^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmHierarchyBuilder.java"


======= 9abfc40^:"loadtime/src/org/aspectj/weaver/loadtime/DefaultWeavingContext.java"

        @interface Me{}
                        log(thisJoinPoint, "execMe[" + me + "]");
             <line text="execution(void pr119749.C.m()): execMe[@pr119749$Me()]"/>
======= 9abfc40^:"weaver/src/org/aspectj/weaver/reflect/ReflectionWorld.java"

======= 9abfc40^:"weaver/testsrc/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegateTest.java"

======= 9abfc40^:"weaver/testsrc/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegateTest.java"

        BcelWorld bcelWorld = new BcelWorld();
======= 9abfc40^:"weaver/testsrc/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegateTest.java"

======= 9abfc40^:"weaver/testsrc/org/aspectj/weaver/reflect/ReflectionWorldTest.java"


======= 588e7b9^:"loadtime/src/org/aspectj/weaver/loadtime/Aj.java"

======= 588e7b9^:"loadtime/src/org/aspectj/weaver/loadtime/Aj.java"

                    // create it and put it back in the weavingAdaptors map but avoid any kind of instantiation
                    // within the synchronized block
                    ClassLoaderWeavingAdaptor weavingAdaptor = new ClassLoaderWeavingAdaptor(loader, weavingContext);
                    adaptor = new ExplicitlyInitializedClassLoaderWeavingAdaptor(weavingAdaptor);
                    weavingAdaptors.put(loader, adaptor);

======= bdafe31^:"weaver/src/org/aspectj/weaver/Lint.java"

======= bdafe31^:"weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java"

======= bdafe31^:"weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java"

======= bdafe31^:"weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java"

======= bdafe31^:"weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java"


======= 9d32b76^:"weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java"

======= 9d32b76^:"weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java"


======= ae500c6^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"


======= 3ac4627^:"weaver/src/org/aspectj/weaver/UnresolvedType.java"

    	throw new UnsupportedOperationException("resolve this type first");

======= 9edb4b6^:"loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java"

        boolean fastAccept = false;//defaults to false if no fast include
        for (int i = 0; i < m_includeStartsWith.size(); i++) {
            fastAccept = fastClassName.startsWith((String)m_includeStartsWith.get(i));
            if (fastAccept) {
                break;
        if (fastAccept) {
            return true;
        }
======= 9edb4b6^:"tests/java5/ataspectj/ataspectj/Test$$EnhancerByCGLIB$$12345.java"

 * Copyright (c) 2005 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials 
 * are made available under the terms of the Common Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/cpl-v10.html
 * 
 * Contributors:
 *     Matthew Webster - initial implementation
 *******************************************************************************/
    <weaver options="-verbose">
        <dump within="ataspectj..*" beforeandafter="true"/> 
    </weaver>
======= 9edb4b6^:"tests/src/org/aspectj/systemtest/ajc150/ataspectj/AtAjLTWTests.java"

        File f = new File("_ajdump/_before/ataspectj/Test$$EnhancerByCGLIB$$12345.class");
        assertTrue(f.exists());
        f = new File("_ajdump/ataspectj/Test$$EnhancerByCGLIB$$12345.class");
        assertTrue(f.exists());
======= 9edb4b6^:"tests/src/org/aspectj/systemtest/ajc150/ataspectj/AtAjLTWTests.java"

        System.out.println("AtAjLTWTests.testLTWDumpProxy() f=" + f.getAbsolutePath());
        System.out.println("AtAjLTWTests.testLTWDumpProxy() f=" + f.getAbsolutePath());
                files="ataspectj/Test$$EnhancerByCGLIB$$12345.java"
        <run class="ataspectj.Test$$EnhancerByCGLIB$$12345" ltw="ataspectj/aop-dumpbeforeandafter.xml"/>

======= 979124d^:"tests/src/org/aspectj/systemtest/ajc150/ataspectj/AtAjLTWTests.java"

======= 979124d^:"weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java"

        // the closure instantiation has the same mapping as the extracted method from wich it is called
        if (getConcreteAspect()!= null && getConcreteAspect().isAnnotationStyleAspect()) {
            return BcelVar.NONE;
======= 979124d^:"weaver/src/org/aspectj/weaver/bcel/BcelShadow.java"

======= 979124d^:"weaver/src/org/aspectj/weaver/bcel/BcelShadow.java"

======= 979124d^:"weaver/src/org/aspectj/weaver/bcel/BcelShadow.java"

======= 979124d^:"weaver/src/org/aspectj/weaver/bcel/BcelShadow.java"

    	BcelVar[] adviceVars = munger.getExposedStateAsBcelVars();

======= 5f8d2cd^:"ajde/testsrc/org/aspectj/ajde/AsmDeclarationsTest.java"

======= 5f8d2cd^:"ajdoc/src/org/aspectj/tools/ajdoc/StubFileGenerator.java"

======= 5f8d2cd^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectDeclaration.java"


======= b52515f^:"weaver/src/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegateFactory.java"

======= b52515f^:"weaver/testsrc/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegateTest.java"

======= b52515f^:"weaver/testsrc/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegateTest.java"

======= b52515f^:"weaver/testsrc/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegateTest.java"

======= b52515f^:"weaver5/java5-src/org/aspectj/weaver/reflect/Java15ReflectionBasedReferenceTypeDelegate.java"


======= 94159f9^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"

======= 94159f9^:"weaver/src/org/aspectj/weaver/bcel/BcelShadow.java"

======= 94159f9^:"weaver/src/org/aspectj/weaver/bcel/BcelShadow.java"

======= 94159f9^:"weaver/src/org/aspectj/weaver/bcel/BcelShadow.java"


======= 6e8bf52^:"aspectj5rt/java5-src/org/aspectj/internal/lang/reflect/AjTypeImpl.java"

======= 6e8bf52^:"aspectj5rt/java5-testsrc/org/aspectj/internal/lang/reflect/AjTypeTests.java"


======= 1e1bbb3^:"loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java"

======= 1e1bbb3^:"loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java"

        //-Xlintfile: first so that lint wins
======= 1e1bbb3^:"loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java"

                    world.getMessageHandler().handleMessage(new Message(
                            "Cannot access resource for -Xlintfile:"+weaverOption.lintFile,
                            IMessage.WARNING,
                            failure,
                            null));
        }
        if (weaverOption.lint == null) {
        		bcelWorld.getLint().loadDefaultProperties();
        		bcelWorld.getLint().adviceDidNotMatch.setKind(IMessage.INFO);
        } else {
======= 1e1bbb3^:"testing/newsrc/org/aspectj/testing/OutputSpec.java"

======= 1e1bbb3^:"testing/newsrc/org/aspectj/testing/RunSpec.java"

======= 1e1bbb3^:"testing/newsrc/org/aspectj/testing/RunSpec.java"

======= 1e1bbb3^:"testing/newsrc/org/aspectj/testing/RunSpec.java"

======= 1e1bbb3^:"testing/newsrc/org/aspectj/testing/XMLBasedAjcTestCase.java"

======= 1e1bbb3^:"testing/newsrc/org/aspectj/testing/XMLBasedAjcTestCase.java"

======= 1e1bbb3^:"testing/newsrc/org/aspectj/testing/XMLBasedAjcTestCase.java"

======= 1e1bbb3^:"testing/newsrc/org/aspectj/testing/XMLBasedAjcTestCase.java"

======= 1e1bbb3^:"testing/newsrc/org/aspectj/testing/XMLBasedAjcTestCase.java"

======= 1e1bbb3^:"testing/newsrc/org/aspectj/testing/XMLBasedAjcTestCase.java"

======= 1e1bbb3^:"testing/newsrc/org/aspectj/testing/XMLBasedAjcTestCase.java"

======= 1e1bbb3^:"tests/src/org/aspectj/systemtest/ajc150/ltw/LTWTests.java"

======= 1e1bbb3^:"weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java"

        return messageHandler.handleMessage(new Message("Register definition failed", IMessage.WARNING, th, null));
======= 1e1bbb3^:"weaver5/java5-src/org/aspectj/weaver/reflect/Java15ReflectionBasedReferenceTypeDelegate.java"


======= d43e74b^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"

======= d43e74b^:"weaver/src/org/aspectj/weaver/patterns/IfPointcut.java"


======= 6d94d09^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/InterTypeFieldBinding.java"

======= 6d94d09^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/InterTypeFieldBinding.java"

======= 6d94d09^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"


======= a75b7fa^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"

  
======= a75b7fa^:"weaver/src/org/aspectj/weaver/World.java"

        	String brackets = signature.substring(0,signature.lastIndexOf("[")+1);
            ret = new ResolvedType.Array(signature, brackets+componentType.getErasureSignature(),
======= a75b7fa^:"weaver/src/org/aspectj/weaver/World.java"


======= 551b9ca^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java"

======= 551b9ca^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java"

======= 551b9ca^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java"

======= 551b9ca^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java"

======= 551b9ca^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java"

======= 551b9ca^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java"

======= 551b9ca^:"tests/src/org/aspectj/systemtest/incremental/tools/AjdeInteractionTestbed.java"

======= 551b9ca^:"tests/src/org/aspectj/systemtest/incremental/tools/AjdeInteractionTestbed.java"

======= 551b9ca^:"tests/src/org/aspectj/systemtest/incremental/tools/AjdeInteractionTestbed.java"

======= 551b9ca^:"tests/src/org/aspectj/systemtest/incremental/tools/AjdeInteractionTestbed.java"

======= 551b9ca^:"tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java"


======= 2c81907^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"

  //public void testLintForAdviceSorting_pr111667() { runTest("lint for advice sorting");}
     <compile files="A.java,X.java,Y.java" options="-1.5">
======= 2c81907^:"weaver/src/org/aspectj/weaver/Lint.java"

======= 2c81907^:"weaver/src/org/aspectj/weaver/Shadow.java"

======= 2c81907^:"weaver/src/org/aspectj/weaver/Shadow.java"

======= 2c81907^:"weaver/src/org/aspectj/weaver/World.java"

======= 2c81907^:"weaver/src/org/aspectj/weaver/World.java"


======= d1a295c^:"weaver/src/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegateFactory.java"


======= 508dbcb^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"

    </ajc-test>acj
======= 508dbcb^:"weaver/src/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegateFactory.java"


======= 6eb77c5^:"tests/src/org/aspectj/systemtest/ajc150/GenericsTests.java"

======= 6eb77c5^:"weaver/src/org/aspectj/weaver/Lint.java"

======= 6eb77c5^:"weaver/src/org/aspectj/weaver/MissingResolvedTypeWithKnownSignature.java"

======= 6eb77c5^:"weaver/src/org/aspectj/weaver/MissingResolvedTypeWithKnownSignature.java"

======= 6eb77c5^:"weaver/src/org/aspectj/weaver/MissingResolvedTypeWithKnownSignature.java"

======= 6eb77c5^:"weaver/src/org/aspectj/weaver/MissingResolvedTypeWithKnownSignature.java"

======= 6eb77c5^:"weaver/src/org/aspectj/weaver/World.java"

            IMessage msg = null;
            if (isl!=null) {
              msg = MessageUtil.error(WeaverMessages.format(WeaverMessages.CANT_FIND_TYPE,ty.getName()),isl);
            } else {
              msg = MessageUtil.error(WeaverMessages.format(WeaverMessages.CANT_FIND_TYPE,ty.getName())); 
            }
            messageHandler.handleMessage(msg);
======= 6eb77c5^:"weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java"

                IMessage msg = new Message(
                  WeaverMessages.format(WeaverMessages.CANT_FIND_TYPE_EXCEPTION_TYPE,excs[i].getName()),
                  "",IMessage.ERROR,getSourceLocation(),null,null);
                world.getMessageHandler().handleMessage(msg);
======= 6eb77c5^:"weaver/src/org/aspectj/weaver/bcel/BcelShadow.java"

          IMessage msg = new Message(
                WeaverMessages.format(WeaverMessages.CANT_FIND_TYPE_DURING_AROUND_WEAVE,declaringType.getClassName()),
                "",IMessage.ERROR,getSourceLocation(),null,
                new ISourceLocation[]{ munger.getSourceLocation()});
          world.getMessageHandler().handleMessage(msg);
======= 6eb77c5^:"weaver/src/org/aspectj/weaver/bcel/BcelShadow.java"

                    IMessage msg = new Message(
                             WeaverMessages.format(WeaverMessages.CANT_FIND_TYPE_DURING_AROUND_WEAVE_PREINIT,bcelTX.getClassName()),
                              "",IMessage.ERROR,getSourceLocation(),null,
                              new ISourceLocation[]{ munger.getSourceLocation()});
                    world.getMessageHandler().handleMessage(msg);
======= 6eb77c5^:"weaver/src/org/aspectj/weaver/patterns/ArgsAnnotationPointcut.java"

======= 6eb77c5^:"weaver/src/org/aspectj/weaver/patterns/ArgsPointcut.java"

                  IMessage msg = new Message(
                    WeaverMessages.format(WeaverMessages.CANT_FIND_TYPE_ARG_TYPE,argType.getName()),
                    "",IMessage.ERROR,shadow.getSourceLocation(),null,new ISourceLocation[]{getSourceLocation()});
                  shadow.getIWorld().getMessageHandler().handleMessage(msg);
======= 6eb77c5^:"weaver/src/org/aspectj/weaver/patterns/KindedPointcut.java"

======= 6eb77c5^:"weaver/src/org/aspectj/weaver/patterns/KindedPointcut.java"

======= 6eb77c5^:"weaver/src/org/aspectj/weaver/patterns/WithinAnnotationPointcut.java"

======= 6eb77c5^:"weaver/src/org/aspectj/weaver/patterns/WithinPointcut.java"


======= 76d7e83^:"loadtime/src/org/aspectj/weaver/loadtime/Options.java"

            weaverOption.messageHandler.dontIgnore(IMessage.DEBUG);
======= 76d7e83^:"loadtime/src/org/aspectj/weaver/loadtime/Options.java"

======= 76d7e83^:"tests/java5/ataspectj/ataspectj/ltwlog/MessageHolder.java"

======= 76d7e83^:"tests/java5/ataspectj/ataspectj/ltwlog/MessageHolder.java"

    <weaver options="-XmessageHandlerClass:ataspectj.ltwlog.MessageHolder"/>
    <weaver options="-XmessageHandlerClass:ataspectj.ltwlog.MessageHolder -verbose"/>
    <weaver options="-XmessageHandlerClass:ataspectj.ltwlog.MessageHolder -showWeaveInfo -verbose -Xreweavable"/>
    <weaver options="-showWeaveInfo -verbose"/>
======= 76d7e83^:"tests/src/org/aspectj/systemtest/ajc150/ataspectj/AtAjLTWTests.java"

    public void testLTWLog() {
        runTest("LTW Log");
    <ajc-test dir="java5/ataspectj" title="LTW Log">
        <ant file="ajc-ant.xml" target="ltwlog.LTWLog" verbose="true"/>

======= 86880f7^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"

======= 86880f7^:"weaver/src/org/aspectj/weaver/ReferenceType.java"

======= 86880f7^:"weaver/src/org/aspectj/weaver/ResolvedType.java"

======= 86880f7^:"weaver/src/org/aspectj/weaver/ResolvedType.java"

======= 86880f7^:"weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java"


======= a4caeb9^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"

======= a4caeb9^:"weaver/src/org/aspectj/weaver/patterns/PerThisOrTargetPointcutVisitor.java"

        TypePattern negated = getPerTypePointcut(node.getNegatedPointcut());
        if (MAYBE.equals(negated)) {
            return MAYBE;
        }
        return new NotTypePattern(negated);

======= 81e6b60^:"aspectj5rt/java5-src/org/aspectj/internal/lang/reflect/DeclareSoftImpl.java"

======= 81e6b60^:"aspectj5rt/java5-src/org/aspectj/internal/lang/reflect/StringToType.java"

======= 81e6b60^:"aspectj5rt/java5-src/org/aspectj/internal/lang/reflect/StringToType.java"

        <compile files="DeclareParentsTest.aj" options="-1.5">
        <run class="DeclareParentsTest"/>
        <compile files="DeclareParentsTestAdvanced.aj" options="-1.5">
        <run class="a.b.c.DeclareParentsTestAdvanced"/>
        <compile files="ITDTest.aj" options="-1.5">
        <run class="a.b.c.ITDTest"/>

======= 11ab99f^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"

======= 11ab99f^:"weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java"


        execution(ManagedBean+.new(..)) && this(bean); 
    		System.out.println("I just constructed " + bean);
    public static void main(String[] args) {
    		new ManagedBean("super-bean");
    		new ManagedSubBean();
======= 8b294d9^:"tests/new/AfterReturningParam.java"

        Tester.checkAndClearEvents(new String[] { "constr exec as Object null" });
======= 8b294d9^:"tests/new/AfterReturningParam.java"

======= 8b294d9^:"tests/new/ConstructorExecInit.java"

    after () returning (Object target) : initialization(new(..)) && !this(A) { 
======= 8b294d9^:"tests/new/OddConstructors.java"

     after() returning(Object o): j() {
======= 8b294d9^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"

    		<run class="Pr113368"/>
======= 8b294d9^:"weaver/src/org/aspectj/weaver/Advice.java"

    			boolean matches = resolvedExtraParameterType.isConvertableFrom(shadowReturnType);
======= 8b294d9^:"weaver/src/org/aspectj/weaver/Shadow.java"


======= a5ac5af^:"loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java"

======= a5ac5af^:"loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java"

======= a5ac5af^:"loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java"

======= a5ac5af^:"loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java"

======= a5ac5af^:"loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java"

======= a5ac5af^:"loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java"

        registerDefinitions(weaver, loader);
        // AV - see #113511 - not sure it is good to skip message handler
        if (enabled) {
            messageHandler = bcelWorld.getMessageHandler();
            // after adding aspects
            weaver.prepareForWeave();
        }
======= a5ac5af^:"loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java"

    private void registerDefinitions(final BcelWeaver weaver, final ClassLoader loader) {
        try {
            MessageUtil.info(messageHandler, "register classloader " + getClassLoaderName(loader));
            List definitions = new ArrayList();
                    MessageUtil.info(messageHandler, "using (-Daj5.def) " + file);
======= a5ac5af^:"loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java"

    			    MessageUtil.info(messageHandler, "using " + xml.getFile());
            // still go thru if definitions is empty since we will configure
            // the default message handler in there
            registerOptions(weaver, loader, definitions);
            // AV - see #113511
            if (!definitions.isEmpty()) {
                registerAspectExclude(weaver, loader, definitions);
                registerAspectInclude(weaver, loader, definitions);
                registerAspects(weaver, loader, definitions);
                registerIncludeExclude(weaver, loader, definitions);
                registerDump(weaver, loader, definitions);
            } else {
            }
======= a5ac5af^:"loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java"

    
======= a5ac5af^:"weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java"

            //System.out.println("WeavingAdaptor.weaveClass " + name);
            // an @AspectJ aspect needs to be at least munged by the aspectOf munger
            info("weaving '" + name + "'");
            bytes = getAtAspectJAspectBytes(name, bytes);
        }
======= a5ac5af^:"weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java"


======= 554e733^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java"

======= 554e733^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java"

======= 554e733^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java"

======= 554e733^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseShadow.java"

======= 554e733^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseShadow.java"

======= 554e733^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"


======= 735d94f^:"aspectj5rt/java5-src/org/aspectj/internal/lang/reflect/AjTypeImpl.java"

======= 735d94f^:"aspectj5rt/java5-src/org/aspectj/internal/lang/reflect/InterTypeConstructorDeclarationImpl.java"

======= 735d94f^:"aspectj5rt/java5-src/org/aspectj/internal/lang/reflect/InterTypeDeclarationImpl.java"

======= 735d94f^:"aspectj5rt/java5-src/org/aspectj/internal/lang/reflect/InterTypeFieldDeclarationImpl.java"

======= 735d94f^:"aspectj5rt/java5-src/org/aspectj/internal/lang/reflect/InterTypeMethodDeclarationImpl.java"

======= 735d94f^:"aspectj5rt/java5-src/org/aspectj/internal/lang/reflect/InterTypeMethodDeclarationImpl.java"

======= 735d94f^:"aspectj5rt/java5-src/org/aspectj/internal/lang/reflect/InterTypeMethodDeclarationImpl.java"

======= 735d94f^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"


======= 9ed75a1^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseSourceLocation.java"

======= 9ed75a1^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseSourceLocation.java"

======= 9ed75a1^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"

======= 9ed75a1^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"

    

======= 522911e^:"tests/java5/ataspectj/annotationGen/RuntimePointcuts.java"

======= 522911e^:"tests/java5/ataspectj/annotationGen/RuntimePointcuts.java"

======= 522911e^:"tests/java5/ataspectj/annotationGen/RuntimePointcuts.java"

======= 522911e^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"

    
        <run class="RuntimePointcuts" classpath="../lib/bcel/bcel.jar"/>
======= 522911e^:"weaver/src/org/aspectj/weaver/bcel/BcelWorld.java"

======= 522911e^:"weaver/src/org/aspectj/weaver/bcel/BcelWorld.java"

======= 522911e^:"weaver/src/org/aspectj/weaver/bcel/BcelWorld.java"

                    return true;
            return false;
======= 522911e^:"weaver/src/org/aspectj/weaver/bcel/BcelWorld.java"

======= 522911e^:"weaver/src/org/aspectj/weaver/bcel/BcelWorld.java"

======= 522911e^:"weaver/src/org/aspectj/weaver/bcel/BcelWorld.java"

======= 522911e^:"weaver/src/org/aspectj/weaver/reflect/AnnotationFinder.java"

======= 522911e^:"weaver/src/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegate.java"

======= 522911e^:"weaver/src/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegate.java"

======= 522911e^:"weaver/src/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegate.java"

======= 522911e^:"weaver/src/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegate.java"

======= 522911e^:"weaver/src/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegateFactory.java"

======= 522911e^:"weaver/src/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegateFactory.java"

======= 522911e^:"weaver/src/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegateFactory.java"

======= 522911e^:"weaver/src/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegateFactory.java"

======= 522911e^:"weaver/src/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegateFactory.java"

======= 522911e^:"weaver/src/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegateFactory.java"

======= 522911e^:"weaver/src/org/aspectj/weaver/reflect/ReflectionBasedResolvedMemberImpl.java"

======= 522911e^:"weaver/src/org/aspectj/weaver/reflect/ReflectionBasedResolvedMemberImpl.java"

======= 522911e^:"weaver/src/org/aspectj/weaver/reflect/ReflectionShadow.java"

======= 522911e^:"weaver/src/org/aspectj/weaver/reflect/ReflectionShadow.java"

======= 522911e^:"weaver/src/org/aspectj/weaver/reflect/ReflectionShadow.java"

======= 522911e^:"weaver/src/org/aspectj/weaver/reflect/ReflectionShadow.java"

======= 522911e^:"weaver/src/org/aspectj/weaver/reflect/ReflectionShadow.java"

======= 522911e^:"weaver/src/org/aspectj/weaver/reflect/ReflectionShadow.java"

======= 522911e^:"weaver/src/org/aspectj/weaver/reflect/ReflectionShadow.java"

======= 522911e^:"weaver/src/org/aspectj/weaver/reflect/ReflectionShadow.java"

======= 522911e^:"weaver/src/org/aspectj/weaver/reflect/ReflectionShadow.java"

======= 522911e^:"weaver/src/org/aspectj/weaver/reflect/ReflectionShadow.java"

======= 522911e^:"weaver/src/org/aspectj/weaver/reflect/ReflectionShadow.java"

======= 522911e^:"weaver/src/org/aspectj/weaver/reflect/ReflectionVar.java"

======= 522911e^:"weaver/src/org/aspectj/weaver/reflect/ReflectionWorld.java"

======= 522911e^:"weaver/src/org/aspectj/weaver/reflect/ReflectionWorld.java"

======= 522911e^:"weaver/src/org/aspectj/weaver/tools/PointcutParser.java"

======= 522911e^:"weaver/src/org/aspectj/weaver/tools/PointcutParser.java"

======= 522911e^:"weaver/src/org/aspectj/weaver/tools/PointcutParser.java"

======= 522911e^:"weaver/src/org/aspectj/weaver/tools/PointcutParser.java"

======= 522911e^:"weaver/src/org/aspectj/weaver/tools/PointcutParser.java"

======= 522911e^:"weaver/src/org/aspectj/weaver/tools/PointcutParser.java"

======= 522911e^:"weaver/src/org/aspectj/weaver/tools/PointcutParser.java"

            	 declaringTypeForResolution = world.resolve(inScope.getName());
            	 declaringTypeForResolution = ResolvedType.OBJECT.resolve(world);
======= 522911e^:"weaver/src/org/aspectj/weaver/tools/PointcutParser.java"

             pcExpr = new PointcutExpressionImpl(pc,expression,formalParameters,world);
======= 522911e^:"weaver/src/org/aspectj/weaver/tools/PointcutParser.java"

======= 522911e^:"weaver/src/org/aspectj/weaver/tools/PointcutParser.java"

    	IMessageHandler current = world.getMessageHandler();
    	world.setMessageHandler(aHandler);
======= 522911e^:"weaver/src/org/aspectj/weaver/tools/PointcutParser.java"

    		return new SimpleScope(world,formalBindings);
    		ResolvedType inType = world.resolve(inScope.getName());
======= 522911e^:"weaver/src/org/aspectj/weaver/tools/PointcutParser.java"

======= 522911e^:"weaver/testsrc/org/aspectj/weaver/tools/PointcutParserTest.java"

======= 522911e^:"weaver/testsrc/org/aspectj/weaver/tools/PointcutParserTest.java"

======= 522911e^:"weaver/testsrc/org/aspectj/weaver/tools/ToolsTests.java"

======= 522911e^:"weaver/testsrc/org/aspectj/weaver/tools/ToolsTests.java"

======= 522911e^:"weaver5/java5-src/org/aspectj/weaver/reflect/Java15AnnotationFinder.java"

======= 522911e^:"weaver5/java5-src/org/aspectj/weaver/reflect/Java15AnnotationFinder.java"

======= 522911e^:"weaver5/java5-src/org/aspectj/weaver/reflect/Java15AnnotationFinder.java"

======= 522911e^:"weaver5/java5-src/org/aspectj/weaver/reflect/Java15AnnotationFinder.java"

======= 522911e^:"weaver5/java5-src/org/aspectj/weaver/reflect/Java15ReflectionBasedReferenceTypeDelegate.java"

======= 522911e^:"weaver5/java5-src/org/aspectj/weaver/reflect/Java15ReflectionBasedReferenceTypeDelegate.java"

======= 522911e^:"weaver5/java5-src/org/aspectj/weaver/reflect/Java15ReflectionBasedReferenceTypeDelegate.java"

======= 522911e^:"weaver5/java5-src/org/aspectj/weaver/reflect/Java15ReflectionBasedReferenceTypeDelegate.java"


======= 557f5b4^:"weaver/src/org/aspectj/weaver/patterns/WildAnnotationTypePattern.java"


======= dd9a9b2^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"


======= c760895^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"

======= c760895^:"weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java"

======= c760895^:"weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java"


======= fabf159^:"loadtime/src/org/aspectj/weaver/loadtime/definition/DocumentParser.java"

======= fabf159^:"loadtime/src/org/aspectj/weaver/loadtime/definition/DocumentParser.java"

======= fabf159^:"loadtime/src/org/aspectj/weaver/loadtime/definition/DocumentParser.java"

            XMLReader xmlReader = SAXParserFactory.newInstance().newSAXParser().getXMLReader();
======= fabf159^:"loadtime/src/org/aspectj/weaver/loadtime/definition/DocumentParser.java"


======= 676aa08^:"weaver/src/org/aspectj/weaver/patterns/KindedPointcut.java"


======= 4b8bed7^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"

======= 4b8bed7^:"weaver/src/org/aspectj/weaver/patterns/Pointcut.java"

======= 4b8bed7^:"weaver/src/org/aspectj/weaver/patterns/ReferencePointcut.java"


======= d7d5947^:"weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java"


======= 7a1002a^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"


======= 1f51499^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"

                    	return "no manifest found in " + p.getAbsolutePath() + 
======= 1f51499^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"


======= d9757d7^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"

  public void testITDCtor_pr112783()          { runTest("Problem with constructor ITDs");}
======= d9757d7^:"weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java"


======= 21cf37d^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterSuperFixerVisitor.java"

======= 21cf37d^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterSuperFixerVisitor.java"

======= 21cf37d^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterSuperFixerVisitor.java"

  interface C2 { }
  public void C2.hello() {
        return 
  // ok
  class C { }
  public void C.hello() {
  
======= 21cf37d^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"

  public void testCantCallSuperMethods_pr90143() { runTest("cant call super methods");}

======= a7e13f1^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"

 
   <ajc-test dir="bugs150" title="ITDC with no explicit cons call">
 
======= a7e13f1^:"weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java"

        					int idx = cpg.addMethodref(newParent.getClassName(), invokeSpecial.getMethodName(cpg), invokeSpecial.getSignature(cpg));

======= ade32bc^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java"

======= ade32bc^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java"

======= ade32bc^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java"

======= ade32bc^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java"

======= ade32bc^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"


======= 62d16d5^:"loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java"

                	String aspectCode = readAspect(aspectClassName, loader);
                    	namespace=new StringBuffer(aspectCode);
                    	namespace = namespace.append(";"+aspectCode);
======= 62d16d5^:"loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java"

                	String aspectCode = readAspect(concreteAspect.name, loader);
                    	namespace=new StringBuffer(aspectCode);
                    	namespace = namespace.append(";"+aspectCode);
======= 62d16d5^:"loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java"

    /**
     * Read in an aspect from the disk and return its bytecode as a String
     * @param name	the name of the aspect to read in
     * @return the bytecode representation of the aspect
     */
    private String readAspect(String name, ClassLoader loader){
        if (true) return name+"@"+(loader==null?"0":Integer.toString(loader.hashCode()));
        // FIXME AV - ?? can someone tell me why we read the whole bytecode
        // especially one byte by one byte
        // also it does some NPE sometime (see AtAjLTW "LTW Decp2")
        InputStream is = null;
        try {
    		String result = "";
        	is = loader.getResourceAsStream(name.replace('.','/')+".class");
            try {is.close();} catch (Throwable t) {;}
        }
    }
    

======= 794f9b5^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/ValidateAtAspectJAnnotationsVisitor.java"

======= 794f9b5^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/ValidateAtAspectJAnnotationsVisitor.java"

======= 794f9b5^:"tests/src/org/aspectj/systemtest/ajc150/ataspectj/AtAjLTWTests.java"

======= 794f9b5^:"weaver/src/org/aspectj/weaver/bcel/AtAjAttributes.java"

        //FIXME turn on when ajcMightHaveAspect
======= 794f9b5^:"weaver/src/org/aspectj/weaver/bcel/AtAjAttributes.java"

        // the following block will not detect @Pointcut in non @Aspect types for optimization purpose
        if (!hasAtAspectAnnotation) {
            return EMPTY_LIST;
        }

======= 8cea30f^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"

  public void testUnboundFormal_pr112027()    { runTest("unexpected error unboundFormalInPC");}
  public void testCCEGenerics_pr113445()      { runTest("Generics ClassCastException");}
======= 8cea30f^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"

    
 
======= 8cea30f^:"weaver/src/org/aspectj/weaver/Advice.java"

    				} else if(!shadow.getReturnType().resolve(world).isAssignableFrom(getSignature().getReturnType().resolve(world))) {
    					//System.err.println(this + ", " + sourceContext + ", " + start);
======= 8cea30f^:"weaver/src/org/aspectj/weaver/Member.java"

======= 8cea30f^:"weaver/src/org/aspectj/weaver/MemberImpl.java"


======= 2da9b31^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"

======= 2da9b31^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"

======= 2da9b31^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"

======= 2da9b31^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"

======= 2da9b31^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"

            			if (doesAlreadyHaveAnnotation(mg.getMemberView(),decaM,reportedProblems)) continue; // skip this one...
======= 2da9b31^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"

======= 2da9b31^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"

            				if (doesAlreadyHaveAnnotation(mg.getMemberView(),decaM,reportedProblems)) continue; // skip this one...
======= 2da9b31^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"

======= 2da9b31^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"

======= 2da9b31^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"

======= 2da9b31^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"


======= cc6862f^:"ajde/testsrc/org/aspectj/ajde/BuildConfigurationTests.java"

======= cc6862f^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java"


======= 70888dd^:"loadtime/src/org/aspectj/weaver/loadtime/Aj.java"

            ExplicitlyInitializedClassLaoderWeavingAdaptor adaptor = null;
                adaptor = (ExplicitlyInitializedClassLaoderWeavingAdaptor) weavingAdaptors.get(loader);
                    adaptor = new ExplicitlyInitializedClassLaoderWeavingAdaptor(weavingAdaptor);
======= 70888dd^:"loadtime/src/org/aspectj/weaver/loadtime/Aj.java"

    static class ExplicitlyInitializedClassLaoderWeavingAdaptor {
        public ExplicitlyInitializedClassLaoderWeavingAdaptor(ClassLoaderWeavingAdaptor weavingAdaptor) {
======= 70888dd^:"loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java"

        messageHandler = bcelWorld.getMessageHandler();
        // after adding aspects
        weaver.prepareForWeave();
======= 70888dd^:"loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java"

            registerAspectExclude(weaver, loader, definitions);
            registerAspects(weaver, loader, definitions);
            registerIncludeExclude(weaver, loader, definitions);
            registerDump(weaver, loader, definitions);

======= 3021284^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"

======= 3021284^:"weaver/src/org/aspectj/weaver/patterns/ReferencePointcut.java"

======= 3021284^:"weaver/src/org/aspectj/weaver/patterns/ReferencePointcut.java"

======= 3021284^:"weaver/src/org/aspectj/weaver/patterns/ReferencePointcut.java"


======= f06df41^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"

======= f06df41^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"

            			
            			reportMethodCtorWeavingMessage(clazz, mg, decaM);
======= f06df41^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"

======= f06df41^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"

======= f06df41^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"


======= ae612d9^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"

======= ae612d9^:"weaver/src/org/aspectj/weaver/patterns/BindingTypePattern.java"

        result = 37*result + type.hashCode();
======= ae612d9^:"weaver/src/org/aspectj/weaver/patterns/ExactTypePattern.java"

======= ae612d9^:"weaver/src/org/aspectj/weaver/patterns/ExactTypePattern.java"


======= 332a5df^:"util/src/org/aspectj/util/ConfigParser.java"

        if (dir != null && !ret.isAbsolute()) { 

======= 999d9b0^:"bcel-builder/src/org/aspectj/apache/bcel/classfile/ClassParser.java"

 * @version $Id: ClassParser.java,v 1.3 2005/09/14 11:10:57 aclement Exp $
======= 999d9b0^:"bcel-builder/src/org/aspectj/apache/bcel/classfile/ClassParser.java"

    constant_pool = new ConstantPool(file);

======= 04e8dca^:"weaver/src/org/aspectj/weaver/World.java"

======= 04e8dca^:"weaver/src/org/aspectj/weaver/bcel/BcelWorld.java"

======= 04e8dca^:"weaver/src/org/aspectj/weaver/bcel/BcelWorld.java"

        ReferenceType nameTypeX = (ReferenceType)typeMap.get(signature);

======= ab6c7a5^:"ajdoc/src/org/aspectj/tools/ajdoc/HtmlDecorator.java"

======= ab6c7a5^:"ajdoc/src/org/aspectj/tools/ajdoc/HtmlDecorator.java"

    static List visibleFileList = new ArrayList();
======= ab6c7a5^:"ajdoc/src/org/aspectj/tools/ajdoc/HtmlDecorator.java"

        int pointcutSummaryIndex = fileContents.toString().indexOf("Pointcut Summary");
        int adviceSummaryIndex = fileContents.toString().indexOf("Advice Summary");
======= ab6c7a5^:"ajdoc/src/org/aspectj/tools/ajdoc/HtmlDecorator.java"

    		insertDeclarationsSummary(fileBuffer, pointcuts, "Pointcut Summary", index);
    		insertDeclarationsDetails(fileBuffer, pointcuts, "Pointcut Detail", index);
    		insertDeclarationsSummary(fileBuffer, advice, "Advice Summary", index);
    		insertDeclarationsDetails(fileBuffer, advice, "Advice Detail", index);
======= ab6c7a5^:"ajdoc/src/org/aspectj/tools/ajdoc/HtmlDecorator.java"

                if ( kind.equals( "Advice Summary" ) ) {
======= ab6c7a5^:"ajdoc/src/org/aspectj/tools/ajdoc/HtmlDecorator.java"

                else if ( kind.equals( "Pointcut Summary" ) ) {
======= ab6c7a5^:"ajdoc/src/org/aspectj/tools/ajdoc/HtmlDecorator.java"

                else if ( kind.equals( "Introduction Summary" ) ) {
                            "<TT>introduction " + decl.toLabelString() + "</TT></A><P>" +
                            generateIntroductionSignatures(decl, false) +
======= ab6c7a5^:"ajdoc/src/org/aspectj/tools/ajdoc/HtmlDecorator.java"

                if ( kind.equals( "Advice Detail" ) ) {
======= ab6c7a5^:"ajdoc/src/org/aspectj/tools/ajdoc/HtmlDecorator.java"

                else if (kind.equals("Pointcut Detail")) {
                else if (kind.equals("Introduction Detail")) {
                	entry += "<H3>introduction " + decl.toLabelString() + "</H3><P>";
======= ab6c7a5^:"ajdoc/src/org/aspectj/tools/ajdoc/HtmlDecorator.java"

        if (targets != null && !targets.isEmpty()) {
            String prevName = "";
            
======= ab6c7a5^:"ajdoc/src/org/aspectj/tools/ajdoc/HtmlDecorator.java"

      List targets = StructureUtil.getTargets(decl, IRelationship.Kind.ADVICE);
      if (targets == null) return null;
        List packageList = new ArrayList();
        String entry
        = "<TABLE WIDTH=\"100%\" BGCOLOR=#FFFFFF><TR>" +
          "<TD width=\"10%\" bgcolor=\"#FFD8B0\"><B><FONT COLOR=000000>&nbsp;Advises:</b></font></td><td>";
    
======= ab6c7a5^:"ajdoc/src/org/aspectj/tools/ajdoc/HtmlDecorator.java"

        String hrefLink = decl.toLabelString(); // !!!
======= ab6c7a5^:"ajdoc/src/org/aspectj/tools/ajdoc/StructureUtil.java"

======= ab6c7a5^:"ajdoc/src/org/aspectj/tools/ajdoc/StructureUtil.java"

======= ab6c7a5^:"ajdoc/src/org/aspectj/tools/ajdoc/StubFileGenerator.java"

======= ab6c7a5^:"ajdoc/src/org/aspectj/tools/ajdoc/StubFileGenerator.java"

======= ab6c7a5^:"ajdoc/src/org/aspectj/tools/ajdoc/StubFileGenerator.java"

======= ab6c7a5^:"ajdoc/testsrc/org/aspectj/tools/ajdoc/AjdocTests.java"

    public static File ASPECTJRT_PATH;
======= ab6c7a5^:"ajdoc/testsrc/org/aspectj/tools/ajdoc/AjdocTests.java"

======= ab6c7a5^:"ajdoc/testsrc/org/aspectj/tools/ajdoc/CoverageTestCase.java"

======= ab6c7a5^:"ajdoc/testsrc/org/aspectj/tools/ajdoc/CoverageTestCase.java"

======= ab6c7a5^:"ajdoc/testsrc/org/aspectj/tools/ajdoc/ExecutionTestCase.java"

======= ab6c7a5^:"ajdoc/testsrc/org/aspectj/tools/ajdoc/PatternsTestCase.java"

======= ab6c7a5^:"ajdoc/testsrc/org/aspectj/tools/ajdoc/PointcutVisibilityTest.java"

    protected File file1 = new File("testdata/bug82340/Pointcuts.java");
    protected File outdir = new File("testdata/bug82340/doc");
======= ab6c7a5^:"ajdoc/testsrc/org/aspectj/tools/ajdoc/SpacewarTestCase.java"

======= ab6c7a5^:"ajdoc/testsrc/org/aspectj/tools/ajdoc/SpacewarTestCase.java"

======= ab6c7a5^:"asm/src/org/aspectj/asm/IRelationship.java"


======= 727b0f5^:"tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java"


======= 12e6334^:"loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java"

        weaver.setReweavableMode(weaverOption.reWeavable, false);
======= 12e6334^:"loadtime/src/org/aspectj/weaver/loadtime/Options.java"

    private final static String OPTION_reweavable = "-Xreweavable";
======= 12e6334^:"loadtime/src/org/aspectj/weaver/loadtime/Options.java"

            } else if (arg.equalsIgnoreCase(OPTION_reweavable)) {
                weaverOption.reWeavable = true;
======= 12e6334^:"loadtime/src/org/aspectj/weaver/loadtime/Options.java"

        boolean reWeavable;
======= 12e6334^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java"

            	buildConfig.setXreweavable(true);
            		buildConfig.setXreweavableCompressClasses(true);
======= 12e6334^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/core/AspectJCore.java"

======= 12e6334^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java"

        if (!isXreweavable() && global.isXreweavable()) {
        	setXreweavable(true);
        }
        if (!getXreweavableCompressClasses() && global.getXreweavableCompressClasses()) {
        	setXreweavableCompressClasses(true);
======= 12e6334^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java"

======= 12e6334^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java"

======= 12e6334^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"

======= 12e6334^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjCompilerOptions.java"

======= 12e6334^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjCompilerOptions.java"

======= 12e6334^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjCompilerOptions.java"

======= 12e6334^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjCompilerOptions.java"

======= 12e6334^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjCompilerOptions.java"

======= 12e6334^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjCompilerOptions.java"

======= 12e6334^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AspectJBuilder.java"

======= 12e6334^:"org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/BinaryFormsTestCase.java"

======= 12e6334^:"org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/BinaryFormsTestCase.java"

======= 12e6334^:"org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/BinaryFormsTestCase.java"

======= 12e6334^:"org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/BinaryFormsTestCase.java"

======= 12e6334^:"org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/BinaryFormsTestCase.java"

======= 12e6334^:"org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/core/builder/AjCompilerOptionsTest.java"

======= 12e6334^:"org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/core/builder/AjCompilerOptionsTest.java"

======= 12e6334^:"org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/core/builder/AjCompilerOptionsTest.java"

======= 12e6334^:"org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/core/builder/AjCompilerOptionsTest.java"

======= 12e6334^:"org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/core/builder/AjCompilerOptionsTest.java"

======= 12e6334^:"taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java"

        		"reweavable", "reweavable:compress", "noInline"
======= 12e6334^:"taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java"

======= 12e6334^:"taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java"

======= 12e6334^:"testing/newsrc/org/aspectj/testing/WeaveSpec.java"

======= 12e6334^:"testing/src/org/aspectj/testing/harness/bridge/CompilerRun.java"

                 options="-Xreweavable"
                 options="-Xreweavable"
======= 12e6334^:"tests/java5/ataspectj/ataspectj/ltwlog/MainVerboseAndShow.java"

                "info weaving 'ataspectj/ltwlog/Aspect1'"}))) {
    <weaver options="-XmessageHandlerClass:ataspectj.ltwlog.MessageHolder -verbose"/>
        		   pack/MyInterface.java"/>
   	   <compile files="TestA_generictype.java" outjar="code.jar" options="-1.5,-Xreweavable"/>
       <compile files="TestA_aspect.aj,TestA_class.java" inpath="code.jar" options="-1.5,-Xreweavable"/>
   	   <compile files="TestB_generictype.java" outjar="code.jar" options="-1.5,-Xreweavable"/>
       <compile files="TestB_aspect1.aj,TestB_aspect2.aj,TestB_class.java" inpath="code.jar" options="-1.5,-Xreweavable"/>
   	   <compile files="BaseClass.java" outjar="code.jar" options="-1.5,-Xreweavable"/>
       <compile files="A1.aj" inpath="code.jar" options="-1.5,-Xreweavable"/>
   	   <compile files="BaseClass.java,A1.aj" outjar="code.jar" options="-1.5,-Xreweavable,-showWeaveInfo">
       <compile files="A2.aj" inpath="code.jar" options="-1.5,-Xreweavable,-showWeaveInfo">
   	   <compile files="BaseClass.java,A1.aj,A2.aj" outjar="code.jar" options="-1.5,-Xreweavable"/>
       <compile files="A3.aj" inpath="code.jar" options="-1.5,-Xreweavable"/>
   	 <compile files="Sub1.java,Super1.java" outjar="code.jar" options="-1.5,-Xreweavable"/>
   	 <compile files="X1.aj,Util.java" inpath="code.jar" options ="-1.5,-Xreweavable"/>
   	 <compile files="Sub2.java,Super2.java" outjar="code.jar" options="-1.5,-Xreweavable"/>
   	 <compile files="X2.aj,Util.java" inpath="code.jar" options ="-1.5,-Xreweavable"/>
   	 <compile files="Sub3.java,Super3.java" outjar="code.jar" options="-1.5,-Xreweavable"/>
   	 <compile files="X3.aj,Util.java" inpath="code.jar" options ="-1.5,-Xreweavable"/>
======= 12e6334^:"tests/src/org/aspectj/systemtest/ajc150/ataspectj/AtAjLTWTests.java"

        runTest("AjcLTW AroundInlineMungerTest -Xreweavable");
            options="-1.5 -Xreweavable"/>
            options="-1.5 -Xreweavable"/>
            options="-1.5 -Xreweavable"/>
            options="-1.5 -Xlint:ignore -XnoInline -Xreweavable"/>
            options="-1.5 -Xreweavable -XnoInline"/>
            options="-1.5 -Xreweavable"/>
            options="-1.5 -Xreweavable"
        <compile staging="true" options="-incremental,-emacssym" sourceroots="src"/>
        <compile staging="true" options="-incremental,-emacssym" sourceroots="src"/>
======= 12e6334^:"weaver/src/org/aspectj/weaver/WeaverStateInfo.java"

======= 12e6334^:"weaver/src/org/aspectj/weaver/WeaverStateInfo.java"

======= 12e6334^:"weaver/src/org/aspectj/weaver/WeaverStateInfo.java"

======= 12e6334^:"weaver/src/org/aspectj/weaver/WeaverStateInfo.java"

======= 12e6334^:"weaver/src/org/aspectj/weaver/WeaverStateInfo.java"

======= 12e6334^:"weaver/src/org/aspectj/weaver/WeaverStateInfo.java"

======= 12e6334^:"weaver/src/org/aspectj/weaver/WeaverStateInfo.java"

======= 12e6334^:"weaver/src/org/aspectj/weaver/WeaverStateInfo.java"

======= 12e6334^:"weaver/src/org/aspectj/weaver/WeaverStateInfo.java"

    ////
    
======= 12e6334^:"weaver/src/org/aspectj/weaver/WeaverStateInfo.java"

======= 12e6334^:"weaver/src/org/aspectj/weaver/WeaverStateInfo.java"

======= 12e6334^:"weaver/src/org/aspectj/weaver/WeaverStateInfo.java"

======= 12e6334^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"

======= 12e6334^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"

        	clazz.getOrCreateWeaverStateInfo();
        if (inReweavableMode || clazz.getType().isAspect()) {
        	WeaverStateInfo wsi = clazz.getOrCreateWeaverStateInfo();
        	wsi.setReweavable(true,compressReweavableAttributes);
        	clazz.getOrCreateWeaverStateInfo().setReweavable(false,false);
======= 12e6334^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"

======= 12e6334^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"

        mg.matchedShadows = null;
======= 12e6334^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"

======= 12e6334^:"weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java"

======= 12e6334^:"weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java"

======= 12e6334^:"weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java"

    	ret[0] = new UnwovenClassFile(clazz.getFileName(),clazz.getJavaClass(world).getBytes());
======= 12e6334^:"weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java"

======= 12e6334^:"weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java"

======= 12e6334^:"weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java"

======= 12e6334^:"weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java"


======= 451fea8^:"weaver/src/org/aspectj/weaver/patterns/AnnotationPatternList.java"

======= 451fea8^:"weaver/src/org/aspectj/weaver/patterns/AnnotationPatternList.java"

======= 451fea8^:"weaver/src/org/aspectj/weaver/patterns/AnnotationPointcut.java"

======= 451fea8^:"weaver/src/org/aspectj/weaver/patterns/AnnotationPointcut.java"

======= 451fea8^:"weaver/src/org/aspectj/weaver/patterns/ArgsAnnotationPointcut.java"

======= 451fea8^:"weaver/src/org/aspectj/weaver/patterns/ArgsAnnotationPointcut.java"

======= 451fea8^:"weaver/src/org/aspectj/weaver/patterns/ArgsPointcut.java"

======= 451fea8^:"weaver/src/org/aspectj/weaver/patterns/ArgsPointcut.java"

======= 451fea8^:"weaver/src/org/aspectj/weaver/patterns/ArgsPointcut.java"

======= 451fea8^:"weaver/src/org/aspectj/weaver/patterns/ArgsPointcut.java"

======= 451fea8^:"weaver/src/org/aspectj/weaver/patterns/CflowPointcut.java"

======= 451fea8^:"weaver/src/org/aspectj/weaver/patterns/CflowPointcut.java"

======= 451fea8^:"weaver/src/org/aspectj/weaver/patterns/ConcreteCflowPointcut.java"

======= 451fea8^:"weaver/src/org/aspectj/weaver/patterns/ConcreteCflowPointcut.java"

======= 451fea8^:"weaver/src/org/aspectj/weaver/patterns/DeclareAnnotation.java"

======= 451fea8^:"weaver/src/org/aspectj/weaver/patterns/DeclarePrecedence.java"

======= 451fea8^:"weaver/src/org/aspectj/weaver/patterns/HandlerPointcut.java"

======= 451fea8^:"weaver/src/org/aspectj/weaver/patterns/HandlerPointcut.java"

======= 451fea8^:"weaver/src/org/aspectj/weaver/patterns/PerCflow.java"

======= 451fea8^:"weaver/src/org/aspectj/weaver/patterns/PerCflow.java"

======= 451fea8^:"weaver/src/org/aspectj/weaver/patterns/PerFromSuper.java"

======= 451fea8^:"weaver/src/org/aspectj/weaver/patterns/PerFromSuper.java"

======= 451fea8^:"weaver/src/org/aspectj/weaver/patterns/PerObject.java"

======= 451fea8^:"weaver/src/org/aspectj/weaver/patterns/PerObject.java"

======= 451fea8^:"weaver/src/org/aspectj/weaver/patterns/PerSingleton.java"

======= 451fea8^:"weaver/src/org/aspectj/weaver/patterns/PerSingleton.java"

======= 451fea8^:"weaver/src/org/aspectj/weaver/patterns/PerTypeWithin.java"

======= 451fea8^:"weaver/src/org/aspectj/weaver/patterns/PerTypeWithin.java"

======= 451fea8^:"weaver/src/org/aspectj/weaver/patterns/Pointcut.java"

======= 451fea8^:"weaver/src/org/aspectj/weaver/patterns/ThisOrTargetAnnotationPointcut.java"

======= 451fea8^:"weaver/src/org/aspectj/weaver/patterns/ThisOrTargetAnnotationPointcut.java"

======= 451fea8^:"weaver/src/org/aspectj/weaver/patterns/ThisOrTargetPointcut.java"

======= 451fea8^:"weaver/src/org/aspectj/weaver/patterns/ThisOrTargetPointcut.java"

======= 451fea8^:"weaver/src/org/aspectj/weaver/patterns/TypePattern.java"

======= 451fea8^:"weaver/src/org/aspectj/weaver/patterns/WithinAnnotationPointcut.java"

======= 451fea8^:"weaver/src/org/aspectj/weaver/patterns/WithinAnnotationPointcut.java"

======= 451fea8^:"weaver/src/org/aspectj/weaver/patterns/WithinCodeAnnotationPointcut.java"

======= 451fea8^:"weaver/src/org/aspectj/weaver/patterns/WithinCodeAnnotationPointcut.java"

======= 451fea8^:"weaver/src/org/aspectj/weaver/patterns/WithinPointcut.java"

======= 451fea8^:"weaver/src/org/aspectj/weaver/patterns/WithinPointcut.java"

======= 451fea8^:"weaver/src/org/aspectj/weaver/patterns/WithincodePointcut.java"

======= 451fea8^:"weaver/src/org/aspectj/weaver/patterns/WithincodePointcut.java"


======= 2b0e675^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeConstructorDeclaration.java"

======= 2b0e675^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeConstructorDeclaration.java"

======= 2b0e675^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"


======= 4573068^:"asm/src/org/aspectj/asm/internal/AspectJElementHierarchy.java"

======= 4573068^:"asm/src/org/aspectj/asm/internal/AspectJElementHierarchy.java"

======= 4573068^:"asm/src/org/aspectj/asm/internal/AspectJElementHierarchy.java"

======= 4573068^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmHierarchyBuilder.java"

======= 4573068^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmHierarchyBuilder.java"

======= 4573068^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmHierarchyBuilder.java"

======= 4573068^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmHierarchyBuilder.java"

======= 4573068^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"

======= 4573068^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"

======= 4573068^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"


  @org.aspectj.lang.annotation.SuppressAjWarnings
======= 81a0790^:"tests/src/org/aspectj/systemtest/ajc150/SuppressedWarnings.java"

======= 81a0790^:"weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java"

======= 81a0790^:"weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java"

======= 81a0790^:"weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java"

======= 81a0790^:"weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java"

    	if (suppressedLintKinds == null) {
    		if (signature instanceof BcelMethod) {
    			this.suppressedLintKinds = Utility.getSuppressedWarnings(signature.getAnnotations(), world.getLint());
    		} else {
    			this.suppressedLintKinds = Collections.EMPTY_LIST;
    		}
    	}
    	world.getLint().suppressKinds(suppressedLintKinds);
======= 81a0790^:"weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java"

======= 81a0790^:"weaver/src/org/aspectj/weaver/bcel/Utility.java"


======= 85a4b0a^:"bcel-builder/src/org/aspectj/apache/bcel/generic/MethodGen.java"

 * @version $Id: MethodGen.java,v 1.4 2005/03/10 12:15:04 aclement Exp $
======= 85a4b0a^:"bcel-builder/src/org/aspectj/apache/bcel/generic/MethodGen.java"


======= 97520cf^:"bcel-builder/src/org/aspectj/apache/bcel/generic/LocalVariableGen.java"

 * @version $Id: LocalVariableGen.java,v 1.3 2004/11/22 08:31:27 aclement Exp $
======= 97520cf^:"bcel-builder/src/org/aspectj/apache/bcel/generic/LocalVariableGen.java"

    if(length > 0)
======= 97520cf^:"weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java"

                        LocalVariableTag lr = new LocalVariableTag(BcelWorld.fromBcel(lng.getType()), lng.getName(), lng.getIndex());
======= 97520cf^:"weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java"

        HashMap map = new HashMap();
        /* Make copies of all instructions, append them to the new list
         * and associate old instruction references with the new ones, i.e.,
         * a 1:1 mapping.
         */
        for (InstructionHandle ih = getBody().getStart(); ih != null; ih = ih.getNext()) {
            if (Range.isRangeHandle(ih)) {
                continue;
            }
            Instruction i = ih.getInstruction();
            Instruction c = Utility.copyInstruction(i);
            if (c instanceof BranchInstruction)
                map.put(ih, fresh.append((BranchInstruction) c));
            else
                map.put(ih, fresh.append(c));
        }
        InstructionHandle ih = getBody().getStart();
        InstructionHandle jh = fresh.getStart();
        LinkedList exnList = new LinkedList();   
======= 97520cf^:"weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java"

        while (ih != null) {
            if (map.get(ih) == null) {
                // we're a range instruction
                Range r = Range.getRange(ih);
                if (r instanceof ExceptionRange) {
                    ExceptionRange er = (ExceptionRange) r;
                    if (er.getStart() == ih) {
                    	//System.err.println("er " + er);
                    	if (!er.isEmpty()){
                        	// order is important, insert handlers in order of start
                        	insertHandler(er, exnList);
                    	}
                    }
                } else {
                    // we must be a shadow range or something equally useless, 
                    // so forget about doing anything
                }
                ih = ih.getNext();
                Instruction i = ih.getInstruction();
                Instruction j = jh.getInstruction();
    
                if (i instanceof BranchInstruction) {
                    BranchInstruction bi = (BranchInstruction) i;
                    BranchInstruction bj = (BranchInstruction) j;
                    InstructionHandle itarget = bi.getTarget(); // old target
    
                    // New target is in hash map
                    bj.setTarget(remap(itarget, map));
    
                    if (bi instanceof Select) { 
                        // Either LOOKUPSWITCH or TABLESWITCH
                        InstructionHandle[] itargets = ((Select) bi).getTargets();
                        InstructionHandle[] jtargets = ((Select) bj).getTargets();
                        for (int k = itargets.length - 1; k >= 0; k--) { 
                            // Update all targets
                            jtargets[k] = remap(itargets[k], map);
                            jtargets[k].addTargeter(bj);
                        }
                    }
                }
                InstructionTargeter[] targeters = ih.getTargeters();
                                gen.addLineNumber(jh, line + lineNumberOffset);
                ih = ih.getNext();
                jh = jh.getNext();
        // now add exception handlers
        for (Iterator iter = exnList.iterator(); iter.hasNext();) {
            ExceptionRange r = (ExceptionRange) iter.next();
            if (r.isEmpty()) continue;
            gen.addExceptionHandler(
                remap(r.getRealStart(), map), 
                remap(r.getRealEnd(), map),
                remap(r.getHandler(), map),
                (r.getCatchType() == null)
                ? null 
                : (ObjectType) BcelWorld.makeBcelType(r.getCatchType()));
        // now add local variables
======= 97520cf^:"weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java"

        
        // JAVAC adds line number tables (with just one entry) to generated accessor methods - this
        // keeps some tools that rely on finding at least some form of linenumbertable happy.
        // Let's check if we have one - if we don't then let's add one.
        // TODO Could be made conditional on whether line debug info is being produced
        if (gen.getLineNumbers().length==0) { 
        	gen.addLineNumber(gen.getInstructionList().getStart(),1);
    }
======= 97520cf^:"weaver/src/org/aspectj/weaver/bcel/LocalVariableTag.java"

    public LocalVariableTag(UnresolvedType type, String name, int slot) {
======= 97520cf^:"weaver/src/org/aspectj/weaver/bcel/LocalVariableTag.java"

        return o.type.equals(type) && o.name.equals(name) && o.slot == slot;
======= 97520cf^:"weaver/src/org/aspectj/weaver/bcel/LocalVariableTag.java"


======= fb428d0^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"


======= e76b370^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"

======= e76b370^:"weaver/src/org/aspectj/weaver/ResolvedTypeMunger.java"

   				if (onType.getWeaverState() == null) {

======= a4a9090^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"

======= a4a9090^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"

======= a4a9090^:"org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/core/builder/OutjarTest.java"

======= a4a9090^:"weaver/src/org/aspectj/weaver/JoinPointSignature.java"

======= a4a9090^:"weaver/src/org/aspectj/weaver/JoinPointSignature.java"

======= a4a9090^:"weaver/src/org/aspectj/weaver/JoinPointSignature.java"

======= a4a9090^:"weaver/src/org/aspectj/weaver/Member.java"

======= a4a9090^:"weaver/src/org/aspectj/weaver/Member.java"

    public JoinPointSignature[] getJoinPointSignatures(World world);
======= a4a9090^:"weaver/src/org/aspectj/weaver/MemberImpl.java"

    private JoinPointSignature[] joinPointSignatures = null;
======= a4a9090^:"weaver/src/org/aspectj/weaver/MemberImpl.java"

======= a4a9090^:"weaver/src/org/aspectj/weaver/MemberImpl.java"

======= a4a9090^:"weaver/src/org/aspectj/weaver/ReferenceType.java"

    // true iff the statement "this = other" would compile.
======= a4a9090^:"weaver/src/org/aspectj/weaver/ReferenceType.java"

            if (this.isAssignableFrom((ResolvedType) i.next())) return true;
======= a4a9090^:"weaver/src/org/aspectj/weaver/ResolvedMemberImpl.java"

======= a4a9090^:"weaver/src/org/aspectj/weaver/ResolvedMemberImpl.java"

======= a4a9090^:"weaver/src/org/aspectj/weaver/ResolvedType.java"

======= a4a9090^:"weaver/src/org/aspectj/weaver/ResolvedType.java"

    public List getMethodsWithoutIterator(boolean includeITDs) {
        addAndRecurse(knowninterfaces,methods,this,includeITDs);
    private void addAndRecurse(Set knowninterfaces,List collector, ResolvedType rtx, boolean includeITDs) {
======= a4a9090^:"weaver/src/org/aspectj/weaver/ResolvedType.java"

    	  if (rtx == null || rtx == ResolvedType.MISSING) {
    		  // can't find type message - with context!
    		  world.showMessage(Message.ERROR,
    	  } else {
    		  addAndRecurse(knowninterfaces,collector,superType,includeITDs); // Recurse if we aren't at the top
======= a4a9090^:"weaver/src/org/aspectj/weaver/ResolvedType.java"

          addAndRecurse(knowninterfaces,collector,iface,includeITDs);
======= a4a9090^:"weaver/src/org/aspectj/weaver/ResolvedType.java"

     public ResolvedMember lookupResolvedMember(ResolvedMember aMember) {
    		toSearch = getMethodsWithoutIterator(true).iterator();
======= a4a9090^:"weaver/src/org/aspectj/weaver/ResolvedType.java"

======= a4a9090^:"weaver/src/org/aspectj/weaver/ResolvedType.java"

======= a4a9090^:"weaver/src/org/aspectj/weaver/ResolvedType.java"

======= a4a9090^:"weaver/src/org/aspectj/weaver/ResolvedType.java"

======= a4a9090^:"weaver/src/org/aspectj/weaver/ResolvedType.java"

    private void collectInterTypeMungers(List collector) {
======= a4a9090^:"weaver/src/org/aspectj/weaver/ResolvedType.java"

======= a4a9090^:"weaver/src/org/aspectj/weaver/ResolvedType.java"

======= a4a9090^:"weaver/src/org/aspectj/weaver/ResolvedType.java"

======= a4a9090^:"weaver/src/org/aspectj/weaver/WeaverMessages.java"

======= a4a9090^:"weaver/src/org/aspectj/weaver/World.java"

                handleRequiredMissingTypeDuringResolution(ty);
======= a4a9090^:"weaver/src/org/aspectj/weaver/World.java"

======= a4a9090^:"weaver/src/org/aspectj/weaver/bcel/BcelAccessForInlineMunger.java"

                List methods = callee.getMethodsWithoutIterator(false);
======= a4a9090^:"weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java"

        List methods = newParent.getMethodsWithoutIterator(false);
======= a4a9090^:"weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java"

            List methods = newParent.getMethodsWithoutIterator(false);
                    List newParentTargetMethods = newParentTarget.getType().getMethodsWithoutIterator(false);
======= a4a9090^:"weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java"

======= a4a9090^:"weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java"

======= a4a9090^:"weaver/src/org/aspectj/weaver/patterns/SignaturePattern.java"

======= a4a9090^:"weaver/src/org/aspectj/weaver/patterns/SignaturePattern.java"

======= a4a9090^:"weaver/src/org/aspectj/weaver/patterns/SignaturePattern.java"

======= a4a9090^:"weaver/src/org/aspectj/weaver/patterns/SignaturePattern.java"

======= a4a9090^:"weaver/src/org/aspectj/weaver/patterns/SignaturePattern.java"

======= a4a9090^:"weaver/src/org/aspectj/weaver/patterns/SignaturePattern.java"

======= a4a9090^:"weaver/src/org/aspectj/weaver/patterns/TypePatternList.java"

======= a4a9090^:"weaver/src/org/aspectj/weaver/patterns/WildTypePattern.java"


======= 03b20bc^:"loadtime/src/org/aspectj/weaver/loadtime/Aj.java"

======= 03b20bc^:"loadtime/src/org/aspectj/weaver/loadtime/Aj.java"

            WeavingAdaptor weavingAdaptor = WeaverContainer.getWeaver(loader);
======= 03b20bc^:"loadtime/src/org/aspectj/weaver/loadtime/Aj.java"

        static WeavingAdaptor getWeaver(ClassLoader loader) {
                        weavingAdaptor = new ClassLoaderWeavingAdaptor(loader);
======= 03b20bc^:"loadtime/src/org/aspectj/weaver/loadtime/Aj.java"

======= 03b20bc^:"loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java"

======= 03b20bc^:"loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java"

======= 03b20bc^:"loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java"

    public ClassLoaderWeavingAdaptor(final ClassLoader loader) {
======= 03b20bc^:"loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java"

======= 03b20bc^:"loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java"

            Enumeration xmls = loader.getResources(AOP_XML);
======= 03b20bc^:"loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java"

            while (xmls.hasMoreElements()) {
                URL xml = (URL) xmls.nextElement();
                MessageUtil.info(messageHandler, "using " + xml.getFile());
                definitions.add(DocumentParser.parse(xml));
            }
======= 03b20bc^:"loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java"

======= 03b20bc^:"loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java"

======= 03b20bc^:"loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java"

======= 03b20bc^:"loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java"


======= 8a0f59a^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectDeclaration.java"

======= 8a0f59a^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java"

======= 8a0f59a^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java"

======= 8a0f59a^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"

       <message kind="error" line="7" text="The method m(List&lt;Integer&gt;) in the type Base&lt;N&gt; is not applicable for the arguments (List&lt;String&gt;)"/>
       <message kind="error" line="23" text="The method m0(Integer) in the type GenericAspect&lt;A,B&gt;.SimpleI&lt;L&gt; is not applicable for the arguments (String)"/>
       <message kind="error" line="24" text="The method m1(List&lt;Integer&gt;) in the type GenericAspect&lt;A,B&gt;.SimpleI&lt;L&gt; is not applicable for the arguments (List&lt;String&gt;)"/>
       <message kind="error" line="26" text="The method add(Bottom) in the type List&lt;E&gt; is not applicable for the arguments (Top)"/>
======= 8a0f59a^:"weaver/src/org/aspectj/weaver/AjcMemberMaker.java"

======= 8a0f59a^:"weaver/src/org/aspectj/weaver/bcel/BcelPerClauseAspectAdder.java"

        LazyMethodGen method = makeMethodGen(classGen, AjcMemberMaker.perTypeWithinAspectOfMethod(aspectType));
======= 8a0f59a^:"weaver/src/org/aspectj/weaver/bcel/BcelPerClauseAspectAdder.java"

        LazyMethodGen method = makeMethodGen(classGen, AjcMemberMaker.perTypeWithinHasAspectMethod(aspectType));

======= ca9c1f7^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"

    public void testUnableToBuildShadows_pr109728() { runTest("Unable to build shadows");}

======= 0e1bb19^:"bcel-builder/src/org/aspectj/apache/bcel/generic/InstructionComparator.java"

 * @version $Id: InstructionComparator.java,v 1.2 2004/11/19 16:45:19 aclement Exp $
  public static final InstructionComparator DEFAULT =
    new InstructionComparator() {
      };

======= a39f595^:"aspectj5rt/java5-src/org/aspectj/internal/lang/reflect/AjTypeImpl.java"

======= a39f595^:"aspectj5rt/java5-src/org/aspectj/internal/lang/reflect/PointcutImpl.java"

======= a39f595^:"aspectj5rt/java5-src/org/aspectj/internal/lang/reflect/PointcutImpl.java"

======= a39f595^:"aspectj5rt/java5-src/org/aspectj/internal/lang/reflect/PointcutImpl.java"

======= a39f595^:"aspectj5rt/java5-src/org/aspectj/lang/annotation/Pointcut.java"

======= a39f595^:"aspectj5rt/java5-src/org/aspectj/lang/reflect/Pointcut.java"

======= a39f595^:"bcel-builder/src/org/aspectj/apache/bcel/classfile/JavaClass.java"

 * @version $Id: JavaClass.java,v 1.6 2005/07/08 15:17:23 aclement Exp $
======= a39f595^:"bcel-builder/src/org/aspectj/apache/bcel/classfile/JavaClass.java"

======= a39f595^:"bcel-builder/src/org/aspectj/apache/bcel/generic/Type.java"

 * @version $Id: Type.java,v 1.5 2005/06/01 14:57:23 aclement Exp $
======= a39f595^:"bcel-builder/src/org/aspectj/apache/bcel/generic/Type.java"

======= a39f595^:"bcel-builder/src/org/aspectj/apache/bcel/generic/Type.java"

======= a39f595^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AtAspectJAnnotationFactory.java"

======= a39f595^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/PointcutDeclaration.java"

======= a39f595^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/PointcutDeclaration.java"

======= a39f595^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/PointcutDesignator.java"

    private PseudoTokens tokens; //XXX redundant
======= a39f595^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/PointcutDesignator.java"

======= a39f595^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/PointcutDesignator.java"

======= a39f595^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"

  public void testUnableToBuildShadows_pr109728() { runTest("Unable to build shadows");}
======= a39f595^:"tests/src/org/aspectj/systemtest/ajc150/ataspectj/AtAjAnnotationGenTests.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/Shadow.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/Shadow.java"

    public static final Set ALL_SHADOW_KINDS = new HashSet();   
======= a39f595^:"weaver/src/org/aspectj/weaver/UnresolvedType.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/World.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/World.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/internal/tools/PointcutExpressionImpl.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/internal/tools/PointcutExpressionImpl.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/internal/tools/PointcutExpressionImpl.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/internal/tools/PointcutExpressionImpl.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/AndPointcut.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/AndPointcut.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/AndPointcut.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/AndTypePattern.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/AndTypePattern.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/AnnotationPointcut.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/AnnotationPointcut.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/ArgsAnnotationPointcut.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/ArgsAnnotationPointcut.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/ArgsAnnotationPointcut.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/ArgsAnnotationPointcut.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/ArgsPointcut.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/ArgsPointcut.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/ArgsPointcut.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/ArgsPointcut.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/ArgsPointcut.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/ArgsPointcut.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/ArgsPointcut.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/CflowPointcut.java"

    
======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/CflowPointcut.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/ConcreteCflowPointcut.java"

    
======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/ConcreteCflowPointcut.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/ExactTypePattern.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/ExactTypePattern.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/HandlerPointcut.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/HandlerPointcut.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/HandlerPointcut.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/HandlerPointcut.java"

 	public FuzzyBoolean match(JoinPoint jp, JoinPoint.StaticPart jpsp) {
 	/* (non-Javadoc)
======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/HandlerPointcut.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/HasMemberTypePattern.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/IfPointcut.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/IfPointcut.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/IfPointcut.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/IfPointcut.java"

    
======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/IfPointcut.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/IfPointcut.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/IfPointcut.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/IfPointcut.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/KindedPointcut.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/KindedPointcut.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/KindedPointcut.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/KindedPointcut.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/NotPointcut.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/NotPointcut.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/NotTypePattern.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/NotTypePattern.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/OrPointcut.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/OrPointcut.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/OrPointcut.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/OrPointcut.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/OrTypePattern.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/OrTypePattern.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/PerCflow.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/PerClause.java"

    	throw new UnsupportedOperationException("Can't resolve per-clauses at runtime");
    }
======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/PerFromSuper.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/PerObject.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/PerSingleton.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/PerTypeWithin.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/Pointcut.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/Pointcut.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/Pointcut.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/Pointcut.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/Pointcut.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/Pointcut.java"

    /**
     * Returns this pointcut with type patterns etc resolved based on available RTTI 
     */
    public Pointcut resolve() {
    	assertState(SYMBOLIC);
    	this.resolveBindingsFromRTTI();
    	this.state = RESOLVED;
    	return this;
    }
======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/Pointcut.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/PointcutExpressionMatching.java"

 * Copyright (c) 2004 IBM Corporation 
 * All rights reserved. 
 * This program and the accompanying materials are made available 
 * under the terms of the Common Public License v1.0 
 * which accompanies this distribution and is available at 
 * http://www.eclipse.org/legal/cpl-v10.html 
 * ******************************************************************/
 * Interface used by PointcutExpressionImpl to determine matches.
 */
======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/ReferencePointcut.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/ReferencePointcut.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/SignaturePattern.java"

    public SignaturePattern resolveBindingsFromRTTI() {
    	return this;    	
    }
    
    
======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/SignaturePattern.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/ThisOrTargetAnnotationPointcut.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/ThisOrTargetAnnotationPointcut.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/ThisOrTargetAnnotationPointcut.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/ThisOrTargetPointcut.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/ThisOrTargetPointcut.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/ThisOrTargetPointcut.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/ThrowsPattern.java"

    
    public ThrowsPattern resolveBindingsFromRTTI() {
    	required = required.resolveBindingsFromRTTI(false,false);
    	forbidden = forbidden.resolveBindingsFromRTTI(false,false);
    	return this;
    }
    
======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/ThrowsPattern.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/ThrowsPattern.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/TypePattern.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/TypePattern.java"

    public TypePattern resolveBindingsFromRTTI(boolean allowBindng, boolean requireExactType) {
    	return this;
    }
    
======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/TypePattern.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/TypePattern.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/TypePattern.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/TypePattern.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/TypePatternList.java"

    
    
    /**
     * Used by reflection-based matching for args pcds.
     * Returns YES if types will always be matched by the pattern,
     *         NO if types do not match the pattern,
     *         MAYBE if types may match the pattern dependent on a runtime test
     */
    public FuzzyBoolean matchesArgsPatternSubset(Class[] types) {
    	int argsLength = types.length;
    	int patternLength = typePatterns.length;
    	int argsIndex = 0;
    	
    	if ((argsLength < patternLength) && (ellipsisCount == 0)) return FuzzyBoolean.NO;
    	if (argsLength < (patternLength -1)) return FuzzyBoolean.NO;
    	
    	int ellipsisMatchCount = argsLength - (patternLength - ellipsisCount);
    	
    	FuzzyBoolean ret = FuzzyBoolean.YES;
    	
    	for (int i = 0; i < typePatterns.length; i++) {
    	
    	return ret;
    }
    
======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/TypePatternList.java"

    
    // TODO Add TypePatternList.matches(Object[] objs)
    public FuzzyBoolean matches(Object[] objs, TypePattern.MatchKind kind) {
    	int nameLength = objs.length;
            FuzzyBoolean b =  outOfStar(typePatterns, objs, 0, 0, patternLength - ellipsisCount, nameLength, ellipsisCount, kind);
            return b;
    	}
    }
 
    // XXX run-time signature matching, too much duplicated code
    public FuzzyBoolean matches(Class[] types, TypePattern.MatchKind kind) {
    	int nameLength = types.length;
            FuzzyBoolean b =  outOfStar(typePatterns, types, 0, 0, patternLength - ellipsisCount, nameLength, ellipsisCount, kind);
            return b;
    	}
    }
    
======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/TypePatternList.java"

    
    
    private static FuzzyBoolean outOfStar(final TypePattern[] pattern,
  
    private static FuzzyBoolean inStar(final TypePattern[] pattern,
    private static FuzzyBoolean outOfStar(final TypePattern[] pattern,
  
    private static FuzzyBoolean inStar(final TypePattern[] pattern,
  
======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/TypePatternList.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/WildTypePattern.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/WildTypePattern.java"

    
    public FuzzyBoolean matchesInstanceof(Class type) {
    	return FuzzyBoolean.NO;
    }
    
    public boolean matchesExactly(Class type) {
    	return matchesExactlyByName(type.getName());
    }
    
======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/WithinAnnotationPointcut.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/WithinAnnotationPointcut.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/WithinAnnotationPointcut.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/WithinCodeAnnotationPointcut.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/WithinCodeAnnotationPointcut.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/WithinCodeAnnotationPointcut.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/WithinPointcut.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/WithinPointcut.java"

    
======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/WithinPointcut.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/WithinPointcut.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/WithincodePointcut.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/WithincodePointcut.java"

    
======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/WithincodePointcut.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/WithincodePointcut.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/WithincodePointcut.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/WithincodePointcut.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/WithincodePointcut.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/WithincodePointcut.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/WithincodePointcut.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/WithincodePointcut.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/WithincodePointcut.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/WithincodePointcut.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/WithincodePointcut.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/WithincodePointcut.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/patterns/WithincodePointcut.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/tools/PointcutExpression.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/tools/PointcutExpression.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/tools/PointcutParser.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/tools/PointcutParser.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/tools/PointcutParser.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/tools/PointcutParser.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/tools/PointcutParser.java"

        PointcutExpressionImpl pcExpr = null;
        try {
            Pointcut pc = new PatternParser(expression).parsePointcut();
            validateAgainstSupportedPrimitives(pc,expression);
            pc.resolve();
            pcExpr = new PointcutExpressionImpl(pc,expression);
        } catch (ParserException pEx) {
            throw new IllegalArgumentException(buildUserMessageFromParserException(expression,pEx));
        }
        return pcExpr;
======= a39f595^:"weaver/src/org/aspectj/weaver/tools/PointcutParser.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/tools/PointcutParser.java"

        	case Pointcut.REFERENCE:
        	    throw new UnsupportedPointcutPrimitiveException(expression, PointcutPrimitive.REFERENCE);
======= a39f595^:"weaver/src/org/aspectj/weaver/tools/PointcutParser.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/tools/PointcutPrimitive.java"

======= a39f595^:"weaver/src/org/aspectj/weaver/tools/PointcutPrimitive.java"

======= a39f595^:"weaver/testsrc/BcweaverModuleTests15.java"

======= a39f595^:"weaver/testsrc/BcweaverModuleTests15.java"

======= a39f595^:"weaver/testsrc/org/aspectj/weaver/patterns/AndOrNotTestCase.java"

======= a39f595^:"weaver/testsrc/org/aspectj/weaver/patterns/AndOrNotTestCase.java"

======= a39f595^:"weaver/testsrc/org/aspectj/weaver/patterns/ArgsTestCase.java"

======= a39f595^:"weaver/testsrc/org/aspectj/weaver/patterns/ArgsTestCase.java"

======= a39f595^:"weaver/testsrc/org/aspectj/weaver/patterns/HandlerTestCase.java"

 * Copyright (c) 2004 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials 
 * are made available under the terms of the Common Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/cpl-v10.html
 * 
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/
======= a39f595^:"weaver/testsrc/org/aspectj/weaver/patterns/KindedTestCase.java"

 * Copyright (c) 2004 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials 
 * are made available under the terms of the Common Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/cpl-v10.html
 * 
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/
 * @author colyer
 *
 */
======= a39f595^:"weaver/testsrc/org/aspectj/weaver/patterns/PatternsTests.java"

        suite.addTestSuite(PointcutTestCase.class);
        suite.addTestSuite(HandlerTestCase.class);
        suite.addTestSuite(KindedTestCase.class);
        suite.addTestSuite(WithinCodeTestCase.class);
======= a39f595^:"weaver/testsrc/org/aspectj/weaver/patterns/PointcutTestCase.java"

 * Copyright (c) 2004 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials 
 * are made available under the terms of the Common Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/cpl-v10.html
 * 
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/
======= a39f595^:"weaver/testsrc/org/aspectj/weaver/patterns/ThisOrTargetTestCase.java"

======= a39f595^:"weaver/testsrc/org/aspectj/weaver/patterns/ThisOrTargetTestCase.java"

 *     PARC     initial implementation 
======= a39f595^:"weaver/testsrc/org/aspectj/weaver/patterns/ThisOrTargetTestCase.java"

======= a39f595^:"weaver/testsrc/org/aspectj/weaver/patterns/WithinCodeTestCase.java"

 * Copyright (c) 2004 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials 
 * are made available under the terms of the Common Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/cpl-v10.html
 * 
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/
======= a39f595^:"weaver/testsrc/org/aspectj/weaver/patterns/WithinTestCase.java"

======= a39f595^:"weaver/testsrc/org/aspectj/weaver/patterns/WithinTestCase.java"

======= a39f595^:"weaver/testsrc/org/aspectj/weaver/patterns/WithinTestCase.java"

======= a39f595^:"weaver/testsrc/org/aspectj/weaver/tools/PointcutExpressionTest.java"

======= a39f595^:"weaver/testsrc/org/aspectj/weaver/tools/PointcutExpressionTest.java"

======= a39f595^:"weaver/testsrc/org/aspectj/weaver/tools/PointcutExpressionTest.java"

======= a39f595^:"weaver/testsrc/org/aspectj/weaver/tools/PointcutExpressionTest.java"

======= a39f595^:"weaver/testsrc/org/aspectj/weaver/tools/PointcutExpressionTest.java"

======= a39f595^:"weaver/testsrc/org/aspectj/weaver/tools/PointcutExpressionTest.java"

======= a39f595^:"weaver/testsrc/org/aspectj/weaver/tools/PointcutParserTest.java"

======= a39f595^:"weaver/testsrc/org/aspectj/weaver/tools/PointcutParserTest.java"

======= a39f595^:"weaver/testsrc/org/aspectj/weaver/tools/PointcutParserTest.java"

======= a39f595^:"weaver/testsrc/org/aspectj/weaver/tools/PointcutParserTest.java"

======= a39f595^:"weaver/testsrc/org/aspectj/weaver/tools/PointcutParserTest.java"

======= a39f595^:"weaver/testsrc/org/aspectj/weaver/tools/PointcutParserTest.java"

======= a39f595^:"weaver/testsrc/org/aspectj/weaver/tools/PointcutParserTest.java"

======= a39f595^:"weaver/testsrc/org/aspectj/weaver/tools/PointcutParserTest.java"


======= 87e5c2e^:"bcel-builder/src/org/aspectj/apache/bcel/classfile/ClassParser.java"

 * @version $Id: ClassParser.java,v 1.2 2004/11/19 16:45:18 aclement Exp $
======= 87e5c2e^:"bcel-builder/src/org/aspectj/apache/bcel/classfile/ClassParser.java"

    if(((access_flags & Constants.ACC_ABSTRACT) != 0) && 
       ((access_flags & Constants.ACC_FINAL)    != 0 ))
      throw new ClassFormatException("Class can't be both final and abstract");
======= 87e5c2e^:"bcel-builder/src/org/aspectj/apache/bcel/classfile/ClassParser.java"

======= 87e5c2e^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"


======= 2ae4f53^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"

======= 2ae4f53^:"weaver/src/org/aspectj/weaver/patterns/AnnotationPointcut.java"

======= 2ae4f53^:"weaver/src/org/aspectj/weaver/patterns/AnnotationPointcut.java"


======= 2942ca0^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java"

======= 2942ca0^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java"

======= 2942ca0^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java"

======= 2942ca0^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java"

======= 2942ca0^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"

    

======= a9ca915^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"

======= a9ca915^:"weaver/src/org/aspectj/weaver/bcel/BcelField.java"

======= a9ca915^:"weaver/src/org/aspectj/weaver/bcel/BcelField.java"


======= 5187437^:"ajde/src/org/aspectj/ajde/internal/CompilerAdapter.java"


======= 2d21db0^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java"

======= 2d21db0^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java"

======= 2d21db0^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java"

======= 2d21db0^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java"

======= 2d21db0^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java"

======= 2d21db0^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java"

======= 2d21db0^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseSourceType.java"

======= 2d21db0^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseSourceType.java"

======= 2d21db0^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseSourceType.java"

======= 2d21db0^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseSourceType.java"

======= 2d21db0^:"weaver/src/org/aspectj/weaver/ResolvedMemberImpl.java"

======= 2d21db0^:"weaver/src/org/aspectj/weaver/ResolvedMemberImpl.java"

======= 2d21db0^:"weaver/src/org/aspectj/weaver/ResolvedType.java"


======= 08d6a5d^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java"

======= 08d6a5d^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java"

======= 08d6a5d^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java"

======= 08d6a5d^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"


======= 2505485^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeMethodDeclaration.java"

======= 2505485^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeMethodDeclaration.java"

======= 2505485^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeMethodDeclaration.java"

======= 2505485^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeMethodDeclaration.java"

======= 2505485^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeMethodDeclaration.java"

======= 2505485^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeMethodDeclaration.java"

======= 2505485^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"


======= 71771ab^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"

    
======= 71771ab^:"weaver/src/org/aspectj/weaver/patterns/ArgsPointcut.java"

======= 71771ab^:"weaver/src/org/aspectj/weaver/patterns/ArgsPointcut.java"


======= df46c6f^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"

======= df46c6f^:"weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java"

======= df46c6f^:"weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java"


======= 2c88c59^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java"

======= 2c88c59^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java"

======= 2c88c59^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"

         

======= b17ff4e^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"

======= b17ff4e^:"weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java"

======= b17ff4e^:"weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java"

======= b17ff4e^:"weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java"

======= b17ff4e^:"weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java"


======= 047173e^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"

     
======= 047173e^:"tests/src/org/aspectj/systemtest/xlint/XLintTests.java"

======= 047173e^:"weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java"

======= 047173e^:"weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java"

======= 047173e^:"weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java"

        requestor.weaveCompleted();
    	return wovenClassNames;
    }

======= ad753aa^:"bcel-builder/src/org/aspectj/apache/bcel/classfile/GenericSignatureParser.java"

======= ad753aa^:"bcel-builder/src/org/aspectj/apache/bcel/classfile/GenericSignatureParser.java"

======= ad753aa^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"

  

======= 619f8bc^:"weaver/src/org/aspectj/weaver/bcel/BcelShadow.java"

======= 619f8bc^:"weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java"

======= 619f8bc^:"weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java"


======= c6bc7a2^:"bridge/src/org/aspectj/bridge/WeaveMessage.java"

    // %6 is information like "[with runtime test]"
======= c6bc7a2^:"tests/java5/ataspectj/ataspectj/ltwlog/MainVerboseAndShow.java"

                "weaveinfo Type 'ataspectj.ltwlog.MainVerboseAndShow' (MainVerboseAndShow.java:22) advised by before advice from 'ataspectj.ltwlog.Aspect1' (Aspect1.java)",
======= c6bc7a2^:"weaver/src/org/aspectj/weaver/Shadow.java"


======= a5e645f^:"runtime/src/org/aspectj/runtime/reflect/Factory.java"

======= a5e645f^:"runtime/src/org/aspectj/runtime/reflect/Factory.java"

======= a5e645f^:"runtime/src/org/aspectj/runtime/reflect/Factory.java"

======= a5e645f^:"runtime/src/org/aspectj/runtime/reflect/Factory.java"

======= a5e645f^:"runtime/src/org/aspectj/runtime/reflect/Factory.java"

======= a5e645f^:"runtime/src/org/aspectj/runtime/reflect/Factory.java"

======= a5e645f^:"runtime/src/org/aspectj/runtime/reflect/Factory.java"

======= a5e645f^:"runtime/src/org/aspectj/runtime/reflect/Factory.java"

======= a5e645f^:"runtime/src/org/aspectj/runtime/reflect/Factory.java"

======= a5e645f^:"runtime/src/org/aspectj/runtime/reflect/SignatureImpl.java"

======= a5e645f^:"runtime/src/org/aspectj/runtime/reflect/SignatureImpl.java"

        return makeClass(s);
    static Hashtable prims = new Hashtable();
    static {
        prims.put("void", Void.TYPE);
        prims.put("boolean", Boolean.TYPE);
        prims.put("byte", Byte.TYPE);
        prims.put("char", Character.TYPE);
        prims.put("short", Short.TYPE);
        prims.put("int", Integer.TYPE);
        prims.put("long", Long.TYPE);
        prims.put("float", Float.TYPE);
        prims.put("double", Double.TYPE);
    }
        
    Class makeClass(String s) {
        if (s.equals("*")) return null;
        Class ret = (Class)prims.get(s);
        if (ret != null) return ret;
        try {
            /* The documentation of Class.forName explains why this is the right thing
             * better than I could here.
             */
            ClassLoader loader = getLookupClassLoader();
            if (loader == null) {
                return Class.forName(s);
            } else {
            	// used to be 'return loader.loadClass(s)' but that didn't cause
            	// array types to be created and loaded correctly. (pr70404)
                return Class.forName(s,false,loader);
            }
        } catch (ClassNotFoundException e) {
            //System.out.println("null for: " + s);
            //XXX there should be a better return value for this
            return ClassNotFoundException.class;
        }
    }
======= a5e645f^:"runtime/src/org/aspectj/runtime/reflect/SignatureImpl.java"

        for (int i = 0; i < N; i++) ret[i]= makeClass(st.nextToken());
======= a5e645f^:"weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java"

    	list.append(new PUSH(getConstantPoolGen(), sig.getSignatureString(shadow.getWorld())));
    	list.append(fact.createInvoke(factoryType.getClassName(), 
    					sig.getSignatureMakerName(),
    					new ObjectType(sig.getSignatureType()),
    					new Type[] { Type.STRING },
    					Constants.INVOKEVIRTUAL));
======= a5e645f^:"weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java"

                    LDC "1--HelloWorld----"
                    INVOKEVIRTUAL org.aspectj.runtime.reflect.Factory.makeConstructorSig (Ljava/lang/String;)Lorg/aspectj/lang/reflect/ConstructorSignature;
                    LDC "9-main-HelloWorld-[Ljava.lang.String;:-args:--void-"
                    INVOKEVIRTUAL org.aspectj.runtime.reflect.Factory.makeMethodSig (Ljava/lang/String;)Lorg/aspectj/lang/reflect/MethodSignature;
                    LDC "1--HelloWorld----"
                    INVOKEVIRTUAL org.aspectj.runtime.reflect.Factory.makeConstructorSig (Ljava/lang/String;)Lorg/aspectj/lang/reflect/ConstructorSignature;
                    LDC "19-out-java.lang.System-java.io.PrintStream-"
                    INVOKEVIRTUAL org.aspectj.runtime.reflect.Factory.makeFieldSig (Ljava/lang/String;)Lorg/aspectj/lang/reflect/FieldSignature;
                    LDC "1-println-java.io.PrintStream-java.lang.String:-arg0:--void-"
                    INVOKEVIRTUAL org.aspectj.runtime.reflect.Factory.makeMethodSig (Ljava/lang/String;)Lorg/aspectj/lang/reflect/MethodSignature;
                    LDC "9-main-HelloWorld-[Ljava.lang.String;:-args:--void-"
                    INVOKEVIRTUAL org.aspectj.runtime.reflect.Factory.makeMethodSig (Ljava/lang/String;)Lorg/aspectj/lang/reflect/MethodSignature;
                    LDC "1--HelloWorld----"
                    INVOKEVIRTUAL org.aspectj.runtime.reflect.Factory.makeConstructorSig (Ljava/lang/String;)Lorg/aspectj/lang/reflect/ConstructorSignature;
                    LDC "19-out-java.lang.System-java.io.PrintStream-"
                    INVOKEVIRTUAL org.aspectj.runtime.reflect.Factory.makeFieldSig (Ljava/lang/String;)Lorg/aspectj/lang/reflect/FieldSignature;
                    LDC "1-println-java.io.PrintStream-java.lang.String:-arg0:--void-"
                    INVOKEVIRTUAL org.aspectj.runtime.reflect.Factory.makeMethodSig (Ljava/lang/String;)Lorg/aspectj/lang/reflect/MethodSignature;
                    LDC "9-main-HelloWorld-[Ljava.lang.String;:-args:--void-"
                    INVOKEVIRTUAL org.aspectj.runtime.reflect.Factory.makeMethodSig (Ljava/lang/String;)Lorg/aspectj/lang/reflect/MethodSignature;
                    LDC "1--HelloWorld----"
                    INVOKEVIRTUAL org.aspectj.runtime.reflect.Factory.makeConstructorSig (Ljava/lang/String;)Lorg/aspectj/lang/reflect/ConstructorSignature;
                    LDC "19-out-java.lang.System-java.io.PrintStream-"
                    INVOKEVIRTUAL org.aspectj.runtime.reflect.Factory.makeFieldSig (Ljava/lang/String;)Lorg/aspectj/lang/reflect/FieldSignature;
                    LDC "1-println-java.io.PrintStream-java.lang.String:-arg0:--void-"
                    INVOKEVIRTUAL org.aspectj.runtime.reflect.Factory.makeMethodSig (Ljava/lang/String;)Lorg/aspectj/lang/reflect/MethodSignature;
                    LDC "9-main-HelloWorld-[Ljava.lang.String;:-args:--void-"
                    INVOKEVIRTUAL org.aspectj.runtime.reflect.Factory.makeMethodSig (Ljava/lang/String;)Lorg/aspectj/lang/reflect/MethodSignature;
                    LDC "1--HelloWorld----"
                    INVOKEVIRTUAL org.aspectj.runtime.reflect.Factory.makeConstructorSig (Ljava/lang/String;)Lorg/aspectj/lang/reflect/ConstructorSignature;
                    LDC "19-out-java.lang.System-java.io.PrintStream-"
                    INVOKEVIRTUAL org.aspectj.runtime.reflect.Factory.makeFieldSig (Ljava/lang/String;)Lorg/aspectj/lang/reflect/FieldSignature;
                    LDC "1-println-java.io.PrintStream-java.lang.String:-arg0:--void-"
                    INVOKEVIRTUAL org.aspectj.runtime.reflect.Factory.makeMethodSig (Ljava/lang/String;)Lorg/aspectj/lang/reflect/MethodSignature;
                    LDC "9-main-HelloWorld-[Ljava.lang.String;:-args:--void-"
                    INVOKEVIRTUAL org.aspectj.runtime.reflect.Factory.makeMethodSig (Ljava/lang/String;)Lorg/aspectj/lang/reflect/MethodSignature;

======= 16512b2^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java"

======= 16512b2^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java"

======= 16512b2^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java"

======= 16512b2^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java"

======= 16512b2^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"


======= a66e0a2^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"

======= a66e0a2^:"weaver/src/org/aspectj/weaver/patterns/ArgsPointcut.java"

======= a66e0a2^:"weaver/src/org/aspectj/weaver/patterns/ArgsPointcut.java"

======= a66e0a2^:"weaver/src/org/aspectj/weaver/patterns/ArgsPointcut.java"

======= a66e0a2^:"weaver/src/org/aspectj/weaver/patterns/ArgsPointcut.java"


======= 7e0c3cd^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"

======= 7e0c3cd^:"weaver/src/org/aspectj/weaver/ResolvedMemberImpl.java"

======= 7e0c3cd^:"weaver/src/org/aspectj/weaver/ResolvedMemberImpl.java"


======= 6c8747b^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AccessForInlineVisitor.java"

======= 6c8747b^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AccessForInlineVisitor.java"

======= 6c8747b^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"


======= f2af562^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"


======= b953c03^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"

                

======= 2c9ea11^:"weaver/src/org/aspectj/weaver/bcel/BcelField.java"

======= 2c9ea11^:"weaver/src/org/aspectj/weaver/bcel/BcelField.java"

======= 2c9ea11^:"weaver/src/org/aspectj/weaver/bcel/BcelGenericSignatureToTypeXConverter.java"

======= 2c9ea11^:"weaver/src/org/aspectj/weaver/bcel/BcelGenericSignatureToTypeXConverter.java"

======= 2c9ea11^:"weaver/src/org/aspectj/weaver/bcel/BcelGenericSignatureToTypeXConverter.java"

======= 2c9ea11^:"weaver/src/org/aspectj/weaver/bcel/BcelGenericSignatureToTypeXConverter.java"

======= 2c9ea11^:"weaver/src/org/aspectj/weaver/bcel/BcelGenericSignatureToTypeXConverter.java"

======= 2c9ea11^:"weaver/src/org/aspectj/weaver/bcel/BcelGenericSignatureToTypeXConverter.java"

======= 2c9ea11^:"weaver/src/org/aspectj/weaver/bcel/BcelGenericSignatureToTypeXConverter.java"

======= 2c9ea11^:"weaver/src/org/aspectj/weaver/bcel/BcelGenericSignatureToTypeXConverter.java"

======= 2c9ea11^:"weaver/src/org/aspectj/weaver/bcel/BcelGenericSignatureToTypeXConverter.java"

======= 2c9ea11^:"weaver/src/org/aspectj/weaver/bcel/BcelGenericSignatureToTypeXConverter.java"

======= 2c9ea11^:"weaver/src/org/aspectj/weaver/bcel/BcelGenericSignatureToTypeXConverter.java"

======= 2c9ea11^:"weaver/src/org/aspectj/weaver/bcel/BcelGenericSignatureToTypeXConverter.java"

======= 2c9ea11^:"weaver/src/org/aspectj/weaver/bcel/BcelMethod.java"

======= 2c9ea11^:"weaver/src/org/aspectj/weaver/bcel/BcelMethod.java"

======= 2c9ea11^:"weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java"

======= 2c9ea11^:"weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java"

======= 2c9ea11^:"weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java"

======= 2c9ea11^:"weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java"

======= 2c9ea11^:"weaver/testsrc/org/aspectj/weaver/bcel/BcelGenericSignatureToTypeXTestCase.java"

======= 2c9ea11^:"weaver/testsrc/org/aspectj/weaver/bcel/BcelGenericSignatureToTypeXTestCase.java"


======= be750d5^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"


======= 27e68f3^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"

       
======= 27e68f3^:"weaver/src/org/aspectj/weaver/JoinPointSignature.java"

======= 27e68f3^:"weaver/src/org/aspectj/weaver/ResolvedMemberImpl.java"

    	List memberSignatures = new ArrayList();
======= 27e68f3^:"weaver/src/org/aspectj/weaver/ResolvedMemberImpl.java"

    		List foundMembers) {
======= 27e68f3^:"weaver/src/org/aspectj/weaver/ResolvedMemberImpl.java"


======= 100d9e0^:"weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java"

======= 100d9e0^:"weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java"

======= 100d9e0^:"weaver/src/org/aspectj/weaver/bcel/BcelWorld.java"


======= bf767a9^:"bcel-builder/src/org/aspectj/apache/bcel/generic/SWITCH.java"

 * @version $Id: SWITCH.java,v 1.2 2004/11/19 16:45:19 aclement Exp $
======= bf767a9^:"bcel-builder/src/org/aspectj/apache/bcel/generic/SWITCH.java"

      instruction = new TABLESWITCH(match, targets, target);
======= bf767a9^:"bcel-builder/src/org/aspectj/apache/bcel/generic/TABLESWITCH.java"

 * @version $Id: TABLESWITCH.java,v 1.2 2004/11/19 16:45:19 aclement Exp $
======= bf767a9^:"bcel-builder/src/org/aspectj/apache/bcel/generic/TABLESWITCH.java"

======= bf767a9^:"bcel-builder/src/org/aspectj/apache/bcel/generic/TABLESWITCH.java"


======= cc6e681^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"

======= cc6e681^:"tests/src/org/aspectj/systemtest/ajc150/GenericsTests.java"

======= cc6e681^:"weaver/src/org/aspectj/weaver/AjcMemberMaker.java"


======= 93fdce1^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"

            
======= 93fdce1^:"weaver/src/org/aspectj/weaver/patterns/ReferencePointcut.java"


======= 7b32570^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"


======= 86ce1f7^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"

======= 86ce1f7^:"weaver/src/org/aspectj/weaver/ResolvedType.java"

======= 86ce1f7^:"weaver/src/org/aspectj/weaver/WeaverMessages.java"


======= 2b23e91^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"

                

======= 169a488^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"

            

======= 5e9aca9^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"


======= 477c575^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"

    <ajc-test dir="bugs150" title="missing name pattern">
     <compile files="GenericAspect1.aj" options="-1.5"/>
       <message kind="error" line="9" text="can not extend"/>

======= 5735e96^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"

======= 5735e96^:"weaver/src/org/aspectj/weaver/patterns/PatternParser.java"

======= 5735e96^:"weaver/src/org/aspectj/weaver/patterns/WildTypePattern.java"


======= 619a6ad^:"tests/src/org/aspectj/systemtest/ajc150/ataspectj/AtAjSyntaxTests.java"

======= 619a6ad^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"

======= 619a6ad^:"weaver/src/org/aspectj/weaver/bcel/BcelShadow.java"

        Member sig = BcelWorld.makeMethodSignature(
======= 619a6ad^:"weaver/src/org/aspectj/weaver/bcel/BcelShadow.java"

                BcelWorld.makeMethodSignature(
======= 619a6ad^:"weaver/src/org/aspectj/weaver/bcel/BcelWorld.java"

======= 619a6ad^:"weaver/src/org/aspectj/weaver/bcel/BcelWorld.java"

    public static Member makeMethodSignature(LazyClassGen cg, InvokeInstruction ii) {
======= 619a6ad^:"weaver/src/org/aspectj/weaver/bcel/BcelWorld.java"


======= bba9c50^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/MakeDeclsPublicVisitor.java"

======= bba9c50^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/MakeDeclsPublicVisitor.java"

======= bba9c50^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/MakeDeclsPublicVisitor.java"

======= bba9c50^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/MakeDeclsPublicVisitor.java"

======= bba9c50^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"


======= 639b4fd^:"tests/java5/ataspectj/ataspectj/SingletonAspectBindingsTest.java"

======= 639b4fd^:"tests/src/org/aspectj/systemtest/ajc150/ataspectj/AtAjSyntaxTests.java"

        org.aspectj.asm.AsmManager.setReporting("debug.txt",true,true,true,true);
        //runTest("singletonAspectBindings2");
======= 639b4fd^:"tests/src/org/aspectj/systemtest/ajc150/ataspectj/AtAjSyntaxTests.java"

======= 639b4fd^:"weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java"

            	if (getConcreteAspect()==null || !getConcreteAspect().isAnnotationStyleAspect()) {
======= 639b4fd^:"weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java"

        
        if (getConcreteAspect()==null || !getConcreteAspect().isAnnotationStyleAspect()) {

======= b54831f^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"


======= 7d5002a^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java"

======= 7d5002a^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java"

======= 7d5002a^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"

  public void testItdGenerics_pr99228() {runTest("ITD of a field into a generic class");}
  public void testItdGenerics_pr98320() {runTest("intertype with nested generic type");}
  
======= 7d5002a^:"weaver/src/org/aspectj/weaver/TypeX.java"

======= 7d5002a^:"weaver/src/org/aspectj/weaver/TypeX.java"

======= 7d5002a^:"weaver/src/org/aspectj/weaver/TypeX.java"

======= 7d5002a^:"weaver/src/org/aspectj/weaver/TypeX.java"

======= 7d5002a^:"weaver/src/org/aspectj/weaver/TypeX.java"


======= 588023e^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/InterTypeScope.java"

======= 588023e^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/InterTypeScope.java"


======= f747b82^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"


======= 743566f^:"weaver/src/org/aspectj/weaver/patterns/BasicTokenSource.java"

======= 743566f^:"weaver/src/org/aspectj/weaver/patterns/BasicTokenSource.java"

======= 743566f^:"weaver/src/org/aspectj/weaver/patterns/PatternParser.java"

        // FIXME AV for Adrian - varargs need special handling since Token are 3x"." and not "..."
        // the following works for 'call(* *(int, Integer...))' but not in the general case (see testAJDKExamples test f.e.)
        // and the current code does not work for 'call(* *(int, Integer...))'
======= 743566f^:"weaver/src/org/aspectj/weaver/patterns/PatternParser.java"

======= 743566f^:"weaver/src/org/aspectj/weaver/patterns/PatternParser.java"

======= 743566f^:"weaver/testsrc/org/aspectj/weaver/patterns/VisitorTestCase.java"


======= 3824b1c^:"runtime/src/org/aspectj/runtime/reflect/AdviceSignatureImpl.java"

======= 3824b1c^:"runtime/src/org/aspectj/runtime/reflect/MethodSignatureImpl.java"

======= 3824b1c^:"runtime/src/org/aspectj/runtime/reflect/MethodSignatureImpl.java"

======= 3824b1c^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"

  public void testIfEvaluationExplosiion_PR94086() {

======= a675b65^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/EclipseAdapterUtils.java"

        while (((c = extract[trimLeftIndex++]) == TAB) || (c == SPACE)) {
        };

======= f14646f^:"loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java"

======= f14646f^:"loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java"

            Enumeration xmls = loader.getResources("/META-INF/aop.xml");
======= f14646f^:"loadtime5/java5-src/org/aspectj/weaver/loadtime/ClassPreProcessorAgentAdapter.java"

            <jvmarg value="-Daj5.def=ataspectj/aop.xml"/>
======= f14646f^:"tests/java5/ataspectj/ataspectj/SingletonAspectBindingsTest.java"

    <weaver options="-XmessageHolderClass:ataspectj.TestHelper"/>
    <aspects>
        <!-- see here nested class with ".", "$" is accepted as well -->
        <aspect name="ataspectj.SingletonAspectBindingsTest.TestAspect"/>
        <aspect name="ataspectj.CflowTest.TestAspect"/>
        <aspect name="ataspectj.PointcutReferenceTest.TestAspect"/>
        <aspect name="ataspectj.AfterXTest.TestAspect"/>
        <aspect name="ataspectj.XXJoinPointTest.TestAspect"/>
        <aspect name="ataspectj.PrecedenceTest.TestAspect_2"/>
        <aspect name="ataspectj.PrecedenceTest.TestAspect_1"/>
        <aspect name="ataspectj.PrecedenceTest.TestAspect_3"/>
        <aspect name="ataspectj.PrecedenceTest.TestAspect_Order"/>
        <aspect name="ataspectj.BindingTest.TestAspect_1"/>
        <aspect name="ataspectj.PerClauseTestAspects.TestAspectPerSingleton"/>
        <aspect name="ataspectj.PerClauseTestAspects.TestAspectPerTarget"/>
        <aspect name="ataspectj.PerClauseTestAspects.TestAspectPerCflow"/>
        <aspect name="ataspectj.PerClauseTestAspects.TestAspectPTW"/>
        <aspect name="ataspectj.AroundInlineMungerTestAspects.Open"/>
    </aspects>

======= 88d477d^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"

======= 88d477d^:"weaver/src/org/aspectj/weaver/patterns/IfPointcut.java"

======= 88d477d^:"weaver/src/org/aspectj/weaver/patterns/IfPointcut.java"


======= f9eebd4^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseSourceType.java"

    
    pointcut doSomethingExecution() : execution(* doSomething());
    pointcut doSomethingCall() : call(* doSomething());
    
    // CE L7
    before() : doSomethingExecution() && @this(MyClassRetentionAnnotation) {
    	// should be compile-time error!
        System.out.println("How did I get here?");
    }
    
    // CE L13
    after() returning : doSomethingCall() && @target(MyClassRetentionAnnotation) {
    	// should be compile-time error!
        System.out.println("How did I get here?");
    }
    
        <compile options="-1.5" files="TestingAnnotations.java,NotRuntimeRetention.aj">
               <message kind="error" line="7" text="Annotation type MyClassRetentionAnnotation does not have runtime retention"/>
               <message kind="error" line="13" text="Annotation type MyClassRetentionAnnotation does not have runtime retention"/>
======= f9eebd4^:"weaver/src/org/aspectj/weaver/patterns/BindingAnnotationTypePattern.java"


======= 0cb826c^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"


======= 7b7c7b2^:"ajdoc/src/org/aspectj/tools/ajdoc/Declaration.java"

        return getKind().equals("interface") || getKind().equals("class") || getKind().equals("aspect");
======= 7b7c7b2^:"ajdoc/src/org/aspectj/tools/ajdoc/StubFileGenerator.java"

======= 7b7c7b2^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmHierarchyBuilder.java"


======= f603458^:"tests/src/org/aspectj/systemtest/ajc150/AllTestsAspectJ150.java"

======= f603458^:"tests/src/org/aspectj/systemtest/ajc150/AllTestsAspectJ150.java"

======= f603458^:"tests/src/org/aspectj/systemtest/ajc150/SuppressedWarnings.java"

======= f603458^:"weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java"

======= f603458^:"weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java"

                  if (!ba.hasMatchedSomething()) {
                    BcelMethod meth = (BcelMethod)ba.getSignature();
                    if (meth!=null) {
                      AnnotationX[] anns = (AnnotationX[])meth.getAnnotations();
                      // Check if they want to suppress the warning on this piece of advice
               	      if (!Utility.isSuppressing(anns,"adviceDidNotMatch")) {
                        world.getLint().adviceDidNotMatch.signal(ba.getDeclaringAspect().toString(),element.getSourceLocation());
                      }
                    }

======= 51c018d^:"tests/src/org/aspectj/systemtest/ajc150/GenericsTests.java"


======= 952dda9^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java"

======= 952dda9^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java"

======= 952dda9^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java"

======= 952dda9^:"tests/src/org/aspectj/systemtest/ajc150/GenericsTests.java"

======= 952dda9^:"weaver/src/org/aspectj/weaver/TypeX.java"

======= 952dda9^:"weaver/src/org/aspectj/weaver/TypeX.java"

======= 952dda9^:"weaver/src/org/aspectj/weaver/TypeX.java"

======= 952dda9^:"weaver/src/org/aspectj/weaver/TypeX.java"

======= 952dda9^:"weaver/src/org/aspectj/weaver/TypeX.java"

======= 952dda9^:"weaver/src/org/aspectj/weaver/World.java"


======= 7389d9f^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java"

======= 7389d9f^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java"

======= 7389d9f^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java"

======= 7389d9f^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java"

======= 7389d9f^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java"

======= 7389d9f^:"tests/src/org/aspectj/systemtest/ajc150/GenericsTests.java"

======= 7389d9f^:"weaver/src/org/aspectj/weaver/TypeX.java"

======= 7389d9f^:"weaver/src/org/aspectj/weaver/TypeX.java"


======= 70b9ffd^:"tests/src/org/aspectj/systemtest/xlint/XLintTests.java"


======= abc9a58^:"ajde/testsrc/org/aspectj/ajde/ShowWeaveMessagesTestCase.java"

======= abc9a58^:"ajde/testsrc/org/aspectj/ajde/ShowWeaveMessagesTestCase.java"

======= abc9a58^:"ajde/testsrc/org/aspectj/ajde/ShowWeaveMessagesTestCase.java"

======= abc9a58^:"bridge/src/org/aspectj/bridge/WeaveMessage.java"

======= abc9a58^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"

======= abc9a58^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"

======= abc9a58^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"

======= abc9a58^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"

======= abc9a58^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"

======= abc9a58^:"weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java"

======= abc9a58^:"weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java"

======= abc9a58^:"weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java"

======= abc9a58^:"weaver/src/org/aspectj/weaver/bcel/Utility.java"

======= abc9a58^:"weaver/src/org/aspectj/weaver/bcel/Utility.java"


======= 02f75ba^:"weaver/src/org/aspectj/weaver/bcel/UnwovenClassFile.java"


======= 7a61380^:"asm/src/org/aspectj/asm/IRelationship.java"

======= 7a61380^:"asm/src/org/aspectj/asm/IRelationship.java"

======= 7a61380^:"weaver/src/org/aspectj/weaver/AsmRelationshipProvider.java"

======= 7a61380^:"weaver/src/org/aspectj/weaver/AsmRelationshipProvider.java"


======= 3f942a4^:"tests/src/org/aspectj/systemtest/ajc150/AnnotationBinding.java"

======= 3f942a4^:"weaver/src/org/aspectj/weaver/patterns/ArgsAnnotationPointcut.java"


======= 78abc76^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/DeclareAnnotationDeclaration.java"

======= 78abc76^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/DeclareAnnotationDeclaration.java"

======= 78abc76^:"tests/src/org/aspectj/systemtest/ajc150/DeclareAnnotationTests.java"

    <ajc-test dir="bugs150" pr="83645" title="pertypewithin({interface}) illegal field modifier">
        <compile files="PR83645.java"/>
        <run class="PR83645"/>
    </ajc-test>
======= 78abc76^:"weaver/src/org/aspectj/weaver/patterns/PatternParser.java"


======= df7fff4^:"asm/src/org/aspectj/asm/AsmManager.java"

======= df7fff4^:"asm/src/org/aspectj/asm/AsmManager.java"

======= df7fff4^:"asm/src/org/aspectj/asm/AsmManager.java"

======= df7fff4^:"asm/src/org/aspectj/asm/AsmManager.java"

======= df7fff4^:"asm/src/org/aspectj/asm/AsmManager.java"

======= df7fff4^:"asm/src/org/aspectj/asm/AsmManager.java"

======= df7fff4^:"asm/src/org/aspectj/asm/internal/AspectJElementHierarchy.java"

======= df7fff4^:"asm/src/org/aspectj/asm/internal/AspectJElementHierarchy.java"

======= df7fff4^:"asm/src/org/aspectj/asm/internal/AspectJElementHierarchy.java"

======= df7fff4^:"asm/src/org/aspectj/asm/internal/ProgramElement.java"

======= df7fff4^:"asm/src/org/aspectj/asm/internal/ProgramElement.java"

======= df7fff4^:"docs/sandbox/api-clients/org/aspectj/samples/AsmRelationshipMapExtensionTest.java"

    		String sourceHandle = ProgramElement.createHandleIdentifier(
    		String superHandle = ProgramElement.createHandleIdentifier(
======= df7fff4^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AsmInterTypeRelationshipProvider.java"

======= df7fff4^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmHierarchyBuilder.java"

                foreward.addTarget(ProgramElement.genHandleIdentifier(member.getSourceLocation()));            
                IRelationship back = AsmManager.getDefault().getRelationshipMap().get(ProgramElement.genHandleIdentifier(member.getSourceLocation()), IRelationship.Kind.USES_POINTCUT, "pointcut used by", false, true);
======= df7fff4^:"weaver/src/org/aspectj/weaver/AsmRelationshipProvider.java"

======= df7fff4^:"weaver/src/org/aspectj/weaver/AsmRelationshipProvider.java"

======= df7fff4^:"weaver/src/org/aspectj/weaver/AsmRelationshipProvider.java"

======= df7fff4^:"weaver/src/org/aspectj/weaver/AsmRelationshipProvider.java"

======= df7fff4^:"weaver/src/org/aspectj/weaver/AsmRelationshipProvider.java"

======= df7fff4^:"weaver/src/org/aspectj/weaver/AsmRelationshipProvider.java"

======= df7fff4^:"weaver/src/org/aspectj/weaver/AsmRelationshipProvider.java"

======= df7fff4^:"weaver/src/org/aspectj/weaver/ShadowMunger.java"

======= df7fff4^:"weaver/src/org/aspectj/weaver/ShadowMunger.java"



======= e460b1e^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java"

======= e460b1e^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java"

======= e460b1e^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java"

======= e460b1e^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java"

======= e460b1e^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java"

======= e460b1e^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java"

======= e460b1e^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java"

======= e460b1e^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java"

======= e460b1e^:"tests/src/org/aspectj/systemtest/incremental/IncrementalTests.java"

======= e460b1e^:"tests/src/org/aspectj/systemtest/incremental/IncrementalTests.java"


======= 0d14ccf^:"tests/src/org/aspectj/systemtest/ajc150/AnnotationBinding.java"

======= 0d14ccf^:"tests/src/org/aspectj/systemtest/ajc150/Annotations.java"

            <message kind="warning" line="25" text="execution(@SomeAnnotation ...)"/>        
            <message kind="warning" line="28" text="execution(@SomeAnnotation ...)"/>        
            <message kind="warning" line="52" text="execution(@SomeAnnotation ...)"/>        
            <message kind="warning" line="53" text="execution(@SomeAnnotation ...)"/>    
            <stdout>
                <line text="@type System"/>
                <line text="hello AnnotationsAndITDs"/>
                <line text="goodbye String"/>
                <line text="x Object"/>
                <line text="y Integer"/>
                <line text="d Double"/>
                <line text="f Double"/>
                <line text="@type System"/>
                <line text="@cons String"/>
                <line text="@cons String"/>
                <line text="@method ITDMe2"/>
                <line text="@method ITDMe2"/>
                <line text="@field ITDMe2"/>
                <line text="@field ITDMe2"/>
            </stdout>
    <!-- ============================================================== -->
======= 0d14ccf^:"weaver/src/org/aspectj/weaver/NewFieldTypeMunger.java"

======= 0d14ccf^:"weaver/src/org/aspectj/weaver/ResolvedMember.java"

======= 0d14ccf^:"weaver/src/org/aspectj/weaver/ResolvedMember.java"

======= 0d14ccf^:"weaver/src/org/aspectj/weaver/ResolvedMember.java"

    	return false;
======= 0d14ccf^:"weaver/src/org/aspectj/weaver/ResolvedMember.java"

    	return null;
======= 0d14ccf^:"weaver/src/org/aspectj/weaver/ResolvedMember.java"

======= 0d14ccf^:"weaver/src/org/aspectj/weaver/ResolvedMember.java"

======= 0d14ccf^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"

======= 0d14ccf^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"

======= 0d14ccf^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"

======= 0d14ccf^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"

        List decaMs = getMatchingSubset(world.getDeclareAnnotationOnMethods(),clazz.getType());
          // go through all the fields
            // go through all the declare @field statements
======= 0d14ccf^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"

======= 0d14ccf^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"

======= 0d14ccf^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"

        List decaFs = getMatchingSubset(world.getDeclareAnnotationOnFields(),clazz.getType());
          // go through all the fields
======= 0d14ccf^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"

======= 0d14ccf^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"

======= 0d14ccf^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"

        world.getLint().elementAlreadyAnnotated.signal(
      		new String[]{rm.toString(),deca.getAnnotationTypeX().toString()},
      		rm.getSourceLocation(),new ISourceLocation[]{deca.getSourceLocation()});
      	return true;
======= 0d14ccf^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"

======= 0d14ccf^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"

======= 0d14ccf^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"

======= 0d14ccf^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"

======= 0d14ccf^:"weaver/src/org/aspectj/weaver/bcel/BcelShadow.java"

======= 0d14ccf^:"weaver/src/org/aspectj/weaver/bcel/BcelShadow.java"

======= 0d14ccf^:"weaver/src/org/aspectj/weaver/bcel/BcelShadow.java"

======= 0d14ccf^:"weaver/src/org/aspectj/weaver/bcel/BcelShadow.java"

    	// FIXME asc Refactor these once all shadow kinds added - there is lots of commonality
    	TypeX relevantType = null;
    	}
    	if (getKind() == Shadow.ExceptionHandler) {
    		relevantType = getSignature().getParameterTypes()[0];
    		annotations  =  relevantType.resolve(world).getAnnotationTypes();
    	}
    	if (getKind() == Shadow.MethodCall  || getKind() == Shadow.ConstructorCall) {
    		ResolvedMember rm[] = relevantType.getDeclaredMethods(world);
    		ResolvedMember found = null;
    		String searchString = getSignature().getName()+getSignature().getParameterSignature();
    		for (int i = 0; i < rm.length && found==null; i++) {
    		annotations = found.getAnnotationTypes();
    	}
    	if (getKind() == Shadow.MethodExecution || getKind() == Shadow.ConstructorExecution || 
    		getKind() == Shadow.AdviceExecution) {
    		ResolvedMember rm[] = relevantType.getDeclaredMethods(world);
    		ResolvedMember found = null;
    		String searchString = getSignature().getName()+getSignature().getParameterSignature();
    		for (int i = 0; i < rm.length && found==null; i++) {
    		annotations = found.getAnnotationTypes();
    	}
    	if (getKind() == Shadow.PreInitialization || getKind() == Shadow.Initialization) {
    		ResolvedMember found = null;
    		String searchString = getSignature().getName()+getSignature().getParameterSignature();
    		for (int i = 0; i < rm.length && found==null; i++) {
    		annotations = found.getAnnotationTypes();
    	}
    	if (getKind() == Shadow.FieldSet) {
    		relevantType = getSignature().getDeclaringType();
    		ResolvedMember rm[] = relevantType.getDeclaredFields(world);
    		ResolvedMember found = null;
    		for (int i = 0; i < rm.length && found==null; i++) {
    		annotations = found.getAnnotationTypes();
    	}
    	if (getKind() == Shadow.FieldGet) {
    		ResolvedMember rm[] = relevantType.getDeclaredFields(world);
    		ResolvedMember found = null;
    		for (int i = 0; i < rm.length && found==null; i++) {
    		throw new BCException("Didn't recognize shadow: "+getKind());
    		kindedAnnotationVars.put(aTX,
    				new KindedAnnotationAccessVar(getKind(),aTX.resolve(world),relevantType,getSignature()));
    	
    	
    public void initializeWithinAnnotationVars() {
======= 0d14ccf^:"weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java"

======= 0d14ccf^:"weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java"

======= 0d14ccf^:"weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java"

======= 0d14ccf^:"weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java"

    private AnnotationGen[]  annotations;
======= 0d14ccf^:"weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java"

    	AnnotationGen ag = new AnnotationGen(ax.getBcelAnnotation(),enclosingClass.getConstantPoolGen(),true);
    	AnnotationGen[] newAnnotations = new AnnotationGen[annotations.length+1];
    	System.arraycopy(annotations,0,newAnnotations,0,annotations.length);
    	newAnnotations[annotations.length]=ag;
    	annotations = newAnnotations;
    	// FIXME asc does this mean we are managing two levels of annotations again?
    	// one here and one in the memberView??!?
    	memberView.addAnnotation(ax);
    
    	if (returnType != null) return;
======= 0d14ccf^:"weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java"

======= 0d14ccf^:"weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java"

        if (annotations!=null) { 
          for (int i = 0, len = annotations.length; i < len; i++) {
            gen.addAnnotation(annotations[i]);
======= 0d14ccf^:"weaver/src/org/aspectj/weaver/patterns/AnnotationPointcut.java"

======= 0d14ccf^:"weaver/src/org/aspectj/weaver/patterns/AnnotationPointcut.java"

======= 0d14ccf^:"weaver/src/org/aspectj/weaver/patterns/AnnotationPointcut.java"

======= 0d14ccf^:"weaver/src/org/aspectj/weaver/patterns/AnnotationPointcut.java"

======= 0d14ccf^:"weaver/src/org/aspectj/weaver/patterns/SignaturePattern.java"

======= 0d14ccf^:"weaver/src/org/aspectj/weaver/patterns/SignaturePattern.java"

======= 0d14ccf^:"weaver/src/org/aspectj/weaver/patterns/SignaturePattern.java"


======= fb01cad^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java"

======= fb01cad^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java"

======= fb01cad^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java"

======= fb01cad^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"

======= fb01cad^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"


======= 68f6350^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java"

                        if (jarFile.exists() && FileUtil.hasZipSuffix(filename)) {
======= 68f6350^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java"

======= 68f6350^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java"

======= 68f6350^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java"

======= 68f6350^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java"

======= 68f6350^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"

    
======= 68f6350^:"weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java"

======= 68f6350^:"weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java"

    		if (type.isAspect()) {
    			addedAspects.add(type);
    		}

======= b0f270e^:"weaver/src/org/aspectj/weaver/patterns/CflowPointcut.java"

======= b0f270e^:"weaver/src/org/aspectj/weaver/patterns/IfPointcut.java"


======= b5f4d09^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"

======= b5f4d09^:"weaver/src/org/aspectj/weaver/patterns/ExactTypePattern.java"

======= b5f4d09^:"weaver/src/org/aspectj/weaver/patterns/SignaturePattern.java"

======= b5f4d09^:"weaver/src/org/aspectj/weaver/patterns/TypePattern.java"

======= b5f4d09^:"weaver/src/org/aspectj/weaver/patterns/WildTypePattern.java"


======= 85aa152^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmHierarchyBuilder.java"

======= 85aa152^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmHierarchyBuilder.java"

======= 85aa152^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmHierarchyBuilder.java"

======= 85aa152^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"


======= f90186c^:"weaver/src/org/aspectj/weaver/patterns/WildTypePattern.java"

======= f90186c^:"weaver/src/org/aspectj/weaver/patterns/WildTypePattern.java"

    	if (isStar()) {
======= f90186c^:"weaver/src/org/aspectj/weaver/patterns/WildTypePattern.java"


======= 5765d53^:"ajde/testsrc/org/aspectj/ajde/AjdeTests.java"

======= 5765d53^:"ajde/testsrc/org/aspectj/ajde/AjdeTests.java"

======= 5765d53^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmHierarchyBuilder.java"

======= 5765d53^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmHierarchyBuilder.java"

======= 5765d53^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmHierarchyBuilder.java"


======= 7b4c7d7^:"bcel-builder/src/org/aspectj/apache/bcel/generic/MethodGen.java"

 * @version $Id: MethodGen.java,v 1.2 2004/11/19 16:45:19 aclement Exp $
======= 7b4c7d7^:"bcel-builder/src/org/aspectj/apache/bcel/generic/MethodGen.java"

  public String[] getArgumentNames()                   { return (String[])arg_names.clone(); }

======= 1b01255^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150TestsNoHarness.java"

======= 1b01255^:"weaver/src/org/aspectj/weaver/PerTypeWithinTargetTypeMunger.java"

======= 1b01255^:"weaver/src/org/aspectj/weaver/PerTypeWithinTargetTypeMunger.java"

======= 1b01255^:"weaver/src/org/aspectj/weaver/patterns/PerTypeWithin.java"


======= 5d281fd^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java"

======= 5d281fd^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java"

======= 5d281fd^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150TestsNoHarness.java"


======= b460597^:"ajdoc/src/org/aspectj/tools/ajdoc/HtmlDecorator.java"

======= b460597^:"ajdoc/src/org/aspectj/tools/ajdoc/HtmlDecorator.java"

======= b460597^:"ajdoc/src/org/aspectj/tools/ajdoc/HtmlDecorator.java"

            if ( (docModifier.equals("private")) || // everything
                 (docModifier.equals("package") && decl.getModifiers().indexOf( "private" ) == -1) || // package
                 (docModifier.equals("protected") && (decl.getModifiers().indexOf( "protected" ) != -1 ||
                                                        decl.getModifiers().indexOf( "public" ) != -1 )) ||
                 (docModifier.equals("public") && decl.getModifiers().indexOf( "public" ) != -1) ) {
======= b460597^:"ajdoc/src/org/aspectj/tools/ajdoc/HtmlDecorator.java"

        // Change "Class" to "Aspect", HACK: depends on "affects:"
        int classStartIndex = fileContents.toString().indexOf("<BR>\nClass");
        	fileContents.toString().indexOf("Advises:") != -1) {
======= b460597^:"ajdoc/src/org/aspectj/tools/ajdoc/HtmlDecorator.java"

        
======= b460597^:"ajdoc/src/org/aspectj/tools/ajdoc/HtmlDecorator.java"

======= b460597^:"ajdoc/src/org/aspectj/tools/ajdoc/HtmlDecorator.java"

            // insert the table row accordingly
            String comment = generateSummaryComment(decl);
            String entry = "";
            if ( kind.equals( "Advice Summary" ) ) {
                entry +=
                        "<TR><TD>" +
                        "<A HREF=\"#" + generateHREFName(decl) + "\">" +
                        "<TT>" + generateAdviceSignatures(decl) +
                if (!comment.equals("")) {
                    entry += comment + "<P>";
                entry +=
                        generateAffects(decl, false) + "</TD>" +
                        "</TR><TD>\n";
            }
            else if ( kind.equals( "Pointcut Summary" ) ) {
                entry +=
                        "<TR><TD WIDTH=\"1%\">" +
                        "<FONT SIZE=-1><TT>" + genAccessibility(decl) + "</TT></FONT>" +
                        "</TD>\n" +
                        "<TD>" +
                        "<TT><A HREF=\"#" + generateHREFName(decl) + "\">" +
                        decl.toLabelString() + "</A></TT><BR>&nbsp;";
                if (!comment.equals("")) {
                    entry += comment + "<P>";
                entry +=
                        "</TR></TD>\n";
            }
            else if ( kind.equals( "Introduction Summary" ) ) {
                entry +=
                        "<TR><TD WIDTH=\"1%\">" +
                        "<FONT SIZE=-1><TT>" + decl.getModifiers() + "</TT></FONT>" +
                        "</TD>" +
                        "<TD>" +
                        "<A HREF=\"#" + generateHREFName(decl) + "\">" +
                        "<TT>introduction " + decl.toLabelString() + "</TT></A><P>" +
                        generateIntroductionSignatures(decl, false) +
                        generateAffects(decl, true);
            // insert the entry
            fileBuffer.insert(insertIndex, entry);
            insertIndex += entry.length();
======= b460597^:"ajdoc/src/org/aspectj/tools/ajdoc/HtmlDecorator.java"

======= b460597^:"ajdoc/src/org/aspectj/tools/ajdoc/HtmlDecorator.java"

======= b460597^:"ajdoc/src/org/aspectj/tools/ajdoc/HtmlDecorator.java"

            String entry = "";
            // insert the table row accordingly
            entry +=  "<A NAME=\"" + generateHREFName(decl) + "\"><!-- --></A>\n";
            if ( kind.equals( "Advice Detail" ) ) {
                entry += "<H3>" + decl.getName() + "</H3><P>";
                entry +=
                        "<TT>" +
                        generateAdviceSignatures(decl) + "</TT>\n" + "<P>" +
                        generateDetailsComment(decl) + "<P>" +
                        generateAffects(decl, false);
            }
            else if (kind.equals("Pointcut Detail")) {
                entry +=
                        "<H3>" +
                        decl.toLabelString() +
                        "</H3><P>" +
                        generateDetailsComment(decl);
            }
            else if (kind.equals("Introduction Detail")) {
            	entry += "<H3>introduction " + decl.toLabelString() + "</H3><P>";
                entry +=
                        generateIntroductionSignatures(decl, true) +
                        generateAffects(decl, true) +
                        generateDetailsComment(decl);
            }
            // insert the entry
            if (i != decls.size()-1) {
                entry += "<P><HR>\n";
            }
            else {
                entry += "<P>";
            fileBuffer.insert(insertIndex, entry);
            insertIndex += entry.length();
======= b460597^:"ajdoc/src/org/aspectj/tools/ajdoc/StubFileGenerator.java"

======= b460597^:"ajdoc/src/org/aspectj/tools/ajdoc/StubFileGenerator.java"

======= b460597^:"ajdoc/src/org/aspectj/tools/ajdoc/StubFileGenerator.java"

======= b460597^:"ajdoc/testdata/coverage/foo/NoMembers.java"

======= b460597^:"ajdoc/testsrc/org/aspectj/tools/ajdoc/CoverageTestCase.java"

======= b460597^:"ajdoc/testsrc/org/aspectj/tools/ajdoc/CoverageTestCase.java"


======= f70b383^:"ajdoc/src/org/aspectj/tools/ajdoc/HtmlDecorator.java"

        if (index1 < index2) {
        }
        else {
======= f70b383^:"ajdoc/src/org/aspectj/tools/ajdoc/HtmlDecorator.java"

        int index3 = fbs.indexOf(MARKER_3, index);
        if (index1 < index2 && index1 < index3) {
        }
        else if (index2 < index1 && index2 < index3) {
        }
        else {
======= f70b383^:"ajdoc/src/org/aspectj/tools/ajdoc/HtmlDecorator.java"

======= f70b383^:"ajdoc/testdata/coverage/foo/ModelCoverage.java"

    declare parents: Point+ implements java.util.Observable;
======= f70b383^:"ajdoc/testdata/coverage/foo/ModelCoverage.java"

======= f70b383^:"ajdoc/testsrc/org/aspectj/tools/ajdoc/CoverageTestCase.java"

======= f70b383^:"ajdoc/testsrc/org/aspectj/tools/ajdoc/CoverageTestCase.java"

======= f70b383^:"ajdoc/testsrc/org/aspectj/tools/ajdoc/CoverageTestCase.java"

======= f70b383^:"ajdoc/testsrc/org/aspectj/tools/ajdoc/CoverageTestCase.java"


======= 603b063^:"tests/src/org/aspectj/systemtest/AllTests.java"

======= 603b063^:"tests/src/org/aspectj/systemtest/AllTests.java"

======= 603b063^:"tests/src/org/aspectj/systemtest/AllTests.java"

======= 603b063^:"tests/src/org/aspectj/systemtest/AllTests.java"

======= 603b063^:"tests/src/org/aspectj/systemtest/ajc150/AllTestsJava5_binaryWeaving.java"

 * Copyright (c) 2004 IBM 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Common Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/cpl-v10.html
 *
 * Contributors:
 *    Andy Clement - initial API and implementation
 *******************************************************************************/
 * @author colyer
 *
 * TODO To change the template for this generated type comment go to
 * Window - Preferences - Java - Code Style - Code Templates
 */
======= 603b063^:"tests/src/org/aspectj/systemtest/ajc150/TestUtils.java"

======= 603b063^:"weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java"

======= 603b063^:"weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java"

======= 603b063^:"weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java"

======= 603b063^:"weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java"

        l.add(0, fresh);        
    | | | catch java.lang.Throwable -> E5
    | | | catch java.lang.Throwable -> E5
    | | |       E5: ASTORE 5
    | | finally -> E4
    | | | catch java.lang.Exception -> E3
    | | | catch java.lang.Exception -> E3
    | | |       E3: ASTORE_2   (line 12)
    | | finally -> E4
    | |         E4: ASTORE 4   (line 14)
    | | | catch java.lang.Throwable -> E5
    | | | catch java.lang.Throwable -> E5
    | | |       E5: ASTORE 5
    | | finally -> E4
    | | | catch java.lang.Exception -> E3
    | | | catch java.lang.Exception -> E3
    | | |       E3: ASTORE_2   (line 12)
    | | finally -> E4
    | |         E4: ASTORE 4   (line 14)
    | | catch java.lang.Throwable -> E2
    | | catch java.lang.Throwable -> E2
    | |         E2: ASTORE 5
    | finally -> E1
    | | catch java.lang.Exception -> E0
    | | catch java.lang.Exception -> E0
    | |         E0: ASTORE_2   (line 12)
    | finally -> E1
    |           E1: ASTORE 4   (line 14)

======= 797b6a6^:"tests/src/org/aspectj/systemtest/ajc150/AllTestsJava5_binaryWeaving.java"

======= 797b6a6^:"tests/src/org/aspectj/systemtest/ajc150/AllTestsJava5_binaryWeaving.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/AdviceKind.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/AdviceKind.java"

    public static AdviceKind read(DataInputStream s) throws IOException {
======= 797b6a6^:"weaver/src/org/aspectj/weaver/AjAttribute.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/AjAttribute.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/AjAttribute.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/AjAttribute.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/AjAttribute.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/AjAttribute.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/AjAttribute.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/AjAttribute.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/AjAttribute.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/ResolvedPointcutDefinition.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/ResolvedPointcutDefinition.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/ResolvedPointcutDefinition.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/WeaverStateInfo.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/bcel/BcelAttributes.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/bcel/BcelField.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/bcel/BcelMethod.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/AndAnnotationTypePattern.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/AndAnnotationTypePattern.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/AndPointcut.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/AndPointcut.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/AndPointcut.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/AndTypePattern.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/AndTypePattern.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/AnnotationPatternList.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/AnnotationPatternList.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/AnnotationPatternList.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/AnnotationPointcut.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/AnnotationPointcut.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/AnnotationPointcut.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/AnnotationTypePattern.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/AnnotationTypePattern.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/AnnotationTypePattern.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/ArgsAnnotationPointcut.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/ArgsAnnotationPointcut.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/ArgsAnnotationPointcut.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/ArgsPointcut.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/ArgsPointcut.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/ArgsPointcut.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/BindingAnnotationTypePattern.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/BindingAnnotationTypePattern.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/BindingAnnotationTypePattern.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/BindingTypePattern.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/BindingTypePattern.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/CflowPointcut.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/CflowPointcut.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/CflowPointcut.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/Declare.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/Declare.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/DeclareErrorOrWarning.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/DeclareErrorOrWarning.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/DeclareParents.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/DeclareParents.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/DeclareParents.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/DeclarePrecedence.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/DeclarePrecedence.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/DeclarePrecedence.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/DeclareSoft.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/DeclareSoft.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/DeclareSoft.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/ExactAnnotationTypePattern.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/ExactAnnotationTypePattern.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/ExactAnnotationTypePattern.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/ExactTypePattern.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/ExactTypePattern.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/ExactTypePattern.java"

    public String toString() {
======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/HandlerPointcut.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/HandlerPointcut.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/HandlerPointcut.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/IfPointcut.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/IfPointcut.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/IfPointcut.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/KindedPointcut.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/KindedPointcut.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/KindedPointcut.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/ModifiersPattern.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/ModifiersPattern.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/NamePattern.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/NamePattern.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/NotAnnotationTypePattern.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/NotAnnotationTypePattern.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/NotPointcut.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/NotPointcut.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/NotPointcut.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/NotTypePattern.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/NotTypePattern.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/OrAnnotationTypePattern.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/OrAnnotationTypePattern.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/OrPointcut.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/OrPointcut.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/OrPointcut.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/OrTypePattern.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/OrTypePattern.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/PerCflow.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/PerCflow.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/PerCflow.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/PerClause.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/PerClause.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/PerClause.java"

        public static Kind read(DataInputStream s) throws IOException {
======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/PerFromSuper.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/PerFromSuper.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/PerFromSuper.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/PerObject.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/PerObject.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/PerObject.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/PerSingleton.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/PerSingleton.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/PerSingleton.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/Pointcut.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/Pointcut.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/Pointcut.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/ReferencePointcut.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/ReferencePointcut.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/ReferencePointcut.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/SignaturePattern.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/SignaturePattern.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/SignaturePattern.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/SignaturePattern.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/SignaturePattern.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/ThisOrTargetAnnotationPointcut.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/ThisOrTargetAnnotationPointcut.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/ThisOrTargetAnnotationPointcut.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/ThisOrTargetPointcut.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/ThisOrTargetPointcut.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/ThisOrTargetPointcut.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/ThrowsPattern.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/ThrowsPattern.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/TypePattern.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/TypePattern.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/TypePattern.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/TypePatternList.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/TypePatternList.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/TypePatternList.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/WildAnnotationTypePattern.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/WildAnnotationTypePattern.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/WildAnnotationTypePattern.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/WildTypePattern.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/WildTypePattern.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/WildTypePattern.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/WildTypePattern.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/WithinAnnotationPointcut.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/WithinAnnotationPointcut.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/WithinAnnotationPointcut.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/WithinCodeAnnotationPointcut.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/WithinCodeAnnotationPointcut.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/WithinCodeAnnotationPointcut.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/WithinPointcut.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/WithinPointcut.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/WithinPointcut.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/WithincodePointcut.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/WithincodePointcut.java"

======= 797b6a6^:"weaver/src/org/aspectj/weaver/patterns/WithincodePointcut.java"

======= 797b6a6^:"weaver/testsrc/org/aspectj/weaver/bcel/PatternWeaveTestCase.java"

======= 797b6a6^:"weaver/testsrc/org/aspectj/weaver/bcel/PointcutResidueTestCase.java"

======= 797b6a6^:"weaver/testsrc/org/aspectj/weaver/patterns/AndOrNotTestCase.java"

======= 797b6a6^:"weaver/testsrc/org/aspectj/weaver/patterns/DeclareErrorOrWarningTestCase.java"

======= 797b6a6^:"weaver/testsrc/org/aspectj/weaver/patterns/DeclareErrorOrWarningTestCase.java"

======= 797b6a6^:"weaver/testsrc/org/aspectj/weaver/patterns/ModifiersPatternTestCase.java"

======= 797b6a6^:"weaver/testsrc/org/aspectj/weaver/patterns/NamePatternTestCase.java"

======= 797b6a6^:"weaver/testsrc/org/aspectj/weaver/patterns/NamePatternTestCase.java"

======= 797b6a6^:"weaver/testsrc/org/aspectj/weaver/patterns/SignaturePatternTestCase.java"

======= 797b6a6^:"weaver/testsrc/org/aspectj/weaver/patterns/TypePatternListTestCase.java"

======= 797b6a6^:"weaver/testsrc/org/aspectj/weaver/patterns/TypePatternTestCase.java"

======= 797b6a6^:"weaver/testsrc/org/aspectj/weaver/patterns/WithinTestCase.java"


======= 8a8930f^:"tests/java5/annotations/within/PlainWithin.java"

======= 8a8930f^:"tests/src/org/aspectj/systemtest/ajc150/AnnotationPointcutsTests.java"

  // 1) @within  (matches, does not match, matches inherited annotation)
  // 2) @withincode (matches, does not match)
======= 8a8930f^:"tests/src/org/aspectj/systemtest/ajc150/AnnotationRuntimeTests.java"

    public void test007_Within_Code() {
    	baseDir = new File("../tests/java5/annotations/within_code");
        CompilationResult cR = binaryWeave("TestingAnnotations.jar","WithinAndWithinCodeTests.java",0,5);
        List warnings = new ArrayList();
        warnings.add(new Message(32,"@within match on non-inherited annotation"));
        warnings.add(new Message(39,"@within match on non-inherited annotation"));
        warnings.add(new Message(39,"@within match on inheritable annotation"));
        warnings.add(new Message(43,"@within match on inheritable annotation"));
        warnings.add(new Message(32,"@withincode match"));
        MessageSpec mSpec = new MessageSpec(warnings,new ArrayList());
        assertMessages(cR,mSpec); 	
    }
======= 8a8930f^:"weaver/src/org/aspectj/weaver/patterns/AnnotationTypePattern.java"

======= 8a8930f^:"weaver/src/org/aspectj/weaver/patterns/ExactAnnotationTypePattern.java"

======= 8a8930f^:"weaver/src/org/aspectj/weaver/patterns/ExactTypePattern.java"

======= 8a8930f^:"weaver/src/org/aspectj/weaver/patterns/HandlerPointcut.java"

======= 8a8930f^:"weaver/src/org/aspectj/weaver/patterns/TypePattern.java"

======= 8a8930f^:"weaver/src/org/aspectj/weaver/patterns/TypePattern.java"

======= 8a8930f^:"weaver/src/org/aspectj/weaver/patterns/TypePattern.java"

======= 8a8930f^:"weaver/src/org/aspectj/weaver/patterns/WildTypePattern.java"

======= 8a8930f^:"weaver/src/org/aspectj/weaver/patterns/WithinPointcut.java"

======= 8a8930f^:"weaver/src/org/aspectj/weaver/patterns/WithinPointcut.java"

======= 8a8930f^:"weaver/src/org/aspectj/weaver/patterns/WithinPointcut.java"


======= 9897659^:"bridge/src/org/aspectj/bridge/WeaveMessage.java"

======= 9897659^:"weaver/src/org/aspectj/weaver/Advice.java"

======= 9897659^:"weaver/src/org/aspectj/weaver/Shadow.java"

======= 9897659^:"weaver/src/org/aspectj/weaver/Shadow.java"

======= 9897659^:"weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java"

======= 9897659^:"weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java"

        					 fName+":'"+munger.getSignature()+"'"}));
======= 9897659^:"weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java"

======= 9897659^:"weaver/src/org/aspectj/weaver/bcel/BcelWorld.java"


======= 427c0d3^:"weaver/src/org/aspectj/weaver/AsmRelationshipProvider.java"


======= 9052d5d^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java"

======= 9052d5d^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java"

======= 9052d5d^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java"

        
======= 9052d5d^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java"

======= 9052d5d^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java"

======= 9052d5d^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java"

======= 9052d5d^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java"

======= 9052d5d^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java"

======= 9052d5d^:"tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"

  public void test() {
  	// placeholder for the first test...
    

       <!-- run appliaction with LTW to add tracing -->
======= edd6539^:"weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java"

======= edd6539^:"weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java"

======= edd6539^:"weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java"

======= edd6539^:"weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java"

======= edd6539^:"weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java"

======= edd6539^:"weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java"

======= edd6539^:"weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java"

======= edd6539^:"weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java"

======= edd6539^:"weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java"

======= edd6539^:"weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java"

======= edd6539^:"weaver/testsrc/org/aspectj/weaver/WeavingURLClassLoaderTest.java"

======= edd6539^:"weaver/testsrc/org/aspectj/weaver/WeavingURLClassLoaderTest.java"

======= edd6539^:"weaver/testsrc/org/aspectj/weaver/WeavingURLClassLoaderTest.java"

======= edd6539^:"weaver/testsrc/org/aspectj/weaver/WeavingURLClassLoaderTest.java"

======= edd6539^:"weaver/testsrc/org/aspectj/weaver/WeavingURLClassLoaderTest.java"

======= edd6539^:"weaver/testsrc/org/aspectj/weaver/WeavingURLClassLoaderTest.java"

======= edd6539^:"weaver/testsrc/org/aspectj/weaver/WeavingURLClassLoaderTest.java"

======= edd6539^:"weaver/testsrc/org/aspectj/weaver/WeavingURLClassLoaderTest.java"

======= edd6539^:"weaver/testsrc/org/aspectj/weaver/WeavingURLClassLoaderTest.java"

======= edd6539^:"weaver/testsrc/org/aspectj/weaver/WeavingURLClassLoaderTest.java"

======= edd6539^:"weaver/testsrc/org/aspectj/weaver/WeavingURLClassLoaderTest.java"

======= edd6539^:"weaver/testsrc/org/aspectj/weaver/WeavingURLClassLoaderTest.java"


======= aab9c2c^:"ajde/src/org/aspectj/ajde/ui/StructureSearchManager.java"


======= 6aa7516^:"weaver/src/org/aspectj/weaver/AjAttribute.java"

======= 6aa7516^:"weaver/src/org/aspectj/weaver/AjAttribute.java"

======= 6aa7516^:"weaver/src/org/aspectj/weaver/AjAttribute.java"

======= 6aa7516^:"weaver/src/org/aspectj/weaver/AjAttribute.java"

======= 6aa7516^:"weaver/src/org/aspectj/weaver/AjAttribute.java"

======= 6aa7516^:"weaver/src/org/aspectj/weaver/bcel/BcelAttributes.java"

======= 6aa7516^:"weaver/src/org/aspectj/weaver/bcel/BcelAttributes.java"

======= 6aa7516^:"weaver/src/org/aspectj/weaver/bcel/BcelAttributes.java"

======= 6aa7516^:"weaver/src/org/aspectj/weaver/bcel/BcelField.java"

======= 6aa7516^:"weaver/src/org/aspectj/weaver/bcel/BcelMethod.java"

======= 6aa7516^:"weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java"

======= 6aa7516^:"weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java"

======= 6aa7516^:"weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java"

======= 6aa7516^:"weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java"

======= 6aa7516^:"weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java"

    	if (myType != null && myType.getWeaverState() != null) {
======= 6aa7516^:"weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java"


======= 8a64fa2^:"weaver/src/org/aspectj/weaver/ResolvedTypeX.java"

            ResolvedMember[] b = ((Name)other).getDeclaredMethods();  //??? is this cast always safe

======= a303a09^:"tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java"

======= a303a09^:"tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java"

======= a303a09^:"weaver/src/org/aspectj/weaver/bcel/BcelShadow.java"

======= a303a09^:"weaver/src/org/aspectj/weaver/bcel/BcelShadow.java"

======= a303a09^:"weaver/src/org/aspectj/weaver/bcel/BcelShadow.java"

        } else {
======= a303a09^:"weaver/src/org/aspectj/weaver/bcel/BcelShadow.java"

======= a303a09^:"weaver/src/org/aspectj/weaver/bcel/BcelShadow.java"


======= 6beb43f^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java"

======= 6beb43f^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java"

======= 6beb43f^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java"

======= 6beb43f^:"tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java"


======= 0a77939^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java"

======= 0a77939^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java"

                // -proceedOnError, -g:[...], -preserveAllLocals,
======= 0a77939^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/AjCompilerAdapter.java"

======= 0a77939^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/AjCompilerAdapter.java"

======= 0a77939^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/AjCompilerAdapter.java"

======= 0a77939^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/AjCompilerAdapter.java"

======= 0a77939^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java"

======= 0a77939^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"

======= 0a77939^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"

======= 0a77939^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjCompilerOptions.java"

======= 0a77939^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AspectJBuilder.java"

======= 0a77939^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AspectJBuilder.java"

======= 0a77939^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AspectJBuilder.java"

======= 0a77939^:"org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/AjdtBatchTests.java"

======= 0a77939^:"org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/AjdtBatchTests.java"


======= 6e155a6^:"runtime/src/org/aspectj/runtime/internal/CFlowCounter.java"

======= 6e155a6^:"runtime/src/org/aspectj/runtime/internal/CFlowCounter.java"

======= 6e155a6^:"runtime/src/org/aspectj/runtime/internal/CFlowStack.java"

======= 6e155a6^:"runtime/src/org/aspectj/runtime/internal/CFlowStack.java"


======= eca1429^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java"

======= eca1429^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java"

======= eca1429^:"tests/bugs/ConvertToUnchecked.java"

======= eca1429^:"tests/bugs/ConvertToUnchecked.java"

======= eca1429^:"tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java"


======= 8e4d898^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java"


======= b133299^:"ajde/src/org/aspectj/ajde/internal/CompilerAdapter.java"

======= b133299^:"ajde/src/org/aspectj/ajde/internal/CompilerAdapter.java"

       
======= b133299^:"ajde/testsrc/org/aspectj/ajde/BuildConfigurationTests.java"

======= b133299^:"ajde/testsrc/org/aspectj/ajde/ExtensionTests.java"

======= b133299^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/AjdtCommand.java"

======= b133299^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java"

======= b133299^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/compiler/IAjTerminalSymbols.java"

======= b133299^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/core/AspectJCore.java"

======= b133299^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/AjClassFile.java"

======= b133299^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/AjCompilerAdapter.java"

======= b133299^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ClassFileBasedByteCodeProvider.java"

======= b133299^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/IOutputClassFileNameProvider.java"

======= b133299^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/InterimCompilationResult.java"

======= b133299^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/WeaverAdapter.java"

======= b133299^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/WeaverMessageHandler.java"

======= b133299^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AccessForInlineVisitor.java"

======= b133299^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AdviceDeclaration.java"

======= b133299^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AjConstructorDeclaration.java"

======= b133299^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AjMethodDeclaration.java"

======= b133299^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectClinit.java"

======= b133299^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectDeclaration.java"

======= b133299^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AstUtil.java"

======= b133299^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/DeclareDeclaration.java"

======= b133299^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/EclipseAttributeAdapter.java"

======= b133299^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/IfMethodDeclaration.java"

======= b133299^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/IfPseudoToken.java"

======= b133299^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterSuperFixerVisitor.java"

======= b133299^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterSuperReference.java"

======= b133299^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeConstructorDeclaration.java"

======= b133299^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeDeclaration.java"

======= b133299^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeFieldDeclaration.java"

======= b133299^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeMethodDeclaration.java"

======= b133299^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/KnownFieldReference.java"

======= b133299^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/KnownMessageSend.java"

======= b133299^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/MakeDeclsPublicVisitor.java"

======= b133299^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/PointcutDeclaration.java"

======= b133299^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/PointcutDesignator.java"

======= b133299^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/Proceed.java"

======= b133299^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/ProceedVisitor.java"

======= b133299^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/PseudoToken.java"

======= b133299^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/PseudoTokens.java"

======= b133299^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/SuperFixerVisitor.java"

======= b133299^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/ThisJoinPointVisitor.java"

======= b133299^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java"

======= b133299^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjTypeConstants.java"

======= b133299^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java"

======= b133299^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseScope.java"

======= b133299^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseShadow.java"

======= b133299^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseSourceLocation.java"

======= b133299^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseSourceType.java"

======= b133299^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseTypeMunger.java"

======= b133299^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/HelperInterfaceBinding.java"

======= b133299^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/InlineAccessFieldBinding.java"

======= b133299^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/InterTypeFieldBinding.java"

======= b133299^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/InterTypeMemberFinder.java"

======= b133299^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/InterTypeMethodBinding.java"

======= b133299^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/InterTypeScope.java"

======= b133299^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/PointcutBinding.java"

======= b133299^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/PrivilegedFieldBinding.java"

======= b133299^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/PrivilegedHandler.java"

======= b133299^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/SimpleSyntheticAccessMethodBinding.java"

======= b133299^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/parser/DeclarationFactory.java"

======= b133299^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java"

======= b133299^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBatchImageBuilder.java"

======= b133299^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"

======= b133299^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"

======= b133299^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"

======= b133299^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildNotifier.java"

======= b133299^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjCompilerOptions.java"

======= b133299^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjIncrementalImageBuilder.java"

======= b133299^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java"

======= b133299^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmElementFormatter.java"

======= b133299^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmHierarchyBuilder.java"

======= b133299^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AspectJBuilder.java"

======= b133299^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/EclipseAdapterUtils.java"

======= b133299^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/EclipseClassPathManager.java"

======= b133299^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/EclipseSourceContext.java"

======= b133299^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/StatefulNameEnvironment.java"

======= b133299^:"org.aspectj.ajdt.core/testsrc/WeaveTests.java"

======= b133299^:"org.aspectj.ajdt.core/testsrc/WeaveTests.java"

======= b133299^:"org.aspectj.ajdt.core/testsrc/WeaveTests.java"

======= b133299^:"org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/ajc/AjdtCommandTestCase.java"

======= b133299^:"org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/ajc/BuildArgParserTestCase.java"

======= b133299^:"org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/core/builder/AjCompilerOptionsTest.java"

======= b133299^:"org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/core/builder/AsmBuilderTest.java"


======= d1551bd^:"ajde/src/org/aspectj/ajde/internal/CompilerAdapter.java"

     * <li>New bootclasspath entries are ignored XXX</li>
======= d1551bd^:"ajde/src/org/aspectj/ajde/internal/CompilerAdapter.java"

        String propcp = properties.getClasspath(); // XXX omitting bootclasspath...
======= d1551bd^:"ajde/src/org/aspectj/ajde/internal/CompilerAdapter.java"

======= d1551bd^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java"

======= d1551bd^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java"

======= d1551bd^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java"

    	if (parser.bootclasspath == null) {
    		addClasspath(System.getProperty("sun.boot.class.path", ""), ret);
    	} else {  
    		addClasspath(parser.bootclasspath, ret);
    	}
======= d1551bd^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java"

======= d1551bd^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java"

======= d1551bd^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java"

======= d1551bd^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java"

======= d1551bd^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java"

     * @return List (String) classpath of injars, inpath, aspectpath 
     *   entries, specified classpath (bootclasspath, extdirs, and 
     *   classpath), and output dir or jar
======= d1551bd^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java"

            full.add(((File)i.next()).getAbsolutePath());
======= d1551bd^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"

======= d1551bd^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"

======= d1551bd^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"

======= d1551bd^:"org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/ajc/BuildArgParserTestCase.java"

======= d1551bd^:"org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/ajc/BuildArgParserTestCase.java"


======= 27d204c^:"tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java"

======= 27d204c^:"weaver/src/org/aspectj/weaver/ResolvedTypeX.java"

            return ResolvedMember.NONE;
======= 27d204c^:"weaver/src/org/aspectj/weaver/bcel/BcelShadow.java"

======= 27d204c^:"weaver/src/org/aspectj/weaver/bcel/BcelShadow.java"

======= 27d204c^:"weaver/src/org/aspectj/weaver/bcel/BcelShadow.java"

======= 27d204c^:"weaver/src/org/aspectj/weaver/bcel/BcelShadow.java"

            	!samePackage(targetType.getPackageName(), getEnclosingType().getPackageName()))

======= 4921f0c^:"weaver/src/org/aspectj/weaver/bcel/BcelShadow.java"

======= 4921f0c^:"weaver/src/org/aspectj/weaver/bcel/BcelShadow.java"

======= 4921f0c^:"weaver/src/org/aspectj/weaver/bcel/BcelShadow.java"


======= 438e61c^:"runtime/src/org/aspectj/runtime/reflect/AdviceSignatureImpl.java"

    String toString(StringMaker sm) {
======= 438e61c^:"runtime/src/org/aspectj/runtime/reflect/CatchClauseSignatureImpl.java"

    String toString(StringMaker sm) {
======= 438e61c^:"runtime/src/org/aspectj/runtime/reflect/ConstructorSignatureImpl.java"

    String toString(StringMaker sm) {
======= 438e61c^:"runtime/src/org/aspectj/runtime/reflect/Factory.java"

        return new SourceLocationImpl(lexicalClass, this.filename, line, col);
======= 438e61c^:"runtime/src/org/aspectj/runtime/reflect/FieldSignatureImpl.java"

    String toString(StringMaker sm) {
======= 438e61c^:"runtime/src/org/aspectj/runtime/reflect/InitializerSignatureImpl.java"

    String toString(StringMaker sm) {
======= 438e61c^:"runtime/src/org/aspectj/runtime/reflect/MethodSignatureImpl.java"

    String toString(StringMaker sm) {
======= 438e61c^:"runtime/src/org/aspectj/runtime/reflect/SignatureImpl.java"

======= 438e61c^:"runtime/src/org/aspectj/runtime/reflect/SignatureImpl.java"

    abstract String toString(StringMaker sm);
======= 438e61c^:"runtime/src/org/aspectj/runtime/reflect/SignatureImpl.java"

    String stringRep;
======= 438e61c^:"runtime/src/org/aspectj/runtime/reflect/SignatureImpl.java"

======= 438e61c^:"runtime/src/org/aspectj/runtime/reflect/SourceLocationImpl.java"

    int column;
    SourceLocationImpl(Class withinType, String fileName, int line, int column) {
        this.column = column;
    public int getColumn() { return column; }
    	return getFileName() + ":" + getLine() +
    		((getColumn() == -1) ? ""  : ":" + getColumn());
======= 438e61c^:"runtime/src/org/aspectj/runtime/reflect/StringMaker.java"

======= 438e61c^:"runtime/src/org/aspectj/runtime/reflect/StringMaker.java"

======= 438e61c^:"runtime/src/org/aspectj/runtime/reflect/StringMaker.java"

======= 438e61c^:"runtime/src/org/aspectj/runtime/reflect/StringMaker.java"

======= 438e61c^:"runtime/testsrc/RuntimeModuleTests.java"

======= 438e61c^:"runtime/testsrc/RuntimeModuleTests.java"

        suite.addTestSuite(JoinPointImplTest.class);
======= 438e61c^:"runtime/testsrc/RuntimeModuleTests.java"

======= 438e61c^:"runtime/testsrc/org/aspectj/runtime/reflect/SignatureTest.java"


======= 5e08765^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/PointcutDeclaration.java"

======= 5e08765^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java"

======= 5e08765^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java"

======= 5e08765^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java"

======= 5e08765^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java"

======= 5e08765^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java"

======= 5e08765^:"tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java"


======= b5e6307^:"tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java"

======= b5e6307^:"weaver/src/org/aspectj/weaver/TypeX.java"

        if (name.length() != 0)  // lots more tests could be made here...
            return "L" + name.replace('.', '/') + ";";

======= 82eae55^:"tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java"

======= 82eae55^:"weaver/src/org/aspectj/weaver/patterns/WildTypePattern.java"

======= 82eae55^:"weaver/src/org/aspectj/weaver/patterns/WildTypePattern.java"

======= 82eae55^:"weaver/testsrc/org/aspectj/weaver/patterns/TypePatternTestCase.java"


======= f503523^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/AjdtCommand.java"

======= f503523^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/AjdtCommand.java"

            return ((repeat 
                        ? buildManager.incrementalBuild(config, handler)
                        : buildManager.batchBuild(config, handler))
                    && !counter.hasErrors());
======= f503523^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/AjdtCommand.java"

======= f503523^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java"

======= f503523^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java"

======= f503523^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"

======= f503523^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"

======= f503523^:"org.aspectj.ajdt.core/src/org/aspectj/tools/ajc/Main.java"

======= f503523^:"org.aspectj.ajdt.core/src/org/aspectj/tools/ajc/Main.java"

======= f503523^:"org.aspectj.ajdt.core/src/org/aspectj/tools/ajc/Main.java"

======= f503523^:"org.aspectj.ajdt.core/src/org/aspectj/tools/ajc/Main.java"

======= f503523^:"org.aspectj.ajdt.core/src/org/aspectj/tools/ajc/Main.java"

======= f503523^:"org.aspectj.ajdt.core/src/org/aspectj/tools/ajc/Main.java"

======= f503523^:"org.aspectj.ajdt.core/src/org/aspectj/tools/ajc/Main.java"

======= f503523^:"org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/AjdtBatchTests.java"

======= f503523^:"org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/AjdtBatchTests.java"

======= f503523^:"org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/AjdtBatchTests.java"

======= f503523^:"weaver/src/org/aspectj/weaver/World.java"

======= f503523^:"weaver/src/org/aspectj/weaver/World.java"

======= f503523^:"weaver/src/org/aspectj/weaver/World.java"

======= f503523^:"weaver/src/org/aspectj/weaver/World.java"

======= f503523^:"weaver/src/org/aspectj/weaver/World.java"

            	//Thread.currentThread().dumpStack();
                // + " on classpath " + classPath);
======= f503523^:"weaver/src/org/aspectj/weaver/World.java"

    public static final World EMPTY = new World() {
        public List getShadowMungers() { return Collections.EMPTY_LIST; }
        public ResolvedTypeX.ConcreteName resolveObjectType(ResolvedTypeX.Name ty) {
            return null;
        }
        public Advice concreteAdvice(AjAttribute.AdviceAttribute attribute, Pointcut p, Member m) {
            throw new RuntimeException("unimplemented");
        }
        public ConcreteTypeMunger concreteTypeMunger(ResolvedTypeMunger munger, ResolvedTypeX aspectType) {
            throw new RuntimeException("unimplemented");
        }        
    };
======= f503523^:"weaver/testsrc/org/aspectj/weaver/BcweaverTests.java"

======= f503523^:"weaver/testsrc/org/aspectj/weaver/BcweaverTests.java"


======= 5f80c8c^:"ajdoc/src/org/aspectj/tools/ajdoc/Main.java"

======= 5f80c8c^:"ajdoc/testsrc/org/aspectj/tools/ajdoc/CoverageTestCase.java"

======= 5f80c8c^:"ajdoc/testsrc/org/aspectj/tools/ajdoc/CoverageTestCase.java"


======= dbe1024^:"org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/AjdtBatchTests.java"

======= dbe1024^:"org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/AjdtBatchTests.java"

======= dbe1024^:"weaver/src/org/aspectj/weaver/ResolvedTypeX.java"

======= dbe1024^:"weaver/src/org/aspectj/weaver/WeaverMessages.java"

======= dbe1024^:"weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java"

======= dbe1024^:"weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java"

======= dbe1024^:"weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java"


======= dfb15c1^:"tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java"

  

======= 5b90224^:"org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/AjdtBatchTests.java"

======= 5b90224^:"org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/AjdtBatchTests.java"


======= 84e4e53^:"tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java"

======= 84e4e53^:"weaver/src/org/aspectj/weaver/bcel/BcelShadow.java"


======= a2469c7^:"ajde/testsrc/org/aspectj/ajde/ExtensionTests.java"

======= a2469c7^:"ajde/testsrc/org/aspectj/ajde/ExtensionTests.java"

======= a2469c7^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmHierarchyBuilder.java"

======= a2469c7^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmHierarchyBuilder.java"


======= 6b1ef0f^:"tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java"


======= 2dfc738^:"asm/src/org/aspectj/asm/internal/AspectJElementHierarchy.java"


  <target name="extractAndJar" depends="extract,jar,srcjar" />
  <target name="extract" depends="unzipSource,createPatchedSource" />
  <target name="diff" depends="pack">
  <target name="createPatchedSource" depends="patch,unpack" />
      <fileset dir="bcel/src/java" />
  <li>ant extractAndJar -- this is just the composition of the extract,
  patches it, compiles the patched version into a jar and drops the new archives:
  <li>ant extract -- this extracts the source from bcel-5.1-src.zip,
  patches it, and copies the patched source into the project src directory, 
======= 228fc8d^:"weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java"

======= 228fc8d^:"weaver/src/org/aspectj/weaver/bcel/BcelAttributes.java"

======= 228fc8d^:"weaver/src/org/aspectj/weaver/bcel/BcelCflowAccessVar.java"

======= 228fc8d^:"weaver/src/org/aspectj/weaver/bcel/BcelCflowStackFieldAdder.java"

======= 228fc8d^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"

======= 228fc8d^:"weaver/src/org/aspectj/weaver/bcel/BcelField.java"

======= 228fc8d^:"weaver/src/org/aspectj/weaver/bcel/BcelFieldRef.java"

======= 228fc8d^:"weaver/src/org/aspectj/weaver/bcel/BcelMethod.java"

======= 228fc8d^:"weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java"

======= 228fc8d^:"weaver/src/org/aspectj/weaver/bcel/BcelRenderer.java"

======= 228fc8d^:"weaver/src/org/aspectj/weaver/bcel/BcelShadow.java"

======= 228fc8d^:"weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java"

======= 228fc8d^:"weaver/src/org/aspectj/weaver/bcel/BcelVar.java"

======= 228fc8d^:"weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java"

======= 228fc8d^:"weaver/src/org/aspectj/weaver/bcel/BcelWorld.java"

======= 228fc8d^:"weaver/src/org/aspectj/weaver/bcel/ExceptionRange.java"

======= 228fc8d^:"weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java"

======= 228fc8d^:"weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java"

            org.apache.bcel.classfile.Utility.accessToString(myGen.getAccessFlags(), true);
        s += org.apache.bcel.classfile.Utility.classOrInterface(myGen.getAccessFlags());
======= 228fc8d^:"weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java"

            org.apache.bcel.classfile.Utility.compactClassName(
======= 228fc8d^:"weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java"

======= 228fc8d^:"weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java"

        String access = org.apache.bcel.classfile.Utility.accessToString(getAccessFlags());
======= 228fc8d^:"weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java"

======= 228fc8d^:"weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java"

======= 228fc8d^:"weaver/src/org/aspectj/weaver/bcel/Range.java"

======= 228fc8d^:"weaver/src/org/aspectj/weaver/bcel/ShadowRange.java"

======= 228fc8d^:"weaver/src/org/aspectj/weaver/bcel/Tag.java"

======= 228fc8d^:"weaver/src/org/aspectj/weaver/bcel/UnwovenClassFile.java"

======= 228fc8d^:"weaver/src/org/aspectj/weaver/bcel/Utility.java"

======= 228fc8d^:"weaver/testsrc/org/aspectj/weaver/bcel/ArgsWeaveTestCase.java"

======= 228fc8d^:"weaver/testsrc/org/aspectj/weaver/bcel/MoveInstructionsWeaveTestCase.java"

======= 228fc8d^:"weaver/testsrc/org/aspectj/weaver/bcel/WeaveTestCase.java"


======= 8c5d743^:"tests/bugs/oxford/PR62475.java"

 public int A.x = z; // CE L14 error: z not visible.
======= 8c5d743^:"tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java"

======= 8c5d743^:"tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java"

    public void test030_privateITDinitialisersBeingMatched() {
======= 8c5d743^:"tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java"

   	<ajc-test dir="bugs/PR68991" pr="68991"

======= d43a391^:"tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java"

    public void test026_bindingThisAndTargetToTheSameFormal() {
======= d43a391^:"tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java"

  public void test030_privateITDinitialisersBeingMatched() {
======= d43a391^:"tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java"

   	</ajc-test>
======= d43a391^:"weaver/src/org/aspectj/weaver/patterns/PatternParser.java"

======= d43a391^:"weaver/src/org/aspectj/weaver/patterns/PatternParser.java"


======= 64183c3^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeFieldDeclaration.java"

======= 64183c3^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeFieldDeclaration.java"

======= 64183c3^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeFieldDeclaration.java"

======= 64183c3^:"tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java"

======= 64183c3^:"tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java"

  
  public void test026_bindingThisAndTargetToTheSameFormal() {
======= 64183c3^:"tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java"


======= b75cd93^:"tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java"

======= b75cd93^:"tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java"

   	</ajc-test>
======= b75cd93^:"weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java"

======= b75cd93^:"weaver/src/org/aspectj/weaver/patterns/ArgsPointcut.java"

                    " using args(..) at this line.  Use one args(..) per matched join point,"+"" +                    " see secondary source location for location of extraneous args(..)",
======= b75cd93^:"weaver/src/org/aspectj/weaver/patterns/ExposedState.java"

======= b75cd93^:"weaver/src/org/aspectj/weaver/patterns/ExposedState.java"

======= b75cd93^:"weaver/src/org/aspectj/weaver/patterns/ExposedState.java"

======= b75cd93^:"weaver/src/org/aspectj/weaver/patterns/ThisOrTargetPointcut.java"

======= b75cd93^:"weaver/src/org/aspectj/weaver/patterns/ThisOrTargetPointcut.java"


======= 05dabd1^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/Proceed.java"

======= 05dabd1^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/Proceed.java"

 *     PARC     initial implementation 
======= 05dabd1^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/Proceed.java"

 * of an <code>around</code> advice and if not this will be treated like any other
======= 05dabd1^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/Proceed.java"

======= 05dabd1^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/Proceed.java"

======= 05dabd1^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/Proceed.java"

======= 05dabd1^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/Proceed.java"

======= 05dabd1^:"tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java"


======= 44a92e1^:"tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java"

======= 44a92e1^:"weaver/src/org/aspectj/weaver/WeaverMessages.java"

======= 44a92e1^:"weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java"

======= 44a92e1^:"weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java"


======= f6436e3^:"runtime/src/org/aspectj/runtime/reflect/JoinPointImpl.java"

    public Object[] getArgs() { return args; }
======= f6436e3^:"runtime/testsrc/RuntimeModuleTests.java"

======= f6436e3^:"runtime/testsrc/RuntimeModuleTests.java"

======= f6436e3^:"runtime/testsrc/RuntimeModuleTests.java"


======= 851da68^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectDeclaration.java"

======= 851da68^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectDeclaration.java"

======= 851da68^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectDeclaration.java"

======= 851da68^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectDeclaration.java"

======= 851da68^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectDeclaration.java"

======= 851da68^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectDeclaration.java"

======= 851da68^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectDeclaration.java"

======= 851da68^:"tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java"

    runTest("false ambigous binding error (introduced in 1.2rc2)");
======= 851da68^:"tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java"

======= 851da68^:"weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java"


======= 061395c^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectDeclaration.java"

======= 061395c^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseSourceType.java"

======= 061395c^:"weaver/src/org/aspectj/weaver/ResolvedTypeX.java"

                    world.resolve(CLONEABLE), 
                    world.resolve(SERIALIZABLE)
======= 061395c^:"weaver/src/org/aspectj/weaver/ResolvedTypeX.java"

            return world.resolve(OBJECT);
======= 061395c^:"weaver/src/org/aspectj/weaver/ResolvedTypeX.java"

======= 061395c^:"weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java"

======= 061395c^:"weaver/src/org/aspectj/weaver/bcel/BcelShadow.java"

======= 061395c^:"weaver/src/org/aspectj/weaver/bcel/BcelShadow.java"

======= 061395c^:"weaver/src/org/aspectj/weaver/bcel/BcelShadow.java"

    				world.resolve(TypeX.forName("org.aspectj.lang.JoinPoint$StaticPart")),
======= 061395c^:"weaver/src/org/aspectj/weaver/bcel/BcelShadow.java"

======= 061395c^:"weaver/src/org/aspectj/weaver/patterns/DeclareParents.java"

======= 061395c^:"weaver/src/org/aspectj/weaver/patterns/DeclareSoft.java"

    		if (!scope.getWorld().resolve(TypeX.THROWABLE).isAssignableFrom(excType)) {

======= 648c0f4^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java"

======= 648c0f4^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java"

======= 648c0f4^:"org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/ajc/BuildArgParserTestCase.java"

======= 648c0f4^:"org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/ajc/BuildArgParserTestCase.java"

    			config.getClasspath().contains("1.jar"));
    			config.getClasspath().contains("2.jar"));
======= 648c0f4^:"org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/ajc/BuildArgParserTestCase.java"

======= 648c0f4^:"org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/ajc/BuildArgParserTestCase.java"

======= 648c0f4^:"org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/ajc/BuildArgParserTestCase.java"

======= 648c0f4^:"org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/ajc/BuildArgParserTestCase.java"

======= 648c0f4^:"util/src/org/aspectj/util/ConfigParser.java"

======= 648c0f4^:"util/src/org/aspectj/util/ConfigParser.java"

======= 648c0f4^:"util/src/org/aspectj/util/ConfigParser.java"

        return makeFile(getCurrentDir(), name);

======= ef7885f^:"weaver/src/org/aspectj/weaver/patterns/KindedPointcut.java"


======= 2b8fa31^:"ajde/testsrc/org/aspectj/ajde/AjdeTests.java"

======= 2b8fa31^:"ajde/testsrc/org/aspectj/ajde/AjdeTests.java"

======= 2b8fa31^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"

======= 2b8fa31^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"

======= 2b8fa31^:"org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/BcweaverJarMaker.java"

======= 2b8fa31^:"org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/BcweaverJarMaker.java"

======= 2b8fa31^:"weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java"

======= 2b8fa31^:"weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java"

======= 2b8fa31^:"weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java"

======= 2b8fa31^:"weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java"

======= 2b8fa31^:"weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java"

======= 2b8fa31^:"weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java"


======= 7f19ab4^:"weaver/src/org/aspectj/weaver/bcel/BcelShadow.java"


======= 9aed31d^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java"

======= 9aed31d^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java"


======= 4feb835^:"weaver/src/org/aspectj/weaver/Advice.java"

======= 4feb835^:"weaver/src/org/aspectj/weaver/Advice.java"

    							"applying to join point that doesn't return void: " + shadow,
======= 4feb835^:"weaver/src/org/aspectj/weaver/Advice.java"

======= 4feb835^:"weaver/src/org/aspectj/weaver/Lint.java"

======= 4feb835^:"weaver/src/org/aspectj/weaver/Lint.java"

======= 4feb835^:"weaver/src/org/aspectj/weaver/Lint.java"

======= 4feb835^:"weaver/src/org/aspectj/weaver/NewConstructorTypeMunger.java"

======= 4feb835^:"weaver/src/org/aspectj/weaver/ResolvedTypeX.java"

======= 4feb835^:"weaver/src/org/aspectj/weaver/ResolvedTypeX.java"

======= 4feb835^:"weaver/src/org/aspectj/weaver/ResolvedTypeX.java"

======= 4feb835^:"weaver/src/org/aspectj/weaver/ResolvedTypeX.java"

======= 4feb835^:"weaver/src/org/aspectj/weaver/ResolvedTypeX.java"

======= 4feb835^:"weaver/src/org/aspectj/weaver/ResolvedTypeX.java"

======= 4feb835^:"weaver/src/org/aspectj/weaver/ResolvedTypeX.java"

======= 4feb835^:"weaver/src/org/aspectj/weaver/Shadow.java"

======= 4feb835^:"weaver/src/org/aspectj/weaver/Shadow.java"

======= 4feb835^:"weaver/src/org/aspectj/weaver/Shadow.java"

======= 4feb835^:"weaver/src/org/aspectj/weaver/WeaverStateInfo.java"

======= 4feb835^:"weaver/src/org/aspectj/weaver/World.java"

                MessageUtil.error(messageHandler, "can't find type " + ty.getName());
======= 4feb835^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"

======= 4feb835^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"

======= 4feb835^:"weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java"

======= 4feb835^:"weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java"

======= 4feb835^:"weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java"

======= 4feb835^:"weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java"

======= 4feb835^:"weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java"

======= 4feb835^:"weaver/src/org/aspectj/weaver/bcel/ClassPathManager.java"

======= 4feb835^:"weaver/src/org/aspectj/weaver/bcel/ClassPathManager.java"

======= 4feb835^:"weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java"

======= 4feb835^:"weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java"

======= 4feb835^:"weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java"

======= 4feb835^:"weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java"

    			IMessage.ERROR, "problem generating method " + 
    			this.getClassName() + "." + this.getName() + ": " + e.getMessage(),
======= 4feb835^:"weaver/src/org/aspectj/weaver/patterns/ArgsPointcut.java"

======= 4feb835^:"weaver/src/org/aspectj/weaver/patterns/ArgsPointcut.java"

======= 4feb835^:"weaver/src/org/aspectj/weaver/patterns/CflowPointcut.java"

======= 4feb835^:"weaver/src/org/aspectj/weaver/patterns/CflowPointcut.java"

======= 4feb835^:"weaver/src/org/aspectj/weaver/patterns/DeclareParents.java"

======= 4feb835^:"weaver/src/org/aspectj/weaver/patterns/DeclareParents.java"

======= 4feb835^:"weaver/src/org/aspectj/weaver/patterns/DeclareParents.java"

======= 4feb835^:"weaver/src/org/aspectj/weaver/patterns/DeclareParents.java"

======= 4feb835^:"weaver/src/org/aspectj/weaver/patterns/DeclareParents.java"

======= 4feb835^:"weaver/src/org/aspectj/weaver/patterns/DeclarePrecedence.java"

======= 4feb835^:"weaver/src/org/aspectj/weaver/patterns/DeclarePrecedence.java"

    					"circularity in declare precedence, '*' occurs more than once",
    					pi.getSourceLocation(), null);    				
======= 4feb835^:"weaver/src/org/aspectj/weaver/patterns/DeclarePrecedence.java"

    				"Non-aspect types can only be specified in a declare precedence statement when subtypes are included.  Non-aspect type is : "+exactType.getName(),
    				pi.getSourceLocation(),null);
======= 4feb835^:"weaver/src/org/aspectj/weaver/patterns/DeclarePrecedence.java"

    					"circularity in declare precedence, '" + exactType.getName() + 
    						"' matches two patterns", pi.getSourceLocation(), pj.getSourceLocation());
======= 4feb835^:"weaver/src/org/aspectj/weaver/patterns/DeclarePrecedence.java"

======= 4feb835^:"weaver/src/org/aspectj/weaver/patterns/DeclareSoft.java"

======= 4feb835^:"weaver/src/org/aspectj/weaver/patterns/DeclareSoft.java"

    					excType.getName() + " is not a subtype of Throwable",
======= 4feb835^:"weaver/src/org/aspectj/weaver/patterns/IfPointcut.java"

======= 4feb835^:"weaver/src/org/aspectj/weaver/patterns/IfPointcut.java"

======= 4feb835^:"weaver/src/org/aspectj/weaver/patterns/IfPointcut.java"

======= 4feb835^:"weaver/src/org/aspectj/weaver/patterns/IfPointcut.java"

======= 4feb835^:"weaver/src/org/aspectj/weaver/patterns/IfPointcut.java"

======= 4feb835^:"weaver/src/org/aspectj/weaver/patterns/IfPointcut.java"

======= 4feb835^:"weaver/src/org/aspectj/weaver/patterns/PerFromSuper.java"

======= 4feb835^:"weaver/src/org/aspectj/weaver/patterns/PerFromSuper.java"

======= 4feb835^:"weaver/src/org/aspectj/weaver/patterns/ReferencePointcut.java"

======= 4feb835^:"weaver/src/org/aspectj/weaver/patterns/ReferencePointcut.java"

======= 4feb835^:"weaver/src/org/aspectj/weaver/patterns/ReferencePointcut.java"

======= 4feb835^:"weaver/src/org/aspectj/weaver/patterns/ReferencePointcut.java"

======= 4feb835^:"weaver/src/org/aspectj/weaver/patterns/ThisOrTargetPointcut.java"

======= 4feb835^:"weaver/src/org/aspectj/weaver/patterns/ThisOrTargetPointcut.java"

======= 4feb835^:"weaver/src/org/aspectj/weaver/patterns/TypePattern.java"

======= 4feb835^:"weaver/src/org/aspectj/weaver/patterns/TypePattern.java"

======= 4feb835^:"weaver/src/org/aspectj/weaver/patterns/WildTypePattern.java"

======= 4feb835^:"weaver/src/org/aspectj/weaver/patterns/WildTypePattern.java"

======= 4feb835^:"weaver/src/org/aspectj/weaver/patterns/WildTypePattern.java"

======= 4feb835^:"weaver/src/org/aspectj/weaver/patterns/WildTypePattern.java"

======= 4feb835^:"weaver/testsrc/org/aspectj/weaver/BcweaverTests.java"

======= 4feb835^:"weaver/testsrc/org/aspectj/weaver/BcweaverTests.java"


======= 45bce91^:"weaver/src/org/aspectj/weaver/patterns/PatternParser.java"

======= 45bce91^:"weaver/src/org/aspectj/weaver/patterns/PatternParser.java"


======= 10c6de6^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/IfPseudoToken.java"

======= 10c6de6^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/IfPseudoToken.java"

======= 10c6de6^:"weaver/src/org/aspectj/weaver/patterns/IfPointcut.java"

======= 10c6de6^:"weaver/src/org/aspectj/weaver/patterns/IfPointcut.java"

======= 10c6de6^:"weaver/src/org/aspectj/weaver/patterns/Pointcut.java"

======= 10c6de6^:"weaver/src/org/aspectj/weaver/patterns/Pointcut.java"

======= 10c6de6^:"weaver/src/org/aspectj/weaver/patterns/Pointcut.java"

    

======= 573741c^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/WeaverMessageHandler.java"

======= 573741c^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/WeaverMessageHandler.java"

======= 573741c^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/WeaverMessageHandler.java"

======= 573741c^:"weaver/src/org/aspectj/weaver/ResolvedTypeX.java"

                        new ISourceLocation[] { element.getSourceLocation() }));

======= 6ea8300^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/AjdtCommand.java"

            if ("-help".equals(args[i])) {
                // should be info, but handler usually suppresses
                MessageUtil.abort(handler, BuildArgParser.getUsage());
======= 6ea8300^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java"

======= 6ea8300^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java"

======= 6ea8300^:"org.aspectj.ajdt.core/src/org/aspectj/tools/ajc/Main.java"

            args = new String[] { "-help" };
======= 6ea8300^:"org.aspectj.ajdt.core/testsrc/EajcModuleTests.java"

======= 6ea8300^:"org.aspectj.ajdt.core/testsrc/EajcModuleTests.java"

======= 6ea8300^:"org.aspectj.ajdt.core/testsrc/org/aspectj/tools/ajc/MainTest.java"

        Main.bareMain(new String[] {"-help"}, false, list, null, null, null);
        assertTrue(1 == list.size());
        Object o = list.get(0);
        assertTrue(-1 != ((String)o).indexOf("-aspectpath"));
        assertTrue(-1 != ((String)o).indexOf("-incremental"));

======= b184363^:"weaver/src/org/aspectj/weaver/ResolvedTypeX.java"

======= b184363^:"weaver/src/org/aspectj/weaver/ResolvedTypeX.java"


======= 936459c^:"weaver/src/org/aspectj/weaver/patterns/WildTypePattern.java"

======= 936459c^:"weaver/src/org/aspectj/weaver/patterns/WildTypePattern.java"


======= 75852d7^:"weaver/src/org/aspectj/weaver/World.java"


======= 8dc0845^:"ajdoc/src/org/aspectj/tools/ajdoc/HtmlDecorator.java"

======= 8dc0845^:"ajdoc/src/org/aspectj/tools/ajdoc/HtmlDecorator.java"

        System.out.println( "> Decorating " + file.getCanonicalPath() + "..." );
        BufferedReader reader = new BufferedReader(new FileReader(file));
======= 8dc0845^:"ajdoc/src/org/aspectj/tools/ajdoc/HtmlDecorator.java"

======= 8dc0845^:"ajdoc/testsrc/org/aspectj/tools/ajdoc/CoverageTestCase.java"

======= 8dc0845^:"ajdoc/testsrc/org/aspectj/tools/ajdoc/CoverageTestCase.java"

======= 8dc0845^:"ajdoc/testsrc/org/aspectj/tools/ajdoc/SpacewarTestCase.java"

======= 8dc0845^:"ajdoc/testsrc/org/aspectj/tools/ajdoc/SpacewarTestCase.java"


======= 2cc4826^:"ajdoc/src/org/aspectj/tools/ajdoc/StubFileGenerator.java"

            if (packageName != null ) {
======= 2cc4826^:"ajdoc/src/org/aspectj/tools/ajdoc/StubFileGenerator.java"

======= 2cc4826^:"ajdoc/testsrc/org/aspectj/tools/ajdoc/CoverageTestCase.java"

======= 2cc4826^:"ajdoc/testsrc/org/aspectj/tools/ajdoc/CoverageTestCase.java"


    <classpathentry kind="src" path="src"/>
    <classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>
    <classpathentry kind="src" path="/asm"/>
    <classpathentry kind="src" path="/org.aspectj.ajdt.core"/>
    <classpathentry kind="src" path="/bridge"/>
    <classpathentry kind="src" path="/util"/>
    <classpathentry kind="lib" path="C:/Apps/j2sdk1.4.2/lib/tools.jar"/>
    <classpathentry kind="src" path="testsrc"/>
    <classpathentry kind="lib" path="/lib/junit/junit.jar" sourcepath="/lib/junit/junit-src.jar"/>
    <classpathentry kind="output" path="bin"/>
======= 3707411^:"ajdoc/src/org/aspectj/tools/ajdoc/Main.java"

                inputFiles[i]     = findFile((String)filenames.elementAt(i));
======= 3707411^:"ajdoc/src/org/aspectj/tools/ajdoc/Main.java"

                    javadocargs[options.size() + k] = signatureFiles[k].getCanonicalPath();
======= 3707411^:"ajdoc/src/org/aspectj/tools/ajdoc/Main.java"

    /**
     * If the file doesn't exist on the specified path look for it in all the other
     * paths specified by the "sourcepath" option.
     */
    static File findFile( String filename ) throws IOException {
        return new File( filename );
        /*
        File file = new File(filename);
        if (file.exists()) {
            return file;
        }
        else {
            for ( int i = 0; i < sourcePath.size(); i++ ) {
                File currPath = new File((String)sourcePath.elementAt(i));
                File currFile = new File(currPath + "/" + filename); // !!!
                if ( file.exists()) {
                    return file;
                }
            }
        }
        throw new IOException("couldn't find source file: " + filename);
        */
    }
======= 3707411^:"ajdoc/src/org/aspectj/tools/ajdoc/Main.java"

        	
======= 3707411^:"ajdoc/src/org/aspectj/tools/ajdoc/Main.java"

            String arg = (String)vargs.get(i);
======= 3707411^:"ajdoc/src/org/aspectj/tools/ajdoc/Main.java"

                if ((arg.endsWith(".java") && entryName.indexOf('.') == entryName.length()-5) ||
                     arg.endsWith(".lst") &&
                     arg != null ) {
======= 3707411^:"ajdoc/src/org/aspectj/tools/ajdoc/Main.java"

                                        (name.substring(index1, index2).equals( ".java" ) ) ) {
======= 3707411^:"ajdoc/src/org/aspectj/tools/ajdoc/Main.java"

        }
======= 3707411^:"ajdoc/src/org/aspectj/tools/ajdoc/StructureUtil.java"

======= 3707411^:"ajdoc/src/org/aspectj/tools/ajdoc/StubFileGenerator.java"

            PrintWriter writer = new PrintWriter(new BufferedWriter(new FileWriter(signatureFile.getCanonicalPath())));
            
======= 3707411^:"ajdoc/src/org/aspectj/tools/ajdoc/StubFileGenerator.java"

======= 3707411^:"ajdoc/testdata/coverage/foo/UseThisAspectForLinkCheck.java"

 
======= 3707411^:"ajdoc/testsrc/org/aspectj/tools/ajdoc/CoverageTestCase.java"

======= 3707411^:"ajdoc/testsrc/org/aspectj/tools/ajdoc/CoverageTestCase.java"

======= 3707411^:"ajdoc/testsrc/org/aspectj/tools/ajdoc/CoverageTestCase.java"


======= 39c3a3b^:"build/src/$installer$/org/aspectj/Main.java"

        return getOS().equals("Windows NT") || getOS().equals("Windows 2000");

======= 9ebfc84^:"org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/BcweaverJarMaker.java"

======= 9ebfc84^:"weaver/src/org/aspectj/weaver/WeavingURLClassLoader.java"

======= 9ebfc84^:"weaver/src/org/aspectj/weaver/WeavingURLClassLoader.java"

======= 9ebfc84^:"weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java"

======= 9ebfc84^:"weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java"

======= 9ebfc84^:"weaver/testsrc/org/aspectj/weaver/WeavingURLClassLoaderTest.java"

======= 9ebfc84^:"weaver/testsrc/org/aspectj/weaver/WeavingURLClassLoaderTest.java"


======= bd16033^:"testing/src/org/aspectj/testing/harness/bridge/DirChanges.java"

    private static final boolean EXISTS = true;
======= bd16033^:"testing/src/org/aspectj/testing/harness/bridge/DirChanges.java"

======= bd16033^:"testing/src/org/aspectj/testing/harness/bridge/DirChanges.java"


======= 5f6b18b^:"runtime/src/org/aspectj/runtime/internal/CFlowStack.java"

    private Hashtable stacks = new Hashtable();
    private Thread cached_thread;
    private Stack cached_stack;
    private int change_count = 0;
    private static final int COLLECT_AT = 20000;
    private static final int MIN_COLLECT_AT = 100;
    private synchronized Stack getThreadStack() {
        if (Thread.currentThread() != cached_thread) {
            cached_thread = Thread.currentThread();
            cached_stack = (Stack)stacks.get(cached_thread);
            if (cached_stack == null) {
                cached_stack = new Stack();
                stacks.put(cached_thread, cached_stack);
            }
            change_count++;
            // Collect more often if there are many threads, but not *too* often
            int size = Math.max(1, stacks.size()); // should be >1 b/c always live threads, but...
            if (change_count > Math.max(MIN_COLLECT_AT, COLLECT_AT/size)) {
                Stack dead_stacks = new Stack();
                for (Enumeration e = stacks.keys(); e.hasMoreElements(); ) {
                    Thread t = (Thread)e.nextElement();
                    if (!t.isAlive()) dead_stacks.push(t);
                }
                for (Enumeration e = dead_stacks.elements(); e.hasMoreElements(); ) {
                    Thread t = (Thread)e.nextElement();
                    stacks.remove(t);
                }
                change_count = 0;
            }
        }
        return cached_stack;
======= 5f6b18b^:"runtime/src/org/aspectj/runtime/internal/CFlowStack.java"

======= 5f6b18b^:"runtime/src/org/aspectj/runtime/internal/CFlowStack.java"

======= 5f6b18b^:"runtime/src/org/aspectj/runtime/internal/CFlowStack.java"

======= 5f6b18b^:"runtime/src/org/aspectj/runtime/internal/CFlowStack.java"

======= 5f6b18b^:"runtime/src/org/aspectj/runtime/internal/CFlowStack.java"

======= 5f6b18b^:"runtime/src/org/aspectj/runtime/internal/CFlowStack.java"


======= a17b51b^:"ajbrowser/src/org/aspectj/tools/ajbrowser/BasicEditor.java"


======= a97f3b6^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/EclipseAdapterUtils.java"

            || ((startPosition <= 0) && (endPosition <= 0)))

======= b0d32ca^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectDeclaration.java"

======= b0d32ca^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectDeclaration.java"


======= e7ac54f^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/AjCompilerAdapter.java"


======= 0521e79^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/InterTypeMemberFinder.java"

======= 0521e79^:"org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/BcweaverJarMaker.java"

======= 0521e79^:"org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/BcweaverJarMaker.java"

======= 0521e79^:"weaver/testsrc/org/aspectj/weaver/WeavingURLClassLoaderTest.java"

======= 0521e79^:"weaver/testsrc/org/aspectj/weaver/WeavingURLClassLoaderTest.java"


       description="javadoc for AspectJ lang and lang.reflect">
        <javadoc sourcepath="${aspectj.modules.dir}/runtime/src"
               packagenames="org.aspectj.lang,org.aspectj.lang.reflect" />
======= 33d8ee9^:"org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/BcweaverJarMaker.java"

======= 33d8ee9^:"org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/BcweaverJarMaker.java"

======= 33d8ee9^:"util/src/org/aspectj/util/FileUtil.java"

======= 33d8ee9^:"util/src/org/aspectj/util/FileUtil.java"

======= 33d8ee9^:"util/src/org/aspectj/util/FileUtil.java"

======= 33d8ee9^:"util/src/org/aspectj/util/FileUtil.java"

======= 33d8ee9^:"util/src/org/aspectj/util/FileUtil.java"

======= 33d8ee9^:"util/src/org/aspectj/util/FileUtil.java"

======= 33d8ee9^:"util/src/org/aspectj/util/FileUtil.java"

======= 33d8ee9^:"weaver/testsrc/BcweaverModuleTests.java"

        suite.addTest(org.aspectj.weaver.patterns.PatternsTests.suite()); 
======= 33d8ee9^:"weaver/testsrc/org/aspectj/weaver/BcweaverTests.java"

======= 33d8ee9^:"weaver/testsrc/org/aspectj/weaver/BcweaverTests.java"

        suite.addTestSuite(TypeXTestCase.class); 
======= 33d8ee9^:"weaver/testsrc/org/aspectj/weaver/BcweaverTests.java"


======= 0a01759^:"weaver/src/org/aspectj/weaver/patterns/DeclarePrecedence.java"


    

======= 7d6b500^:"weaver/src/org/aspectj/weaver/bcel/UnwovenClassFile.java"

======= 7d6b500^:"weaver/src/org/aspectj/weaver/bcel/UnwovenClassFile.java"


======= 183fc23^:"ajde/src/org/aspectj/ajde/internal/BuildNotifierAdapter.java"

======= 183fc23^:"ajde/src/org/aspectj/ajde/internal/BuildNotifierAdapter.java"

======= 183fc23^:"ajde/src/org/aspectj/ajde/internal/BuildNotifierAdapter.java"

======= 183fc23^:"ajde/src/org/aspectj/ajde/internal/BuildNotifierAdapter.java"

======= 183fc23^:"ajde/src/org/aspectj/ajde/internal/BuildNotifierAdapter.java"

======= 183fc23^:"ajde/src/org/aspectj/ajde/internal/BuildNotifierAdapter.java"

======= 183fc23^:"ajde/src/org/aspectj/ajde/internal/BuildNotifierAdapter.java"

======= 183fc23^:"ajde/src/org/aspectj/ajde/internal/BuildNotifierAdapter.java"

======= 183fc23^:"ajde/src/org/aspectj/ajde/internal/BuildNotifierAdapter.java"

======= 183fc23^:"ajde/src/org/aspectj/ajde/internal/BuildNotifierAdapter.java"

======= 183fc23^:"ajde/src/org/aspectj/ajde/internal/BuildNotifierAdapter.java"

======= 183fc23^:"ajde/src/org/aspectj/ajde/internal/BuildNotifierAdapter.java"

======= 183fc23^:"ajde/testsrc/org/aspectj/ajde/AjdeTests.java"

======= 183fc23^:"ajde/testsrc/org/aspectj/ajde/AjdeTests.java"

======= 183fc23^:"bridge/src/org/aspectj/bridge/IProgressListener.java"

======= 183fc23^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/AjCompilerAdapter.java"

======= 183fc23^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/AjCompilerAdapter.java"

======= 183fc23^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/AjCompilerAdapter.java"

======= 183fc23^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/AjCompilerAdapter.java"

======= 183fc23^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/AjCompilerAdapter.java"

======= 183fc23^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/AjCompilerAdapter.java"

======= 183fc23^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/WeaverAdapter.java"

======= 183fc23^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/WeaverAdapter.java"

======= 183fc23^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/WeaverAdapter.java"

======= 183fc23^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/WeaverAdapter.java"

======= 183fc23^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/WeaverAdapter.java"

======= 183fc23^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/WeaverAdapter.java"

======= 183fc23^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/WeaverAdapter.java"

======= 183fc23^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"

======= 183fc23^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"

======= 183fc23^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"

                    if (handler.hasErrors()) {
======= 183fc23^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"

======= 183fc23^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"

======= 183fc23^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"


======= 34dbb0c^:"ajde/testsrc/org/aspectj/ajde/AjdeTests.java"

======= 34dbb0c^:"ajde/testsrc/org/aspectj/ajde/InpathTestcase.java"

======= 34dbb0c^:"ajde/testsrc/org/aspectj/ajde/InpathTestcase.java"

======= 34dbb0c^:"ajde/testsrc/org/aspectj/ajde/InpathTestcase.java"

======= 34dbb0c^:"ajde/testsrc/org/aspectj/ajde/InpathTestcase.java"

======= 34dbb0c^:"ajde/testsrc/org/aspectj/ajde/InpathTestcase.java"

======= 34dbb0c^:"ajde/testsrc/org/aspectj/ajde/ResourceCopyTestCase.java"

======= 34dbb0c^:"ajde/testsrc/org/aspectj/ajde/ResourceCopyTestCase.java"

======= 34dbb0c^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"

======= 34dbb0c^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"

======= 34dbb0c^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"

======= 34dbb0c^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"

======= 34dbb0c^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"

======= 34dbb0c^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"

======= 34dbb0c^:"weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java"

======= 34dbb0c^:"weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java"

======= 34dbb0c^:"weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java"

======= 34dbb0c^:"weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java"

======= 34dbb0c^:"weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java"

======= 34dbb0c^:"weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java"


======= 1a4c02c^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java"


======= 41c6f6d^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java"

======= 41c6f6d^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java"

======= 41c6f6d^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java"

======= 41c6f6d^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java"

======= 41c6f6d^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java"


======= 5c67166^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeMethodDeclaration.java"

======= 5c67166^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeMethodDeclaration.java"


======= 0109534^:"weaver/src/org/aspectj/weaver/Shadow.java"

======= 0109534^:"weaver/src/org/aspectj/weaver/patterns/DeclarePrecedence.java"

    					"circularity in declare dominates, '*' occurs more than once",
======= 0109534^:"weaver/src/org/aspectj/weaver/patterns/DeclarePrecedence.java"

    					"circularity in declare dominates, '" + exactType.getName() + 

======= c798923^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/InterTypeMemberFinder.java"

======= c798923^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/InterTypeMemberFinder.java"


======= 5d73494^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectClinit.java"

======= 5d73494^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"


======= fbc0aa3^:"weaver/src/org/aspectj/weaver/patterns/ArgsPointcut.java"

======= fbc0aa3^:"weaver/src/org/aspectj/weaver/patterns/ArgsPointcut.java"

======= fbc0aa3^:"weaver/src/org/aspectj/weaver/patterns/CflowPointcut.java"

======= fbc0aa3^:"weaver/src/org/aspectj/weaver/patterns/CflowPointcut.java"

======= fbc0aa3^:"weaver/src/org/aspectj/weaver/patterns/IfPointcut.java"

======= fbc0aa3^:"weaver/src/org/aspectj/weaver/patterns/IfPointcut.java"

======= fbc0aa3^:"weaver/src/org/aspectj/weaver/patterns/IfPointcut.java"

======= fbc0aa3^:"weaver/src/org/aspectj/weaver/patterns/ThisOrTargetPointcut.java"

======= fbc0aa3^:"weaver/src/org/aspectj/weaver/patterns/ThisOrTargetPointcut.java"


======= 16a0abd^:"ajde/testsrc/org/aspectj/ajde/AjdeTests.java"

======= 16a0abd^:"ajde/testsrc/org/aspectj/ajde/AjdeTests.java"

======= 16a0abd^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java"

======= 16a0abd^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java"

======= 16a0abd^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java"

======= 16a0abd^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java"

======= 16a0abd^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"

======= 16a0abd^:"taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java"

======= 16a0abd^:"taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java"

======= 16a0abd^:"testing/src/org/aspectj/testing/harness/bridge/CompilerRun.java"

======= 16a0abd^:"weaver/src/org/aspectj/weaver/Advice.java"

    public static Advice makeCflowEntry(World world, Pointcut entry, boolean isBelow, Member stackField, int nFreeVars, List innerCflowEntries) {
======= 16a0abd^:"weaver/src/org/aspectj/weaver/Advice.java"

    public static Advice makeSoftener(World world, Pointcut entry, TypePattern exceptionType) {
    	//System.out.println("made ret: " + ret + " with " + exceptionType);
======= 16a0abd^:"weaver/src/org/aspectj/weaver/CrosscuttingMembers.java"

======= 16a0abd^:"weaver/src/org/aspectj/weaver/CrosscuttingMembersSet.java"

======= 16a0abd^:"weaver/src/org/aspectj/weaver/CrosscuttingMembersSet.java"

======= 16a0abd^:"weaver/src/org/aspectj/weaver/Shadow.java"

======= 16a0abd^:"weaver/src/org/aspectj/weaver/Shadow.java"

    
======= 16a0abd^:"weaver/src/org/aspectj/weaver/WeaverStateInfo.java"

======= 16a0abd^:"weaver/src/org/aspectj/weaver/WeaverStateInfo.java"

======= 16a0abd^:"weaver/src/org/aspectj/weaver/WeaverStateInfo.java"

======= 16a0abd^:"weaver/src/org/aspectj/weaver/WeaverStateInfo.java"

======= 16a0abd^:"weaver/src/org/aspectj/weaver/WeaverStateInfo.java"

======= 16a0abd^:"weaver/src/org/aspectj/weaver/bcel/BcelCflowStackFieldAdder.java"

======= 16a0abd^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"

======= 16a0abd^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"

======= 16a0abd^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"

        if (clazz.isWoven()) {
======= 16a0abd^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"

        	isChanged |= munger.munge(this);
======= 16a0abd^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"

            isChanged |= match(mg);
======= 16a0abd^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"

======= 16a0abd^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"

======= 16a0abd^:"weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java"

======= 16a0abd^:"weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java"

======= 16a0abd^:"weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java"

======= 16a0abd^:"weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java"

======= 16a0abd^:"weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java"

            classType.resetState();
======= 16a0abd^:"weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java"

======= 16a0abd^:"weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java"

======= 16a0abd^:"weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java"

======= 16a0abd^:"weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java"

======= 16a0abd^:"weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java"

======= 16a0abd^:"weaver/src/org/aspectj/weaver/patterns/CflowPointcut.java"


======= 6ddae42^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AccessForInlineVisitor.java"

======= 6ddae42^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AccessForInlineVisitor.java"

======= 6ddae42^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AccessForInlineVisitor.java"

======= 6ddae42^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AccessForInlineVisitor.java"

======= 6ddae42^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AccessForInlineVisitor.java"

======= 6ddae42^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AccessForInlineVisitor.java"

======= 6ddae42^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AccessForInlineVisitor.java"

======= 6ddae42^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AccessForInlineVisitor.java"

======= 6ddae42^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java"

======= 6ddae42^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java"

======= 6ddae42^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/InlineAccessFieldBinding.java"

======= 6ddae42^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/InlineAccessFieldBinding.java"

======= 6ddae42^:"tests/bugs/protectedvf/main/Driver.java"


======= 669cd7c^:"ajde/testsrc/org/aspectj/ajde/AjdeTests.java"

======= 669cd7c^:"ajde/testsrc/org/aspectj/ajde/AjdeTests.java"

======= 669cd7c^:"asm/src/org/aspectj/asm/IProgramElement.java"

======= 669cd7c^:"asm/src/org/aspectj/asm/IProgramElement.java"

======= 669cd7c^:"asm/src/org/aspectj/asm/IProgramElement.java"


======= 19bac86^:"weaver/src/org/aspectj/weaver/Member.java"

======= 19bac86^:"weaver/src/org/aspectj/weaver/Member.java"

        //XXX we don't actually try to find the handler parameter name
        //XXX it probably wouldn't be too hard
        //String[] pNames = getParameterNames(world);
        //if (pNames != null) pName = pNames[0];
======= 19bac86^:"weaver/src/org/aspectj/weaver/ResolvedMember.java"

    protected String[] parameterNames = null;
======= 19bac86^:"weaver/src/org/aspectj/weaver/bcel/BcelShadow.java"

======= 19bac86^:"weaver/src/org/aspectj/weaver/bcel/BcelShadow.java"

                Member.makeExceptionHandlerSignature(inType, catchType),
======= 19bac86^:"weaver/src/org/aspectj/weaver/bcel/BcelShadow.java"


======= 0c83343^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java"

======= 0c83343^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java"

======= 0c83343^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java"

======= 0c83343^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"

======= 0c83343^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"

======= 0c83343^:"org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/AjdtBatchTests.java"

        suite.addTestSuite(CompileAndRunTestCase.class); 
======= 0c83343^:"org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/CommandTestCase.java"

======= 0c83343^:"org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/CommandTestCase.java"

======= 0c83343^:"org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/CommandTestCase.java"

======= 0c83343^:"runtime/src/org/aspectj/runtime/reflect/Factory.java"

    public static JoinPoint makeJP(JoinPoint.StaticPart staticPart, 
                        Object _this, Object target, Object[] args)
    {
        return new JoinPointImpl(staticPart, _this, target, args);
    }
======= 0c83343^:"weaver/src/org/aspectj/weaver/Lint.java"

======= 0c83343^:"weaver/src/org/aspectj/weaver/World.java"

======= 0c83343^:"weaver/src/org/aspectj/weaver/World.java"

======= 0c83343^:"weaver/src/org/aspectj/weaver/World.java"

======= 0c83343^:"weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java"

        	((BcelShadow)shadow).getThisJoinPointVar();
======= 0c83343^:"weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java"

        	shadow.getThisJoinPointBcelVar().appendLoad(il, fact);
======= 0c83343^:"weaver/src/org/aspectj/weaver/bcel/BcelShadow.java"

======= 0c83343^:"weaver/src/org/aspectj/weaver/bcel/BcelShadow.java"

======= 0c83343^:"weaver/src/org/aspectj/weaver/bcel/BcelShadow.java"

======= 0c83343^:"weaver/src/org/aspectj/weaver/bcel/BcelShadow.java"

    public BcelVar getThisJoinPointBcelVar() {
    		thisJoinPointVar = genTempVar(TypeX.forName("org.aspectj.lang.JoinPoint"));
    		InstructionFactory fact = getFactory();
    		InstructionList il = new InstructionList();
    		BcelVar staticPart = getThisJoinPointStaticPartBcelVar();
    		staticPart.appendLoad(il, fact);
    		if (hasThis()) {
    			((BcelVar)getThisVar()).appendLoad(il, fact);
    		} else {
    			il.append(new ACONST_NULL());
    		}
    		if (hasTarget()) {
    			((BcelVar)getTargetVar()).appendLoad(il, fact);
    		} else {
    			il.append(new ACONST_NULL());
    		}
    		
    		il.append(fact.createInvoke("org.aspectj.runtime.reflect.Factory", 
    							"makeJP", LazyClassGen.tjpType,
    							new Type[] { LazyClassGen.staticTjpType,
    									Type.OBJECT, Type.OBJECT, new ArrayType(Type.OBJECT, 1)},
    							Constants.INVOKESTATIC));
    		il.append(thisJoinPointVar.createStore(fact));
    		range.insert(il, Range.OutsideBefore);
                    BIPUSH 0
                    ANEWARRAY java.lang.Object
                    ASTORE_2
                    ALOAD_2
                    INVOKESTATIC org.aspectj.runtime.reflect.Factory.makeJP (Lorg/aspectj/lang/JoinPoint$StaticPart;Ljava/lang/Object;Ljava/lang/Object;[Ljava/lang/Object;)Lorg/aspectj/lang/JoinPoint;
    |               ASTORE 4
    |               ALOAD 4
    |               ALOAD 4
    |               ALOAD 4
                    ASTORE 11
                    BIPUSH 1
                    ANEWARRAY java.lang.Object
                    ASTORE 13
                    ALOAD 13
                    BIPUSH 0
                    ALOAD 11
                    AASTORE
                    ALOAD 13
                    INVOKESTATIC org.aspectj.runtime.reflect.Factory.makeJP (Lorg/aspectj/lang/JoinPoint$StaticPart;Ljava/lang/Object;Ljava/lang/Object;[Ljava/lang/Object;)Lorg/aspectj/lang/JoinPoint;
                    ASTORE 12
    |               ASTORE 15
    |               ALOAD 15
    |               ALOAD 11
    |               ALOAD 15
    |               BIPUSH 1
    |               ALOAD 15
    |               INVOKESPECIAL HelloWorld$AjcClosure15.<init> ([Ljava/lang/Object;)V
                    BIPUSH 0
                    ANEWARRAY java.lang.Object
                    ALOAD_2
                    INVOKESTATIC org.aspectj.runtime.reflect.Factory.makeJP (Lorg/aspectj/lang/JoinPoint$StaticPart;Ljava/lang/Object;Ljava/lang/Object;[Ljava/lang/Object;)Lorg/aspectj/lang/JoinPoint;
                    ASTORE 4
    |               ASTORE 6
    |               ALOAD 6
    |               BIPUSH 0
    |               ALOAD 6
    |               INVOKESPECIAL HelloWorld$AjcClosure7.<init> ([Ljava/lang/Object;)V
                    ASTORE 10
                    ALOAD 10
                    BIPUSH 1
                    ANEWARRAY java.lang.Object
                    ASTORE 12
                    ALOAD 12
                    BIPUSH 0
                    AASTORE
                    ALOAD 12
                    INVOKESTATIC org.aspectj.runtime.reflect.Factory.makeJP (Lorg/aspectj/lang/JoinPoint$StaticPart;Ljava/lang/Object;Ljava/lang/Object;[Ljava/lang/Object;)Lorg/aspectj/lang/JoinPoint;
                    ASTORE 14
    |               ASTORE 16
    |               ALOAD 16
    |               ALOAD 10
    |               ALOAD 16
    |               ALOAD 8
    |               ALOAD 16
    |               ALOAD 14
    |               ALOAD 16
    |               ALOAD 14
                    BIPUSH 0
                    ANEWARRAY java.lang.Object
                    ASTORE_2
                    ALOAD_2
                    INVOKESTATIC org.aspectj.runtime.reflect.Factory.makeJP (Lorg/aspectj/lang/JoinPoint$StaticPart;Ljava/lang/Object;Ljava/lang/Object;[Ljava/lang/Object;)Lorg/aspectj/lang/JoinPoint;
    |               ASTORE_3
    |               ALOAD_3
    |               ALOAD_3
    |               ALOAD_3
                    ASTORE 9
                    BIPUSH 1
                    ANEWARRAY java.lang.Object
                    ASTORE 11
                    ALOAD 11
                    BIPUSH 0
                    ALOAD 9
                    AASTORE
                    ALOAD 11
                    INVOKESTATIC org.aspectj.runtime.reflect.Factory.makeJP (Lorg/aspectj/lang/JoinPoint$StaticPart;Ljava/lang/Object;Ljava/lang/Object;[Ljava/lang/Object;)Lorg/aspectj/lang/JoinPoint;
                    ASTORE 10
    |               ASTORE 12
    |               ALOAD 12
    |               BIPUSH 0
    |               ALOAD 12
    |               ALOAD 10
    |               ALOAD 12
    |               ALOAD 10
                    BIPUSH 0
                    ANEWARRAY java.lang.Object
                    ALOAD_2
                    INVOKESTATIC org.aspectj.runtime.reflect.Factory.makeJP (Lorg/aspectj/lang/JoinPoint$StaticPart;Ljava/lang/Object;Ljava/lang/Object;[Ljava/lang/Object;)Lorg/aspectj/lang/JoinPoint;
                    ASTORE 4
    |               ASTORE 6
    |               ALOAD 6
    |               BIPUSH 0
    |               ALOAD 6
    |               INVOKESPECIAL HelloWorld$AjcClosure3.<init> ([Ljava/lang/Object;)V
                    ASTORE 10
                    ALOAD 10
                    BIPUSH 1
                    ANEWARRAY java.lang.Object
                    ASTORE 12
                    ALOAD 12
                    BIPUSH 0
                    AASTORE
                    ALOAD 12
                    INVOKESTATIC org.aspectj.runtime.reflect.Factory.makeJP (Lorg/aspectj/lang/JoinPoint$StaticPart;Ljava/lang/Object;Ljava/lang/Object;[Ljava/lang/Object;)Lorg/aspectj/lang/JoinPoint;
                    ASTORE 14
    |               ASTORE 16
    |               ALOAD 16
    |               ALOAD 10
    |               ALOAD 16
    |               ALOAD 8
    |               ALOAD 16
    |               ALOAD 14
    |               ALOAD 16
    |               ALOAD 14
                    BIPUSH 0
                    ANEWARRAY java.lang.Object
                    ASTORE_2
                    ALOAD_2
                    INVOKESTATIC org.aspectj.runtime.reflect.Factory.makeJP (Lorg/aspectj/lang/JoinPoint$StaticPart;Ljava/lang/Object;Ljava/lang/Object;[Ljava/lang/Object;)Lorg/aspectj/lang/JoinPoint;
                    ASTORE 9
                    BIPUSH 1
                    ANEWARRAY java.lang.Object
                    ASTORE 8
                    ALOAD 8
                    BIPUSH 0
                    ALOAD 9
                    AASTORE
                    ALOAD 8
                    INVOKESTATIC org.aspectj.runtime.reflect.Factory.makeJP (Lorg/aspectj/lang/JoinPoint$StaticPart;Ljava/lang/Object;Ljava/lang/Object;[Ljava/lang/Object;)Lorg/aspectj/lang/JoinPoint;
                    ASTORE 7
    |               ALOAD 7
    |               BIPUSH 0
    |               ANEWARRAY java.lang.Object
    |               ASTORE_2
    |               ALOAD_2
    |               INVOKESTATIC org.aspectj.runtime.reflect.Factory.makeJP (Lorg/aspectj/lang/JoinPoint$StaticPart;Ljava/lang/Object;Ljava/lang/Object;[Ljava/lang/Object;)Lorg/aspectj/lang/JoinPoint;
    |               ASTORE 5
    |               ALOAD 5
    |               BIPUSH 1
    |               ANEWARRAY java.lang.Object
    |               ASTORE 6
    |               ALOAD 6
    |               BIPUSH 0
    |               AASTORE
    |               ALOAD 6
    |               INVOKESTATIC org.aspectj.runtime.reflect.Factory.makeJP (Lorg/aspectj/lang/JoinPoint$StaticPart;Ljava/lang/Object;Ljava/lang/Object;[Ljava/lang/Object;)Lorg/aspectj/lang/JoinPoint;
    |               ASTORE_3
    | |             ALOAD_3
    | |             ALOAD 5

======= f24286d^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"

======= f24286d^:"weaver/src/org/aspectj/weaver/Checker.java"

======= f24286d^:"weaver/src/org/aspectj/weaver/Checker.java"

======= f24286d^:"weaver/src/org/aspectj/weaver/Checker.java"

======= f24286d^:"weaver/src/org/aspectj/weaver/Shadow.java"

======= f24286d^:"weaver/src/org/aspectj/weaver/Shadow.java"

======= f24286d^:"weaver/src/org/aspectj/weaver/World.java"

======= f24286d^:"weaver/src/org/aspectj/weaver/World.java"

======= f24286d^:"weaver/src/org/aspectj/weaver/bcel/BcelWorld.java"

======= f24286d^:"weaver/src/org/aspectj/weaver/bcel/BcelWorld.java"

======= f24286d^:"weaver/src/org/aspectj/weaver/bcel/BcelWorld.java"


======= 6f099df^:"build/src/org/aspectj/internal/tools/ant/taskdefs/AntBuilder.java"

                copyFile(manifest, new File(metaInfDir, "manifest.mf"), FILTER_ON);  // XXXFileLiteral

    

======= b3b1eec^:"org.aspectj.ajdt.core/src/org/aspectj/tools/ajc/Main.java"

======= b3b1eec^:"org.aspectj.ajdt.core/src/org/aspectj/tools/ajc/Main.java"

        run(args, holder);

======= ad2fb7a^:"runtime/src/org/aspectj/lang/SoftException.java"

 *               2002 Palo Alto Research Center, Incorporated (PARC).
======= ad2fb7a^:"runtime/src/org/aspectj/lang/SoftException.java"

======= ad2fb7a^:"runtime/src/org/aspectj/lang/SoftException.java"

 * <code>getWrappedThrowable()</code>.
    Throwable inner;
======= ad2fb7a^:"runtime/src/org/aspectj/lang/SoftException.java"

======= ad2fb7a^:"runtime/testsrc/RuntimeModuleTests.java"

======= ad2fb7a^:"runtime/testsrc/RuntimeModuleTests.java"

    public void testNothing() {}
    	RuntimeException fun = new RuntimeException("fun");
    	NoAspectBoundException nab = new NoAspectBoundException("Foo", fun);
    	assertEquals(fun,nab.getCause());

======= 0071cb4^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java"

                if (!Modifier.isAbstract(sig.getModifiers())) {
======= 0071cb4^:"weaver/src/org/aspectj/weaver/ResolvedTypeX.java"

    private List getInterTypeMungersIncludingSupers() {
    /**
     * ??? This method is O(N*M) where N = number of methods and M is number of
     * inter-type declarations in my super
     */

======= 5834de9^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectClinit.java"

======= 5834de9^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectClinit.java"

======= 5834de9^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectClinit.java"

======= 5834de9^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectDeclaration.java"

======= 5834de9^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectDeclaration.java"

======= 5834de9^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectDeclaration.java"

======= 5834de9^:"runtime/src/org/aspectj/lang/NoAspectBoundException.java"

======= 5834de9^:"runtime/testsrc/RuntimeModuleTests.java"

======= 5834de9^:"runtime/testsrc/RuntimeModuleTests.java"

======= 5834de9^:"tests/new/ConstructorExecInitFails.java"

======= 5834de9^:"tests/new/ConstructorExecInitFails.java"

    	} catch (ExceptionInInitializerError e) {
======= 5834de9^:"weaver/src/org/aspectj/weaver/AjcMemberMaker.java"

======= 5834de9^:"weaver/src/org/aspectj/weaver/AjcMemberMaker.java"

======= 5834de9^:"weaver/src/org/aspectj/weaver/AjcMemberMaker.java"

======= 5834de9^:"weaver/src/org/aspectj/weaver/NameMangler.java"

======= 5834de9^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"

======= 5834de9^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"

======= 5834de9^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"

======= 5834de9^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"


======= 7bbd1f4^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/parser/AjParser.java"



======= a4a1234^:"org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/ajc/BuildArgParserTestCase.java"

======= a4a1234^:"org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/ajc/BuildArgParserTestCase.java"

======= a4a1234^:"util/src/org/aspectj/util/ConfigParser.java"

        }
        File[] files = dir.listFiles(filter);
        if (files.length == 0) {
        }
        for (int i = 0; i < files.length; i++) {

======= 7b081f2^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/parser/AjParser.java"

   

======= 97ab1e9^:"bridge/src/org/aspectj/bridge/IMessage.java"

======= 97ab1e9^:"bridge/src/org/aspectj/bridge/Message.java"

======= 97ab1e9^:"bridge/src/org/aspectj/bridge/Message.java"

======= 97ab1e9^:"bridge/src/org/aspectj/bridge/Message.java"

======= 97ab1e9^:"bridge/src/org/aspectj/bridge/Message.java"

        this.message = message;
        this.kind = kind;
        this.thrown = thrown;
        this.sourceLocation = sourceLocation;
        this.details = "";
        if (null == message) {
            if (null != thrown) {
                message = thrown.getMessage();
            } 
            if (null == message) {
                throw new IllegalArgumentException("null message");
            }
        }
        if (null == kind) {
             throw new IllegalArgumentException("null kind");
        }
======= 97ab1e9^:"bridge/src/org/aspectj/bridge/Message.java"

        return Message.renderToString(this);
    public static String renderToString(IMessage message) { 
        ISourceLocation loc = message.getSourceLocation();
        String locString = (null == loc ? "" : " at " + loc);
        Throwable thrown = message.getThrown();
        return message.getKind() + locString + ": " + message.getMessage()
            + (null == thrown ? "" : render(thrown));
    }
======= 97ab1e9^:"bridge/src/org/aspectj/bridge/Message.java"

======= 97ab1e9^:"bridge/src/org/aspectj/bridge/MessageUtil.java"

        StringBuffer result = new StringBuffer();
        
        result.append(message.getKind().toString());
        result.append(" ");
        String messageString = message.getMessage();
        if (!LangUtil.isEmpty(messageString)) {
            result.append(messageString);
            result.append(" ");
        ISourceLocation loc = message.getSourceLocation();
        if ((null != loc) && (loc != ISourceLocation.EMPTY)) {
            result.append("at " + renderSourceLocation(loc));
        Throwable thrown = message.getThrown(); 
        if (null != thrown) {
            result.append(" -- " + LangUtil.renderExceptionShort(thrown));
            result.append("\n" + LangUtil.renderException(thrown, elide));            
        return result.toString();
======= 97ab1e9^:"bridge/src/org/aspectj/bridge/SourceLocation.java"

        sb.append("" + startLine + "-" + endLine);
======= 97ab1e9^:"org.aspectj.ajdt.core/src/org/aspectj/tools/ajc/Main.java"

            return sb.toString();
======= 97ab1e9^:"testing/src/org/aspectj/testing/xml/SoftMessage.java"

======= 97ab1e9^:"testing/src/org/aspectj/testing/xml/SoftMessage.java"

        <compile files="Simple.java"/>
        <compile files="MethodSignatures.java" options="-1.4"/>
        <compile files="CallTypes.java" options="-1.4"/>
        <compile files="CallTypesI.java" options="-1.4"/>
        <compile files="PR519.java"/>
        <compile files="IntroductionsOverriding.java"/>
        <compile files="MultiAndAround.java"/>
        <compile files="NotAndDeclaringTypes.java"/>
        <compile files="Driver.java,p1/C1.java,p1/p2/C2.java"/>
    
======= 97ab1e9^:"tests/new/CallTypesI.java"

======= 97ab1e9^:"tests/new/CallTypesI.java"

======= 97ab1e9^:"tests/new/IndeterminateArg.java"

    pointcut safe()                                : (call(C+.new(..)) || call(* C+.*(..))); 
======= 97ab1e9^:"tests/new/IndeterminateArgType.java"

    pointcut safe()                                : call(Safe+.new(..)) || call(* Safe+.*(..)); 
======= 97ab1e9^:"weaver/src/org/aspectj/weaver/Checker.java"

======= 97ab1e9^:"weaver/src/org/aspectj/weaver/Lint.java"

======= 97ab1e9^:"weaver/src/org/aspectj/weaver/Lint.java"

======= 97ab1e9^:"weaver/src/org/aspectj/weaver/patterns/AndPointcut.java"

======= 97ab1e9^:"weaver/src/org/aspectj/weaver/patterns/ExactTypePattern.java"

    	return "ExactTypePattern(" + type.toString() + (includeSubtypes ? "+" : "") + ")";
======= 97ab1e9^:"weaver/src/org/aspectj/weaver/patterns/KindedPointcut.java"

======= 97ab1e9^:"weaver/src/org/aspectj/weaver/patterns/KindedPointcut.java"

======= 97ab1e9^:"weaver/src/org/aspectj/weaver/patterns/KindedPointcut.java"

======= 97ab1e9^:"weaver/src/org/aspectj/weaver/patterns/NotPointcut.java"

======= 97ab1e9^:"weaver/src/org/aspectj/weaver/patterns/OrPointcut.java"

======= 97ab1e9^:"weaver/src/org/aspectj/weaver/patterns/Pointcut.java"

======= 97ab1e9^:"weaver/src/org/aspectj/weaver/patterns/ReferencePointcut.java"

======= 97ab1e9^:"weaver/src/org/aspectj/weaver/patterns/ReferencePointcut.java"

======= 97ab1e9^:"weaver/src/org/aspectj/weaver/patterns/SignaturePattern.java"


======= 7322131^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeMethodDeclaration.java"


======= eac16ae^:"runtime/src/org/aspectj/lang/SoftException.java"

    //XXX should add a getCause() method to parallel j2se 1.4's new
    //XXX chained exception mechanism

======= c517e85^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectDeclaration.java"

======= c517e85^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java"

        
======= c517e85^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java"

        

======= bdc79f1^:"asm/src/org/aspectj/asm/IRelationship.java"


======= 3e4b59a^:"ajde/src/org/aspectj/ajde/internal/CompilerAdapter.java"

======= 3e4b59a^:"ajde/src/org/aspectj/ajde/internal/CompilerAdapter.java"

======= 3e4b59a^:"ajde/src/org/aspectj/ajde/internal/CompilerAdapter.java"

            signalWarning("build cancelled by user");
                signalWarning(message.getMessage());
======= 3e4b59a^:"ajde/src/org/aspectj/ajde/internal/CompilerAdapter.java"

     * @param configFile
======= 3e4b59a^:"ajde/src/org/aspectj/ajde/internal/CompilerAdapter.java"

            signalError("Config file \"" + configFile + "\" does not exist."); 
======= 3e4b59a^:"ajde/src/org/aspectj/ajde/internal/CompilerAdapter.java"

    /** signal error text to user */
    protected void signalError(String text) {
        Ajde.getDefault().getErrorHandler().handleError(text);
    }
    /** signal warning text to user */
    protected void signalWarning(String text) {
        Ajde.getDefault().getErrorHandler().handleWarning(text);
    }

======= 3117255^:"weaver/src/org/aspectj/weaver/AsmRelationshipProvider.java"


======= 426d89b^:"asm/src/org/aspectj/asm/internal/ProgramElement.java"

======= 426d89b^:"asm/src/org/aspectj/asm/internal/ProgramElement.java"


======= 5357086^:"weaver/src/org/aspectj/weaver/patterns/ReferencePointcut.java"

======= 5357086^:"weaver/src/org/aspectj/weaver/patterns/ReferencePointcut.java"


======= fc0d2af^:"weaver/src/org/aspectj/weaver/patterns/ReferencePointcut.java"


======= b512738^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java"

            }
        }
        for (int i = lastCompletedUnitIndex + 1; i <= lastUnitIndex; i++) {
            SourceTypeBinding[] b = units[i].scope.topLevelTypes;
            for (int j = 0; j < b.length; j++) {
                resolvePointcutDeclarations(b[j].scope);
            }
        }
        
        for (int i = lastCompletedUnitIndex + 1; i <= lastUnitIndex; i++) {
            SourceTypeBinding[] b = units[i].scope.topLevelTypes;
            for (int j = 0; j < b.length; j++) {
        }
======= b512738^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java"

            units[i] = null; // release unnecessary reference to the parsed unit
======= b512738^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java"

======= b512738^:"weaver/src/org/aspectj/weaver/CrosscuttingMembersSet.java"

======= b512738^:"weaver/src/org/aspectj/weaver/CrosscuttingMembersSet.java"

======= b512738^:"weaver/src/org/aspectj/weaver/CrosscuttingMembersSet.java"

======= b512738^:"weaver/src/org/aspectj/weaver/ResolvedTypeX.java"

======= b512738^:"weaver/src/org/aspectj/weaver/ResolvedTypeX.java"


======= d78d9ed^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectDeclaration.java"

======= d78d9ed^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/PointcutDeclaration.java"

======= d78d9ed^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/PointcutDeclaration.java"

======= d78d9ed^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/PointcutDeclaration.java"

======= d78d9ed^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java"

======= d78d9ed^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java"

======= d78d9ed^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java"

======= d78d9ed^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java"

======= d78d9ed^:"weaver/src/org/aspectj/weaver/ResolvedPointcutDefinition.java"


======= 8660cc1^:"weaver/src/org/aspectj/weaver/patterns/ThrowsPattern.java"


======= 5a07dce^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectDeclaration.java"

======= 5a07dce^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectDeclaration.java"



======= d90acdc^:"weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java"

                            lng.setStart(null);
                            lng.setEnd(null);
======= d90acdc^:"weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java"

                            if (i instanceof LocalVariableInstruction) {
                                int index = ((LocalVariableInstruction)i).getIndex();
                                if (lvt.getSlot() == index) {
                                    if (localVariableStarts.get(lvt) == null) {
                                        localVariableStarts.put(lvt, jh);
                                    }
                                    localVariableEnds.put(lvt, jh);
                                }
                            }
======= d90acdc^:"weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java"

======= d90acdc^:"weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java"

        
                         LocalVariableTag taga = (LocalVariableTag)a; 
                         LocalVariableTag tagb = (LocalVariableTag)b; 
                         return taga.getName().compareTo(tagb.getName()); 
                 }}); 
         for (Iterator iter = keys.iterator(); iter.hasNext(); ) { 

======= f1deb9c^:"ajbrowser/src/org/aspectj/tools/ajbrowser/BrowserManager.java"

======= f1deb9c^:"ajbrowser/src/org/aspectj/tools/ajbrowser/TopFrame.java"

======= f1deb9c^:"ajbrowser/src/org/aspectj/tools/ajbrowser/TopFrame.java"

            this.setIconImage(((ImageIcon)AjdeUIManager.getDefault().getIconRegistry().getStructureSwingIcon(ProgramElementNode.Kind.ADVICE)).getImage());
======= f1deb9c^:"ajbrowser/src/org/aspectj/tools/ajbrowser/TopFrame.java"

        editConfig_button.setIcon(AjdeUIManager.getDefault().getIconRegistry().getStructureSwingIcon(ProgramElementNode.Kind.FILE_LST));
======= f1deb9c^:"ajde/src/org/aspectj/ajde/internal/LstBuildConfigManager.java"

======= f1deb9c^:"ajde/src/org/aspectj/ajde/internal/LstBuildConfigManager.java"

======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/AbstractIconRegistry.java"

======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/AbstractIconRegistry.java"

======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/AbstractIconRegistry.java"

======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/AbstractIconRegistry.java"

======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/BuildConfigModel.java"

======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/BuildConfigModel.java"

======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/BuildConfigNode.java"

======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/StructureModelUtil.java"

======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/StructureModelUtil.java"

======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/StructureModelUtil.java"

======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/StructureModelUtil.java"

======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/StructureModelUtil.java"

======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/StructureModelUtil.java"

======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/StructureModelUtil.java"

======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/StructureModelUtil.java"

======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/StructureModelUtil.java"

======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/StructureModelUtil.java"

======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/StructureSearchManager.java"

======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/StructureSearchManager.java"

======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/StructureView.java"

======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/StructureView.java"

======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/StructureView.java"

======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/StructureViewManager.java"

======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/StructureViewManager.java"

    public final StructureModelListener VIEW_LISTENER = new StructureModelListener() {
======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/StructureViewManager.java"

======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/StructureViewManager.java"

======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/StructureViewManager.java"

======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/StructureViewManager.java"

======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/StructureViewManager.java"

======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/StructureViewManager.java"

======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/StructureViewManager.java"

        AVAILABLE_RELATIONS.add(AdviceAssociation.METHOD_CALL_SITE_RELATION);
        AVAILABLE_RELATIONS.add(AdviceAssociation.METHOD_RELATION);
        AVAILABLE_RELATIONS.add(AdviceAssociation.CONSTRUCTOR_CALL_SITE_RELATION);
        AVAILABLE_RELATIONS.add(AdviceAssociation.CONSTRUCTOR_RELATION);
        AVAILABLE_RELATIONS.add(AdviceAssociation.FIELD_ACCESS_RELATION);
        AVAILABLE_RELATIONS.add(AdviceAssociation.INITIALIZER_RELATION);
        AVAILABLE_RELATIONS.add(AdviceAssociation.HANDLER_RELATION);
        AVAILABLE_RELATIONS.add(AdviceAssociation.INTRODUCTION_RELATION);
        AVAILABLE_RELATIONS.add(IntroductionAssociation.INTRODUCES_RELATION);
        AVAILABLE_RELATIONS.add(InheritanceAssociation.IMPLEMENTS_RELATION);
        AVAILABLE_RELATIONS.add(InheritanceAssociation.INHERITS_RELATION);
        AVAILABLE_RELATIONS.add(InheritanceAssociation.INHERITS_MEMBERS_RELATION);
        AVAILABLE_RELATIONS.add(ReferenceAssociation.USES_POINTCUT_RELATION);
        AVAILABLE_RELATIONS.add(ReferenceAssociation.IMPORTS_RELATION);
======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/StructureViewNode.java"

======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/StructureViewNodeFactory.java"

======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/StructureViewNodeFactory.java"

======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/StructureViewProperties.java"

======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/StructureViewProperties.java"

    public void addRelation(Relation relation) {
        relations.add(relation);
    public void removeRelation(Relation relation) {
        relations.remove(relation);
======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/StructureViewProperties.java"

    public void addFilteredMemberAccessibility(ProgramElementNode.Accessibility accessibility) {
======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/StructureViewProperties.java"

    public void addFilteredMemberModifiers(ProgramElementNode.Modifiers modifiers) {
======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/StructureViewProperties.java"

    public void addFilteredMemberKind(ProgramElementNode.Kind kind) {
======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/internal/NavigationHistoryModel.java"

    private ProgramElementNode currNode = null;
    public void navigateToNode(ProgramElementNode toNode) {
======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/internal/TreeStructureViewBuilder.java"

======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/internal/TreeStructureViewBuilder.java"

======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/internal/TreeStructureViewBuilder.java"

======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/internal/TreeStructureViewBuilder.java"

======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/internal/TreeStructureViewBuilder.java"

======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/internal/TreeStructureViewBuilder.java"

======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/internal/TreeStructureViewBuilder.java"

        StructureNode rootNode = model.getRoot();
======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/internal/TreeStructureViewBuilder.java"

                treeNode.add(getCrosscuttingChildren((StructureNode)it.next()));
                	(StructureNode)it.next(),
======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/internal/TreeStructureViewBuilder.java"

    private void getRoots(StructureNode rootNode, List roots, StructureViewProperties.Hierarchy hierarchy) {
        if (rootNode != null && rootNode.getChildren() != null) {
            for (Iterator it = rootNode.getChildren().iterator(); it.hasNext(); ) {
                StructureNode node = (StructureNode)it.next();
                if (node instanceof ProgramElementNode) {
                    if (acceptNodeAsRoot((ProgramElementNode)node, hierarchy)) {
                        ProgramElementNode pNode = (ProgramElementNode)node;
                        List relations = pNode.getRelations();
                        String delimiter = "";
                        if (hierarchy.equals(StructureViewProperties.Hierarchy.CROSSCUTTING)) {
                            delimiter = "uses pointcut";
                        } else if (hierarchy.equals(StructureViewProperties.Hierarchy.INHERITANCE)) {
                            delimiter = "inherits";
                        } 
                        if (relations != null && relations.toString().indexOf(delimiter) == -1) {
                            boolean found = false;
                            for (Iterator it2 = roots.iterator(); it2.hasNext(); ) {
                                if (((ProgramElementNode)it2.next()).equals(pNode)) found = true;
                            }
                            if (!found) roots.add(pNode);
                        } 
                    } 
                }
                getRoots(node, roots, hierarchy);
            }
        }
    public boolean acceptNodeAsRoot(ProgramElementNode node, StructureViewProperties.Hierarchy hierarchy) {
            return node.getProgramElementKind().equals(ProgramElementNode.Kind.ADVICE)
                || node.getProgramElementKind().equals(ProgramElementNode.Kind.POINTCUT);
            return node.getProgramElementKind().equals(ProgramElementNode.Kind.CLASS);
    private StructureViewNode getInheritanceChildren(StructureNode node, List associations) {
        List relations = ((ProgramElementNode)node).getRelations();
        if (relations != null) {
            for (Iterator it = relations.iterator(); it.hasNext(); ) {
                RelationNode relation = (RelationNode)it.next();
                if (relation.getName().equals("is inherited by")) {
                    for (Iterator it2 = relation.getChildren().iterator(); it2.hasNext(); ) {
                        ProgramElementNode pNode = ((LinkNode)it2.next()).getProgramElementNode();
                        StructureViewNode newNode = getInheritanceChildren(pNode, associations);
                        StructureViewNode typeChildren = buildTree(newNode.getStructureNode(), associations);
                        for (int i = 0; i < typeChildren.getChildren().size(); i++) {
                            newNode.add((StructureViewNode)typeChildren.getChildren().get(i));
                        }
                    }
                }
            }
        }
        return treeNode;
    private StructureViewNode getCrosscuttingChildren(StructureNode node) {
        List relations = ((ProgramElementNode)node).getRelations();
        if (relations != null) {
            for (Iterator it = relations.iterator(); it.hasNext(); ) {
                RelationNode relation = (RelationNode)it.next();
                if (relation.getName().equals("pointcut used by")) {
                    for (Iterator it2 = relation.getChildren().iterator(); it2.hasNext(); ) {
                        ProgramElementNode pNode = ((LinkNode)it2.next()).getProgramElementNode();
                        StructureViewNode newNode = getCrosscuttingChildren(pNode);
                        for (Iterator it3 = pNode.getRelations().iterator(); it3.hasNext(); ) {
                            RelationNode relationNode = (RelationNode)it3.next();
                            if (relationNode.getName().indexOf("pointcut") == -1) {
                                newNode.add(getRelations(relationNode));
                            }
                        }
                        treeNode.add(newNode);
                    }
                } else if (relations.toString().indexOf("uses pointcut") == -1) {
                    for (Iterator it4 = relations.iterator(); it4.hasNext(); ) {
                        RelationNode relationNode = (RelationNode)it4.next();
                        if (relationNode.getName().indexOf("pointcut") == -1) {
                            treeNode.add(getRelations(relationNode));
                        }
                    }
                }
            }
        }
        return treeNode;
    private StructureViewNode buildTree(StructureNode node, List associations) {
        if (node instanceof ProgramElementNode) {
            List relations = ((ProgramElementNode)node).getRelations();
            if (relations != null) {
                for (Iterator it = relations.iterator(); it.hasNext(); ) {
                    RelationNode relationNode = (RelationNode)it.next();
                    if (associations.contains(relationNode.getRelation().toString())) {
                        treeNode.add(buildTree(relationNode, associations));
                    }
                }
            }
        }
                    StructureNode child = (StructureNode)itt.next();
                    if (child instanceof ProgramElementNode) {
                        ProgramElementNode progNode = (ProgramElementNode)child;
======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/internal/TreeStructureViewBuilder.java"

    private StructureViewNode getRelations(RelationNode node) {
        for (Iterator it = node.getChildren().iterator(); it.hasNext(); ) {
            	nodeFactory.createNode((StructureNode)it.next())
======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/internal/TreeStructureViewBuilder.java"

        	StructureNode sv1 = ((StructureViewNode)o1).getStructureNode();
        	StructureNode sv2 = ((StructureViewNode)o2).getStructureNode();        
            if (sv1 instanceof ProgramElementNode && sv2 instanceof ProgramElementNode) {
            	ProgramElementNode p1 = (ProgramElementNode)sv1;
            	ProgramElementNode p2 = (ProgramElementNode)sv2;
======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/internal/TreeStructureViewBuilder.java"

        	StructureNode sv1 = ((StructureViewNode)o1).getStructureNode();
        	StructureNode sv2 = ((StructureViewNode)o2).getStructureNode();        
            if (sv1 instanceof ProgramElementNode && sv2 instanceof ProgramElementNode) {
            	ProgramElementNode p1 = (ProgramElementNode)sv1;
            	ProgramElementNode p2 = (ProgramElementNode)sv2;
======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/swing/AjdeUIManager.java"

======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/swing/AjdeUIManager.java"

======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/swing/AjdeUIManager.java"

======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/swing/BrowserStructureViewToolPanel.java"

======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/swing/BrowserStructureViewToolPanel.java"

======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/swing/BrowserStructureViewToolPanel.java"

======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/swing/BrowserStructureViewToolPanel.java"

======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/swing/BrowserStructureViewToolPanel.java"

======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/swing/BrowserStructureViewToolPanel.java"

======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/swing/BrowserStructureViewToolPanel.java"

======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/swing/BrowserStructureViewToolPanel.java"

======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/swing/BrowserStructureViewToolPanel.java"

======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/swing/BrowserView.java"

======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/swing/BrowserView.java"

        joinpointProbe_button.setIcon(icons.getStructureSwingIcon(ProgramElementNode.Kind.POINTCUT));
======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/swing/BrowserViewManager.java"

    private ProgramElementNode currNode = null;
======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/swing/BrowserViewManager.java"

        CROSSCUTTING_VIEW_PROPERTIES.addRelation(AdviceAssociation.METHOD_RELATION);
        CROSSCUTTING_VIEW_PROPERTIES.addRelation(AdviceAssociation.METHOD_CALL_SITE_RELATION);
        CROSSCUTTING_VIEW_PROPERTIES.addRelation(AdviceAssociation.CONSTRUCTOR_RELATION);
        CROSSCUTTING_VIEW_PROPERTIES.addRelation(AdviceAssociation.CONSTRUCTOR_CALL_SITE_RELATION);
        CROSSCUTTING_VIEW_PROPERTIES.addRelation(AdviceAssociation.HANDLER_RELATION);
        CROSSCUTTING_VIEW_PROPERTIES.addRelation(AdviceAssociation.INITIALIZER_RELATION);
        CROSSCUTTING_VIEW_PROPERTIES.addRelation(AdviceAssociation.FIELD_ACCESS_RELATION);
        INHERITANCE_VIEW_PROPERTIES.addRelation(InheritanceAssociation.IMPLEMENTS_RELATION);
        INHERITANCE_VIEW_PROPERTIES.addRelation(InheritanceAssociation.INHERITS_MEMBERS_RELATION);
        INHERITANCE_VIEW_PROPERTIES.addRelation(InheritanceAssociation.INHERITS_RELATION);
======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/swing/BrowserViewTreeListener.java"

======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/swing/BrowserViewTreeListener.java"

            StructureNode currNode = (StructureNode)treeNode.getUserObject();
            if (currNode instanceof ProgramElementNode && !e.isControlDown()
            } else if (currNode instanceof LinkNode) {
           }
======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/swing/BrowserViewTreeListener.java"

                StructureNode currNode = (StructureNode)treeNode.getUserObject();
                if (currNode instanceof ProgramElementNode && !e.isControlDown() && !e.isShiftDown()
                } else if (currNode instanceof LinkNode) {
                    if (clickCount == 1) {
                        //AjdeUIManager.getDefault().getViewManager().showLink((LinkNode)currNode);
                    } else if (clickCount == 2) {
                        //navigationAction((ProgramElementNode)((LinkNode)currNode).getProgramElementNode(), true, true);
                    }
                }
======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/swing/BrowserViewTreeListener.java"

                StructureNode currNode = (StructureNode)((SwingTreeViewNode)selectionPaths[i].getLastPathComponent()).getUserObject();
                if (currNode instanceof LinkNode || currNode instanceof ProgramElementNode) {
                    signatures.add(currNode);
                }
            JMenuItem showSourcesItem = new JMenuItem("Display sources", AjdeUIManager.getDefault().getIconRegistry().getStructureSwingIcon(ProgramElementNode.Kind.CODE));
======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/swing/BrowserViewTreeListener.java"

======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/swing/BrowserViewTreeListener.java"

            JMenuItem generatePCD = new JMenuItem("Pointcut Wizard (alpha)...", AjdeUIManager.getDefault().getIconRegistry().getStructureSwingIcon(ProgramElementNode.Kind.POINTCUT));
======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/swing/BuildConfigPopupMenu.java"

======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/swing/BuildConfigPopupMenu.java"

======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/swing/IconRegistry.java"

======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/swing/IconRegistry.java"

    public Icon getAssociationSwingIcon(Relation relation) {
    public Icon getStructureSwingIcon(ProgramElementNode.Kind kind, ProgramElementNode.Accessibility accessibility) { 
======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/swing/PointcutWizard.java"

======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/swing/PointcutWizard.java"

        INHERITANCE_VIEW.addRelation(InheritanceAssociation.INHERITS_RELATION);
======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/swing/SimpleStructureViewToolPanel.java"

======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/swing/SimpleStructureViewToolPanel.java"

    public final StructureModelListener MODEL_LISTENER = new StructureModelListener() {
======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/swing/SimpleStructureViewToolPanel.java"

======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/swing/StructureTreeManager.java"

======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/swing/StructureTreeManager.java"

    public StructureNode getSelectedStructureNode() {
        return (StructureNode)((SwingTreeViewNode)structureTree.getLastSelectedPathComponent()).getUserObject();
    private void highlightNode(SwingTreeViewNode parent, ProgramElementNode node) {
            StructureNode sNode = (StructureNode)currNode.getUserObject();
            if (sNode instanceof ProgramElementNode &&
                ((ProgramElementNode)sNode).equals(node)) {
======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/swing/StructureTreeManager.java"

            if (node.getUserObject() instanceof ProgramElementNode) {
======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/swing/StructureTreeManager.java"

            if (path.getPath().length-1 > depth || node.getUserObject() instanceof RelationNode) {
======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/swing/StructureTreeManager.java"

======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/swing/StructureTreeManager.java"

======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/swing/StructureTreeManager.java"

======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/swing/StructureTreeManager.java"

======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/swing/StructureViewPanel.java"

======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/swing/StructureViewPanel.java"

 		if (!(node.getStructureNode() instanceof ProgramElementNode)) return;
======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/swing/StructureViewPanel.java"

 		StructureNode node = currentView.getActiveNode().getStructureNode();
 		if (node instanceof ProgramElementNode) {
 			treeManager.highlightNode((ProgramElementNode)node);
======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/swing/SwingTreeViewNode.java"

======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/swing/SwingTreeViewNode.java"

======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/swing/SwingTreeViewNodeFactory.java"

======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/swing/SwingTreeViewNodeFactory.java"

======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/swing/SwingTreeViewNodeRenderer.java"

======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/swing/SwingTreeViewNodeRenderer.java"

        StructureNode node = viewNode.getStructureNode();
        if (node instanceof LinkNode) {
            ISourceLocation sourceLoc = ((LinkNode)node).getProgramElementNode().getSourceLocation();
            if ((null != sourceLoc) 
                && (null != sourceLoc.getSourceFile().getAbsolutePath())) {
                setTextNonSelectionColor(AjdeWidgetStyles.LINK_NODE_COLOR);
            } else {
                setTextNonSelectionColor(AjdeWidgetStyles.LINK_NODE_NO_SOURCE_COLOR);
            }
        } else {
        }
======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/swing/SwingTreeViewNodeRenderer.java"

        if (node instanceof ProgramElementNode) {
        	ProgramElementNode pNode = (ProgramElementNode)node;
        	if (pNode.isRunnable()) {
        		//setIcon(AjdeUIManager.getDefault().getIconRegistry().getExecuteIcon());
        	}	 
        	if (pNode.isImplementor()) {
        		//this.setText("<implementor>");
        	}
        	if (pNode.isOverrider()) {
        		//this.setText("<overrider>");
        	}
        } else if (node instanceof RelationNode) {
        	this.setFont(new Font(this.getFont().getName(), Font.ITALIC, this.getFont().getSize()));
        }
        if (node.getMessage() != null) {
        	if (node.getMessage().getKind().equals(IMessage.WARNING)) {
        		setIcon(AjdeUIManager.getDefault().getIconRegistry().getWarningIcon());
        	} else if (node.getMessage().getKind().equals(IMessage.ERROR)) {
        		setIcon(AjdeUIManager.getDefault().getIconRegistry().getErrorIcon());
        	} else {
        		setIcon(AjdeUIManager.getDefault().getIconRegistry().getInfoIcon());
        	}
======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/swing/TreeViewBuildConfigEditor.java"

======= f1deb9c^:"ajde/src/org/aspectj/ajde/ui/swing/TreeViewBuildConfigEditor.java"

            	setIcon(AjdeUIManager.getDefault().getIconRegistry().getStructureSwingIcon(ProgramElementNode.Kind.FILE_ASPECTJ));	
            	setIcon(AjdeUIManager.getDefault().getIconRegistry().getStructureSwingIcon(ProgramElementNode.Kind.FILE_JAVA));	
            	setIcon(AjdeUIManager.getDefault().getIconRegistry().getStructureSwingIcon(ProgramElementNode.Kind.FILE_LST));	
            	setIcon(AjdeUIManager.getDefault().getIconRegistry().getStructureSwingIcon(ProgramElementNode.Kind.PACKAGE));	
            	setIcon((Icon)AjdeUIManager.getDefault().getIconRegistry().getStructureIcon(ProgramElementNode.Kind.ERROR).getIconResource());	
======= f1deb9c^:"ajde/testdata/examples/coverage/ModelCoverage.java"

======= f1deb9c^:"ajde/testsrc/org/aspectj/ajde/AjdeTests.java"

======= f1deb9c^:"ajde/testsrc/org/aspectj/ajde/AsmDeclarationsTest.java"

======= f1deb9c^:"ajde/testsrc/org/aspectj/ajde/AsmDeclarationsTest.java"

======= f1deb9c^:"ajde/testsrc/org/aspectj/ajde/AsmDeclarationsTest.java"

======= f1deb9c^:"ajde/testsrc/org/aspectj/ajde/AsmDeclarationsTest.java"

======= f1deb9c^:"ajde/testsrc/org/aspectj/ajde/AsmDeclarationsTest.java"

======= f1deb9c^:"ajde/testsrc/org/aspectj/ajde/AsmDeclarationsTest.java"

======= f1deb9c^:"ajde/testsrc/org/aspectj/ajde/AsmDeclarationsTest.java"

======= f1deb9c^:"ajde/testsrc/org/aspectj/ajde/NullIdeManager.java"

======= f1deb9c^:"ajde/testsrc/org/aspectj/ajde/NullIdeManager.java"

======= f1deb9c^:"ajde/testsrc/org/aspectj/ajde/NullIdeTaskListManager.java"

    	System.out.println("> added sourceline task: " + message + ", file: " + message.getSourceLocation().getSourceFile().getAbsolutePath()
======= f1deb9c^:"ajde/testsrc/org/aspectj/ajde/NullIdeTaskListManager.java"

    	System.out.println("> added project task: " + message + ", kind: " + kind);	
======= f1deb9c^:"ajde/testsrc/org/aspectj/ajde/NullIdeUIAdapter.java"

======= f1deb9c^:"ajde/testsrc/org/aspectj/ajde/StructureModelRegressionTest.java"

======= f1deb9c^:"ajde/testsrc/org/aspectj/ajde/StructureModelRegressionTest.java"

======= f1deb9c^:"ajde/testsrc/org/aspectj/ajde/StructureModelRegressionTest.java"

======= f1deb9c^:"ajde/testsrc/org/aspectj/ajde/StructureModelRegressionTest.java"

======= f1deb9c^:"ajde/testsrc/org/aspectj/ajde/StructureModelTest.java"

======= f1deb9c^:"ajde/testsrc/org/aspectj/ajde/StructureModelTest.java"

======= f1deb9c^:"ajde/testsrc/org/aspectj/ajde/StructureModelTest.java"

======= f1deb9c^:"ajde/testsrc/org/aspectj/ajde/StructureModelTest.java"

======= f1deb9c^:"ajde/testsrc/org/aspectj/ajde/StructureModelTest.java"

======= f1deb9c^:"ajde/testsrc/org/aspectj/ajde/StructureModelTest.java"

======= f1deb9c^:"ajde/testsrc/org/aspectj/ajde/StructureModelTest.java"

======= f1deb9c^:"ajde/testsrc/org/aspectj/ajde/StructureModelTest.java"

======= f1deb9c^:"ajde/testsrc/org/aspectj/ajde/StructureModelTest.java"

  		ModelWalker walker = new ModelWalker() {
  		    public void preProcess(StructureNode node) {
======= f1deb9c^:"ajde/testsrc/org/aspectj/ajde/ui/StructureModelUtilTest.java"

======= f1deb9c^:"ajde/testsrc/org/aspectj/ajde/ui/StructureModelUtilTest.java"

======= f1deb9c^:"ajde/testsrc/org/aspectj/ajde/ui/StructureModelUtilTest.java"

======= f1deb9c^:"ajde/testsrc/org/aspectj/ajde/ui/StructureSearchManagerTest.java"

======= f1deb9c^:"ajde/testsrc/org/aspectj/ajde/ui/StructureSearchManagerTest.java"

======= f1deb9c^:"ajde/testsrc/org/aspectj/ajde/ui/StructureViewManagerTest.java"

======= f1deb9c^:"ajde/testsrc/org/aspectj/ajde/ui/StructureViewManagerTest.java"

======= f1deb9c^:"ajde/testsrc/org/aspectj/ajde/ui/StructureViewManagerTest.java"

======= f1deb9c^:"ajde/testsrc/org/aspectj/ajde/ui/StructureViewManagerTest.java"

======= f1deb9c^:"asm/src/org/aspectj/asm/AdviceAssociation.java"

 * Copyright (c) 1999-2001 Xerox Corporation, 
 *               2002 Palo Alto Research Center, Incorporated (PARC).
 * All rights reserved. 
 * This program and the accompanying materials are made available 
 * under the terms of the Common Public License v1.0 
 * which accompanies this distribution and is available at 
 * http://www.eclipse.org/legal/cpl-v10.html 
 *  
 * Contributors: 
 *     Xerox/PARC     initial implementation 
 * ******************************************************************/
 * @author Mik Kersten
 */
    public static final String NAME = "Advice";
    public static final Relation METHOD_RELATION = new Relation("advises methods", "method advised by", NAME, true, false);
    public static final Relation METHOD_CALL_SITE_RELATION = new Relation("advises method call sites", "method call site advised by", NAME, true, false);
    public static final Relation CONSTRUCTOR_RELATION = new Relation("advises constructors", "constructors advised by", NAME, true, false);
    public static final Relation CONSTRUCTOR_CALL_SITE_RELATION = new Relation("advises constructions", "construction advised by", NAME, true, false);
    public static final Relation HANDLER_RELATION = new Relation("advises exception handlers", "exception handler advised by", NAME, true, false);
    public static final Relation INITIALIZER_RELATION = new Relation("advises initializers", "initializers advised by", NAME, true, false);
    public static final Relation FIELD_ACCESS_RELATION = new Relation("advises field access", "field access advised by", NAME, true, false);
    public static final Relation INTRODUCTION_RELATION = new Relation("advises introduction", "introduction advised by", NAME, true, false);
    private List relations = new ArrayList();
    public AdviceAssociation() {
        relations.add(METHOD_RELATION);
        relations.add(METHOD_CALL_SITE_RELATION);
        relations.add(CONSTRUCTOR_RELATION);
        relations.add(CONSTRUCTOR_CALL_SITE_RELATION);
        relations.add(HANDLER_RELATION);
        relations.add(INITIALIZER_RELATION);
        relations.add(FIELD_ACCESS_RELATION);
        relations.add(INTRODUCTION_RELATION);
    }
    public List getRelations() {
        return relations;
    }
    public List getRelationNodes() {
        List relations = new ArrayList();
        List methods = new ArrayList();
        List methodCallSites = new ArrayList();
        List constructors = new ArrayList();
        List constructorCallSites = new ArrayList();
        List handlers = new ArrayList();
        List initializers = new ArrayList();
        List fieldAccesses = new ArrayList();
        List introductions = new ArrayList();
        return relations;
    }
    public String getName() {
        return NAME;
    }
======= f1deb9c^:"asm/src/org/aspectj/asm/Association.java"

 * Copyright (c) 1999-2001 Xerox Corporation, 
 *               2002 Palo Alto Research Center, Incorporated (PARC).
 * All rights reserved. 
 * This program and the accompanying materials are made available 
 * under the terms of the Common Public License v1.0 
 * which accompanies this distribution and is available at 
 * http://www.eclipse.org/legal/cpl-v10.html 
 *  
 * Contributors: 
 *     Xerox/PARC     initial implementation 
 * ******************************************************************/
 * @author Mik Kersten
 */
    public List getRelations();
    public List getRelationNodes();
    public String getName();
======= f1deb9c^:"asm/src/org/aspectj/asm/Association.java"

======= f1deb9c^:"asm/src/org/aspectj/asm/Association.java"

======= f1deb9c^:"asm/src/org/aspectj/asm/Association.java"

======= f1deb9c^:"asm/src/org/aspectj/asm/Association.java"

======= f1deb9c^:"asm/src/org/aspectj/asm/InheritanceAssociation.java"

 * Copyright (c) 1999-2001 Xerox Corporation, 
 *               2002 Palo Alto Research Center, Incorporated (PARC).
 * All rights reserved. 
 * This program and the accompanying materials are made available 
 * under the terms of the Common Public License v1.0 
 * which accompanies this distribution and is available at 
 * http://www.eclipse.org/legal/cpl-v10.html 
 *  
 * Contributors: 
 *     Xerox/PARC     initial implementation 
 * ******************************************************************/
 * @author Mik Kersten
 */
    public static final String NAME = "Inheritance";
    public static final Relation INHERITS_RELATION = new Relation("inherits", "is inherited by", NAME, true, true);
    public static final Relation IMPLEMENTS_RELATION = new Relation("implements", "is implemented by", NAME, true, true);
    public static final Relation INHERITS_MEMBERS_RELATION = new Relation("inherits members", NAME, false);
    private List relations = new ArrayList();
    public InheritanceAssociation() {
        relations.add(INHERITS_RELATION);
        relations.add(IMPLEMENTS_RELATION);
        relations.add(INHERITS_MEMBERS_RELATION);
    }
    public List getRelations() {
        return relations;
    }
    public List getRelationNodes() {
        List relations = new ArrayList();
        return relations;
    }
    public String getName() {
        return NAME;
    }
======= f1deb9c^:"asm/src/org/aspectj/asm/IntroductionAssociation.java"

 * Copyright (c) 1999-2001 Xerox Corporation, 
 *               2002 Palo Alto Research Center, Incorporated (PARC).
 * All rights reserved. 
 * This program and the accompanying materials are made available 
 * under the terms of the Common Public License v1.0 
 * which accompanies this distribution and is available at 
 * http://www.eclipse.org/legal/cpl-v10.html 
 *  
 * Contributors: 
 *     Xerox/PARC     initial implementation 
 * ******************************************************************/
 * @author Mik Kersten
 */
    public static final String NAME = "Introduction";
    public static final Relation INTRODUCES_RELATION = new Relation("declares member on", "inter-type declared members", NAME, true, false);
    private List relations = new ArrayList();
    public IntroductionAssociation() {
        relations.add(INTRODUCES_RELATION);
    }
    public List getRelations() {
        return relations;
    }
    public List getRelationNodes() {
        List relations = new ArrayList();
        List introduces = new ArrayList();
        return relations;
    }
    public String getName() {
        return NAME;
    }
======= f1deb9c^:"asm/src/org/aspectj/asm/LinkNode.java"

 * Copyright (c) 1999-2001 Xerox Corporation, 
 *               2002 Palo Alto Research Center, Incorporated (PARC).
 * All rights reserved. 
 * This program and the accompanying materials are made available 
 * under the terms of the Common Public License v1.0 
 * which accompanies this distribution and is available at 
 * http://www.eclipse.org/legal/cpl-v10.html 
 *  
 * Contributors: 
 *     Xerox/PARC     initial implementation 
 * ******************************************************************/
 * @author Mik Kersten
 */
    
    private ProgramElementNode programElementNode = null;
    /**
     * Used during de-serialization.
     */
    public LinkNode() { }
    public LinkNode(ProgramElementNode node) {
        super(node.getSignature().toString(), "internal", null);
        this.programElementNode = node;
    }
    public ProgramElementNode getProgramElementNode() {
        return programElementNode;
    }
    public String toString() {
        String name = "";
        if (programElementNode.getProgramElementKind().equals(ProgramElementNode.Kind.ADVICE) ||
            programElementNode.getProgramElementKind().equals(ProgramElementNode.Kind.INTER_TYPE_FIELD) ||
            programElementNode.getProgramElementKind().equals(ProgramElementNode.Kind.CODE)) {
            name = programElementNode.parent.toString() + ": " + programElementNode.getName();
            if ( grandparent instanceof ProgramElementNode ) {
            	ProgramElementNode pe_grandparent = (ProgramElementNode)grandparent;
            	if ( pe_grandparent.getProgramElementKind().equals(ProgramElementNode.Kind.CLASS) ||
            	    ) {
            		name = pe_grandparent.toString() + "." + name;	
            	}
            }
            
        } else if (programElementNode.isMemberKind()) {
            name = programElementNode.parent.toString() + '.' + programElementNode.getName(); 
        } else {
            name = programElementNode.toString();
        }
        return name;
    }
======= f1deb9c^:"asm/src/org/aspectj/asm/ModelWalker.java"

 * Copyright (c) 1999-2001 Xerox Corporation, 
 *               2002 Palo Alto Research Center, Incorporated (PARC).
 * All rights reserved. 
 * This program and the accompanying materials are made available 
 * under the terms of the Common Public License v1.0 
 * which accompanies this distribution and is available at 
 * http://www.eclipse.org/legal/cpl-v10.html 
 *  
 * Contributors: 
 *     Xerox/PARC     initial implementation 
 * ******************************************************************/
 * @author Mik Kersten
 */
    }
    protected void preProcess(StructureNode node) { }
    
    protected void postProcess(StructureNode node) { }
    public StructureNode process(StructureNode node) {
        node.walk(this);
        postProcess(node);
        return node;
    }
======= f1deb9c^:"asm/src/org/aspectj/asm/ProgramElementNode.java"

 * Copyright (c) 1999-2001 Xerox Corporation, 
 *               2002 Palo Alto Research Center, Incorporated (PARC).
 * All rights reserved. 
 * This program and the accompanying materials are made available 
 * under the terms of the Common Public License v1.0 
 * which accompanies this distribution and is available at 
 * http://www.eclipse.org/legal/cpl-v10.html 
 *  
 * Contributors: 
 *     Xerox/PARC     initial implementation 
 * ******************************************************************/
 * @author Mik Kersten
 */
    private List relations = new ArrayList();
    private String declaringType = "";
    private String formalComment = "";
    private String packageName = null;
    private boolean runnable = false;
    private boolean implementor = false; 
    private boolean overrider = false;
    
    private String bytecodeName;
    private String bytecodeSignature;
    private String fullSignature;
    
    /**
     * Used during de-externalization.
     */
    public ProgramElementNode() { }
        super(signature, kind.toString(), children);
        super.sourceLocation = sourceLocation;
        this.kind = kind;
        this.formalComment = formalComment;
        this.modifiers = genModifiers(modifiers);
        this.accessibility = genAccessibility(modifiers);
    }
    public ProgramElementNode(
    	String signature, 
    	Kind kind, 
    	List modifiers, 
    	Accessibility accessibility,
        String declaringType, 
        String packageName, 
        String formalComment, 
        ISourceLocation sourceLocation,
        List relations, 
        List children, 
        boolean member) {
        super(signature, kind.toString(), children);
        super.sourceLocation = sourceLocation;
        this.kind = kind;
        this.modifiers = modifiers;
        this.accessibility = accessibility;
        this.declaringType = declaringType;
        this.packageName = packageName;
        this.formalComment = formalComment;
        this.relations = relations;
    }
    public List getModifiers() {
        return modifiers;
    }
    public Accessibility getAccessibility() {
        return accessibility;
    }
    public String getDeclaringType() {
        return declaringType;
    }
    public String getPackageName() {
    	if (kind == Kind.PACKAGE) return getSignature();
    	if (getParent() == null || !(getParent() instanceof ProgramElementNode)) {
    		return "";
    	}
    	return ((ProgramElementNode)getParent()).getPackageName();
    }
    public String getKind() {
        return super.kind;
    }
    public String getSignature() {
        return super.name;
    }
    public boolean isCode() {
        return kind.equals(Kind.CODE);
    }
    public boolean isMemberKind() {
        return kind.isMemberKind();
    }
    public List getRelations() {
        return relations;
    }
    public void setRelations(List relations) {
        if (relations.size() > 0) {
            this.relations = relations;
        }
    }
    public String getFormalComment() {
        return formalComment;
    }
    public String toString() {
        return super.name;
    }
    /**
======= f1deb9c^:"asm/src/org/aspectj/asm/ReferenceAssociation.java"

 * Copyright (c) 1999-2001 Xerox Corporation, 
 *               2002 Palo Alto Research Center, Incorporated (PARC).
 * All rights reserved. 
 * This program and the accompanying materials are made available 
 * under the terms of the Common Public License v1.0 
 * which accompanies this distribution and is available at 
 * http://www.eclipse.org/legal/cpl-v10.html 
 *  
 * Contributors: 
 *     Xerox/PARC     initial implementation 
 * ******************************************************************/
 * @author Mik Kersten
 */
    public static final String NAME = "Reference";
    public static final Relation USES_POINTCUT_RELATION = new Relation("uses pointcut", "pointcut used by", NAME, true, true);
    public static final Relation IMPORTS_RELATION = new Relation("imports", NAME, false);
    //public static final Relation THROWS_RELATION = new Relation("throws", NAME, false);
    //public static final Relation USES_TYPE_RELATION = new Relation("uses type", NAME, false);
    private List relations = new ArrayList();
    public ReferenceAssociation() {
        relations.add(USES_POINTCUT_RELATION);
        relations.add(IMPORTS_RELATION);
        //relations.add(THROWS_RELATION);
        //relations.add(USES_TYPE_RELATION);
    }
    public List getRelations() {
        return relations;
    }
    public List getRelationNodes() {
        List relations = new ArrayList();
        List pointcutsUsed = new ArrayList();
        List pointcutUsedBy = new ArrayList();
        List throwsTypes = new ArrayList();
        List imports = new ArrayList();
        List usesType = new ArrayList();
        return relations;
    }
    public String getName() {
        return NAME;
    }
======= f1deb9c^:"asm/src/org/aspectj/asm/Relation.java"

 * Copyright (c) 1999-2001 Xerox Corporation, 
 *               2002 Palo Alto Research Center, Incorporated (PARC).
 * All rights reserved. 
 * This program and the accompanying materials are made available 
 * under the terms of the Common Public License v1.0 
 * which accompanies this distribution and is available at 
 * http://www.eclipse.org/legal/cpl-v10.html 
 *  
 * Contributors: 
 *     Xerox/PARC     initial implementation 
 * ******************************************************************/
 * @author Mik Kersten
 */
    private String forwardNavigationName;
    private String backNavigationName;
    private String associationName;
    private boolean symmetrical;
    private boolean transitive;
    public Relation(String forwardNavigationName,
                    String backNavigationName,
                    String associationName,
                    boolean symmetrical,
                    boolean transitive) {
        this.forwardNavigationName = forwardNavigationName;
        this.backNavigationName = backNavigationName;
        this.associationName = associationName;
        this.symmetrical = symmetrical;
        this.transitive = transitive;
    }
    /**
     * Constructor for asymetrical relations.
     */
    public Relation(String forwardNavigationName,
                    String associationName,
                    boolean transitive) {
        this(forwardNavigationName, "<no back navigation name>", associationName, false, transitive);
    }
    public String getForwardNavigationName() {
        return forwardNavigationName;
    }
    public String getBackNavigationName() {
        return backNavigationName;
    }
    public String getAssociationName() {
        return associationName;
    }
    public boolean isSymmetrical() {
        return symmetrical;
    }
    public boolean isTransitive() {
        return transitive;
    }
    public String toString() {
        if (symmetrical) {
            return forwardNavigationName + " / " + backNavigationName;
        } else {
            return forwardNavigationName;
        }
    }
======= f1deb9c^:"asm/src/org/aspectj/asm/RelationNode.java"

 * Copyright (c) 1999-2001 Xerox Corporation, 
 *               2002 Palo Alto Research Center, Incorporated (PARC).
 * All rights reserved. 
 * This program and the accompanying materials are made available 
 * under the terms of the Common Public License v1.0 
 * which accompanies this distribution and is available at 
 * http://www.eclipse.org/legal/cpl-v10.html 
 *  
 * Contributors: 
 *     Xerox/PARC     initial implementation 
 * ******************************************************************/
 * @author Mik Kersten
 */
    private Relation relation;
    /**
     * Used during de-externalization.
     */
    public RelationNode() { }
    public RelationNode(Relation relation, String name, List children) {
        super(name, relation.getAssociationName(), children);
        this.relation = relation;
    }
    public Relation getRelation() {
        return relation;
    }
======= f1deb9c^:"asm/src/org/aspectj/asm/StructureModel.java"

======= f1deb9c^:"asm/src/org/aspectj/asm/StructureModel.java"

    protected  StructureNode root = null;
    public static final ProgramElementNode NO_STRUCTURE = new ProgramElementNode("<build to view structure>", ProgramElementNode.Kind.ERROR, null);
    public StructureNode getRoot() {
    public void setRoot(StructureNode root) {
======= f1deb9c^:"asm/src/org/aspectj/asm/StructureModel.java"

======= f1deb9c^:"asm/src/org/aspectj/asm/StructureModel.java"

======= f1deb9c^:"asm/src/org/aspectj/asm/StructureModel.java"

======= f1deb9c^:"asm/src/org/aspectj/asm/StructureModel.java"

======= f1deb9c^:"asm/src/org/aspectj/asm/StructureModel.java"

======= f1deb9c^:"asm/src/org/aspectj/asm/StructureModel.java"

======= f1deb9c^:"asm/src/org/aspectj/asm/StructureModel.java"

======= f1deb9c^:"asm/src/org/aspectj/asm/StructureModel.java"

======= f1deb9c^:"asm/src/org/aspectj/asm/StructureModel.java"

======= f1deb9c^:"asm/src/org/aspectj/asm/StructureModel.java"

======= f1deb9c^:"asm/src/org/aspectj/asm/StructureModelListener.java"

 * Copyright (c) 1999-2001 Xerox Corporation, 
 *               2002 Palo Alto Research Center, Incorporated (PARC).
 * All rights reserved. 
 * This program and the accompanying materials are made available 
 * under the terms of the Common Public License v1.0 
 * which accompanies this distribution and is available at 
 * http://www.eclipse.org/legal/cpl-v10.html 
 *  
 * Contributors: 
 *     Xerox/PARC     initial implementation 
 * ******************************************************************/
 * Compiler listeners get notified of structure model update events.
 *
 * @author Mik Kersten
 */
    public void modelUpdated(StructureModel rootNode);
======= f1deb9c^:"asm/src/org/aspectj/asm/StructureModelManager.java"

        associations.add(new AdviceAssociation());
        associations.add(new IntroductionAssociation());
        associations.add(new InheritanceAssociation());
        associations.add(new ReferenceAssociation());
======= f1deb9c^:"asm/src/org/aspectj/asm/StructureModelManager.java"

        if (!model.isValid()) return null;
        HashMap annotations = new HashMap();
        StructureNode node = model.findRootNodeForSourceFile(sourceFile);
        if (node == StructureModel.NO_STRUCTURE) {
            return null;
        } else {
            ProgramElementNode fileNode = (ProgramElementNode)node;
            ArrayList peNodes = new ArrayList();
            getAllStructureChildren(fileNode, peNodes, showSubMember, showMemberAndType);
            for (Iterator it = peNodes.iterator(); it.hasNext(); ) {
                ProgramElementNode peNode = (ProgramElementNode)it.next();
                List entries = new ArrayList();
                entries.add(peNode);
                ISourceLocation sourceLoc = peNode.getSourceLocation();
                if (null != sourceLoc) {
                    Integer hash = new Integer(sourceLoc.getLine());
                    List existingEntry = (List)annotations.get(hash);
                    if (existingEntry != null) {
                        entries.addAll(existingEntry);
                    }
                    annotations.put(hash, entries);
                }
            }
            return annotations;
        }
    }
    private void getAllStructureChildren(ProgramElementNode node, List result, boolean showSubMember, boolean showMemberAndType) {
        List children = node.getChildren();
        for (Iterator it = children.iterator(); it.hasNext(); ) {
            StructureNode next = (StructureNode)it.next();
            if (next instanceof ProgramElementNode) {
                ProgramElementNode pNode = (ProgramElementNode)next;
                if (pNode != null
                	&& ((pNode.isCode() && showSubMember) || (!pNode.isCode() && showMemberAndType))
                	&& pNode.getRelations() != null 
                	&& pNode.getRelations().size() > 0) {
                    result.add(next);
                }
                getAllStructureChildren((ProgramElementNode)next, result, showSubMember, showMemberAndType);
            }
        }
    public void addListener(StructureModelListener listener) {
    public void removeStructureListener(StructureModelListener listener) {
            ((StructureModelListener)it.next()).modelUpdated(model);
======= f1deb9c^:"asm/src/org/aspectj/asm/StructureNode.java"

 * Copyright (c) 1999-2001 Xerox Corporation, 
 *               2002 Palo Alto Research Center, Incorporated (PARC).
 * All rights reserved. 
 * This program and the accompanying materials are made available 
 * under the terms of the Common Public License v1.0 
 * which accompanies this distribution and is available at 
 * http://www.eclipse.org/legal/cpl-v10.html 
 *  
 * Contributors: 
 *     Xerox/PARC     initial implementation 
 * ******************************************************************/
 * Children are non-repeating making the parent-child structure a strict
 * tree.
 * 
 * !!! relies on a java.io.Serializable implementation of ISourceLocation
 * 
 * @author Mik Kersten
 */
    protected String name = "";
    protected String kind = "";
    // children.listIterator() should support remove() operation
    protected List children = new ArrayList();
    protected IMessage message = null;
    protected ISourceLocation sourceLocation = null;
    /**
     * Used during serialization.
     */
    public StructureNode() { }
    public StructureNode(String name, String kind, List children) {
        this.name = name;
        this.kind = kind;
        if (children != null) {
        }
     	setParents();
    }
    public StructureNode(String name, String kind) {
        this.name = name;
        this.kind = kind;
    }
    public String toString() {
        return  name;
    }
    public String getKind() {
        return kind;
    }
    public List getChildren() {
        return children;
    }
    public void addChild(StructureNode child) {
        if (children == null) {
            children = new ArrayList();
        }
        children.add(child);
        child.setParent(this);
    }
    
    public void addChild(int position, StructureNode child) {
        if (children == null) {
            children = new ArrayList();
        }
        children.add(position, child);
        child.setParent(this);
    }
    
    public boolean removeChild(StructureNode child) {
    	child.setParent(null);
    	return children.remove(child);	
    }
    /**
     * Comparison is string-name based only.
     */
    public int compareTo(Object o) throws ClassCastException {
        if (this == o) {
            return 0;
        } else {
            StructureNode sn = (StructureNode)o;
            return this.getName().compareTo(sn.getName());
        }
    }
    public String getName() {
        return name;
    }
======= f1deb9c^:"asm/src/org/aspectj/asm/StructureNodeFactory.java"

 * Copyright (c) 1999-2001 Xerox Corporation, 
 *               2002 Palo Alto Research Center, Incorporated (PARC).
 * All rights reserved. 
 * This program and the accompanying materials are made available 
 * under the terms of the Common Public License v1.0 
 * which accompanies this distribution and is available at 
 * http://www.eclipse.org/legal/cpl-v10.html 
 *  
 * Contributors: 
 *     Xerox/PARC     initial implementation 
 * ******************************************************************/
 * @author Mik Kersten
 */
    private static Hashtable programElementNodes = new Hashtable();
    
    private static final ProgramElementNode UNRESOLVED_LINK_NODE = new ProgramElementNode("<error: unresolved link>", ProgramElementNode.Kind.ERROR, null, null, "", "", "", null, null, null, false);
    public static void clear() {
        programElementNodes.clear();
    }
    public static ProgramElementNode makeNode(List relations, List children) {
        return makeNode(relations, children, false);
    }
    public static LinkNode makeLink(boolean terminal) {
        ProgramElementNode peNode = null;
        if (terminal) {
            peNode = makeNode(null, null, false);
        } else {
        	peNode = makeNode(null, null, true);
        }
        
        if (peNode == null) {
    		return new LinkNode(UNRESOLVED_LINK_NODE);
    	} else {
    		return new LinkNode(peNode);
    	}
    }
    private static ProgramElementNode makeNode(List relations, List children, boolean resolve) {
    }
======= f1deb9c^:"asm/src/org/aspectj/asm/StructureNodeFactory.java"

======= f1deb9c^:"asm/src/org/aspectj/asm/StructureNodeFactory.java"

======= f1deb9c^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java"

======= f1deb9c^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java"

======= f1deb9c^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"

======= f1deb9c^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"

        ProgramElementNode.Kind kind = ProgramElementNode.Kind.FILE_JAVA;
            kind = ProgramElementNode.Kind.FILE_LST;  
        model.setRoot(new ProgramElementNode(rootLabel, kind, new ArrayList()));
======= f1deb9c^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmBuilder.java"

 * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).
 * All rights reserved. 
 * This program and the accompanying materials are made available 
 * under the terms of the Common Public License v1.0 
 * which accompanies this distribution and is available at 
 * http://www.eclipse.org/legal/cpl-v10.html 
 *  
 * Contributors: 
 *     PARC     initial implementation 
 * ******************************************************************/
    public static void build(
        CompilationUnitDeclaration unit,
        StructureModel structureModel) {
        LangUtil.throwIaxIfNull(unit, "unit");
          
        new AsmBuilder(unit.compilationResult()).internalBuild(unit, structureModel);
    }
    protected AsmBuilder(CompilationResult result) {
        LangUtil.throwIaxIfNull(result, "result");
        currCompilationResult = result;
        stack = new Stack();
    }
    /** 
     * Called only by 
     * build(CompilationUnitDeclaration unit, StructureModel structureModel) 
     */
    private void internalBuild(
        CompilationUnitDeclaration unit, 
        StructureModel structureModel) {
        LangUtil.throwIaxIfNull(structureModel, "structureModel");
        if (!currCompilationResult.equals(unit.compilationResult())) {
            throw new IllegalArgumentException("invalid unit: " + unit);
        }
        // ---- summary
        // add unit to package (or root if no package),
        // first removing any duplicate (XXX? removes children if 3 classes in same file?)
        // push the node on the stack
        // and traverse
        
        // -- create node to add
        final File file = new File(new String(unit.getFileName()));
        final ProgramElementNode cuNode;
        {
            // AMC - use the source start and end from the compilation unit decl
            int startLine = getStartLine(unit);
            int endLine = getEndLine(unit);     
            ISourceLocation sourceLocation 
                = new SourceLocation(file, startLine, endLine);
            cuNode = new ProgramElementNode(
                new String(file.getName()),
                ProgramElementNode.Kind.FILE_JAVA,
                sourceLocation,
                0,
                "",
                new ArrayList());
        }
        // -- get node (package or root) to add to
        final StructureNode addToNode;
        {
            ImportReference currentPackage = unit.currentPackage;
            if (null == currentPackage) {
                addToNode = structureModel.getRoot();
            } else {
                String pkgName;
                {
                    StringBuffer nameBuffer = new StringBuffer();
                    final char[][] importName = currentPackage.getImportName();
                    final int last = importName.length-1;
                    for (int i = 0; i < importName.length; i++) {
                        nameBuffer.append(new String(importName[i]));
                        if (i < last) {
                            nameBuffer.append('.');
                        } 
                    }
                    pkgName = nameBuffer.toString();
                }
            
                ProgramElementNode pkgNode = null;
                for (Iterator it = structureModel.getRoot().getChildren().iterator(); 
                    it.hasNext(); ) {
                    ProgramElementNode currNode = (ProgramElementNode)it.next();
                    if (pkgName.equals(currNode.getName())) {
                        pkgNode = currNode;
                        break; // any reason not to quit when found?
                    } 
                }
                if (pkgNode == null) {
                    // note packages themselves have no source location
                    pkgNode = new ProgramElementNode(
                        pkgName, 
                        ProgramElementNode.Kind.PACKAGE, 
                        new ArrayList());
                    structureModel.getRoot().addChild(pkgNode);
                }
                addToNode = pkgNode;
            }
        }
        
        // -- remove duplicates before adding (XXX use them instead?)
        for (ListIterator itt = addToNode.getChildren().listIterator(); itt.hasNext(); ) {
            ProgramElementNode child = (ProgramElementNode)itt.next();
            ISourceLocation childLoc = child.getSourceLocation();
            if (null == childLoc) {
                // XXX ok, packages have null source locations
                // signal others?
            } else if (childLoc.getSourceFile().equals(file)) {
                itt.remove();
            }
        }
        // -- add and traverse
        addToNode.addChild(cuNode);     
        stack.push(cuNode);
        unit.traverse(this, unit.scope);  
        
        // -- update file map (XXX do this before traversal?)
        try {
            structureModel.addToFileMap(file.getCanonicalPath(), cuNode);
        } catch (IOException e) { 
            System.err.println("IOException " + e.getMessage() 
                + " creating path for " + file );
            // XXX signal IOException when canonicalizing file path
        }
    }
  
======= f1deb9c^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmBuilder.java"

======= f1deb9c^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmNodeFormatter.java"

======= f1deb9c^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmNodeFormatter.java"

======= f1deb9c^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmNodeFormatter.java"

======= f1deb9c^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmNodeFormatter.java"

======= f1deb9c^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmNodeFormatter.java"

======= f1deb9c^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/EmacsStructureModelManager.java"

======= f1deb9c^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/EmacsStructureModelManager.java"

                ProgramElementNode peNode = (ProgramElementNode)((Map.Entry)it.next()).getValue();
======= f1deb9c^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/EmacsStructureModelManager.java"

    private void dumpStructureToFile(ProgramElementNode node) throws IOException {
        String s = node.getKind();
        if (!  (s.equals(ProgramElementNode.Kind.FILE_ASPECTJ.toString())
                || s.equals(ProgramElementNode.Kind.FILE_JAVA.toString()))) {
======= f1deb9c^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/EmacsStructureModelManager.java"

        private void printDecls(ProgramElementNode node) {
                if (nodeObject instanceof ProgramElementNode) {
                    ProgramElementNode child = (ProgramElementNode)nodeObject;
                } else if (nodeObject instanceof LinkNode) {
                    LinkNode child = (LinkNode)nodeObject;
                    printDecl(child.getProgramElementNode(), false);
                }
        private void printDecls(RelationNode node) {
            for (Iterator it = node.getChildren().iterator(); it.hasNext(); ) {
                if (nodeObject instanceof LinkNode) {
                    LinkNode child = (LinkNode)nodeObject;
                    if (//!child.getProgramElementNode().getKind().equals("stmnt") &&
                        !child.getProgramElementNode().getKind().equals("<undefined>")) {
                        printDecl(child.getProgramElementNode(), false);
                    }
                }
        private void printDecl(ProgramElementNode node, boolean recurse) {
            String kind = node.getKind().toLowerCase();
======= f1deb9c^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/EmacsStructureModelManager.java"

                if (node instanceof ProgramElementNode) {
                    java.util.List relations = ((ProgramElementNode)node).getRelations();
                            RelationNode relNode = (RelationNode)it.next();
                            if (relNode.getRelation().getAssociationName().equals(AdviceAssociation.NAME) ||
                                relNode.getRelation().getAssociationName().equals(IntroductionAssociation.NAME)) {
======= f1deb9c^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/EmacsStructureModelManager.java"

                        if (nodeObject instanceof ProgramElementNode) {
                            ProgramElementNode currNode = (ProgramElementNode)nodeObject;
======= f1deb9c^:"org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/core/builder/AsmBuilderTest.java"

======= f1deb9c^:"testing/src/org/aspectj/testing/ajde/CompileCommand.java"

======= f1deb9c^:"testing/src/org/aspectj/testing/ajde/CompileCommand.java"

            protected StructureViewNode createConcreteNode(
                StructureNode node,
                AbstractIcon icon,
                List children) {
                return new SwingTreeViewNode(node, icon, children);
            }
======= f1deb9c^:"weaver/src/org/aspectj/weaver/AsmAdaptor.java"

======= f1deb9c^:"weaver/src/org/aspectj/weaver/AsmAdaptor.java"

======= f1deb9c^:"weaver/src/org/aspectj/weaver/AsmAdaptor.java"

======= f1deb9c^:"weaver/src/org/aspectj/weaver/AsmAdaptor.java"

======= f1deb9c^:"weaver/src/org/aspectj/weaver/AsmAdaptor.java"


======= 3e59745^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java"

======= 3e59745^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java"

======= 3e59745^:"weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java"

======= 3e59745^:"weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java"

======= 3e59745^:"weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java"

======= 3e59745^:"weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java"

======= 3e59745^:"weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java"


======= 684c9c1^:"bridge/src/org/aspectj/bridge/IMessage.java"

======= 684c9c1^:"bridge/src/org/aspectj/bridge/Message.java"

======= 684c9c1^:"bridge/src/org/aspectj/bridge/Message.java"

======= 684c9c1^:"bridge/src/org/aspectj/bridge/Message.java"

======= 684c9c1^:"bridge/src/org/aspectj/bridge/Message.java"

======= 684c9c1^:"testing/src/org/aspectj/testing/xml/SoftMessage.java"

    
======= 684c9c1^:"testing/src/org/aspectj/testing/xml/SoftMessage.java"

======= 684c9c1^:"weaver/src/org/aspectj/weaver/Checker.java"

======= 684c9c1^:"weaver/src/org/aspectj/weaver/Checker.java"


======= acdf688^:"ajbrowser/testsrc/org/aspectj/tools/ajbrowser/BrowserManagerTest.java"

 * Copyright (c) 1999-2001 Xerox Corporation, 
 *               2002 Palo Alto Research Center, Incorporated (PARC).
 * All rights reserved. 
 * This program and the accompanying materials are made available 
 * under the terms of the Common Public License v1.0 
 * which accompanies this distribution and is available at 
 * http://www.eclipse.org/legal/cpl-v10.html 
 *  
 * Contributors: 
 *     Xerox/PARC     initial implementation 
 * ******************************************************************/
 * @author Mik Kersten
 */
======= acdf688^:"ajbrowser/testsrc/org/aspectj/tools/ajbrowser/BrowserManagerTest.java"

======= acdf688^:"ajde/src/org/aspectj/ajde/ui/swing/CompilerMessagesCellRenderer.java"

                setIcon(null);
======= acdf688^:"ajde/src/org/aspectj/ajde/ui/swing/CompilerMessagesCellRenderer.java"

======= acdf688^:"ajde/src/org/aspectj/ajde/ui/swing/CompilerMessagesCellRenderer.java"

======= acdf688^:"ajde/src/org/aspectj/ajde/ui/swing/CompilerMessagesCellRenderer.java"

======= acdf688^:"ajde/src/org/aspectj/ajde/ui/swing/CompilerMessagesCellRenderer.java"

======= acdf688^:"org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/ajc/AjdtAjcTests.java"

        return suite;
======= acdf688^:"org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/ajc/BuildArgParserTestCase.java"

======= acdf688^:"org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/ajc/BuildArgParserTestCase.java"



======= a26cac9^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/AjdtCommand.java"

======= a26cac9^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/AjdtCommand.java"

        String message = parser.getOtherMessages(true);
            IMessage m = new Message(message, kind, null, null);            
        }
        message = config.configErrors();
        if (null != message) {
            IMessage.Kind kind = inferKind(message);
            IMessage m = new Message(message, kind, null, null);            
            handler.handleMessage(m);
        }
        
======= a26cac9^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java"

======= a26cac9^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java"

======= a26cac9^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java"

                        || buildConfig.isIncrementalFileMode();
======= a26cac9^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java"

======= a26cac9^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java"

======= a26cac9^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java"

            MessageUtil.error(handler, iie.getMessage());
======= a26cac9^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java"

    // !!! extract error handling to be common so that the IDEs can use it
======= a26cac9^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java"

                            showError("bad injar: " + filename);
======= a26cac9^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java"

            MessageUtil.error(handler, CONFIG_MSG + message);
            MessageUtil.warn(handler, message);

======= f5d31ba^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmBuilder.java"

======= f5d31ba^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmBuilder.java"

======= f5d31ba^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmBuilder.java"


======= 7886970^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmBuilder.java"

    private AsmBuilder(CompilationResult result) {
======= 7886970^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmBuilder.java"

======= 7886970^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmBuilder.java"

======= 7886970^:"org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/core/builder/AjdtBuilderTests.java"

======= 7886970^:"org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/core/builder/AjdtBuilderTests.java"



======= 58e3cb2^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmBuilder.java"


======= 2502ee5^:"taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java"

            if (null == destDir) {
                destDir = new File(".");
            }
======= 2502ee5^:"taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java"

        ajc.setDestdir(destDir);        
======= 2502ee5^:"taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java"

    private static final File DEFAULT_DESTDIR = new File(".");
======= 2502ee5^:"taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java"

        
======= 2502ee5^:"taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java"

        
======= 2502ee5^:"taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java"

======= 2502ee5^:"taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java"

======= 2502ee5^:"taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java"

        return (String[]) result.toArray(new String[0]);
            String m = "can fork incremental only using tag file";
            throw new BuildException(m);
======= 2502ee5^:"taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java"

        } else if (!destDir.canWrite()) {
======= 2502ee5^:"taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java"

======= 2502ee5^:"taskdefs/testsrc/org/aspectj/tools/ant/taskdefs/AjcTaskTest.java"

======= 2502ee5^:"taskdefs/testsrc/org/aspectj/tools/ant/taskdefs/AjcTaskTest.java"

        task.setDestdir(getTempDir());
======= 2502ee5^:"taskdefs/testsrc/org/aspectj/tools/ant/taskdefs/AjcTaskTest.java"

        task.setVerbose(true); // XXX    
======= 2502ee5^:"taskdefs/testsrc/org/aspectj/tools/ant/taskdefs/AjcTaskTest.java"


======= bbd832b^:"ajbrowser/src/org/aspectj/tools/ajbrowser/BrowserManager.java"

======= bbd832b^:"ajbrowser/src/org/aspectj/tools/ajbrowser/BrowserManager.java"

======= bbd832b^:"ajbrowser/src/org/aspectj/tools/ajbrowser/BrowserManager.java"

======= bbd832b^:"ajbrowser/src/org/aspectj/tools/ajbrowser/BrowserManager.java"

======= bbd832b^:"ajbrowser/src/org/aspectj/tools/ajbrowser/BrowserManager.java"

======= bbd832b^:"ajbrowser/src/org/aspectj/tools/ajbrowser/BrowserManager.java"

        Ajde.getDefault().getEditorManager().saveContents();
======= bbd832b^:"ajbrowser/src/org/aspectj/tools/ajbrowser/BrowserManager.java"

======= bbd832b^:"ajbrowser/src/org/aspectj/tools/ajbrowser/BrowserManager.java"

======= bbd832b^:"ajbrowser/src/org/aspectj/tools/ajbrowser/BrowserManager.java"

======= bbd832b^:"ajbrowser/src/org/aspectj/tools/ajbrowser/CompilerMessagesPanel.java"

        Ajde.getDefault().getEditorManager().showSourceLine(loc, true);
======= bbd832b^:"ajbrowser/src/org/aspectj/tools/ajbrowser/CompilerMessagesPanel.java"

======= bbd832b^:"ajbrowser/src/org/aspectj/tools/ajbrowser/TopFrame.java"

======= bbd832b^:"ajbrowser/src/org/aspectj/tools/ajbrowser/TopFrame.java"

        Ajde.getDefault().getEditorManager().saveContents();
======= bbd832b^:"ajbrowser/src/org/aspectj/tools/ajbrowser/TopFrame.java"

    void emacsTest_button_actionPerformed(ActionEvent e) {
    }
        Ajde.getDefault().getEditorManager().saveContents();
======= bbd832b^:"ajbrowser/src/org/aspectj/tools/ajbrowser/TopFrame.java"

======= bbd832b^:"ajde/src/org/aspectj/ajde/Ajde.java"

======= bbd832b^:"ajde/src/org/aspectj/ajde/Ajde.java"

======= bbd832b^:"ajde/src/org/aspectj/ajde/Ajde.java"

======= bbd832b^:"ajde/src/org/aspectj/ajde/Ajde.java"

======= bbd832b^:"ajde/src/org/aspectj/ajde/Ajde.java"

======= bbd832b^:"ajde/src/org/aspectj/ajde/Ajde.java"

======= bbd832b^:"ajde/src/org/aspectj/ajde/Ajde.java"

======= bbd832b^:"ajde/src/org/aspectj/ajde/ui/EditorManager.java"

 * Copyright (c) 1999-2001 Xerox Corporation, 
 *               2002 Palo Alto Research Center, Incorporated (PARC).
 * All rights reserved. 
 * This program and the accompanying materials are made available 
 * under the terms of the Common Public License v1.0 
 * which accompanies this distribution and is available at 
 * http://www.eclipse.org/legal/cpl-v10.html 
 *  
 * Contributors: 
 *     Xerox/PARC     initial implementation 
 * ******************************************************************/
 * Responsible for controlling the editor.
 *
 * @todo    remove coupling to <CODE>BasicEditor</CODE>
 * @author  Mik Kersten
 */
    /** @return true if input modifiers have shift down */
    public static boolean isShiftDown(int modifiers) {
        return (0 != (modifiers & KeyEvent.SHIFT_MASK));
    }
    private EditorAdapter editor = null;
    private BasicEditor basicEditor = null;
    private ArrayList editorListeners = new ArrayList();
    private Vector editors = new Vector();
    private JPanel editor_panel = null;
    private Box editors_box = Box.createVerticalBox();
    public EditorManager(EditorAdapter ajdeEditor) {
    	if (ajdeEditor instanceof BasicEditor) {
    	} else {
        	editors.add(ajdeEditor);
        	this.editor = ajdeEditor;   		
    	}
    }
    public void addListener(EditorListener editorListener) {
        editorListeners.add(editorListener);
    }
    public void removeListener(EditorListener editorListener) {
        editorListeners.remove(editorListener);
    }
    public void notifyCurrentFileChanged(String filePath) {
        for (Iterator it = editorListeners.iterator(); it.hasNext(); ) {
            ((EditorListener)it.next()).currentFileChanged(filePath);
        }
    }
    public void addViewForSourceLine(final String filePath, final int lineNumber) {
        if (basicEditor == null) return;
        editors_box.remove(basicEditor.getPanel());
        final BasicEditor newEditor = new BasicEditor();
        editors.add(newEditor);
        
        Runnable update = new Runnable() {
            public void run() {
                editors_box.add(newEditor.getPanel());
                newEditor.showSourceLine(filePath, lineNumber, true);
                //AjdeUIManager.getDefault().getIdeUIAdapter().resetGUI();
            }
        };
        if (SwingUtilities.isEventDispatchThread()) {
            update.run(); 
        } else {
            try {
                SwingUtilities.invokeAndWait(update);
            } catch (Exception e) {
                Ajde.getDefault().getErrorHandler().handleError("Could not add view for source line.", e);
            }
        }
    }
    public String getCurrFile() {
    	if (basicEditor != null) {
    		return basicEditor.getCurrFile();
    	} else {
    	}
    }
    /**
     * @todo    remove "instanceof AjdeManager" hack
     */
    public void showSourceLine(String filePath, int lineNumber, boolean highlight) {
        if (editors.size() > 1) {
            editors_box.removeAll();
            editors_box.add(basicEditor.getPanel());
            //AjdeUIManager.getDefault().getIdeUIAdapter().resetGUI();
            editors.removeAllElements();
            editors.add(basicEditor);
        } 
        
        if (basicEditor != null) {
        	basicEditor.showSourceLine(filePath, lineNumber, highlight);
        } else {
        	editor.showSourceLine(filePath, lineNumber, highlight);
        }
    }
    public void pasteToCaretPos(String text) {
        if (basicEditor != null) {
        	basicEditor.pasteToCaretPos(text);
        } else {
        	editor.pasteToCaretPos(text);
        }    	
    }
    public void showSourcelineAnnotation(String filePath, int lineNumber, java.util.List items) {
        editor.showSourcelineAnnotation(filePath, lineNumber, items);
    }
    public void saveContents() {
        try {
            for (Iterator it = editors.iterator(); it.hasNext(); ) {
                ((EditorAdapter)it.next()).saveContents();
            }
        } catch (IOException ioe) {
            Ajde.getDefault().getErrorHandler().handleError("Editor could not save the current file.", ioe);
        }
    }
    public JPanel getEditorPanel() {
        if (editor_panel != null) {
            return editor_panel;
        } else {
            return basicEditor.getPanel();
        }
    }
======= bbd832b^:"ajde/src/org/aspectj/ajde/ui/StructureModelUtil.java"

======= bbd832b^:"ajde/src/org/aspectj/ajde/ui/StructureViewManager.java"

        	
        	if (defaultFileView != null) {
        		defaultFileView.setSourceFile(Ajde.getDefault().getEditorManager().getCurrFile());
        	}
======= bbd832b^:"ajde/src/org/aspectj/ajde/ui/StructureViewManager.java"

======= bbd832b^:"ajde/src/org/aspectj/ajde/ui/StructureViewManager.java"

======= bbd832b^:"ajde/src/org/aspectj/ajde/ui/StructureViewManager.java"

======= bbd832b^:"ajde/src/org/aspectj/ajde/ui/StructureViewManager.java"

======= bbd832b^:"ajde/src/org/aspectj/ajde/ui/StructureViewManager.java"

======= bbd832b^:"ajde/src/org/aspectj/ajde/ui/swing/AjdeUIManager.java"

======= bbd832b^:"ajde/src/org/aspectj/ajde/ui/swing/AjdeUIManager.java"

======= bbd832b^:"ajde/src/org/aspectj/ajde/ui/swing/AjdeUIManager.java"

======= bbd832b^:"ajde/src/org/aspectj/ajde/ui/swing/AjdeUIManager.java"

======= bbd832b^:"ajde/src/org/aspectj/ajde/ui/swing/AjdeUIManager.java"

======= bbd832b^:"ajde/src/org/aspectj/ajde/ui/swing/BasicEditor.java"

 * Copyright (c) 1999-2001 Xerox Corporation, 
 *               2002 Palo Alto Research Center, Incorporated (PARC).
 * All rights reserved. 
 * This program and the accompanying materials are made available 
 * under the terms of the Common Public License v1.0 
 * which accompanies this distribution and is available at 
 * http://www.eclipse.org/legal/cpl-v10.html 
 *  
 * Contributors: 
 *     Xerox/PARC     initial implementation 
 * ******************************************************************/
 * Bare-bones editor implementation used when the framework is being used
 * standalone.
 *
 * @author Mik Kersten
 */
    private String filePath = NO_FILE;
    private JPanel editor_panel = new JPanel();
    // @todo    get rid of these
    private int currHighlightStart = 0;
    private int currHighlightEnd = 0;
    private BorderLayout borderLayout1 = new BorderLayout();
    private JScrollPane jScrollPane1 = new JScrollPane();
    private JEditorPane editorPane = new JEditorPane();
    public BasicEditor() {
        try {
            editorPane.setEditable(true);
            editorPane.setContentType("text/plain");
            editorPane.setFont(new Font("Monospaced", 0, 11));
            editor_panel.add(editorPane);
            jbInit();
        }
        catch(Exception e) {
            Ajde.getDefault().getErrorHandler().handleError("Could not initialize GUI.", e);
        }
    }
    public String getCurrFile() {
    }
    public void showSourceLine(ISourceLocation sourceLocation, boolean highlight) {
    public void showSourceLine(int lineNumber, boolean highlight) {
        showSourceLine(filePath, lineNumber, highlight);
    }
    public void pasteToCaretPos(String text) {
        if (currHighlightEnd < 1) return;
        String contents = editorPane.getText();
        String pasted = contents.substring(0, currHighlightEnd) +
            text + contents.substring(currHighlightEnd, contents.length());
        editorPane.setText(pasted);
    }
    public void showSourceLine(String filePath, int lineNumber, boolean highlight) {
    	//AjdeUIManager.getDefault().getIdeUIAdapter().resetEditor();
        
        String oldPath = this.filePath;
        this.filePath = filePath;
        currHighlightStart = 0;
        currHighlightEnd = 0;
        editorPane.setText(readFile(filePath, lineNumber));
        try {
            editorPane.getHighlighter().addHighlight(currHighlightStart, currHighlightEnd, DefaultHighlighter.DefaultPainter);
            editorPane.setCaretPosition(currHighlightStart);
        } catch (BadLocationException ble) {
            Ajde.getDefault().getErrorHandler().handleError("Could not highlight location.", ble);
        }
        Ajde.getDefault().getEditorManager().notifyCurrentFileChanged(filePath);
    }
    /**
     * Not implemented.
     */
    public void showSourcelineAnnotation(String filePath, int lineNumber, java.util.List items) { }
    public void saveContents() throws IOException {
        if (filePath != NO_FILE && filePath != "" && editorPane.getText() != "") {
            BufferedWriter writer = new BufferedWriter(new FileWriter(filePath));
            writer.write(editorPane.getText());
            writer.flush();
        }
    }
    public JPanel getPanel() {
        return editor_panel;
    }
    public void showSourceForFile(String filePath) { }
    public void showSourceForLine(int lineNumber, boolean highlight) { }
    public void showSourceForSourceLine(String filePath, int lineNumber, boolean highlight) { }
    public String getCurrSourceFilePath() { return null; }
    public void setBreakpointRequest(String filePath, int lineNumber, boolean isDeferred) { }
    public void clearBreakpointRequest(String filePath, int lineNumber) { }
    private String readFile(String filePath, int lineNumber) {
        try {
            URL url = ClassLoader.getSystemResource(filePath);
            File file = new File(filePath);
            if (!file.exists()) {
                return "ERROR: file \"" + filePath + "\" does not exist.";
            }
            BufferedReader reader = new BufferedReader(new FileReader(file));
            StringBuffer contents = new StringBuffer();
            String line = reader.readLine();
            int numChars = 0;
            int numLines = 0;
            while (line != null) {
                numLines++;
                if (numLines < lineNumber) {
                    currHighlightStart += line.length()+1;
                }
                if (numLines == lineNumber) {
                    currHighlightEnd = currHighlightStart + line.length();
                }
                contents.append(line);
                contents.append('\n');
                line = reader.readLine();
            }
            return contents.toString();
        } catch (IOException ioe) {
            return "ERROR: could not read file \"" + filePath + "\", make sure that you have mounted /project/aop on X:\\";
        }
    }
    private void jbInit() throws Exception {
        editor_panel.setFont(new java.awt.Font("DialogInput", 1, 12));
        editor_panel.setLayout(borderLayout1);
        editor_panel.add(jScrollPane1, BorderLayout.CENTER);
        jScrollPane1.getViewport().add(editorPane, null);
    }
======= bbd832b^:"ajde/src/org/aspectj/ajde/ui/swing/BrowserViewManager.java"

======= bbd832b^:"ajde/src/org/aspectj/ajde/ui/swing/BrowserViewManager.java"

    public void showSourcesNodes(java.util.List nodes) {
        for (Iterator it = nodes.iterator(); it.hasNext(); ) {
            ProgramElementNode currNode = null;
            StructureNode structureNode = (StructureNode)it.next();
            if (structureNode instanceof LinkNode) {
                currNode = ((LinkNode)structureNode).getProgramElementNode();
            } else {
                currNode = (ProgramElementNode)structureNode;
            }
            ISourceLocation sourceLoc = currNode.getSourceLocation();
            if (null != sourceLoc) {
                Ajde.getDefault().getEditorManager().addViewForSourceLine(
                    sourceLoc.getSourceFile().getAbsolutePath(),
                    sourceLoc.getLine());
            }
        }
    }
======= bbd832b^:"ajde/src/org/aspectj/ajde/ui/swing/BrowserViewTreeListener.java"

======= bbd832b^:"ajde/src/org/aspectj/ajde/ui/swing/BuildConfigPopupMenu.java"

 * Copyright (c) 1999-2001 Xerox Corporation, 
 *               2002 Palo Alto Research Center, Incorporated (PARC).
 * All rights reserved. 
 * This program and the accompanying materials are made available 
 * under the terms of the Common Public License v1.0 
 * which accompanies this distribution and is available at 
 * http://www.eclipse.org/legal/cpl-v10.html 
 *  
 * Contributors: 
 *     Xerox/PARC     initial implementation 
 * ******************************************************************/
                        if (EditorManager.isShiftDown(e.getModifiers())) {
                            Ajde.getDefault().getBuildManager().buildFresh();
                        } else {
                            Ajde.getDefault().getBuildManager().build();
                        }
======= bbd832b^:"ajde/src/org/aspectj/ajde/ui/swing/PointcutWizard.java"

======= bbd832b^:"ajde/src/org/aspectj/ajde/ui/swing/PointcutWizard.java"

        typeTreeView.updateTree(Ajde.getDefault().getEditorManager().getCurrFile());
        try {
            jbInit();
        }
        catch(Exception e) {
            Ajde.getDefault().getErrorHandler().handleError("Could not initialize GUI.", e);
        }
        this.setSize(400, 400);
        this.setIconImage(((ImageIcon)AjdeUIManager.getDefault().getIconRegistry().getStructureSwingIcon(ProgramElementNode.Kind.POINTCUT)).getImage());
======= bbd832b^:"ajde/src/org/aspectj/ajde/ui/swing/PointcutWizard.java"

        Ajde.getDefault().getEditorManager().pasteToCaretPos(generatePcd());
        this.dispose();
======= bbd832b^:"ajde/src/org/aspectj/ajde/ui/swing/StructureViewPanel.java"

======= bbd832b^:"ajde/testsrc/AjdeModuleTests.java"

    public static Test suite() { 
======= bbd832b^:"ajde/testsrc/org/aspectj/ajde/CompilerMessagesTest.java"

======= bbd832b^:"ajde/testsrc/org/aspectj/ajde/CompilerMessagesTest.java"

======= bbd832b^:"ajde/testsrc/org/aspectj/ajde/NullIdeManager.java"

======= bbd832b^:"ajde/testsrc/org/aspectj/ajde/NullIdeManager.java"


======= d5ea336^:"ajde/src/org/aspectj/ajde/internal/CompilerAdapter.java"

======= d5ea336^:"ajde/src/org/aspectj/ajde/internal/CompilerAdapter.java"

======= d5ea336^:"ajde/src/org/aspectj/ajde/internal/CompilerAdapter.java"

        AjBuildConfig local = AjdtCommand.genBuildConfig(args, counter);
        }
======= d5ea336^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/AjdtCommand.java"

======= d5ea336^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/AjdtCommand.java"

        if (null != message) {
======= d5ea336^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java"

    
======= d5ea336^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java"


======= 026b272^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeDeclaration.java"

======= 026b272^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeDeclaration.java"

======= 026b272^:"weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java"

======= 026b272^:"weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java"

======= 026b272^:"weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java"

======= 026b272^:"weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java"


======= ba41fae^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AccessForInlineVisitor.java"

======= ba41fae^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AccessForInlineVisitor.java"

======= ba41fae^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AccessForInlineVisitor.java"

======= ba41fae^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AccessForInlineVisitor.java"

======= ba41fae^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AdviceDeclaration.java"

======= ba41fae^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/PrivilegedHandler.java"

======= ba41fae^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/PrivilegedHandler.java"


======= c509c6f^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"

======= c509c6f^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"

======= c509c6f^:"org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/BasicCommandTestCase.java"

======= c509c6f^:"org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/BasicCommandTestCase.java"


======= 2072ac1^:"weaver/src/org/aspectj/weaver/bcel/BcelShadow.java"

    	if (enclosingShadow == null) {


======= 7d14432^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"

======= 7d14432^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"

        	throw new RuntimeException("already woven: " + clazz);
======= 7d14432^:"weaver/src/org/aspectj/weaver/patterns/TypePattern.java"

======= 7d14432^:"weaver/src/org/aspectj/weaver/patterns/WildTypePattern.java"



======= f236927^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"

======= f236927^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"

======= f236927^:"org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/BasicCommandTestCase.java"

======= f236927^:"org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/BasicCommandTestCase.java"


    
======= 1e502f5^:"weaver/src/org/aspectj/weaver/patterns/KindedPointcut.java"

======= 1e502f5^:"weaver/src/org/aspectj/weaver/patterns/Pointcut.java"

======= 1e502f5^:"weaver/src/org/aspectj/weaver/patterns/Pointcut.java"

======= 1e502f5^:"weaver/src/org/aspectj/weaver/patterns/WithinPointcut.java"

======= 1e502f5^:"weaver/src/org/aspectj/weaver/patterns/WithincodePointcut.java"


======= 6c9118b^:"weaver/src/org/aspectj/weaver/bcel/BcelShadow.java"

======= 6c9118b^:"weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java"

======= 6c9118b^:"weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java"

======= 6c9118b^:"weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java"


======= 0a8dbde^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/ThisJoinPointVisitor.java"

    <ajc-test dir="new" pr="559"
      title="subclass advice not run for join points selected by superclass cflow-based pointcuts"
      keywords="from-resolved_10rc3">
        <compile files="PR559.java"/>
        <run class="PR559"/>
    </ajc-test>


    <ajc-test dir="new" title="new around construct"
      keywords="from-resolved_10x">
        <compile files="AroundAdvice.java"/>
        <run class="AroundAdvice"/>
    </ajc-test>
======= 808bae8^:"weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"

======= 808bae8^:"weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java"

        return Collections.unmodifiableList(methodGens);
======= 808bae8^:"weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java"

    public boolean isStatic() {
        return Modifier.isStatic(getAccessFlags());
    }

======= 989aaf7^:"ajde/testsrc/org/aspectj/ajde/AjdeTestCase.java"

======= 989aaf7^:"ajde/testsrc/org/aspectj/ajde/AjdeTests.java"

======= 989aaf7^:"ajde/testsrc/org/aspectj/ajde/AjdeTests.java"

======= 989aaf7^:"ajde/testsrc/org/aspectj/ajde/NullIdeManager.java"

 *     Xerox/PARC     initial implementation 
======= 989aaf7^:"ajde/testsrc/org/aspectj/ajde/NullIdeManager.java"

======= 989aaf7^:"ajde/testsrc/org/aspectj/ajde/NullIdeManager.java"

======= 989aaf7^:"ajde/testsrc/org/aspectj/ajde/NullIdeTaskListManager.java"

======= 989aaf7^:"ajde/testsrc/org/aspectj/ajde/NullIdeTaskListManager.java"

======= 989aaf7^:"ajde/testsrc/org/aspectj/ajde/NullIdeTaskListManager.java"


======= 56cc4f2^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseShadow.java"

======= 56cc4f2^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseShadow.java"

======= 56cc4f2^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseShadow.java"

======= 56cc4f2^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseShadow.java"

======= 56cc4f2^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseShadow.java"

======= 56cc4f2^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseShadow.java"

======= 56cc4f2^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseShadow.java"

======= 56cc4f2^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java"


======= 7746fcb^:"weaver/src/org/aspectj/weaver/patterns/CflowPointcut.java"


======= db37189^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseAdvice.java"

 * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).
 * All rights reserved. 
 * This program and the accompanying materials are made available 
 * under the terms of the Common Public License v1.0 
 * which accompanies this distribution and is available at 
 * http://www.eclipse.org/legal/cpl-v10.html 
 *  
 * Contributors: 
 *     PARC     initial implementation 
 * ******************************************************************/
======= db37189^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java"

 *     PARC     initial implementation 
======= db37189^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java"


    
    <ajc-test dir="new" pr="29934"
      title="can't apply around advice to the execution of around advice"
      keywords="from-resolved_10x">
        <compile files="CflowCycles.java"/>
        <run class="CflowCycles"/>
    </ajc-test>
======= 0fb5f69^:"weaver/src/org/aspectj/weaver/bcel/BcelShadow.java"


======= ae0ef30^:"weaver/src/org/aspectj/weaver/bcel/BcelRenderer.java"

======= ae0ef30^:"weaver/src/org/aspectj/weaver/bcel/BcelRenderer.java"

            Utility.createInstanceof(fact, (ObjectType) world.makeBcelType(i.getType())));
======= ae0ef30^:"weaver/src/org/aspectj/weaver/bcel/Utility.java"

======= ae0ef30^:"weaver/src/org/aspectj/weaver/bcel/Utility.java"

    public static Instruction createInstanceof(InstructionFactory fact, ObjectType t) {
        return new INSTANCEOF(fact.getConstantPool().addClass(t));        

======= 0a175d2^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseScope.java"

======= 0a175d2^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseScope.java"

======= 0a175d2^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseScope.java"

    
======= 0a175d2^:"tests/new/EachObjectInDeepPackage.java"



    <ajc-test dir="bugs" pr="33635" 
    		title="Negation of if pointcut does not work">
        <compile files="NotIf.java"/>
        <run class="NotIf"/>
    </ajc-test>
    
======= d1e5c0a^:"weaver/src/org/aspectj/weaver/NameMangler.java"

======= d1e5c0a^:"weaver/src/org/aspectj/weaver/ResolvedTypeX.java"

======= d1e5c0a^:"weaver/src/org/aspectj/weaver/ResolvedTypeX.java"

======= d1e5c0a^:"weaver/src/org/aspectj/weaver/TypeX.java"

     * Returns a TypeX object representing the declaring type of this type, or
     * null if this type does not represent a non-package-level-type.
     * <strong>Warning</strong>:  This is guaranteed to work for all member types.
     * For anonymous/local types, the only guarantee is given in JLS 13.1, where
     * it guarantees that if you call getDeclaringType() repeatedly, you will eventually
     * get the top-level class, but it does not say anything about classes in between.
     *
     * @return the declaring TypeX object, or null.
    public TypeX getDeclaringType() {
    	if (isArray()) return null;
        	return TypeX.forName(name.substring(0, lastDollar));
======= d1e5c0a^:"weaver/src/org/aspectj/weaver/patterns/WithinPointcut.java"

======= d1e5c0a^:"weaver/testsrc/org/aspectj/weaver/TypeXTestCase.java"

    	assertEquals(t.getDeclaringType(), TypeX.forName("java.util.Map"));
    	assertNull(TypeX.forName("java.util.Map").getDeclaringType());

======= cb77524^:"weaver/src/org/aspectj/weaver/patterns/IfPointcut.java"

======= cb77524^:"weaver/src/org/aspectj/weaver/patterns/IfPointcut.java"

======= cb77524^:"weaver/src/org/aspectj/weaver/patterns/IfPointcut.java"

======= cb77524^:"weaver/src/org/aspectj/weaver/patterns/IfPointcut.java"



======= 19c3e16^:"weaver/src/org/aspectj/weaver/patterns/KindedPointcut.java"

======= 19c3e16^:"weaver/src/org/aspectj/weaver/patterns/SignaturePattern.java"


======= d15eb32^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/ThisJoinPointVisitor.java"

======= d15eb32^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/ThisJoinPointVisitor.java"

======= d15eb32^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/ThisJoinPointVisitor.java"

    
    <ajc-test dir="bugs" pr="29959"
            title="super call in intertype method declaration body causes VerifyError">
        <compile files="SuperToIntro.java"/>
        <run class="SuperToIntro"/>
    </ajc-test>

======= 3e2801a^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeConstructorDeclaration.java"

======= 3e2801a^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeConstructorDeclaration.java"

======= 3e2801a^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/SuperFixerVisitor.java"

======= 3e2801a^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/SuperFixerVisitor.java"

======= 3e2801a^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/InterTypeMethodBinding.java"

======= 3e2801a^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/InterTypeMethodBinding.java"

======= 3e2801a^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/InterTypeMethodBinding.java"

======= 3e2801a^:"org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java"

======= 3e2801a^:"org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ExplicitConstructorCall.java"

======= 3e2801a^:"org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java"

======= 3e2801a^:"org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodBinding.java"

    <ajc-test dir="bugs" pr="29691"
    		title="Static inner aspects cannot reference user defined pointcuts">
        <compile files="PcdLookup.java" />
        <run class="PcdLookup"/>
    </ajc-test>
    <ajc-test dir="new"
      title="work nicely with inner class method look-up rules and call-site advice"
      keywords="from-resolved_10x">
        <compile files="InnerMethods.java"/>
        <run class="InnerMethods"/>
    </ajc-test>

======= 85a827a^:"ajbrowser/src/org/aspectj/tools/ajbrowser/BrowserProperties.java"

======= 85a827a^:"ajbrowser/src/org/aspectj/tools/ajbrowser/BrowserProperties.java"

======= 85a827a^:"ajde/src/org/aspectj/ajde/BuildOptionsAdapter.java"

 *     Xerox/PARC     initial implementation 
======= 85a827a^:"ajde/src/org/aspectj/ajde/BuildOptionsAdapter.java"

======= 85a827a^:"ajde/src/org/aspectj/ajde/ProjectPropertiesAdapter.java"

 *     Xerox/PARC     initial implementation 
======= 85a827a^:"ajde/src/org/aspectj/ajde/ProjectPropertiesAdapter.java"

======= 85a827a^:"ajde/src/org/aspectj/ajde/internal/AspectJBuildManager.java"

======= 85a827a^:"ajde/src/org/aspectj/ajde/internal/CompilerAdapter.java"

 *     Xerox/PARC     initial implementation 
======= 85a827a^:"ajde/src/org/aspectj/ajde/internal/CompilerAdapter.java"

======= 85a827a^:"ajde/src/org/aspectj/ajde/internal/CompilerAdapter.java"

======= 85a827a^:"ajde/src/org/aspectj/ajde/ui/internal/AjcBuildOptions.java"

======= 85a827a^:"ajde/src/org/aspectj/ajde/ui/internal/AjcBuildOptions.java"

======= 85a827a^:"ajde/src/org/aspectj/ajde/ui/internal/AjcBuildOptions.java"

======= 85a827a^:"ajde/src/org/aspectj/ajde/ui/internal/AjcBuildOptions.java"

======= 85a827a^:"ajde/src/org/aspectj/ajde/ui/internal/AjcBuildOptions.java"

======= 85a827a^:"ajde/testdata/examples/figures-coverage/figures/Figure.java"

======= 85a827a^:"ajde/testdata/examples/figures-coverage/figures/Figure.java"

    declare soft: Point: call(* *(..));
======= 85a827a^:"ajde/testsrc/org/aspectj/ajde/AjdeTests.java"

======= 85a827a^:"ajde/testsrc/org/aspectj/ajde/AjdeTests.java"

======= 85a827a^:"ajde/testsrc/org/aspectj/ajde/BuildOptionsTest.java"

======= 85a827a^:"ajde/testsrc/org/aspectj/ajde/BuildOptionsTest.java"

======= 85a827a^:"ajde/testsrc/org/aspectj/ajde/NullIdeManager.java"

======= 85a827a^:"ajde/testsrc/org/aspectj/ajde/NullIdeProperties.java"

======= 85a827a^:"ajde/testsrc/org/aspectj/ajde/NullIdeProperties.java"

======= 85a827a^:"ajde/testsrc/org/aspectj/ajde/NullIdeProperties.java"

    	return testProjectPath + System.getProperty("sun.boot.class.path") + File.pathSeparator +  "../../../runtime/bin";	
======= 85a827a^:"ajde/testsrc/org/aspectj/ajde/NullIdeProperties.java"

======= 85a827a^:"ajde/testsrc/org/aspectj/ajde/StructureModelRegressionTest.java"

======= 85a827a^:"ajde/testsrc/org/aspectj/ajde/StructureModelRegressionTest.java"

======= 85a827a^:"ajde/testsrc/org/aspectj/ajde/StructureModelRegressionTest.java"

======= 85a827a^:"ajde/testsrc/org/aspectj/ajde/StructureModelRegressionTest.java"

======= 85a827a^:"ajde/testsrc/org/aspectj/ajde/StructureModelTest.java"

======= 85a827a^:"ajde/testsrc/org/aspectj/ajde/StructureModelTest.java"

======= 85a827a^:"ajde/testsrc/org/aspectj/ajde/StructureModelTest.java"

======= 85a827a^:"ajde/testsrc/org/aspectj/ajde/StructureModelTest.java"

======= 85a827a^:"ajde/testsrc/org/aspectj/ajde/StructureModelTest.java"

======= 85a827a^:"ajde/testsrc/org/aspectj/ajde/ui/StructureViewManagerTest.java"

======= 85a827a^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java"

======= 85a827a^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java"

======= 85a827a^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java"

======= 85a827a^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java"

======= 85a827a^:"org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/ajc/BuildArgParserTestCase.java"



======= c1260e6^:"asm/src/org/aspectj/asm/StructureModel.java"

======= c1260e6^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmBuilder.java"

======= c1260e6^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmBuilder.java"

======= c1260e6^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmBuilder.java"

======= c1260e6^:"org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmBuilder.java"

======= c1260e6^:"weaver/src/org/aspectj/weaver/AsmAdaptor.java"

======= c1260e6^:"weaver/src/org/aspectj/weaver/AsmAdaptor.java"

======= c1260e6^:"weaver/src/org/aspectj/weaver/AsmAdaptor.java"

======= c1260e6^:"weaver/src/org/aspectj/weaver/AsmAdaptor.java"

======= c1260e6^:"weaver/src/org/aspectj/weaver/Lint.java"

======= c1260e6^:"weaver/src/org/aspectj/weaver/ResolvedTypeX.java"

======= c1260e6^:"weaver/src/org/aspectj/weaver/Shadow.java"

======= c1260e6^:"weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java"


======= 2781720^:"weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java"

        if (!m.isAbstract() && m.getCode() == null) {
======= 2781720^:"weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java"

======= 2781720^:"weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java"

======= 2781720^:"weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java"

======= 2781720^:"weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java"

         * a 1:1 mapping.  
======= 2781720^:"weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java"


======= 99a873c^:"weaver/src/org/aspectj/weaver/AjcMemberMaker.java"

======= 99a873c^:"weaver/src/org/aspectj/weaver/AjcMemberMaker.java"

======= 99a873c^:"weaver/src/org/aspectj/weaver/AjcMemberMaker.java"

======= 99a873c^:"weaver/src/org/aspectj/weaver/AjcMemberMaker.java"

