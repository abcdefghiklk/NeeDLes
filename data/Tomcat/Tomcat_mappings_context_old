
======= 42056be^:"java/org/apache/jasper/compiler/PageInfo.java"

    public void setExtends(String value, Node.PageDirective n) {
        /*
         * If page superclass is top level class (i.e. not in a package)
         * explicitly import it. If this is not done, the compiler will assume
         * the extended class is in the same pkg as the generated servlet.
         */
        if (value.indexOf('.') < 0)
            n.addImport(value);
======= 42056be^:"java/org/apache/jasper/compiler/Validator.java"

                        pageInfo.setExtends(value, n);

======= b430e29^:"java/org/apache/jasper/compiler/ELParser.java"

        while (hasNext()) {
======= b430e29^:"java/org/apache/jasper/compiler/ELParser.java"

        if (hasNext()) {
                if (hasNext()) {
                        if (hasNext()) {
======= b430e29^:"java/org/apache/jasper/compiler/ELParser.java"

            int result = reservedWords[k].compareTo(id);
======= b430e29^:"java/org/apache/jasper/compiler/ELParser.java"

     * @return true if there is something left in EL expression buffer other
     * than white spaces.
     */
    private boolean hasNext() {
        skipSpaces();
        return hasNextChar();
    }
    /*
        skipSpaces();
======= b430e29^:"java/org/apache/jasper/compiler/ELParser.java"

    private void skipSpaces() {
        while (hasNextChar()) {
            if (expression.charAt(index) > ' ')
                break;
            index++;
        }
    }
======= b430e29^:"test/org/apache/jasper/compiler/TestELParser.java"


======= f28800c^:"java/org/apache/catalina/loader/WebappClassLoader.java"

        this.parent = getParent();
        system = getSystemClassLoader();
        securityManager = System.getSecurityManager();
======= f28800c^:"java/org/apache/catalina/loader/WebappClassLoader.java"

        this.parent = getParent();
        system = getSystemClassLoader();
        securityManager = System.getSecurityManager();
======= f28800c^:"java/org/apache/catalina/loader/WebappClassLoader.java"

    protected ClassLoader parent = null;
     * The system class loader.
    protected final ClassLoader system;
======= f28800c^:"java/org/apache/catalina/loader/WebappClassLoader.java"

        WebappClassLoader result = new WebappClassLoader(this.parent);
======= f28800c^:"java/org/apache/catalina/loader/WebappClassLoader.java"

            ClassLoader loader = parent;
            if (loader == null)
                loader = system;
            url = loader.getResource(name);
======= f28800c^:"java/org/apache/catalina/loader/WebappClassLoader.java"

            ClassLoader loader = parent;
            if (loader == null)
                loader = system;
            url = loader.getResource(name);
======= f28800c^:"java/org/apache/catalina/loader/WebappClassLoader.java"

            ClassLoader loader = parent;
            if (loader == null)
                loader = system;
            stream = loader.getResourceAsStream(name);
======= f28800c^:"java/org/apache/catalina/loader/WebappClassLoader.java"

            ClassLoader loader = parent;
            if (loader == null)
                loader = system;
            stream = loader.getResourceAsStream(name);
======= f28800c^:"java/org/apache/catalina/loader/WebappClassLoader.java"

        if (system.getResource(resourceName) != null) {
                clazz = system.loadClass(name);
======= f28800c^:"java/org/apache/catalina/loader/WebappClassLoader.java"

            ClassLoader loader = parent;
            if (loader == null)
                loader = system;
                clazz = Class.forName(name, false, loader);
======= f28800c^:"java/org/apache/catalina/loader/WebappClassLoader.java"

            ClassLoader loader = parent;
            if (loader == null)
                loader = system;
                clazz = Class.forName(name, false, loader);
======= f28800c^:"java/org/apache/catalina/loader/WebappClassLoader.java"

        parent = null;

======= 11b1e83^:"java/org/apache/tomcat/websocket/server/UpgradeUtil.java"

        if (!subProtocols.isEmpty()) {
            subProtocol = sec.getConfigurator().
                    getNegotiatedSubprotocol(
                            sec.getSubprotocols(), subProtocols);
        }
======= 11b1e83^:"java/org/apache/tomcat/websocket/server/UpgradeUtil.java"

        Endpoint ep;
        try {
            Class<?> clazz = sec.getEndpointClass();
            if (Endpoint.class.isAssignableFrom(clazz)) {
                ep = (Endpoint) sec.getConfigurator().getEndpointInstance(
                        clazz);
            } else {
                ep = new PojoEndpointServer();
            }
        } catch (InstantiationException e) {
            throw new ServletException(e);
        }
======= 11b1e83^:"java/org/apache/tomcat/websocket/server/UpgradeUtil.java"


======= 48650dd^:"java/org/apache/jasper/runtime/PageContextImpl.java"

======= 48650dd^:"java/org/apache/jasper/runtime/PageContextImpl.java"

======= 48650dd^:"test/org/apache/jasper/runtime/TestPageContextImpl.java"

======= 48650dd^:"test/org/apache/jasper/runtime/TestPageContextImpl.java"


======= 553ad39^:"java/org/apache/tomcat/util/net/SocketWrapper.java"

    public void access() { access(System.currentTimeMillis()); }

======= 5e6b884^:"java/org/apache/jasper/compiler/TldCache.java"

            URL url = servletContext.getResource(tldResourcePath.getWebappPath());
            URLConnection conn = url.openConnection();
            result[0] = conn.getLastModified();
            if ("file".equals(url.getProtocol())) {
                // Reading the last modified time opens an input stream so we
                // need to make sure it is closed again otherwise the TLD file
                // will be locked until GC runs.
                conn.getInputStream().close();

======= 92ce68a^:"java/org/apache/catalina/valves/AccessLogValve.java"

 * <p>Implementation of the <b>Valve</b> interface that generates a web server
 * access log with the detailed line contents matching a configurable pattern.
 * The syntax of the available patterns is similar to that supported by the
 * <a href="http://httpd.apache.org/">Apache HTTP Server</a>
 * <code>mod_log_config</code> module.  As an additional feature,
 * automatic rollover of log files when the date changes is also supported.</p>
 *
 * <p>Patterns for the logged message may include constant text or any of the
 * following replacement strings, for which the corresponding information
 * from the specified Response is substituted:</p>
 * <ul>
 * <li><b>%a</b> - Remote IP address
 * <li><b>%A</b> - Local IP address
 * <li><b>%b</b> - Bytes sent, excluding HTTP headers, or '-' if no bytes
 *     were sent
 * <li><b>%B</b> - Bytes sent, excluding HTTP headers
 * <li><b>%h</b> - Remote host name (or IP address if
 * <code>enableLookups</code> for the connector is false)
 * <li><b>%H</b> - Request protocol
 * <li><b>%l</b> - Remote logical username from identd (always returns '-')
 * <li><b>%m</b> - Request method
 * <li><b>%p</b> - Local port
 * <li><b>%q</b> - Query string (prepended with a '?' if it exists, otherwise
 *     an empty string
 * <li><b>%r</b> - First line of the request
 * <li><b>%s</b> - HTTP status code of the response
 * <li><b>%S</b> - User session ID
 * <li><b>%t</b> - Date and time, in Common Log Format format
 * <li><b>%t{format}</b> - Date and time, in any format supported by SimpleDateFormat
 * <li><b>%u</b> - Remote user that was authenticated
 * <li><b>%U</b> - Requested URL path
 * <li><b>%v</b> - Local server name
 * <li><b>%D</b> - Time taken to process the request, in millis
 * <li><b>%T</b> - Time taken to process the request, in seconds
 * <li><b>%I</b> - current Request thread name (can compare later with stacktraces)
 * </ul>
 * <p>In addition, the caller can specify one of the following aliases for
 * commonly utilized patterns:</p>
 * <ul>
 * <li><b>common</b> - <code>%h %l %u %t "%r" %s %b</code>
 * <li><b>combined</b> -
 *   <code>%h %l %u %t "%r" %s %b "%{Referer}i" "%{User-Agent}i"</code>
 * </ul>
 *
 * <p>
 * There is also support to write information from the cookie, incoming
 * header, the Session or something else in the ServletRequest.<br>
 * It is modeled after the
 * <a href="http://httpd.apache.org/">Apache HTTP Server</a> log configuration
 * syntax:</p>
 * <li><code>%{xxx}i</code> for incoming headers
 * <li><code>%{xxx}o</code> for outgoing response headers
 * <li><code>%{xxx}c</code> for a specific cookie
 * <li><code>%{xxx}r</code> xxx is an attribute in the ServletRequest
 * <li><code>%{xxx}s</code> xxx is an attribute in the HttpSession
 * <li><code>%{xxx}t</code> xxx is an enhanced SimpleDateFormat pattern
 * (see Configuration Reference document for details on supported time patterns)
 *
 * <p>
 * Log rotation can be on or off. This is dictated by the
 * <code>rotatable</code> property.
 * </p>
 *
======= 92ce68a^:"java/org/apache/catalina/valves/AccessLogValve.java"

 *
 * <p>
 * Conditional logging is also supported. This can be done with the
 * <code>conditionUnless</code> and <code>conditionIf</code> properties.
 * If the value returned from ServletRequest.getAttribute(conditionUnless)
 * yields a non-null value, the logging will be skipped.
 * If the value returned from ServletRequest.getAttribute(conditionIf)
 * yields the null value, the logging will be skipped.
 * The <code>condition</code> attribute is synonym for
 * <code>conditionUnless</code> and is provided for backwards compatibility.
 * </p>
 *
 * <p>
 * For extended attributes coming from a getAttribute() call,
 * it is you responsibility to ensure there are no newline or
 * control characters.
 * </p>
 *
 * @author Craig R. McClanahan
 * @author Jason Brittain
 * @author Remy Maucherat
 * @author Takayuki Kaneko
 * @author Peter Rossbach
 *
 * @version $Id$
        super(true);
======= 92ce68a^:"java/org/apache/catalina/valves/AccessLogValve.java"

    /**
     * enabled this component
     */
    protected boolean enabled = true;
    /**
     * The pattern used to format our access log lines.
     */
    protected String pattern = null;
======= 92ce68a^:"java/org/apache/catalina/valves/AccessLogValve.java"

     * The size of our global date format cache
     */
    private static final int globalCacheSize = 300;
    /**
     * The size of our thread local date format cache
     */
    private static final int localCacheSize = 60;
    /**
     * <p>Cache structure for formatted timestamps based on seconds.</p>
     *
     * <p>The cache consists of entries for a consecutive range of
     * seconds. The length of the range is configurable. It is
     * implemented based on a cyclic buffer. New entries shift the range.</p>
     *
     * <p>There is one cache for the CLF format (the access log standard
     * format) and a HashMap of caches for additional formats used by
     * SimpleDateFormat.</p>
     *
     * <p>Although the cache supports specifying a locale when retrieving a
     * formatted timestamp, each format will always use the locale given
     * when the format was first used. New locales can only be used for new formats.
     * The CLF format will always be formatted using the locale
     * <code>en_US</code>.</p>
     *
     * <p>The cache is not threadsafe. It can be used without synchronization
     * via thread local instances, or with synchronization as a global cache.</p>
     *
     * <p>The cache can be created with a parent cache to build a cache hierarchy.
     * Access to the parent cache is threadsafe.</p>
     *
     * <p>This class uses a small thread local first level cache and a bigger
     * synchronized global second level cache.</p>
     */
    protected static class DateFormatCache {
        protected class Cache {
            /* CLF log format */
            private static final String cLFFormat = "dd/MMM/yyyy:HH:mm:ss Z";
            /* Second used to retrieve CLF format in most recent invocation */
            private long previousSeconds = Long.MIN_VALUE;
            /* Value of CLF format retrieved in most recent invocation */
            private String previousFormat = "";
            /* First second contained in cache */
            private long first = Long.MIN_VALUE;
            /* Last second contained in cache */
            private long last = Long.MIN_VALUE;
            /* Index of "first" in the cyclic cache */
            private int offset = 0;
            /* Helper object to be able to call SimpleDateFormat.format(). */
            private final Date currentDate = new Date();
            protected final String cache[];
            private SimpleDateFormat formatter;
            private boolean isCLF = false;
            private Cache parent = null;
            private Cache(Cache parent) {
                this(null, parent);
            }
            private Cache(String format, Cache parent) {
                this(format, null, parent);
            }
            private Cache(String format, Locale loc, Cache parent) {
                cache = new String[cacheSize];
                for (int i = 0; i < cacheSize; i++) {
                    cache[i] = null;
                }
                if (loc == null) {
                    loc = cacheDefaultLocale;
                }
                if (format == null) {
                    isCLF = true;
                    format = cLFFormat;
                    formatter = new SimpleDateFormat(format, Locale.US);
                } else {
                    formatter = new SimpleDateFormat(format, loc);
                }
                formatter.setTimeZone(TimeZone.getDefault());
                this.parent = parent;
            }
            private String getFormatInternal(long time) {
                long seconds = time / 1000;
                /* First step: if we have seen this timestamp
                   during the previous call, and we need CLF, return the previous value. */
                if (seconds == previousSeconds) {
                    return previousFormat;
                }
                /* Second step: Try to locate in cache */
                previousSeconds = seconds;
                int index = (offset + (int)(seconds - first)) % cacheSize;
                if (index < 0) {
                    index += cacheSize;
                }
                if (seconds >= first && seconds <= last) {
                    if (cache[index] != null) {
                        /* Found, so remember for next call and return.*/
                        previousFormat = cache[index];
                        return previousFormat;
                    }
                /* Third step: not found in cache, adjust cache and add item */
                } else if (seconds >= last + cacheSize || seconds <= first - cacheSize) {
                    first = seconds;
                    last = first + cacheSize - 1;
                    index = 0;
                    offset = 0;
                    for (int i = 1; i < cacheSize; i++) {
                        cache[i] = null;
                    }
                } else if (seconds > last) {
                    for (int i = 1; i < seconds - last; i++) {
                        cache[(index + cacheSize - i) % cacheSize] = null;
                    }
                    first = seconds - (cacheSize - 1);
                    last = seconds;
                    offset = (index + 1) % cacheSize;
                } else if (seconds < first) {
                    for (int i = 1; i < first - seconds; i++) {
                        cache[(index + i) % cacheSize] = null;
                    }
                    first = seconds;
                    last = seconds + (cacheSize - 1);
                    offset = index;
                }
                /* Last step: format new timestamp either using
                 * parent cache or locally. */
                if (parent != null) {
                    synchronized(parent) {
                        previousFormat = parent.getFormatInternal(time);
                    }
                } else {
                    currentDate.setTime(time);
                    previousFormat = formatter.format(currentDate);
                    if (isCLF) {
                        StringBuilder current = new StringBuilder(32);
                        current.append('[');
                        current.append(previousFormat);
                        current.append(']');
                        previousFormat = current.toString();
                    }
                }
                cache[index] = previousFormat;
                return previousFormat;
            }
        }
        /* Number of cached entries */
        private int cacheSize = 0;
        private final Locale cacheDefaultLocale;
        private final DateFormatCache parent;
        protected final Cache cLFCache;
        private final HashMap<String, Cache> formatCache = new HashMap<>();
        protected DateFormatCache(int size, Locale loc, DateFormatCache parent) {
            cacheSize = size;
            cacheDefaultLocale = loc;
            this.parent = parent;
            Cache parentCache = null;
            if (parent != null) {
                synchronized(parent) {
                    parentCache = parent.getCache(null, null);
                }
            }
            cLFCache = new Cache(parentCache);
        }
        private Cache getCache(String format, Locale loc) {
            Cache cache;
            if (format == null) {
                cache = cLFCache;
            } else {
                cache = formatCache.get(format);
                if (cache == null) {
                    Cache parentCache = null;
                    if (parent != null) {
                        synchronized(parent) {
                            parentCache = parent.getCache(format, loc);
                        }
                    }
                    cache = new Cache(format, loc, parentCache);
                    formatCache.put(format, cache);
                }
            }
            return cache;
        }
        public String getFormat(long time) {
            return cLFCache.getFormatInternal(time);
        }
        public String getFormat(String format, Locale loc, long time) {
            return getCache(format, loc).getFormatInternal(time);
        }
    }
    /**
     * Global date format cache.
     */
    private static final DateFormatCache globalDateCache =
            new DateFormatCache(globalCacheSize, Locale.getDefault(), null);
    /**
     * Thread local date format cache.
     */
    private static final ThreadLocal<DateFormatCache> localDateCache =
            new ThreadLocal<DateFormatCache>() {
        @Override
        protected DateFormatCache initialValue() {
            return new DateFormatCache(localCacheSize, Locale.getDefault(), globalDateCache);
        }
    };
    /**
     * The system time when we last updated the Date that this valve
     * uses for log lines.
     */
    private static final ThreadLocal<Date> localDate =
            new ThreadLocal<Date>() {
        @Override
        protected Date initialValue() {
            return new Date();
        }
    };
    /**
     * The list of our format types.
     */
    private static enum FormatType {
        CLF, SEC, MSEC, MSEC_FRAC, SDF
    }
    /**
======= 92ce68a^:"java/org/apache/catalina/valves/AccessLogValve.java"

    /**
     * Are we doing conditional logging. default null.
     * It is the value of <code>conditionUnless</code> property.
     */
    protected String condition = null;
    /**
     * Are we doing conditional logging. default null.
     * It is the value of <code>conditionIf</code> property.
     */
    protected String conditionIf = null;
    /**
     * Name of locale used to format timestamps in log entries and in
     * log file name suffix.
     */
    protected String localeName = Locale.getDefault().toString();
    /**
     * Locale used to format timestamps in log entries and in
     * log file name suffix.
     */
    protected Locale locale = Locale.getDefault();
======= 92ce68a^:"java/org/apache/catalina/valves/AccessLogValve.java"

    /**
     * Array of AccessLogElement, they will be used to make log message.
     */
    protected AccessLogElement[] logElements = null;
    /**
     * @see #setRequestAttributesEnabled(boolean)
     */
    protected boolean requestAttributesEnabled = false;
    /**
     * Buffer pool used for log message generation. Pool used to reduce garbage
     * generation.
     */
    private SynchronizedStack<CharArrayWriter> charArrayWriters =
            new SynchronizedStack<>();
    /**
     * Log message buffers are usually recycled and re-used. To prevent
     * excessive memory usage, if a buffer grows beyond this size it will be
     * discarded. The default is 256 characters. This should be set to larger
     * than the typical access log message size.
     */
    private int maxLogMessageBufferSize = 256;
    public int getMaxLogMessageBufferSize() {
        return maxLogMessageBufferSize;
    }
    public void setMaxLogMessageBufferSize(int maxLogMessageBufferSize) {
        this.maxLogMessageBufferSize = maxLogMessageBufferSize;
    }
    /**
     * {@inheritDoc}
     */
    @Override
    public void setRequestAttributesEnabled(boolean requestAttributesEnabled) {
        this.requestAttributesEnabled = requestAttributesEnabled;
    }
    /**
     * {@inheritDoc}
     */
    @Override
    public boolean getRequestAttributesEnabled() {
        return requestAttributesEnabled;
    }
    /**
     * @return Returns the enabled.
     */
    public boolean getEnabled() {
        return enabled;
    }
    /**
     * @param enabled
     *            The enabled to set.
     */
    public void setEnabled(boolean enabled) {
        this.enabled = enabled;
    }
======= 92ce68a^:"java/org/apache/catalina/valves/AccessLogValve.java"

    /**
     * Return the format pattern.
     */
    public String getPattern() {
        return (this.pattern);
    }
    /**
     * Set the format pattern, first translating any recognized alias.
     *
     * @param pattern The new pattern
     */
    public void setPattern(String pattern) {
        if (pattern == null) {
            this.pattern = "";
        } else if (pattern.equals(Constants.AccessLog.COMMON_ALIAS)) {
            this.pattern = Constants.AccessLog.COMMON_PATTERN;
        } else if (pattern.equals(Constants.AccessLog.COMBINED_ALIAS)) {
            this.pattern = Constants.AccessLog.COMBINED_PATTERN;
        } else {
            this.pattern = pattern;
        }
        logElements = createLogElements();
    }
======= 92ce68a^:"java/org/apache/catalina/valves/AccessLogValve.java"

    /**
     * Return whether the attribute name to look for when
     * performing conditional logging. If null, every
     * request is logged.
     */
    public String getCondition() {
        return condition;
    }
    /**
     * Set the ServletRequest.attribute to look for to perform
     * conditional logging. Set to null to log everything.
     *
     * @param condition Set to null to log everything
     */
    public void setCondition(String condition) {
        this.condition = condition;
    }
    /**
     * Return whether the attribute name to look for when
     * performing conditional logging. If null, every
     * request is logged.
     */
    public String getConditionUnless() {
        return getCondition();
    }
    /**
     * Set the ServletRequest.attribute to look for to perform
     * conditional logging. Set to null to log everything.
     *
     * @param condition Set to null to log everything
     */
    public void setConditionUnless(String condition) {
        setCondition(condition);
    }
    /**
     * Return whether the attribute name to look for when
     * performing conditional logging. If null, every
     * request is logged.
     */
    public String getConditionIf() {
        return conditionIf;
    }
    /**
     * Set the ServletRequest.attribute to look for to perform
     * conditional logging. Set to null to log everything.
     *
     * @param condition Set to null to log everything
     */
    public void setConditionIf(String condition) {
        this.conditionIf = condition;
    }
======= 92ce68a^:"java/org/apache/catalina/valves/AccessLogValve.java"

    /**
     * Return the locale used to format timestamps in log entries and in
     * log file name suffix.
     */
    public String getLocale() {
        return localeName;
    }
    /**
     * Set the locale used to format timestamps in log entries and in
     * log file name suffix. Changing the locale is only supported
     * as long as the AccessLogValve has not logged anything. Changing
     * the locale later can lead to inconsistent formatting.
     *
     * @param localeName The locale to use.
     */
    public void setLocale(String localeName) {
        this.localeName = localeName;
        locale = findLocale(localeName, locale);
    }
======= 92ce68a^:"java/org/apache/catalina/valves/AccessLogValve.java"

     * Log a message summarizing the specified request and response, according
     * to the format specified by the <code>pattern</code> property.
     *
     * @param request Request being processed
     * @param response Response being processed
     *
     * @exception IOException if an input/output error has occurred
     * @exception ServletException if a servlet error has occurred
     */
    @Override
    public void invoke(Request request, Response response) throws IOException,
            ServletException {
        getNext().invoke(request, response);
    }
    @Override
    public void log(Request request, Response response, long time) {
        if (!getState().isAvailable() || !getEnabled() || logElements == null
                || condition != null
                && null != request.getRequest().getAttribute(condition)
                || conditionIf != null
                && null == request.getRequest().getAttribute(conditionIf)) {
            return;
        }
        /**
         * XXX This is a bit silly, but we want to have start and stop time and
         * duration consistent. It would be better to keep start and stop
         * simply in the request and/or response object and remove time
         * (duration) from the interface.
         */
        long start = request.getCoyoteRequest().getStartTime();
        Date date = getDate(start + time);
        CharArrayWriter result = charArrayWriters.pop();
        if (result == null) {
            result = new CharArrayWriter(128);
        }
        for (int i = 0; i < logElements.length; i++) {
            logElements[i].addElement(result, date, request, response, time);
        }
        log(result);
        if (result.size() <= maxLogMessageBufferSize) {
            result.reset();
            charArrayWriters.push(result);
        }
    }
    /**
======= 92ce68a^:"java/org/apache/catalina/valves/AccessLogValve.java"

======= 92ce68a^:"java/org/apache/catalina/valves/AccessLogValve.java"

     * This method returns a Date object that is accurate to within one second.
     * If a thread calls this method to get a Date and it's been less than 1
     * second since a new Date was created, this method simply gives out the
     * same Date again so that the system doesn't spend time creating Date
     * objects unnecessarily.
     *
     * @return Date
     */
    private static Date getDate(long systime) {
        Date date = localDate.get();
        date.setTime(systime);
        return date;
    }
    /**
     * Find a locale by name
     */
    protected static Locale findLocale(String name, Locale fallback) {
        if (name == null || name.isEmpty()) {
            return Locale.getDefault();
        } else {
            for (Locale l: Locale.getAvailableLocales()) {
                if (name.equals(l.toString())) {
                    return(l);
                }
            }
        }
        log.error(sm.getString("accessLogValve.invalidLocale", name));
        return fallback;
    }
    /**
======= 92ce68a^:"java/org/apache/catalina/valves/AccessLogValve.java"

        setState(LifecycleState.STARTING);
======= 92ce68a^:"java/org/apache/catalina/valves/AccessLogValve.java"

        setState(LifecycleState.STOPPING);
    /**
     * AccessLogElement writes the partial message into the buffer.
     */
    protected interface AccessLogElement {
        public void addElement(CharArrayWriter buf, Date date, Request request,
                Response response, long time);
    }
    /**
     * write thread name - %I
     */
    protected static class ThreadNameElement implements AccessLogElement {
        @Override
        public void addElement(CharArrayWriter buf, Date date, Request request,
                Response response, long time) {
            RequestInfo info = request.getCoyoteRequest().getRequestProcessor();
            if(info != null) {
                buf.append(info.getWorkerThreadName());
            } else {
                buf.append("-");
            }
        }
    }
    /**
     * write local IP address - %A
     */
    protected static class LocalAddrElement implements AccessLogElement {
        private static final String LOCAL_ADDR_VALUE;
        static {
            String init;
            try {
                init = InetAddress.getLocalHost().getHostAddress();
            } catch (Throwable e) {
                ExceptionUtils.handleThrowable(e);
                init = "127.0.0.1";
            }
            LOCAL_ADDR_VALUE = init;
        }
        @Override
        public void addElement(CharArrayWriter buf, Date date, Request request,
                Response response, long time) {
            buf.append(LOCAL_ADDR_VALUE);
        }
    }
    /**
     * write remote IP address - %a
     */
    protected class RemoteAddrElement implements AccessLogElement {
        @Override
        public void addElement(CharArrayWriter buf, Date date, Request request,
                Response response, long time) {
            if (requestAttributesEnabled) {
                Object addr = request.getAttribute(REMOTE_ADDR_ATTRIBUTE);
                if (addr == null) {
                    buf.append(request.getRemoteAddr());
                } else {
                    buf.append(addr.toString());
                }
            } else {
                buf.append(request.getRemoteAddr());
            }
        }
    }
    /**
     * write remote host name - %h
     */
    protected class HostElement implements AccessLogElement {
        @Override
        public void addElement(CharArrayWriter buf, Date date, Request request,
                Response response, long time) {
            String value = null;
            if (requestAttributesEnabled) {
                Object host = request.getAttribute(REMOTE_HOST_ATTRIBUTE);
                if (host != null) {
                    value = host.toString();
                }
            }
            if (value == null || value.length() == 0) {
                value = request.getRemoteHost();
            }
            if (value == null || value.length() == 0) {
                value = "-";
            }
            buf.append(value);
        }
    }
    /**
     * write remote logical username from identd (always returns '-') - %l
     */
    protected static class LogicalUserNameElement implements AccessLogElement {
        @Override
        public void addElement(CharArrayWriter buf, Date date, Request request,
                Response response, long time) {
            buf.append('-');
        }
    }
    /**
     * write request protocol - %H
     */
    protected class ProtocolElement implements AccessLogElement {
        @Override
        public void addElement(CharArrayWriter buf, Date date, Request request,
                Response response, long time) {
            if (requestAttributesEnabled) {
                Object proto = request.getAttribute(PROTOCOL_ATTRIBUTE);
                if (proto == null) {
                    buf.append(request.getProtocol());
                } else {
                    buf.append(proto.toString());
                }
            } else {
                buf.append(request.getProtocol());
            }
        }
    }
    /**
     * write remote user that was authenticated (if any), else '-' - %u
     */
    protected static class UserElement implements AccessLogElement {
        @Override
        public void addElement(CharArrayWriter buf, Date date, Request request,
                Response response, long time) {
            if (request != null) {
                String value = request.getRemoteUser();
                if (value != null) {
                    buf.append(value);
                } else {
                    buf.append('-');
                }
            } else {
                buf.append('-');
            }
        }
    }
    /**
     * write date and time, in configurable format (default CLF) - %t or %t{format}
     */
    protected class DateAndTimeElement implements AccessLogElement {
        /**
         * Format prefix specifying request start time
         */
        private static final String requestStartPrefix = "begin";
        /**
         * Format prefix specifying response end time
         */
        private static final String responseEndPrefix = "end";
        /**
         * Separator between optional prefix and rest of format
         */
        private static final String prefixSeparator = ":";
        /**
         * Special format for seconds since epoch
         */
        private static final String secFormat = "sec";
        /**
         * Special format for milliseconds since epoch
         */
        private static final String msecFormat = "msec";
        /**
         * Special format for millisecond part of timestamp
         */
        private static final String msecFractionFormat = "msec_frac";
        /**
         * The patterns we use to replace "S" and "SSS" millisecond
         * formatting of SimpleDateFormat by our own handling
         */
        private static final String msecPattern = "{#}";
        private static final String trippleMsecPattern =
            msecPattern + msecPattern + msecPattern;
        /* Our format description string, null if CLF */
        private final String format;
        /* Whether to use begin of request or end of response as the timestamp */
        private final boolean usesBegin;
        /* The format type */
        private final FormatType type;
        /* Whether we need to postprocess by adding milliseconds */
        private boolean usesMsecs = false;
        protected DateAndTimeElement() {
            this(null);
        }
        /**
         * Replace the millisecond formatting character 'S' by
         * some dummy characters in order to make the resulting
         * formatted time stamps cacheable. We replace the dummy
         * chars later with the actual milliseconds because that's
         * relatively cheap.
         */
        private String tidyFormat(String format) {
            boolean escape = false;
            StringBuilder result = new StringBuilder();
            int len = format.length();
            char x;
            for (int i = 0; i < len; i++) {
                x = format.charAt(i);
                if (escape || x != 'S') {
                    result.append(x);
                } else {
                    result.append(msecPattern);
                    usesMsecs = true;
                }
                if (x == '\'') {
                    escape = !escape;
                }
            }
            return result.toString();
        }
        protected DateAndTimeElement(String header) {
            String format = header;
            boolean usesBegin = false;
            FormatType type = FormatType.CLF;
            if (format != null) {
                if (format.equals(requestStartPrefix)) {
                    usesBegin = true;
                    format = "";
                } else if (format.startsWith(requestStartPrefix + prefixSeparator)) {
                    usesBegin = true;
                    format = format.substring(6);
                } else if (format.equals(responseEndPrefix)) {
                    usesBegin = false;
                    format = "";
                } else if (format.startsWith(responseEndPrefix + prefixSeparator)) {
                    usesBegin = false;
                    format = format.substring(4);
                }
                if (format.length() == 0) {
                    type = FormatType.CLF;
                } else if (format.equals(secFormat)) {
                    type = FormatType.SEC;
                } else if (format.equals(msecFormat)) {
                    type = FormatType.MSEC;
                } else if (format.equals(msecFractionFormat)) {
                    type = FormatType.MSEC_FRAC;
                } else {
                    type = FormatType.SDF;
                    format = tidyFormat(format);
                }
            }
            this.format = format;
            this.usesBegin = usesBegin;
            this.type = type;
        }
        @Override
        public void addElement(CharArrayWriter buf, Date date, Request request,
                Response response, long time) {
            long timestamp = date.getTime();
            long frac;
            if (usesBegin) {
                timestamp -= time;
            }
            switch (type) {
            case CLF:
                buf.append(localDateCache.get().getFormat(timestamp));
                break;
            case SEC:
                buf.append(Long.toString(timestamp / 1000));
                break;
            case MSEC:
                buf.append(Long.toString(timestamp));
                break;
            case MSEC_FRAC:
                frac = timestamp % 1000;
                if (frac < 100) {
                    if (frac < 10) {
                        buf.append('0');
                        buf.append('0');
                    } else {
                        buf.append('0');
                    }
                }
                buf.append(Long.toString(frac));
                break;
            case SDF:
                String temp = localDateCache.get().getFormat(format, locale, timestamp);
                if (usesMsecs) {
                    frac = timestamp % 1000;
                    StringBuilder trippleMsec = new StringBuilder(4);
                    if (frac < 100) {
                        if (frac < 10) {
                            trippleMsec.append('0');
                            trippleMsec.append('0');
                        } else {
                            trippleMsec.append('0');
                        }
                    }
                    trippleMsec.append(frac);
                    temp = temp.replace(trippleMsecPattern, trippleMsec);
                    temp = temp.replace(msecPattern, Long.toString(frac));
                }
                buf.append(temp);
                break;
            }
        }
    }
    /**
     * write first line of the request (method and request URI) - %r
     */
    protected static class RequestElement implements AccessLogElement {
        @Override
        public void addElement(CharArrayWriter buf, Date date, Request request,
                Response response, long time) {
            if (request != null) {
                String method = request.getMethod();
                if (method == null) {
                    // No method means no request line
                    buf.append('-');
                } else {
                    buf.append(request.getMethod());
                    buf.append(' ');
                    buf.append(request.getRequestURI());
                    if (request.getQueryString() != null) {
                        buf.append('?');
                        buf.append(request.getQueryString());
                    }
                    buf.append(' ');
                    buf.append(request.getProtocol());
                }
            } else {
                buf.append('-');
            }
        }
    }
    /**
     * write HTTP status code of the response - %s
     */
    protected static class HttpStatusCodeElement implements AccessLogElement {
        @Override
        public void addElement(CharArrayWriter buf, Date date, Request request,
                Response response, long time) {
            if (response != null) {
                // This approach is used to reduce GC from toString conversion
                int status = response.getStatus();
                if (100 <= status && status < 1000) {
                    buf.append((char) ('0' + (status / 100)))
                            .append((char) ('0' + ((status / 10) % 10)))
                            .append((char) ('0' + (status % 10)));
                } else {
                   buf.append(Integer.toString(status));
                }
            } else {
                buf.append('-');
            }
        }
    }
    /**
     * write local port on which this request was received - %p
     */
    protected class LocalPortElement implements AccessLogElement {
        @Override
        public void addElement(CharArrayWriter buf, Date date, Request request,
                Response response, long time) {
            if (requestAttributesEnabled) {
                Object port = request.getAttribute(SERVER_PORT_ATTRIBUTE);
                if (port == null) {
                    buf.append(Integer.toString(request.getServerPort()));
                } else {
                    buf.append(port.toString());
                }
            } else {
                buf.append(Integer.toString(request.getServerPort()));
            }
        }
    }
    /**
     * write bytes sent, excluding HTTP headers - %b, %B
     */
    protected static class ByteSentElement implements AccessLogElement {
        private final boolean conversion;
        /**
         * if conversion is true, write '-' instead of 0 - %b
         */
        public ByteSentElement(boolean conversion) {
            this.conversion = conversion;
        }
        @Override
        public void addElement(CharArrayWriter buf, Date date, Request request,
                Response response, long time) {
            // Don't need to flush since trigger for log message is after the
            // response has been committed
            long length = response.getBytesWritten(false);
            if (length <= 0) {
                // Protect against nulls and unexpected types as these values
                // may be set by untrusted applications
                Object start = request.getAttribute(
                        Globals.SENDFILE_FILE_START_ATTR);
                if (start instanceof Long) {
                    Object end = request.getAttribute(
                            Globals.SENDFILE_FILE_END_ATTR);
                    if (end instanceof Long) {
                        length = ((Long) end).longValue() -
                                ((Long) start).longValue();
                    }
                }
            }
            if (length <= 0 && conversion) {
                buf.append('-');
            } else {
                buf.append(Long.toString(length));
            }
        }
    }
    /**
     * write request method (GET, POST, etc.) - %m
     */
    protected static class MethodElement implements AccessLogElement {
        @Override
        public void addElement(CharArrayWriter buf, Date date, Request request,
                Response response, long time) {
            if (request != null) {
                buf.append(request.getMethod());
            }
        }
    }
    /**
     * write time taken to process the request - %D, %T
     */
    protected static class ElapsedTimeElement implements AccessLogElement {
        private final boolean millis;
        /**
         * if millis is true, write time in millis - %D
         * if millis is false, write time in seconds - %T
         */
        public ElapsedTimeElement(boolean millis) {
            this.millis = millis;
        }
        @Override
        public void addElement(CharArrayWriter buf, Date date, Request request,
                Response response, long time) {
            if (millis) {
                buf.append(Long.toString(time));
            } else {
                // second
                buf.append(Long.toString(time / 1000));
                buf.append('.');
                int remains = (int) (time % 1000);
                buf.append(Long.toString(remains / 100));
                remains = remains % 100;
                buf.append(Long.toString(remains / 10));
                buf.append(Long.toString(remains % 10));
            }
        }
    }
    /**
     * write time until first byte is written (commit time) in millis - %F
     */
    protected static class FirstByteTimeElement implements AccessLogElement {
        @Override
        public void addElement(CharArrayWriter buf, Date date, Request request, Response response, long time) {
            long commitTime = response.getCoyoteResponse().getCommitTime();
            if (commitTime == -1) {
                buf.append('-');
            } else {
                long delta = commitTime - request.getCoyoteRequest().getStartTime();
                buf.append(Long.toString(delta));
            }
        }
    }
    /**
     * write Query string (prepended with a '?' if it exists) - %q
     */
    protected static class QueryElement implements AccessLogElement {
        @Override
        public void addElement(CharArrayWriter buf, Date date, Request request,
                Response response, long time) {
            String query = null;
            if (request != null) {
                query = request.getQueryString();
            }
            if (query != null) {
                buf.append('?');
                buf.append(query);
            }
        }
    }
    /**
     * write user session ID - %S
     */
    protected static class SessionIdElement implements AccessLogElement {
        @Override
        public void addElement(CharArrayWriter buf, Date date, Request request,
                Response response, long time) {
            if (request == null) {
                buf.append('-');
            } else {
                Session session = request.getSessionInternal(false);
                if (session == null) {
                    buf.append('-');
                } else {
                    buf.append(session.getIdInternal());
                }
            }
        }
    }
    /**
     * write requested URL path - %U
     */
    protected static class RequestURIElement implements AccessLogElement {
        @Override
        public void addElement(CharArrayWriter buf, Date date, Request request,
                Response response, long time) {
            if (request != null) {
                buf.append(request.getRequestURI());
            } else {
                buf.append('-');
            }
        }
    }
    /**
     * write local server name - %v
     */
    protected static class LocalServerNameElement implements AccessLogElement {
        @Override
        public void addElement(CharArrayWriter buf, Date date, Request request,
                Response response, long time) {
            buf.append(request.getServerName());
        }
    }
    /**
     * write any string
     */
    protected static class StringElement implements AccessLogElement {
        private final String str;
        public StringElement(String str) {
            this.str = str;
        }
        @Override
        public void addElement(CharArrayWriter buf, Date date, Request request,
                Response response, long time) {
            buf.append(str);
        }
    }
    /**
     * write incoming headers - %{xxx}i
     */
    protected static class HeaderElement implements AccessLogElement {
        private final String header;
        public HeaderElement(String header) {
            this.header = header;
        }
        @Override
        public void addElement(CharArrayWriter buf, Date date, Request request,
                Response response, long time) {
            Enumeration<String> iter = request.getHeaders(header);
            if (iter.hasMoreElements()) {
                buf.append(iter.nextElement());
                while (iter.hasMoreElements()) {
                    buf.append(',').append(iter.nextElement());
                }
                return;
            }
            buf.append('-');
        }
    }
    /**
     * write a specific cookie - %{xxx}c
     */
    protected static class CookieElement implements AccessLogElement {
        private final String header;
        public CookieElement(String header) {
            this.header = header;
        }
        @Override
        public void addElement(CharArrayWriter buf, Date date, Request request,
                Response response, long time) {
            String value = "-";
            Cookie[] c = request.getCookies();
            if (c != null) {
                for (int i = 0; i < c.length; i++) {
                    if (header.equals(c[i].getName())) {
                        value = c[i].getValue();
                        break;
                    }
                }
            }
            buf.append(value);
        }
    }
    /**
     * write a specific response header - %{xxx}o
     */
    protected static class ResponseHeaderElement implements AccessLogElement {
        private final String header;
        public ResponseHeaderElement(String header) {
            this.header = header;
        }
        @Override
        public void addElement(CharArrayWriter buf, Date date, Request request,
                Response response, long time) {
            if (null != response) {
                Iterator<String> iter = response.getHeaders(header).iterator();
                if (iter.hasNext()) {
                    buf.append(iter.next());
                    while (iter.hasNext()) {
                        buf.append(',').append(iter.next());
                    }
                    return;
                }
            }
            buf.append('-');
        }
    }
    /**
     * write an attribute in the ServletRequest - %{xxx}r
     */
    protected static class RequestAttributeElement implements AccessLogElement {
        private final String header;
        public RequestAttributeElement(String header) {
            this.header = header;
        }
        @Override
        public void addElement(CharArrayWriter buf, Date date, Request request,
                Response response, long time) {
            Object value = null;
            if (request != null) {
                value = request.getAttribute(header);
            } else {
                value = "??";
            }
            if (value != null) {
                if (value instanceof String) {
                    buf.append((String) value);
                } else {
                    buf.append(value.toString());
                }
            } else {
                buf.append('-');
            }
        }
    }
    /**
     * write an attribute in the HttpSession - %{xxx}s
     */
    protected static class SessionAttributeElement implements AccessLogElement {
        private final String header;
        public SessionAttributeElement(String header) {
            this.header = header;
        }
        @Override
        public void addElement(CharArrayWriter buf, Date date, Request request,
                Response response, long time) {
            Object value = null;
            if (null != request) {
                HttpSession sess = request.getSession(false);
                if (null != sess) {
                    value = sess.getAttribute(header);
                }
            } else {
                value = "??";
            }
            if (value != null) {
                if (value instanceof String) {
                    buf.append((String) value);
                } else {
                    buf.append(value.toString());
                }
            } else {
                buf.append('-');
            }
        }
    }
    /**
     * parse pattern string and create the array of AccessLogElement
     */
    protected AccessLogElement[] createLogElements() {
        List<AccessLogElement> list = new ArrayList<>();
        boolean replace = false;
        StringBuilder buf = new StringBuilder();
        for (int i = 0; i < pattern.length(); i++) {
            char ch = pattern.charAt(i);
            if (replace) {
                /*
                 * For code that processes {, the behavior will be ... if I do
                 * not encounter a closing } - then I ignore the {
                 */
                if ('{' == ch) {
                    StringBuilder name = new StringBuilder();
                    int j = i + 1;
                    for (; j < pattern.length() && '}' != pattern.charAt(j); j++) {
                        name.append(pattern.charAt(j));
                    }
                    if (j + 1 < pattern.length()) {
                        /* the +1 was to account for } which we increment now */
                        j++;
                        list.add(createAccessLogElement(name.toString(),
                                pattern.charAt(j)));
                        i = j; /* Since we walked more than one character */
                    } else {
                        // D'oh - end of string - pretend we never did this
                        // and do processing the "old way"
                        list.add(createAccessLogElement(ch));
                    }
                } else {
                    list.add(createAccessLogElement(ch));
                }
                replace = false;
            } else if (ch == '%') {
                replace = true;
                list.add(new StringElement(buf.toString()));
                buf = new StringBuilder();
            } else {
                buf.append(ch);
            }
        }
        if (buf.length() > 0) {
            list.add(new StringElement(buf.toString()));
        }
        return list.toArray(new AccessLogElement[0]);
    }
    /**
     * create an AccessLogElement implementation which needs header string
     */
    protected AccessLogElement createAccessLogElement(String header, char pattern) {
        switch (pattern) {
        case 'i':
            return new HeaderElement(header);
        case 'c':
            return new CookieElement(header);
        case 'o':
            return new ResponseHeaderElement(header);
        case 'r':
            return new RequestAttributeElement(header);
        case 's':
            return new SessionAttributeElement(header);
        case 't':
            return new DateAndTimeElement(header);
        default:
            return new StringElement("???");
        }
    }
    /**
     * create an AccessLogElement implementation
     */
    protected AccessLogElement createAccessLogElement(char pattern) {
        switch (pattern) {
        case 'a':
            return new RemoteAddrElement();
        case 'A':
            return new LocalAddrElement();
        case 'b':
            return new ByteSentElement(true);
        case 'B':
            return new ByteSentElement(false);
        case 'D':
            return new ElapsedTimeElement(true);
        case 'F':
            return new FirstByteTimeElement();
        case 'h':
            return new HostElement();
        case 'H':
            return new ProtocolElement();
        case 'l':
            return new LogicalUserNameElement();
        case 'm':
            return new MethodElement();
        case 'p':
            return new LocalPortElement();
        case 'q':
            return new QueryElement();
        case 'r':
            return new RequestElement();
        case 's':
            return new HttpStatusCodeElement();
        case 'S':
            return new SessionIdElement();
        case 't':
            return new DateAndTimeElement();
        case 'T':
            return new ElapsedTimeElement(false);
        case 'u':
            return new UserElement();
        case 'U':
            return new RequestURIElement();
        case 'v':
            return new LocalServerNameElement();
        case 'I':
            return new ThreadNameElement();
        default:
            return new StringElement("???" + pattern + "???");
        }
    }

======= bd24edc^:"java/org/apache/coyote/AbstractProtocol.java"

                        state = processor.asyncDispatch(
                                nextDispatch.getSocketStatus());
======= bd24edc^:"java/org/apache/coyote/http11/upgrade/AbstractProcessor.java"

    private final AbstractServletOutputStream upgradeServletOutputStream;
            AbstractServletOutputStream upgradeServletOutputStream) {
======= bd24edc^:"java/org/apache/coyote/http11/upgrade/AbstractServletOutputStream.java"

======= bd24edc^:"java/org/apache/coyote/http11/upgrade/AbstractServletOutputStream.java"

======= bd24edc^:"java/org/apache/coyote/http11/upgrade/AbstractServletOutputStream.java"

======= bd24edc^:"java/org/apache/coyote/http11/upgrade/AbstractServletOutputStream.java"

======= bd24edc^:"java/org/apache/coyote/http11/upgrade/AbstractServletOutputStream.java"

======= bd24edc^:"java/org/apache/coyote/http11/upgrade/AbstractServletOutputStream.java"

                writeInternal(buffer, 0, buffer.length);
======= bd24edc^:"java/org/apache/coyote/http11/upgrade/AbstractServletOutputStream.java"

           // Make sure isReady() and onWritePossible() have a consistent view of
            // buffer and fireListener when determining if the listener should fire
======= bd24edc^:"java/org/apache/coyote/http11/upgrade/AbstractServletOutputStream.java"

======= bd24edc^:"java/org/apache/coyote/http11/upgrade/AprServletOutputStream.java"

    private final SocketWrapper<Long> wrapper;
    public AprServletOutputStream(SocketWrapper<Long> wrapper,
        this.wrapper = wrapper;
        this.socket = wrapper.getSocket().longValue();
======= bd24edc^:"java/org/apache/coyote/http11/upgrade/AprServletOutputStream.java"

        Lock readLock = wrapper.getBlockingStatusReadLock();
        WriteLock writeLock = wrapper.getBlockingStatusWriteLock();
            if (wrapper.getBlockingStatus() == block) {
======= bd24edc^:"java/org/apache/coyote/http11/upgrade/AprServletOutputStream.java"

            wrapper.setBlockingStatus(block);
======= bd24edc^:"java/org/apache/coyote/http11/upgrade/AprServletOutputStream.java"

                        Integer.valueOf(-written), Long.valueOf(socket), wrapper));
======= bd24edc^:"java/org/apache/coyote/http11/upgrade/BioServletOutputStream.java"

    public BioServletOutputStream(SocketWrapper<Socket> wrapper)
        os = wrapper.getSocket().getOutputStream();
======= bd24edc^:"java/org/apache/coyote/http11/upgrade/NioServletOutputStream.java"

======= bd24edc^:"java/org/apache/coyote/http11/upgrade/NioServletOutputStream.java"

            SocketWrapper<NioChannel> wrapper, NioSelectorPool pool) {
        channel = wrapper.getSocket();
======= bd24edc^:"test/org/apache/coyote/http11/upgrade/TestUpgrade.java"

======= bd24edc^:"test/org/apache/coyote/http11/upgrade/TestUpgrade.java"

======= bd24edc^:"test/org/apache/coyote/http11/upgrade/TestUpgrade.java"

======= bd24edc^:"test/org/apache/coyote/http11/upgrade/TestUpgrade.java"


======= d423ae2^:"java/org/apache/coyote/http11/Http11NioProcessor.java"

======= d423ae2^:"java/org/apache/coyote/http11/Http11NioProcessor.java"

            openSocket = socketWrapper.getSocket().getPoller().processSendfile(key,
                    (KeyAttachment) socketWrapper, true);

======= 328adb1^:"java/org/apache/tomcat/util/descriptor/XmlErrorHandler.java"

======= 328adb1^:"java/org/apache/tomcat/util/descriptor/XmlErrorHandler.java"

    private final Set<SAXParseException> errors = new HashSet<>();
    private final Set<SAXParseException> warnings = new HashSet<>();
======= 328adb1^:"java/org/apache/tomcat/util/descriptor/XmlErrorHandler.java"

    public Set<SAXParseException> getErrors() {
    public Set<SAXParseException> getWarnings() {

======= 5594699^:"java/org/apache/catalina/loader/WebappClassLoader.java"

        if (jars.length > jarModificationTimes.size()) {
            log.info(sm.getString("webappClassLoader.jarsAdded",
                    resources.getContext().getName()));
            return true;
        } else if (jars.length < jarModificationTimes.size()){
            log.info(sm.getString("webappClassLoader.jarsRemoved",
                    resources.getContext().getName()));
            return true;
        }
                    // Jars have been added and removed
======= 5594699^:"java/org/apache/catalina/loader/WebappClassLoader.java"

                jarModificationTimes.put(
                        jar.getName(), Long.valueOf(jar.getLastModified()));

======= ad129f8^:"test/org/apache/catalina/authenticator/TestSSOnonLoginAndBasicAuthenticator.java"

======= ad129f8^:"test/org/apache/catalina/authenticator/TestSSOnonLoginAndBasicAuthenticator.java"

======= ad129f8^:"test/org/apache/catalina/authenticator/TestSSOnonLoginAndBasicAuthenticator.java"

    private static final int SHORT_TIMEOUT_SECS = 4;
    private static final long SHORT_TIMEOUT_DELAY_MSECS =
                                    ((SHORT_TIMEOUT_SECS + 3) * 1000);
    private static final int LONG_TIMEOUT_SECS = 10;
    private static final long LONG_TIMEOUT_DELAY_MSECS =
                                    ((LONG_TIMEOUT_SECS + 5) * 1000);
    private static String CLIENT_AUTH_HEADER = "authorization";
    private static String SERVER_COOKIES = "Set-Cookie";
    private static String BROWSER_COOKIES = "Cookie";
     * Try to access an unprotected resource without an established
     * SSO session.
     * This should be permitted.
    public void testAcceptPublicNonLogin() throws Exception {
                        false, false, 200);
    /*
     * Try to access a protected resource without an established
     * SSO session.
     * This should be rejected with SC_FORBIDDEN 403 status.
     */
    public void testRejectProtectedNonLogin() throws Exception {
                        false, true, 403);
     * the resource.
     * This should be rejected with SC_FORBIDDEN 401 status, which
     * will then be followed by successful re-authentication.
    public void testBasicLoginSessionTimeout() throws Exception {
        doTestBasic(USER, PWD, CONTEXT_PATH_LOGIN + URI_PROTECTED,
                true, 401, false, 200);
        // wait long enough for my session to expire
        Thread.sleep(SHORT_TIMEOUT_DELAY_MSECS);
        doTestBasic(USER, PWD, CONTEXT_PATH_LOGIN + URI_PROTECTED,
                true, 401, false, 200);
     * webapp, but without sending the SSO session cookie.
     * This should be rejected with SC_FORBIDDEN 403 status.
    public void testBasicLoginRejectProtectedWithoutCookies() throws Exception {
        doTestBasic(USER, PWD, CONTEXT_PATH_LOGIN + URI_PROTECTED,
                true, 401, false, 200);
                        false, true, 403);
     * webapp while sending the SSO session cookie provided by the
     * first webapp.
     * This should be successful with SC_OK 200 status.
    public void testBasicLoginAcceptProtectedWithCookies() throws Exception {
        doTestBasic(USER, PWD, CONTEXT_PATH_LOGIN + URI_PROTECTED,
                true, 401, false, 200);
                        true, false, 200);
     * webapp while sending the SSO session cookie provided by the
     * first webapp.
     * This should be successful with SC_OK 200 status.
     *
     * has expired.
     * This should be successful with SC_OK 200 status.
        doTestBasic(USER, PWD, CONTEXT_PATH_LOGIN + URI_PROTECTED,
                true, 401, false, 200);
                        true, false, 200);
        // but not long enough for NonLogin session expiry
        Thread.sleep(SHORT_TIMEOUT_DELAY_MSECS);
        doTestNonLogin(CONTEXT_PATH_NOLOGIN + URI_PROTECTED,
                        true, false, 200);
        // wait long enough for my NonLogin session to expire
        // and tear down the SSO session at the same time.
        Thread.sleep(LONG_TIMEOUT_DELAY_MSECS);
                        false, true, 403);
    public void doTestNonLogin(String uri, boolean addCookies,
            boolean expectedReject, int expectedRC)
            throws Exception {
        if (addCookies) {
            addCookies(reqHeaders);
        }
        if (expectedReject) {
            assertEquals(200, rc);
            saveCookies(respHeaders);
    public void doTestBasic(String user, String pwd, String uri,
            boolean expectedReject1, int expectedRC1,
            boolean expectedReject2, int expectedRC2) throws Exception {
        // the first access attempt should be challenged
        Map<String,List<String>> reqHeaders1 = new HashMap<>();
        Map<String,List<String>> respHeaders1 = new HashMap<>();
        ByteChunk bc = new ByteChunk();
        int rc = getUrl(HTTP_PREFIX + getPort() + uri, bc, reqHeaders1,
                respHeaders1);
        if (expectedReject1) {
            assertEquals(expectedRC1, rc);
            assertTrue(bc.getLength() > 0);
            assertEquals(200, rc);
            assertEquals("OK", bc.toString());
            return;
        // the second access attempt should be successful
        String credentials = user + ":" + pwd;
        String base64auth = Base64.encodeBase64String(
                credentials.getBytes(StandardCharsets.ISO_8859_1));
        String authLine = "Basic " + base64auth;
        List<String> auth = new ArrayList<>();
        auth.add(authLine);
        Map<String,List<String>> reqHeaders2 = new HashMap<>();
        reqHeaders2.put(CLIENT_AUTH_HEADER, auth);
        Map<String,List<String>> respHeaders2 = new HashMap<>();
        bc.recycle();
        rc = getUrl(HTTP_PREFIX + getPort() + uri, bc, reqHeaders2,
                respHeaders2);
        if (expectedReject2) {
            assertEquals(expectedRC2, rc);
            assertNull(bc.toString());
            assertEquals(200, rc);
            assertEquals("OK", bc.toString());
            saveCookies(respHeaders2);
        Tomcat tomcat = getTomcatInstance();
======= ad129f8^:"test/org/apache/catalina/authenticator/TestSSOnonLoginAndBasicAuthenticator.java"

        setUpNonLogin(tomcat);
        setUpLogin(tomcat);
    private void setUpNonLogin(Tomcat tomcat) throws Exception {
        Context ctxt = tomcat.addContext(CONTEXT_PATH_NOLOGIN,
        ctxt.setSessionTimeout(LONG_TIMEOUT_SECS);
        // Add protected servlet
        Tomcat.addServlet(ctxt, "TesterServlet1", new TesterServlet());
        ctxt.addServletMapping(URI_PROTECTED, "TesterServlet1");
        ctxt.addConstraint(sc1);
        // Add unprotected servlet
        Tomcat.addServlet(ctxt, "TesterServlet2", new TesterServlet());
        ctxt.addServletMapping(URI_PUBLIC, "TesterServlet2");
        ctxt.addConstraint(sc2);
        ctxt.setLoginConfig(lc);
        ctxt.getPipeline().addValve(new NonLoginAuthenticator());
    private void setUpLogin(Tomcat tomcat) throws Exception {
        Context ctxt = tomcat.addContext(CONTEXT_PATH_LOGIN,
        ctxt.setSessionTimeout(SHORT_TIMEOUT_SECS);
        // Add protected servlet
        Tomcat.addServlet(ctxt, "TesterServlet3", new TesterServlet());
        ctxt.addServletMapping(URI_PROTECTED, "TesterServlet3");
        ctxt.addConstraint(sc);
        // Configure the appropriate authenticator
        ctxt.setLoginConfig(lc);
        ctxt.getPipeline().addValve(new BasicAuthenticator());
======= ad129f8^:"test/org/apache/catalina/authenticator/TestSSOnonLoginAndBasicAuthenticator.java"

        cookies = respHeaders.get(SERVER_COOKIES);
======= ad129f8^:"test/org/apache/catalina/authenticator/TestSSOnonLoginAndBasicAuthenticator.java"

            reqHeaders.put(BROWSER_COOKIES + ":", cookies);
======= ad129f8^:"test/org/apache/catalina/authenticator/TestSSOnonLoginAndBasicAuthenticator.java"


======= 5964a52^:"java/org/apache/catalina/core/ContainerBase.java"

                ContextName cn = new ContextName(c.getName());
======= 5964a52^:"java/org/apache/catalina/ha/deploy/FarmWarDeployer.java"

            ContextName cn = new ContextName(deployWar.getName());
======= 5964a52^:"java/org/apache/catalina/ha/deploy/FarmWarDeployer.java"

            ContextName cn = new ContextName(removeWar.getName());
======= 5964a52^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

                ContextName cn = new ContextName(filename);
======= 5964a52^:"java/org/apache/catalina/mbeans/MBeanUtils.java"

            ContextName cn = new ContextName(context.getName());
======= 5964a52^:"java/org/apache/catalina/mbeans/MBeanUtils.java"

            ContextName cn = new ContextName(context.getName());
======= 5964a52^:"java/org/apache/catalina/mbeans/MBeanUtils.java"

            ContextName cn = new ContextName(context.getName());
======= 5964a52^:"java/org/apache/catalina/mbeans/MBeanUtils.java"

        ContextName cn = new ContextName(context.getName());
======= 5964a52^:"java/org/apache/catalina/startup/FailedContext.java"

                ContextName cn = new ContextName(c.getName());
======= 5964a52^:"java/org/apache/catalina/startup/HostConfig.java"

        ContextName cn = new ContextName(name);
======= 5964a52^:"java/org/apache/catalina/startup/HostConfig.java"

                ContextName cn = new ContextName(files[i]);
======= 5964a52^:"java/org/apache/catalina/startup/HostConfig.java"

                ContextName cn = new ContextName(files[i]);
======= 5964a52^:"java/org/apache/catalina/startup/HostConfig.java"

                ContextName cn = new ContextName(files[i]);
======= 5964a52^:"java/org/apache/catalina/startup/HostConfig.java"

        ContextName previous = new ContextName(iter.next());
            ContextName current = new ContextName(iter.next());
======= 5964a52^:"java/org/apache/catalina/storeconfig/StandardContextSF.java"

                    ContextName cn = new ContextName(context.getName());
======= 5964a52^:"java/org/apache/catalina/util/ContextName.java"

    public ContextName(String name) {
======= 5964a52^:"java/org/apache/catalina/util/ContextName.java"

        if (tmp1.toLowerCase(Locale.ENGLISH).endsWith(".war") ||
                tmp1.toLowerCase(Locale.ENGLISH).endsWith(".xml")) {
======= 5964a52^:"test/org/apache/catalina/startup/TestHostConfigAutomaticDeployment.java"

    private static final ContextName  APP_NAME = new ContextName("myapp");
======= 5964a52^:"test/org/apache/catalina/util/TestContextName.java"

======= 5964a52^:"test/org/apache/catalina/util/TestContextName.java"

        cn11 = new ContextName("ROOT");
        cn12 = new ContextName("foo");
        cn13 = new ContextName("foo#bar");
        cn14 = new ContextName("ROOT##A");
        cn15 = new ContextName("foo##D");
        cn16 = new ContextName("foo#bar##E");
        cn18 = new ContextName("/ROOT#bar");
        cn19 = new ContextName("/ROOT#bar##A");
        cn20 = new ContextName("/ROOT##A");
======= 5964a52^:"test/org/apache/catalina/util/TestContextName.java"

======= 5964a52^:"test/org/apache/catalina/util/TestContextName.java"

======= 5964a52^:"test/org/apache/catalina/util/TestContextName.java"

======= 5964a52^:"test/org/apache/catalina/util/TestContextName.java"

======= 5964a52^:"test/org/apache/catalina/util/TestContextName.java"

======= 5964a52^:"test/org/apache/catalina/util/TestContextName.java"

        doCompare(src, new ContextName(src.getBaseName()));
        doCompare(src, new ContextName(src.getDisplayName()));
        doCompare(src, new ContextName(src.getName()));

======= 346e264^:"java/org/apache/catalina/util/ContextName.java"

        // Path should never be null or '/'
        if (path == null || "/".equals(path)) {
======= 346e264^:"test/org/apache/catalina/util/TestContextName.java"

======= 346e264^:"test/org/apache/catalina/util/TestContextName.java"

======= 346e264^:"test/org/apache/catalina/util/TestContextName.java"

======= 346e264^:"test/org/apache/catalina/util/TestContextName.java"

======= 346e264^:"test/org/apache/catalina/util/TestContextName.java"

======= 346e264^:"test/org/apache/catalina/util/TestContextName.java"

======= 346e264^:"test/org/apache/catalina/util/TestContextName.java"

======= 346e264^:"test/org/apache/catalina/util/TestContextName.java"


======= 411e4cc^:"java/org/apache/coyote/Response.java"


======= bcb9c58^:"java/org/apache/jasper/servlet/TldScanner.java"

            TldResourcePath tldResourcePath;
            if (resourcePath.endsWith(".jar")) {
                // if the path points to a jar file, the TLD is presumed to be
                // inside at META-INF/taglib.tld
                tldResourcePath = new TldResourcePath(
                        url, resourcePath, "META-INF/taglib.tld");
                tldResourcePath = new TldResourcePath(url, resourcePath);
            }
            // parse TLD but store using the URI supplied in the descriptor
            TaglibXml tld = tldParser.parse(tldResourcePath);
            uriTldResourcePathMap.put(taglibURI, tldResourcePath);
            tldResourcePathTaglibXmlMap.put(tldResourcePath, tld);
            if (tld.getListeners() != null) {
                listeners.addAll(tld.getListeners());

======= 8a5179c^:"java/org/apache/jasper/compiler/JspRuntimeContext.java"

======= 8a5179c^:"java/org/apache/jasper/compiler/JspRuntimeContext.java"

            for(int i = 0; i < urls.length; i++) {
                // Tomcat 4 can use URL's other than file URL's,
                // a protocol other than file: will generate a
                // bad file system path, so only add file:
                // protocol URL's to the classpath.
                if( urls[i].getProtocol().equals("file") ) {
                    cpath.append(urls[i].getFile()+sep);

======= c1be72f^:"java/org/apache/catalina/filters/RemoteIpFilter.java"

 * <td>10\.\d{1,3}\.\d{1,3}\.\d{1,3}|192\.168\.\d{1,3}\.\d{1,3}|169\.254\.\d{1,3}\.\d{1,3}|127\.\d{1,3}\.\d{1,3}\.\d{1,3} <br/>
 * By default, 10/8, 192.168/16, 169.254/16 and 127/8 are allowed ; 172.16/12 has not been enabled by default because it is complex to
 * describe with regular expressions</td>
======= c1be72f^:"java/org/apache/catalina/filters/RemoteIpFilter.java"

            "127\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}");
======= c1be72f^:"java/org/apache/catalina/valves/RemoteIpValve.java"

 * <td>10\.\d{1,3}\.\d{1,3}\.\d{1,3}|192\.168\.\d{1,3}\.\d{1,3}|169\.254\.\d{1,3}\.\d{1,3}|127\.\d{1,3}\.\d{1,3}\.\d{1,3}<br/>
 * By default, 10/8, 192.168/16, 169.254/16 and 127/8 are allowed ; 172.16/12 has not been enabled by default because it is complex to
 * describe with regular expressions</td>
======= c1be72f^:"java/org/apache/catalina/valves/RemoteIpValve.java"

            "127\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}");
        10\.\d{1,3}\.\d{1,3}\.\d{1,3}|192\.168\.\d{1,3}\.\d{1,3}|169\.254\.\d{1,3}\.\d{1,3}|127\.\d{1,3}\.\d{1,3}\.\d{1,3}
        10\.\d{1,3}\.\d{1,3}\.\d{1,3}|192\.168\.\d{1,3}\.\d{1,3}|169\.254\.\d{1,3}\.\d{1,3}|127\.\d{1,3}\.\d{1,3}\.\d{1,3}

======= f4da7dc^:"java/org/apache/catalina/startup/ContextConfig.java"

        Map<String,WebXml> fragments = processJarsForWebFragments();
======= f4da7dc^:"java/org/apache/catalina/startup/ContextConfig.java"

    protected Map<String,WebXml> processJarsForWebFragments() {
                new FragmentJarScannerCallback(webXmlParser, delegate);
======= f4da7dc^:"java/org/apache/jasper/servlet/JspCServletContext.java"

======= f4da7dc^:"java/org/apache/jasper/servlet/JspCServletContext.java"

        FragmentJarScannerCallback callback = new FragmentJarScannerCallback(webXmlParser, false);
======= f4da7dc^:"java/org/apache/tomcat/util/descriptor/web/FragmentJarScannerCallback.java"

    public FragmentJarScannerCallback(WebXmlParser webXmlParser, boolean delegate) {
======= f4da7dc^:"java/org/apache/tomcat/util/descriptor/web/FragmentJarScannerCallback.java"

            // files
            if (isWebapp) {

======= ef3f56e^:"java/org/apache/tomcat/websocket/WsWebSocketContainer.java"

======= ef3f56e^:"java/org/apache/tomcat/websocket/WsWebSocketContainer.java"

            // Create the SSL Context
            SSLContext sslContext = SSLContext.getInstance("TLS");
            // Trust store
            String sslTrustStoreValue =
                    (String) userProperties.get(SSL_TRUSTSTORE_PROPERTY);
            if (sslTrustStoreValue != null) {
                String sslTrustStorePwdValue = (String) userProperties.get(
                        SSL_TRUSTSTORE_PWD_PROPERTY);
                if (sslTrustStorePwdValue == null) {
                    sslTrustStorePwdValue = SSL_TRUSTSTORE_PWD_DEFAULT;
                }
                File keyStoreFile = new File(sslTrustStoreValue);
                KeyStore ks = KeyStore.getInstance("JKS");
                try (InputStream is = new FileInputStream(keyStoreFile)) {
                    ks.load(is, sslTrustStorePwdValue.toCharArray());
                }
                TrustManagerFactory tmf = TrustManagerFactory.getInstance(
                        TrustManagerFactory.getDefaultAlgorithm());
                tmf.init(ks);
                sslContext.init(null, tmf.getTrustManagers(), null);
            } else {
                sslContext.init(null, null, null);

======= bba9747^:"java/org/apache/catalina/authenticator/SpnegoAuthenticator.java"

            outToken = gssContext.acceptSecContext(decoded, 0, decoded.length);
======= bba9747^:"java/org/apache/catalina/authenticator/SpnegoAuthenticator.java"


======= f4970a7^:"java/org/apache/catalina/connector/OutputBuffer.java"

                bb.flushBuffer();
======= f4970a7^:"java/org/apache/tomcat/util/buf/ByteChunk.java"

    /** Make space for len chars. If len is small, allocate
     *        a reserve space too. Never grow bigger than limit.
    private void makeSpace(int count)
    {

======= a63bf3a^:"java/org/apache/catalina/webresources/DirResourceSet.java"

            File f = file(path.substring(webAppMount.length()), true);
======= a63bf3a^:"java/org/apache/catalina/webresources/EmptyResource.java"

======= a63bf3a^:"java/org/apache/catalina/webresources/EmptyResource.java"

======= a63bf3a^:"java/org/apache/catalina/webresources/EmptyResource.java"

        return null;
======= a63bf3a^:"java/org/apache/catalina/webresources/StandardRoot.java"

======= a63bf3a^:"java/org/apache/catalina/webresources/StandardRoot.java"

                    if (virtual == null && result.isVirtual()) {
                        virtual = result;
======= a63bf3a^:"java/org/apache/catalina/webresources/StandardRoot.java"

        return new EmptyResource(this, path);
======= a63bf3a^:"test/org/apache/catalina/webresources/AbstractTestResourceSet.java"

======= a63bf3a^:"test/org/apache/catalina/webresources/AbstractTestResourceSet.java"


======= 8f67335^:"java/org/apache/catalina/connector/Request.java"

======= 8f67335^:"java/org/apache/catalina/connector/Request.java"


======= 13c6551^:"java/org/apache/catalina/users/MemoryUserDatabase.java"


======= 27806aa^:"java/org/apache/catalina/realm/JNDIRealm.java"

======= 27806aa^:"java/org/apache/catalina/realm/JNDIRealm.java"

======= 27806aa^:"java/org/apache/catalina/realm/JNDIRealm.java"

======= 27806aa^:"java/org/apache/catalina/realm/JNDIRealm.java"

                        "javax.security.sasl.qop", "auth-conf");
        <p>When the JNIRealm is used with the SPNEGO authenticator, delegated

======= a1ad6ce^:"java/org/apache/catalina/webresources/StandardRoot.java"

======= a1ad6ce^:"java/org/apache/catalina/webresources/StandardRoot.java"

    private String[] list(String path, boolean doStateCheck) {
        if (doStateCheck) {
            checkState();
======= a1ad6ce^:"java/org/apache/catalina/webresources/StandardRoot.java"

        checkState();
======= a1ad6ce^:"java/org/apache/catalina/webresources/StandardRoot.java"

        checkState();
======= a1ad6ce^:"java/org/apache/catalina/webresources/StandardRoot.java"

        checkState();
======= a1ad6ce^:"java/org/apache/catalina/webresources/StandardRoot.java"

    private WebResource getResource(String path, boolean doStateCheck,
        if (doStateCheck) {
            checkState();
======= a1ad6ce^:"java/org/apache/catalina/webresources/StandardRoot.java"

        checkPath(path);
        checkPath(path);
    private void checkPath(String path) {
======= a1ad6ce^:"java/org/apache/catalina/webresources/StandardRoot.java"

        checkState();
======= a1ad6ce^:"java/org/apache/catalina/webresources/StandardRoot.java"

    private WebResource[] listResources(String path, boolean doStateCheck) {
        if (doStateCheck) {
            checkState();
======= a1ad6ce^:"java/org/apache/catalina/webresources/StandardRoot.java"

    private void checkState() {
        if (!getState().isAvailable()) {
            throw new IllegalStateException(
                    sm.getString("standardRoot.checkStateNotStarted"));
        }
    }

======= cb62f86^:"java/org/apache/catalina/connector/CoyoteAdapter.java"

======= cb62f86^:"java/org/apache/catalina/connector/CoyoteAdapter.java"

            if (!comet && !async) {
======= cb62f86^:"java/org/apache/coyote/ActionCode.java"

======= cb62f86^:"java/org/apache/coyote/ajp/AbstractAjpProcessor.java"

======= cb62f86^:"java/org/apache/coyote/http11/AbstractHttp11Processor.java"

======= cb62f86^:"java/org/apache/coyote/spdy/SpdyProcessor.java"

======= cb62f86^:"test/org/apache/coyote/http11/TestAbstractHttp11Processor.java"

======= cb62f86^:"test/org/apache/coyote/http11/TestAbstractHttp11Processor.java"

======= cb62f86^:"test/org/apache/coyote/http11/TestAbstractHttp11Processor.java"

======= cb62f86^:"test/org/apache/coyote/http11/TestAbstractHttp11Processor.java"


======= 0a4e847^:"java/org/apache/catalina/authenticator/SpnegoAuthenticator.java"

        // This property must be false for SPNEGO to work
        System.setProperty(Constants.USE_SUBJECT_CREDS_ONLY_PROPERTY, "false");

======= 014cf1c^:"java/org/apache/tomcat/util/net/AprEndpoint.java"

            sslContext = SSLContext.make(rootPool, value, SSL.SSL_MODE_SERVER);

======= 7ee1275^:"java/org/apache/jasper/compiler/Validator.java"

======= 7ee1275^:"java/org/apache/jasper/compiler/Validator.java"

                        result = new Node.JspAttribute(tai, qName, uri,
                                localName, value, false, el, dynamic);
======= 7ee1275^:"java/org/apache/jasper/compiler/Validator.java"

======= 7ee1275^:"java/org/apache/jasper/compiler/Validator.java"

======= 7ee1275^:"java/org/apache/jasper/runtime/PageContextImpl.java"

    protected static String XmlEscape(String s) {
        if (s == null) {
            return null;
        }
        int len = s.length();
        /*
         * Look for any "bad" characters, Escape "bad" character was found
         */
        // ASCII " 34 & 38 ' 39 < 60 > 62
        for (int i = 0; i < len; i++) {
            char c = s.charAt(i);
            if (c >= '\"' && c <= '>' &&
                    (c == '<' || c == '>' || c == '\'' || c == '&' || c == '"')) {
                // need to escape them and then quote the whole string
                StringBuilder sb = new StringBuilder((int) (len * 1.2));
                sb.append(s, 0, i);
                int pos = i + 1;
                for (int j = i; j < len; j++) {
                    c = s.charAt(j);
                    if (c >= '\"' && c <= '>') {
                        if (c == '<') {
                            if (j > pos) {
                                sb.append(s, pos, j);
                            }
                            sb.append("&lt;");
                            pos = j + 1;
                        } else if (c == '>') {
                            if (j > pos) {
                                sb.append(s, pos, j);
                            }
                            sb.append("&gt;");
                            pos = j + 1;
                        } else if (c == '\'') {
                            if (j > pos) {
                                sb.append(s, pos, j);
                            }
                            sb.append("&#039;"); // &apos;
                            pos = j + 1;
                        } else if (c == '&') {
                            if (j > pos) {
                                sb.append(s, pos, j);
                            }
                            sb.append("&amp;");
                            pos = j + 1;
                        } else if (c == '"') {
                            if (j > pos) {
                                sb.append(s, pos, j);
                            }
                            sb.append("&#034;"); // &quot;
                            pos = j + 1;
                        }
                    }
                }
                if (pos < len) {
                    sb.append(s, pos, len);
                }
                return sb.toString();
            }
        }
        return s;
    }
======= 7ee1275^:"java/org/apache/jasper/runtime/PageContextImpl.java"

        if (escape && retValue != null) {
            retValue = XmlEscape(retValue.toString());
        }
======= 7ee1275^:"test/org/apache/jasper/compiler/TestParser.java"

        Assert.assertTrue(result.contains("&quot;bar&quot;") ||
                result.contains("&#034;bar&#034;"));
        Assert.assertTrue(result.contains("&quot;foo&quot;") ||
                result.contains("&#034;foo&#034;"));
======= 7ee1275^:"test/org/apache/jasper/compiler/TestParser.java"

======= 7ee1275^:"test/org/apache/jasper/runtime/TesterPageContextImpl.java"

 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 * Performance tests for {@link PageContextImpl}.
 */
    private static String[] bug53867TestData = new String[] {
            "Hello World!",
            "<meta http-equiv=\"Content-Language\">",
            "This connection has limited network connectivity.",
            "Please use this web page & to access file server resources." };
    @Test
    public void testBug53867() {
        for (int i = 0; i < 10; i++) {
            doTestBug53867();
        }
    }
    private static void doTestBug53867() {
        int count = 100000;
        for (int j = 0; j < bug53867TestData.length; j++) {
            Assert.assertEquals(doTestBug53867OldVersion(bug53867TestData[j]),
                    PageContextImpl.XmlEscape(bug53867TestData[j]));
        }
        for (int i = 0; i < 100; i++) {
            for (int j = 0; j < bug53867TestData.length; j++) {
                doTestBug53867OldVersion(bug53867TestData[j]);
            }
        }
        for (int i = 0; i < 100; i++) {
            for (int j = 0; j < bug53867TestData.length; j++) {
                PageContextImpl.XmlEscape(bug53867TestData[j]);
            }
        }
        long start = System.currentTimeMillis();
        for (int i = 0; i < count; i++) {
            for (int j = 0; j < bug53867TestData.length; j++) {
                doTestBug53867OldVersion(bug53867TestData[j]);
            }
        }
        System.out.println(
                "Old escape:" + (System.currentTimeMillis() - start));
        start = System.currentTimeMillis();
        for (int i = 0; i < count; i++) {
            for (int j = 0; j < bug53867TestData.length; j++) {
                PageContextImpl.XmlEscape(bug53867TestData[j]);
            }
        }
        System.out.println(
                "New escape:" + (System.currentTimeMillis() - start));
    }
    private static String doTestBug53867OldVersion(String s) {
        if (s == null)
            return null;
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (c == '<') {
                sb.append("&lt;");
            } else if (c == '>') {
                sb.append("&gt;");
            } else if (c == '\'') {
                sb.append("&#039;"); // &apos;
            } else if (c == '&') {
                sb.append("&amp;");
            } else if (c == '"') {
                sb.append("&#034;"); // &quot;
            } else {
                sb.append(c);
            }
        }
        return sb.toString();
    }

======= 3f316f1^:"java/org/apache/tomcat/websocket/server/Constants.java"

======= 3f316f1^:"java/org/apache/tomcat/websocket/server/WsContextListener.java"

======= 3f316f1^:"java/org/apache/tomcat/websocket/server/WsHttpUpgradeHandler.java"

            wsRemoteEndpointServer.onWritePossible();
======= 3f316f1^:"java/org/apache/tomcat/websocket/server/WsRemoteEndpointImplServer.java"

======= 3f316f1^:"java/org/apache/tomcat/websocket/server/WsRemoteEndpointImplServer.java"

======= 3f316f1^:"java/org/apache/tomcat/websocket/server/WsRemoteEndpointImplServer.java"

======= 3f316f1^:"java/org/apache/tomcat/websocket/server/WsRemoteEndpointImplServer.java"

        onWritePossible();
    public void onWritePossible() {
======= 3f316f1^:"java/org/apache/tomcat/websocket/server/WsRemoteEndpointImplServer.java"

                    clearHandler(null);
======= 3f316f1^:"java/org/apache/tomcat/websocket/server/WsRemoteEndpointImplServer.java"

            clearHandler(ioe);
======= 3f316f1^:"java/org/apache/tomcat/websocket/server/WsRemoteEndpointImplServer.java"

            clearHandler(new EOFException());
======= 3f316f1^:"java/org/apache/tomcat/websocket/server/WsRemoteEndpointImplServer.java"

    protected void onTimeout() {
            clearHandler(new SocketTimeoutException());
    private void clearHandler(Throwable t) {
======= 3f316f1^:"java/org/apache/tomcat/websocket/server/WsRemoteEndpointImplServer.java"

======= 3f316f1^:"java/org/apache/tomcat/websocket/server/WsServerContainer.java"

======= 3f316f1^:"java/org/apache/tomcat/websocket/server/WsServerContainer.java"

======= 3f316f1^:"java/org/apache/tomcat/websocket/server/WsServerContainer.java"

======= 3f316f1^:"java/org/apache/tomcat/websocket/server/WsServerContainer.java"

======= 3f316f1^:"java/org/apache/tomcat/websocket/server/WsServerContainer.java"

======= 3f316f1^:"java/org/apache/tomcat/websocket/server/WsServerContainer.java"

======= 3f316f1^:"java/org/apache/tomcat/websocket/server/WsServerContainer.java"

======= 3f316f1^:"java/org/apache/tomcat/websocket/server/WsWriteTimeout.java"

                    endpoint.onTimeout();

======= ad50e54^:"java/org/apache/jasper/compiler/TagLibraryInfoImpl.java"

======= ad50e54^:"java/org/apache/jasper/compiler/TagLibraryInfoImpl.java"

    private InputStream getResourceAsStream(String uri)
        if (uri.startsWith("file:")) {
            return new FileInputStream(new File(uri.substring(5)));
                String real = ctxt.getRealPath(uri);
                    return ctxt.getResourceAsStream(uri);
                return ctxt.getResourceAsStream(uri);

======= d244284^:"java/org/apache/catalina/loader/WebappClassLoader.java"

        while (tg.getParent() != null) {
            tg = tg.getParent();

======= b82c0c6^:"java/javax/el/ArrayELResolver.java"

            if (value != null &&
                    !base.getClass().getComponentType().isAssignableFrom(
                            value.getClass())) {
======= b82c0c6^:"java/javax/el/Util.java"

    private static boolean isAssignableFrom(Class<?> src, Class<?> target) {
======= b82c0c6^:"test/javax/el/TestArrayELResolver.java"


======= 514cefb^:"java/org/apache/tomcat/websocket/Util.java"

======= 514cefb^:"java/org/apache/tomcat/websocket/Util.java"

            MessageHandler listener, EndpointConfig endpointConfig) {
======= 514cefb^:"java/org/apache/tomcat/websocket/Util.java"

                            getOnMessageMethod(listener), null,
======= 514cefb^:"java/org/apache/tomcat/websocket/Util.java"

                            getOnMessageMethod(listener), null,
======= 514cefb^:"java/org/apache/tomcat/websocket/Util.java"

                            getOnMessageMethod(listener), null,
======= 514cefb^:"java/org/apache/tomcat/websocket/Util.java"

                        new PojoMessageHandlerWholeBinary(listener, m, null,
======= 514cefb^:"java/org/apache/tomcat/websocket/Util.java"

                        new PojoMessageHandlerWholeText(listener, m, null,
======= 514cefb^:"java/org/apache/tomcat/websocket/WsSession.java"

                Util.getMessageHandlers(listener, endpointConfig);

======= 4e4a24a^:"java/org/apache/tomcat/websocket/Util.java"

    public static Class<?> getDecoderType(Class<? extends Decoder> Decoder) {
        return (Class<?>) Util.getGenericType(Decoder.class, Decoder);
======= 4e4a24a^:"java/org/apache/tomcat/websocket/Util.java"

======= 4e4a24a^:"test/org/apache/tomcat/websocket/TestUtil.java"

======= 4e4a24a^:"test/org/apache/tomcat/websocket/TestUtil.java"

======= 4e4a24a^:"test/org/apache/tomcat/websocket/TestUtil.java"

======= 4e4a24a^:"test/org/apache/tomcat/websocket/pojo/TestEncodingDecoding.java"

======= 4e4a24a^:"test/org/apache/tomcat/websocket/pojo/TestEncodingDecoding.java"

======= 4e4a24a^:"test/org/apache/tomcat/websocket/pojo/TestEncodingDecoding.java"

======= 4e4a24a^:"test/org/apache/tomcat/websocket/pojo/TestEncodingDecoding.java"

======= 4e4a24a^:"test/org/apache/tomcat/websocket/pojo/TestEncodingDecoding.java"

======= 4e4a24a^:"test/org/apache/tomcat/websocket/pojo/TestEncodingDecoding.java"


======= 86ec1f4^:"java/org/apache/catalina/startup/Catalina.java"

======= 86ec1f4^:"java/org/apache/catalina/startup/Catalina.java"

        digester.setClassLoader(StandardServer.class.getClassLoader());
======= 86ec1f4^:"java/org/apache/catalina/startup/Catalina.java"

======= 86ec1f4^:"java/org/apache/catalina/startup/Catalina.java"

            digester.setClassLoader(Thread.currentThread().getContextClassLoader());

======= f0101d0^:"java/org/apache/catalina/servlets/DefaultServlet.java"

======= f0101d0^:"java/org/apache/catalina/servlets/DefaultServlet.java"

======= f0101d0^:"java/org/apache/catalina/servlets/DefaultServlet.java"

======= f0101d0^:"java/org/apache/catalina/servlets/DefaultServlet.java"

======= f0101d0^:"java/org/apache/catalina/servlets/DefaultServlet.java"

======= f0101d0^:"test/org/apache/catalina/servlets/TestDefaultServlet.java"

======= f0101d0^:"test/org/apache/catalina/servlets/TestDefaultServlet.java"


======= 06d8338^:"java/org/apache/jasper/JspC.java"

    protected void initWebXml() {
======= 06d8338^:"java/org/apache/jasper/JspC.java"


======= af49b44^:"java/org/apache/jasper/compiler/Node.java"

======= af49b44^:"java/org/apache/jasper/compiler/Node.java"

            return !expression && (el != null) && !namedAttribute;
======= af49b44^:"java/org/apache/jasper/compiler/Node.java"

======= af49b44^:"java/org/apache/jasper/compiler/Node.java"

======= af49b44^:"java/org/apache/jasper/compiler/Node.java"


======= bd56eea^:"java/org/apache/catalina/webresources/TomcatURLStreamHandlerFactory.java"

    private static TomcatURLStreamHandlerFactory instance =
            new TomcatURLStreamHandlerFactory();
     * Obtain a reference to the singleton instance,
    public static void register() {
        // Calling this method loads this class which in turn triggers all the
        // necessary registration.
     * Since the JVM only allows a single call to
     * {@link URL#setURLStreamHandlerFactory(URLStreamHandlerFactory)} and
     * Tomcat needs to register a handler, provide a mechanism to allow
     * applications to register their own handlers.
    public static void addUserFactory(URLStreamHandlerFactory factory) {
        instance.userFactories.add(factory);
======= bd56eea^:"java/org/apache/catalina/webresources/TomcatURLStreamHandlerFactory.java"

    private TomcatURLStreamHandlerFactory() {
        URL.setURLStreamHandlerFactory(this);

======= 95faaec^:"java/org/apache/catalina/manager/StatusManagerServlet.java"

        // No actions necessary

======= dd0cba7^:"java/org/apache/catalina/loader/WebappClassLoader.java"

======= dd0cba7^:"java/org/apache/catalina/loader/WebappClassLoader.java"

======= dd0cba7^:"java/org/apache/catalina/loader/WebappClassLoader.java"

======= dd0cba7^:"java/org/apache/catalina/loader/WebappClassLoader.java"

    extends URLClassLoader
    implements Lifecycle
 {
======= dd0cba7^:"java/org/apache/catalina/loader/WebappClassLoader.java"

======= dd0cba7^:"java/org/apache/catalina/loader/WebappClassLoader.java"

======= dd0cba7^:"java/org/apache/catalina/loader/WebappClassLoader.java"

======= dd0cba7^:"java/org/apache/catalina/loader/WebappClassLoader.java"

======= dd0cba7^:"java/org/apache/catalina/loader/WebappClassLoader.java"

                            && (!(name.endsWith(".class")))) {
======= dd0cba7^:"java/org/apache/catalina/loader/WebappClassLoader.java"

        String classPath = tempPath + ".class";
======= dd0cba7^:"java/org/apache/catalina/loader/WebappClassLoader.java"

    protected ResourceEntry findResourceInternal(String name, String path) {
======= dd0cba7^:"java/org/apache/catalina/loader/WebappClassLoader.java"

        boolean isClassResource = path.endsWith(".class");
======= dd0cba7^:"java/org/apache/catalina/loader/WebappClassLoader.java"

                        if (antiJARLocking && !(path.endsWith(".class"))) {
======= dd0cba7^:"java/org/apache/catalina/loader/WebappClassLoader.java"

                                            (".class"))) {
======= dd0cba7^:"java/org/apache/catalina/loader/WebappClassLoader.java"

======= dd0cba7^:"java/org/apache/catalina/loader/WebappClassLoader.java"

                String name = triggers[i].replace('.', '/') + ".class";
======= dd0cba7^:"java/org/apache/catalina/loader/WebappClassLoader.java"

======= dd0cba7^:"java/org/apache/catalina/loader/WebappClassLoader.java"

======= dd0cba7^:"java/org/apache/catalina/loader/WebappClassLoader.java"

======= dd0cba7^:"java/org/apache/catalina/loader/WebappClassLoader.java"


======= 90556a9^:"java/org/apache/catalina/util/ParameterMap.java"

======= 90556a9^:"java/org/apache/catalina/util/ParameterMap.java"

======= 90556a9^:"java/org/apache/tomcat/util/http/Parameters.java"

======= 90556a9^:"java/org/apache/tomcat/util/http/Parameters.java"

    private final HashMap<String,ArrayList<String>> paramHashValues =
            new HashMap<>();

======= f627cc8^:"java/org/apache/jasper/compiler/TagFileProcessor.java"

        JspServletWrapper wrapper = rctxt.getWrapper(wrapperUri);

======= 910d4d9^:"java/org/apache/catalina/authenticator/SpnegoAuthenticator.java"

                log.debug(sm.getString("spnegoAuthenticator.ticketValidateFail",
                        e));
            log.error(sm.getString("spnegoAuthenticator.serviceLoginFail", e));

======= f74257e^:"java/org/apache/catalina/servlets/DefaultServlet.java"

        serveResource(request, response, true);
======= f74257e^:"java/org/apache/catalina/servlets/DefaultServlet.java"

        serveResource(request, response, false);
======= f74257e^:"java/org/apache/catalina/servlets/DefaultServlet.java"

     * @param request The servlet request we are processing
     * @param content Should the content be included?
                                 boolean content)
======= f74257e^:"java/org/apache/catalina/servlets/DefaultServlet.java"

                    copy(resource, renderResult, writer);
======= f74257e^:"java/org/apache/catalina/servlets/DefaultServlet.java"

    protected void copy(WebResource resource, InputStream is, PrintWriter writer)
            throws IOException {
======= f74257e^:"java/org/apache/catalina/servlets/DefaultServlet.java"

        if (fileEncoding == null) {
            reader = new InputStreamReader(resourceInputStream,
                                           fileEncoding);

======= b284611^:"java/org/apache/catalina/valves/CometConnectionManagerValve.java"

======= b284611^:"java/org/apache/catalina/valves/CometConnectionManagerValve.java"

                Request[] requests = (Request[])
                        session.getAttribute(cometRequestsAttribute);
                            requests);
======= b284611^:"java/org/apache/catalina/valves/CometConnectionManagerValve.java"

                    session.setAttribute(cometRequestsAttribute, newRequests);
======= b284611^:"java/org/apache/catalina/valves/CometConnectionManagerValve.java"

                             reqs = (Request[])
                                session.getAttribute(cometRequestsAttribute);
======= b284611^:"java/org/apache/catalina/valves/CometConnectionManagerValve.java"

                                                newConnectionInfos);
======= b284611^:"java/org/apache/catalina/valves/CometConnectionManagerValve.java"

        Request[] reqs = (Request[])
            se.getSession().getAttribute(cometRequestsAttribute);
======= b284611^:"java/org/apache/catalina/valves/CometConnectionManagerValve.java"


======= 66932c4^:"java/org/apache/jasper/compiler/JspUtil.java"

        String targetType = expectedType.getCanonicalName();
                targetType = Boolean.class.getName();
                targetType = Byte.class.getName();
                targetType = Character.class.getName();
                targetType = Short.class.getName();
                targetType = Integer.class.getName();
                targetType = Long.class.getName();
                targetType = Float.class.getName();
                targetType = Double.class.getName();
======= 66932c4^:"java/org/apache/jasper/compiler/JspUtil.java"

                        + targetType

======= b022c57^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java"

                error =true;
======= b022c57^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java"

        return null;
======= b022c57^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/DataSourceFactory.java"

======= b022c57^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/DataSourceFactory.java"

======= b022c57^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/DataSourceFactory.java"

======= b022c57^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/DataSourceProxy.java"

======= b022c57^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/DataSourceProxy.java"

======= b022c57^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolConfiguration.java"

======= b022c57^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolProperties.java"

======= b022c57^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolProperties.java"

======= b022c57^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PooledConnection.java"

======= b022c57^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/jmx/ConnectionPool.java"

======= b022c57^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/jmx/ConnectionPool.java"


======= 262c069^:"java/org/apache/catalina/ha/session/DeltaSession.java"

        if (this.expiring) {
            return true;
        }
======= 262c069^:"java/org/apache/catalina/ha/session/DeltaSession.java"

        if (expiring)
        String expiredId = getIdInternal();
        if(notifyCluster && expiredId != null && manager != null &&
           manager instanceof DeltaManager) {
            DeltaManager dmanager = (DeltaManager)manager;
            CatalinaCluster cluster = dmanager.getCluster();
            ClusterMessage msg = dmanager.requestCompleted(expiredId, true);
            if (msg != null) {
                cluster.send(msg);
        }
        super.expire(notify);
        if (notifyCluster) {
            if (log.isDebugEnabled())
                log.debug(sm.getString("deltaSession.notifying",
                                       ((ClusterManager)manager).getName(),
                                       Boolean.valueOf(isPrimarySession()),
                                       expiredId));
            if ( manager instanceof DeltaManager ) {
                ( (DeltaManager) manager).sessionExpired(expiredId);
======= 262c069^:"java/org/apache/catalina/session/StandardSession.java"

        if (this.expiring) {
            return true;
        }
======= 262c069^:"java/org/apache/catalina/session/StandardSession.java"

        return (this.isValid);
======= 262c069^:"java/org/apache/catalina/session/StandardSession.java"

        // Check to see if expire is in progress or has previously been called
        if (expiring || !isValid)
            // Double check locking - expiring and isValid need to be volatile
            if (expiring || !isValid)
======= 262c069^:"java/org/apache/catalina/session/StandardSession.java"

            setValid(false);
======= 262c069^:"java/org/apache/catalina/session/StandardSession.java"

======= 262c069^:"java/org/apache/catalina/session/StandardSession.java"

        return (this.isValid || this.expiring);

======= f126b5a^:"java/org/apache/tomcat/util/net/jsse/JSSESocketFactory.java"

            if (JSSESocketFactory.defaultKeystoreType.equals(keystoreType)) {

======= 4aa42d7^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java"

            if (jmxPool!=null) jmxPool.notify(org.apache.tomcat.jdbc.pool.jmx.ConnectionPool.NOTIFY_INIT, getStackTrace(x));
            close(true);
            throw x;
======= 4aa42d7^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/DataSourceFactory.java"

======= 4aa42d7^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/DataSourceFactory.java"

        PROP_PROPAGATEINTERRUPTSTATE
======= 4aa42d7^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/DataSourceFactory.java"

======= 4aa42d7^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/DataSourceProxy.java"

======= 4aa42d7^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolConfiguration.java"

======= 4aa42d7^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolProperties.java"

======= 4aa42d7^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolProperties.java"

======= 4aa42d7^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/jmx/ConnectionPool.java"


======= 41225cd^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java"

                } else {
                    Thread.interrupted();
======= 41225cd^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java"

                } else {
                    Thread.interrupted();

======= cf1e104^:"java/org/apache/coyote/ajp/AbstractAjpProcessor.java"

======= cf1e104^:"java/org/apache/coyote/ajp/AbstractAjpProcessor.java"

======= cf1e104^:"java/org/apache/coyote/ajp/AbstractAjpProcessor.java"

======= cf1e104^:"java/org/apache/coyote/ajp/AbstractAjpProcessor.java"

    // Methods called by prepareResponse()
    protected abstract void output(byte[] src, int offset, int length)
            throws IOException;
======= cf1e104^:"java/org/apache/coyote/ajp/AjpAprProcessor.java"

        } else if (actionCode == ActionCode.ASYNC_SETTIMEOUT) {
            if (param == null) return;
            long timeout = ((Long)param).longValue();
            socketWrapper.setTimeout(timeout);
======= cf1e104^:"java/org/apache/coyote/ajp/AjpAprProcessor.java"

======= cf1e104^:"java/org/apache/coyote/ajp/AjpNioProcessor.java"

======= cf1e104^:"java/org/apache/coyote/ajp/AjpNioProcessor.java"

        } else if (actionCode == ActionCode.ASYNC_SETTIMEOUT) {
            if (param == null) return;
            long timeout = ((Long)param).longValue();
            final KeyAttachment ka =
                    (KeyAttachment)socketWrapper.getSocket().getAttachment(false);
            if (keepAliveTimeout > 0) {
                ka.setTimeout(timeout);
            }
======= cf1e104^:"java/org/apache/coyote/ajp/AjpNioProcessor.java"

======= cf1e104^:"java/org/apache/coyote/ajp/AjpProcessor.java"

        } else if (actionCode == ActionCode.ASYNC_SETTIMEOUT) {
            if (param == null) return;
            long timeout = ((Long)param).longValue();
            // if we are not piggy backing on a worker thread, set the timeout
            socketWrapper.setTimeout(timeout);
======= cf1e104^:"java/org/apache/coyote/ajp/AjpProcessor.java"


======= 7e74aee^:"java/org/apache/catalina/realm/JNDIRealm.java"

                containerLog.warn(sm.getString("jndiRealm.exception"), e);
======= 7e74aee^:"java/org/apache/catalina/realm/JNDIRealm.java"

                containerLog.warn(sm.getString("jndiRealm.exception"), e);
======= 7e74aee^:"java/org/apache/catalina/realm/JNDIRealm.java"

                containerLog.warn(sm.getString("jndiRealm.exception"), e);
======= 7e74aee^:"java/org/apache/catalina/realm/JNDIRealm.java"

                containerLog.warn(sm.getString("jndiRealm.exception"), e);
======= 7e74aee^:"java/org/apache/catalina/realm/JNDIRealm.java"

                containerLog.warn(sm.getString("jndiRealm.exception"), e);
======= 7e74aee^:"java/org/apache/catalina/realm/JNDIRealm.java"

            containerLog.warn(sm.getString("jndiRealm.exception"), e);

======= 6d99103^:"java/org/apache/coyote/ajp/AbstractAjpProcessor.java"

======= 6d99103^:"java/org/apache/coyote/ajp/AbstractAjpProcessor.java"

======= 6d99103^:"java/org/apache/coyote/ajp/AbstractAjpProcessor.java"

        responseMessage.appendInt(response.getStatus());
======= 6d99103^:"java/org/apache/coyote/ajp/AbstractAjpProcessor.java"

            int len = chunk.getLength();
            // 4 - hardcoded, byte[] marshaling overhead
            // Adjust allowed size if packetSize != default (Constants.MAX_PACKET_SIZE)
            int chunkSize = Constants.MAX_SEND_SIZE + packetSize - Constants.MAX_PACKET_SIZE;
            int off = 0;
            while (len > 0) {
                int thisTime = len;
                if (thisTime > chunkSize) {
                    thisTime = chunkSize;
                len -= thisTime;
                responseMessage.reset();
                responseMessage.appendByte(Constants.JK_AJP13_SEND_BODY_CHUNK);
                responseMessage.appendBytes(chunk.getBytes(), chunk.getOffset() + off, thisTime);
                responseMessage.end();
                output(responseMessage.getBuffer(), 0, responseMessage.getLen());
                off += thisTime;
            }
            bytesWritten += chunk.getLength();
======= 6d99103^:"test/org/apache/coyote/ajp/TestAbstractAjpProcessor.java"

======= 6d99103^:"test/org/apache/coyote/ajp/TestAbstractAjpProcessor.java"

======= 6d99103^:"test/org/apache/coyote/ajp/TestAbstractAjpProcessor.java"

======= 6d99103^:"test/org/apache/coyote/ajp/TestAbstractAjpProcessor.java"


======= 058f044^:"java/org/apache/catalina/startup/Tomcat.java"

======= 058f044^:"java/org/apache/catalina/startup/Tomcat.java"

     * web application and any WEB-INF/web.xml packaged with the application
     * will be processed normally. Normal web fragment and
======= 058f044^:"java/org/apache/catalina/startup/Tomcat.java"

======= 058f044^:"java/org/apache/catalina/startup/Tomcat.java"

        String base = "org.apache.catalina.core.ContainerBase.[default].[";
            base += getHost().getName();
            base += host.getName();
        base += "].[";
        base += ctx;
        base += "]";
        Logger.getLogger(base).setLevel(Level.WARNING);
======= 058f044^:"java/org/apache/catalina/startup/Tomcat.java"

======= 058f044^:"test/org/apache/catalina/startup/TestTomcat.java"

======= 058f044^:"test/org/apache/catalina/startup/TestTomcat.java"


======= 9a22360^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"


======= 8b03dcf^:"java/org/apache/tomcat/util/http/parser/HttpParser.java"

                String value = readTokenOrQuotedString(input, true);
            } else {
                parameters.put(attribute.toLowerCase(Locale.ENGLISH), "");
======= 8b03dcf^:"test/org/apache/tomcat/util/http/parser/TestMediaType.java"


======= ab70f07^:"java/org/apache/el/parser/AstFunction.java"

======= ab70f07^:"java/org/apache/el/parser/AstFunction.java"

======= ab70f07^:"java/org/apache/el/parser/AstFunction.java"


======= 7f6ea48^:"java/org/apache/catalina/connector/InputBuffer.java"

        if (isFinished() || isReady()) {
        return available() == 0;
======= 7f6ea48^:"java/org/apache/catalina/connector/Request.java"

        AtomicBoolean result = new AtomicBoolean(false);
        coyoteRequest.action(ActionCode.REQUEST_BODY_FULLY_READ, result);
        return result.get();
======= 7f6ea48^:"java/org/apache/coyote/Request.java"

    // -------------------- Input Buffer --------------------
======= 7f6ea48^:"test/org/apache/catalina/nonblocking/TestNonBlockingAPI.java"

                servlet.wlistener.onErrorInvoked);
======= 7f6ea48^:"test/org/apache/catalina/nonblocking/TestNonBlockingAPI.java"

======= 7f6ea48^:"test/org/apache/catalina/nonblocking/TestNonBlockingAPI.java"

======= 7f6ea48^:"test/org/apache/catalina/nonblocking/TestNonBlockingAPI.java"

======= 7f6ea48^:"test/org/apache/catalina/nonblocking/TestNonBlockingAPI.java"


======= 98ee5b4^:"java/org/apache/tomcat/websocket/server/UriTemplate.java"

======= 98ee5b4^:"java/org/apache/tomcat/websocket/server/UriTemplate.java"

    private final Map<String,Segment> segments = new LinkedHashMap<>();
======= 98ee5b4^:"java/org/apache/tomcat/websocket/server/UriTemplate.java"

======= 98ee5b4^:"java/org/apache/tomcat/websocket/server/UriTemplate.java"

======= 98ee5b4^:"java/org/apache/tomcat/websocket/server/UriTemplate.java"

            Segment old =
                    this.segments.put(segment, new Segment(index, segment));
            if (old != null) {
                throw new IllegalArgumentException(
                        sm.getString("uriTemplate.duplicateName", segment));
            }
======= 98ee5b4^:"java/org/apache/tomcat/websocket/server/UriTemplate.java"

                candidate.getSegments().values().iterator();
        Iterator<Segment> targetSegments = segments.values().iterator();
======= 98ee5b4^:"java/org/apache/tomcat/websocket/server/UriTemplate.java"

    private Map<String,Segment> getSegments() {
      <Method name="testDuplicate" />
    <Bug  pattern="DLS_DEAD_LOCAL_STORE"/>
======= 98ee5b4^:"test/org/apache/tomcat/websocket/server/TestUriTemplate.java"

   }
======= 98ee5b4^:"test/org/apache/tomcat/websocket/server/TestUriTemplate.java"

   }
    public void testDuplicate() throws Exception {
   }

======= 135e2c4^:"java/org/apache/catalina/realm/JNDIRealm.java"

======= 135e2c4^:"java/org/apache/catalina/realm/JNDIRealm.java"

            try {
                context.removeFromEnvironment(
                        Context.SECURITY_AUTHENTICATION);
            } catch (NamingException e) {
                // Ignore
            }
            try {
                context.removeFromEnvironment(
                        "javax.security.sasl.server.authentication");
            } catch (NamingException e) {
                // Ignore
            }
            try {
                context.removeFromEnvironment(
                        "javax.security.sasl.qop");
            } catch (NamingException e) {
                // Ignore
            }
======= 135e2c4^:"java/org/apache/catalina/realm/JNDIRealm.java"


======= e19e794^:"java/org/apache/catalina/session/FileStore.java"

======= e19e794^:"java/org/apache/catalina/session/FileStore.java"

            if (classLoader != null)
            else
======= e19e794^:"java/org/apache/catalina/session/FileStore.java"

        }
        try {
            StandardSession session =
                (StandardSession) manager.createEmptySession();
            session.readObjectData(ois);
            session.setManager(manager);
            return (session);
            // Close the input stream
            try {
                ois.close();
            } catch (IOException f) {
                // Ignore
======= e19e794^:"java/org/apache/catalina/session/JDBCStore.java"

======= e19e794^:"java/org/apache/catalina/session/JDBCStore.java"

======= e19e794^:"java/org/apache/catalina/session/JDBCStore.java"


======= 3490f73^:"java/org/apache/tomcat/websocket/server/WsServerContainer.java"

        FilterRegistration fr = servletContext.addFilter(

======= df02b95^:"java/org/apache/catalina/startup/ContextConfig.java"

                    log.info(sm.getString("contextConfig.role.auth", roles[j]));
======= df02b95^:"java/org/apache/catalina/startup/ContextConfig.java"

                log.info(sm.getString("contextConfig.role.runas", runAs));
                    log.info(sm.getString("contextConfig.role.link", link));

======= 7d0408e^:"java/org/apache/juli/FileHandler.java"

======= 7d0408e^:"java/org/apache/juli/FileHandler.java"

                setFormatter(new SimpleFormatter());
            setFormatter(new SimpleFormatter());

======= aa15bac^:"java/org/apache/catalina/core/StandardContext.java"


======= 6cd42af^:"java/org/apache/catalina/realm/JDBCRealm.java"

                dbConnection.commit();

======= d370084^:"java/org/apache/tomcat/websocket/WsSession.java"

            log.error(sm.getString("wsSession.sendCloseFail"), ioe);

======= 7540e90^:"java/org/apache/tomcat/util/scan/StandardJarScanner.java"

                        process(callback, url, true);
======= 7540e90^:"java/org/apache/tomcat/util/scan/StandardJarScanner.java"

                        // Extract the jarName if there is one to be found
                        String jarName = getJarName(urls[i]);
                        // Skip JARs known not to be interesting
                        if (jarName != null &&
                                jarScanFilter.check(scanType, jarName)) {
                                log.debug(sm.getString("jarScan.classloaderJarScan", urls[i]));
                                process(callback, urls[i], isWebapp);
                                        "jarScan.classloaderFail",urls[i]), ioe);
                                log.trace(sm.getString("jarScan.classloaderJarNoScan", urls[i]));
======= 7540e90^:"java/org/apache/tomcat/util/scan/StandardJarScanner.java"

    private void process(JarScannerCallback callback, URL url, boolean isWebapp)
            throws IOException {
======= 7540e90^:"java/org/apache/tomcat/util/scan/StandardJarScanner.java"

                        } else if (f.isDirectory() && scanAllDirectories) {
                            File metainf = new File(f.getAbsoluteFile() +
                                    File.separator + "META-INF");
                            if (metainf.isDirectory()) {
======= 7540e90^:"java/org/apache/tomcat/util/scan/StandardJarScanner.java"

    /*
     * Extract the JAR name, if present, from a URL
     */
    private String getJarName(URL url) {
        String name = null;
        String path = url.getPath();
        int end = path.indexOf(Constants.JAR_EXT);
        if (end != -1) {
            int start = path.lastIndexOf('/', end);
            name = path.substring(start + 1, end + 4);
        } else if (isScanAllDirectories()){
            int start = path.lastIndexOf('/');
            name = path.substring(start + 1);
        return name;
    }
       <p>The comma separated list of JAR file name patterns to skip when
       scanning for TLDs. If not specified, the default is obtained from the
       <code>tomcat.util.scan.StandardJarScanFilter.jarsToSkip</code> system
       property.</p>
       <p>The comma separated list of JAR file name patterns to scan when
       scanning for TLDs. If not specified, the default is obtained from the
       <code>tomcat.util.scan.StandardJarScanFilter.jarsToScan</code> system
       property.</p>
       <p>The comma separated list of JAR file name patterns to skip when
       scanning for pluggable features. If not specified, the default is
       obtained from the
       <p>The comma separated list of JAR file name patterns to scan when
       scanning for pluggable features. If not specified, the default is
       obtained from the
  used to scan the web application for JAR files. It is typically used during
  web application start to identify configuration files such as TLDs or
  web-fragment.xml files that must be processed as part of the web application
  initialisation.</p>
       if are expanded Jar files. The default is <code>false</code>. Tomcat
       directory to be an expanded JAR file.</p>

======= 11c05b7^:"java/org/apache/jasper/compiler/TagPluginManager.java"

    private PageInfo pageInfo;
======= 11c05b7^:"java/org/apache/jasper/compiler/TagPluginManager.java"

        this.pageInfo = pageInfo;
        page.visit(new Node.Visitor() {
            @Override
            public void visit(Node.CustomTag n)
                    throws JasperException {
                invokePlugin(n);
                visitBody(n);
            }
        });
======= 11c05b7^:"java/org/apache/jasper/compiler/TagPluginManager.java"

    private void invokePlugin(Node.CustomTag n) {
======= 11c05b7^:"java/org/apache/jasper/compiler/TagPluginManager.java"


======= 6e514c0^:"java/org/apache/catalina/startup/ContextConfig.java"

======= 6e514c0^:"java/org/apache/catalina/startup/ContextConfig.java"

            processServletContainerInitializers(orderedFragments);
======= 6e514c0^:"java/org/apache/catalina/startup/ContextConfig.java"

     * Implementations will be added in web-fragment.xml priority order.
    protected void processServletContainerInitializers(
            Set<WebXml> fragments) {
        for (WebXml fragment : fragments) {
            URL url = fragment.getURL();
            Jar jar = null;
            InputStream is = null;
            List<ServletContainerInitializer> detectedScis = null;
                if ("jar".equals(url.getProtocol())) {
                    jar = JarFactory.newInstance(url);
                    is = jar.getInputStream(SCI_LOCATION);
                } else if ("file".equals(url.getProtocol())) {
                    String path = url.getPath();
                    File file = new File(path, SCI_LOCATION);
                    if (file.exists()) {
                        is = new FileInputStream(file);
                    }
                }
                if (is != null) {
                    detectedScis = getServletContainerInitializers(is);
                }
            } catch (IOException ioe) {
                log.error(sm.getString(
                        "contextConfig.servletContainerInitializerFail", url,
                        context.getName()));
                ok = false;
                return;
            } finally {
                if (is != null) {
                    try {
                        is.close();
                    } catch (IOException e) {
                        // Ignore
                    }
                }
                if (jar != null) {
                    jar.close();
            if (detectedScis == null) {
            for (ServletContainerInitializer sci : detectedScis) {
                initializerClassMap.put(sci, new HashSet<Class<?>>());
                HandlesTypes ht = null;
                try {
                    ht = sci.getClass().getAnnotation(HandlesTypes.class);
                } catch (Exception e) {
                    if (log.isDebugEnabled()) {
                        log.info(sm.getString("contextConfig.sci.debug", url),
                                e);
                    } else {
                        log.info(sm.getString("contextConfig.sci.info", url));
                    }
                }
                if (ht != null) {
                    Class<?>[] types = ht.value();
                    if (types != null) {
                        for (Class<?> type : types) {
                            if (type.isAnnotation()) {
                                handlesTypesAnnotations = true;
                            } else {
                                handlesTypesNonAnnotations = true;
                            }
                            Set<ServletContainerInitializer> scis = typeInitializerMap
                                    .get(type);
                            if (scis == null) {
                                scis = new HashSet<>();
                                typeInitializerMap.put(type, scis);
                            }
                            scis.add(sci);
                        }
                    }
                }
        }
    }
    /**
     * Extract the name of the ServletContainerInitializer.
     *
     * @param is    The resource where the name is defined
     * @return      The class name
     * @throws IOException
     */
    protected List<ServletContainerInitializer> getServletContainerInitializers(
            InputStream is) throws IOException {
        List<ServletContainerInitializer> initializers = new ArrayList<>();
        if (is != null) {
            String line = null;
            try {
                BufferedReader br = new BufferedReader(new InputStreamReader(
                        is, "UTF-8"));
                while ((line = br.readLine()) != null) {
                    line = line.trim();
                    if (line.length() > 0) {
                        int i = line.indexOf('#');
                        if (i > -1) {
                            if (i == 0) {
                                continue;
                            }
                            line = line.substring(0, i).trim();
                        }
                        initializers.add(getServletContainerInitializer(line));
                    }
            } catch (UnsupportedEncodingException e) {
                // Should never happen with UTF-8
                // If it does - ignore & return null
        return initializers;
    protected ServletContainerInitializer getServletContainerInitializer(
            String className) throws IOException {
        ServletContainerInitializer sci = null;
        try {
            Class<?> clazz = Class.forName(className, true, context.getLoader()
                    .getClassLoader());
            sci = (ServletContainerInitializer) clazz.newInstance();
        } catch (ClassNotFoundException e) {
            log.error(sm.getString("contextConfig.invalidSci", className), e);
            throw new IOException(e);
        } catch (InstantiationException e) {
            log.error(sm.getString("contextConfig.invalidSci", className), e);
            throw new IOException(e);
        } catch (IllegalAccessException e) {
            log.error(sm.getString("contextConfig.invalidSci", className), e);
            throw new IOException(e);
        }
        return sci;
    }
======= 6e514c0^:"java/org/apache/catalina/startup/ContextConfig.java"

======= 6e514c0^:"java/org/apache/catalina/startup/ContextConfig.java"


======= 11bf498^:"java/org/apache/coyote/ajp/AjpNioProcessor.java"

        long writeTimeout = att.getTimeout();
======= 11bf498^:"java/org/apache/coyote/http11/InternalNioOutputBuffer.java"

        long writeTimeout = att.getTimeout();
======= 11bf498^:"java/org/apache/coyote/http11/upgrade/NioServletOutputStream.java"

        long writeTimeout = att.getTimeout();
======= 11bf498^:"java/org/apache/coyote/http11/upgrade/NioServletOutputStream.java"

        long writeTimeout = att.getTimeout();
======= 11bf498^:"java/org/apache/tomcat/util/net/NioEndpoint.java"

======= 11bf498^:"java/org/apache/tomcat/util/net/NioEndpoint.java"


======= ab6f21d^:"java/org/apache/tomcat/websocket/server/WsServerContainer.java"

        if (wsSession == null) {

======= 85f611e^:"java/org/apache/tomcat/util/descriptor/web/JspPropertyGroup.java"

======= 85f611e^:"java/org/apache/tomcat/util/descriptor/web/JspPropertyGroup.java"

    private final Set<String> includeCodas = new LinkedHashSet<>();
    public Set<String> getIncludeCodas() { return includeCodas; }
    private final Set<String> includePreludes = new LinkedHashSet<>();
    public Set<String> getIncludePreludes() { return includePreludes; }
======= 85f611e^:"test/org/apache/jasper/compiler/TestCompiler.java"

======= 85f611e^:"test/org/apache/jasper/compiler/TestCompiler.java"

======= 85f611e^:"test/org/apache/jasper/servlet/TestJspCServletContext.java"

        Assert.assertEquals(1, propertyGroups.size());
        JspPropertyGroupDescriptor groupDescriptor =
                propertyGroups.iterator().next();
======= 85f611e^:"test/org/apache/jasper/servlet/TestJspCServletContext.java"

======= 85f611e^:"test/org/apache/jasper/servlet/TestJspCServletContext.java"


======= c6a45a6^:"java/org/apache/jasper/compiler/JspConfig.java"

======= c6a45a6^:"java/org/apache/jasper/compiler/JspConfig.java"

                Vector<String> includePreludes = new Vector<>();
                includePreludes.addAll(jspPropertyGroup.getIncludePreludes());
                Vector<String> includeCodas = new Vector<>();
                includeCodas.addAll(jspPropertyGroup.getIncludeCodas());
                JspProperty property = new JspProperty(jspPropertyGroup.getIsXml(),
                        jspPropertyGroup.getElIgnored(),
                        jspPropertyGroup.getScriptingInvalid(),
                        jspPropertyGroup.getPageEncoding(),
                        includePreludes,
                        includeCodas,
                        jspPropertyGroup.getDeferredSyntaxAllowedAsLiteral(),
                        jspPropertyGroup.getTrimDirectiveWhitespaces(),
                        jspPropertyGroup.getDefaultContentType(),
                        jspPropertyGroup.getBuffer(),
                        jspPropertyGroup.getErrorOnUndeclaredNamespace());


======= 186a782^:"java/org/apache/jasper/JspC.java"


======= 8d6537d^:"java/org/apache/jasper/servlet/JspCServletContext.java"

======= 8d6537d^:"java/org/apache/tomcat/util/descriptor/web/WebXmlParser.java"


======= 68f6f6f^:"java/org/apache/coyote/http11/upgrade/AbstractProcessor.java"

======= 68f6f6f^:"java/org/apache/coyote/http11/upgrade/AbstractProcessor.java"

======= 68f6f6f^:"java/org/apache/coyote/http11/upgrade/AbstractProcessor.java"

======= 68f6f6f^:"java/org/apache/coyote/http11/upgrade/AprProcessor.java"

======= 68f6f6f^:"java/org/apache/coyote/http11/upgrade/BioProcessor.java"

======= 68f6f6f^:"java/org/apache/coyote/http11/upgrade/NioProcessor.java"

======= 68f6f6f^:"java/org/apache/tomcat/util/net/NioEndpoint.java"

                        if (socket.isHandshakeComplete()) {
======= 68f6f6f^:"java/org/apache/tomcat/util/net/NioEndpoint.java"

                    // Suppress null warnings for key in this block since
                    // key can't be null in this block

======= 4758796^:"java/org/apache/tomcat/websocket/server/WsRemoteEndpointImplServer.java"

        clearHandler(new SocketTimeoutException());
======= 4758796^:"java/org/apache/tomcat/websocket/server/WsRemoteEndpointImplServer.java"

        if (t == null) {
            sh.onResult(new SendResult());
        } else {
            sh.onResult(new SendResult(t));

======= 95ee699^:"java/org/apache/coyote/http11/AbstractHttp11Processor.java"

        // Add date header
        headers.setValue("Date").setString(FastHttpDateFormat.getCurrentDate());

======= 6c54031^:"java/org/apache/jasper/compiler/JspDocumentParser.java"

        String currentPrefix = getPrefix(current.getQName());
        if (JSP_URI.equals(uri) && TEXT_ACTION.equals(current.getLocalName())
                && "jsp".equals(currentPrefix)) {
  <a href="#" onclick="window.alert(&quot;${'foo'}&quot;)">foo</a>
  <a href="#" onclick="window.alert(&quot;bar&quot;)">bar</a>

======= c8376e8^:"java/org/apache/jasper/compiler/JspConfig.java"

        if (ctxt.getMajorVersion() < 2) {
        if (ctxt.getMajorVersion() == 2) {
            if (ctxt.getMinorVersion() < 5) {
            if (ctxt.getMinorVersion() < 4) {

======= aa7896b^:"java/org/apache/catalina/core/StandardContext.java"

======= aa7896b^:"java/org/apache/catalina/core/StandardContext.java"

        if (this.publicId == null)
            return (false);
        if (this.publicId.equals
            (org.apache.catalina.startup.Constants.WebDtdPublicId_22))
            return (true);
        else
            return (false);
======= aa7896b^:"java/org/apache/tomcat/util/descriptor/web/WebXml.java"

======= aa7896b^:"java/org/apache/tomcat/util/descriptor/web/WebXml.java"

        if (version == null) return;
        // Update major and minor version
        // Expected format is n.n - allow for any number of digits just in case
        String major = null;
        String minor = null;
        int split = version.indexOf('.');
        if (split < 0) {
            // Major only
            major = version;
        } else {
            major = version.substring(0, split);
            minor = version.substring(split + 1);
        }
        if (major == null || major.length() == 0) {
            majorVersion = 0;
        } else {
            try {
                majorVersion = Integer.parseInt(major);
            } catch (NumberFormatException nfe) {
                log.warn(sm.getString("webXml.version.nfe", major, version),
                        nfe);
                majorVersion = 0;
            }
        }
        if (minor == null || minor.length() == 0) {
            minorVersion = 0;
        } else {
            try {
                minorVersion = Integer.parseInt(minor);
            } catch (NumberFormatException nfe) {
                log.warn(sm.getString("webXml.version.nfe", minor, version),
                        nfe);
            }
            // skip
        } else if (org.apache.catalina.startup.Constants.WebSchemaPublicId_31.
                equalsIgnoreCase(publicId) ||
                org.apache.catalina.startup.Constants.WebFragmentSchemaPublicId_31.
                equalsIgnoreCase(publicId)) {
            majorVersion = 3;
            minorVersion = 1;
            this.publicId = publicId;
        } else if (org.apache.catalina.startup.Constants.WebSchemaPublicId_30.
                equalsIgnoreCase(publicId) ||
                org.apache.catalina.startup.Constants.WebFragmentSchemaPublicId_30.
                equalsIgnoreCase(publicId)) {
            majorVersion = 3;
            minorVersion = 0;
            this.publicId = publicId;
        } else if (org.apache.catalina.startup.Constants.WebSchemaPublicId_25.
                equalsIgnoreCase(publicId)) {
            majorVersion = 2;
            minorVersion = 5;
            this.publicId = publicId;
        } else if (org.apache.catalina.startup.Constants.WebSchemaPublicId_24.
                equalsIgnoreCase(publicId)) {
            majorVersion = 2;
            minorVersion = 4;
            this.publicId = publicId;
        } else if (org.apache.catalina.startup.Constants.WebDtdPublicId_23.
                equalsIgnoreCase(publicId)) {
            majorVersion = 2;
            minorVersion = 3;
            this.publicId = publicId;
        } else if (org.apache.catalina.startup.Constants.WebDtdPublicId_22.
                equalsIgnoreCase(publicId)) {
            majorVersion = 2;
            minorVersion = 2;
            this.publicId = publicId;
        } else if ("datatypes".equals(publicId)) {
            // Will occur when validation is enabled and dependencies are
            // traced back. Ignore it.
        } else {
            // Unrecognised publicId
            log.warn(sm.getString("webXml.unrecognisedPublicId", publicId));
======= aa7896b^:"java/org/apache/tomcat/util/digester/Digester.java"

======= aa7896b^:"java/org/apache/tomcat/util/digester/Digester.java"

======= aa7896b^:"java/org/apache/tomcat/util/digester/Digester.java"

======= aa7896b^:"java/org/apache/tomcat/util/digester/Digester.java"

======= aa7896b^:"java/org/apache/tomcat/util/digester/Digester.java"

    /**
     * Resolve the requested external entity.
     *
     * @param publicId The public identifier of the entity being referenced
     * @param systemId The system identifier of the entity being referenced
     *
     * @exception SAXException if a parsing exception occurs
     *
     */
    public InputSource resolveEntity(String publicId, String systemId)
            throws SAXException {
            saxLog.debug("resolveEntity('" + publicId + "', '" + systemId + "')");
        if (publicId != null)
            this.publicId = publicId;
======= aa7896b^:"java/org/apache/tomcat/util/digester/Digester.java"

                    log.debug(" Trying to resolve using system ID '" + systemId + "'");
======= aa7896b^:"java/org/apache/tomcat/util/digester/Digester.java"

    // ------------------------------------------------- ErrorHandler Methods
======= aa7896b^:"java/org/apache/tomcat/util/digester/Digester.java"

======= aa7896b^:"test/org/apache/tomcat/util/descriptor/web/TestWebXml.java"

======= aa7896b^:"test/org/apache/tomcat/util/descriptor/web/TestWebXml.java"

        // Reset
        Assert.assertEquals(0, webxml.getMajorVersion());
        Assert.assertEquals(0, webxml.getMinorVersion());
        Assert.assertEquals(0, webxml.getMajorVersion());
        Assert.assertEquals(0, webxml.getMinorVersion());
        // major only
        webxml.setVersion("3");
        Assert.assertEquals(3, webxml.getMajorVersion());
        Assert.assertEquals(0, webxml.getMinorVersion());
        // no minor digit
        webxml.setVersion("0.0");   // reset
        webxml.setVersion("3.");
        Assert.assertEquals(3, webxml.getMajorVersion());
        Assert.assertEquals(0, webxml.getMinorVersion());
        // minor only
        webxml.setVersion("0.0");   // reset
        webxml.setVersion(".5");
        Assert.assertEquals(0, webxml.getMajorVersion());
        Assert.assertEquals(5, webxml.getMinorVersion());
        // leading & training zeros
        webxml.setVersion("0.0");   // reset
        webxml.setVersion("002.500");
        Assert.assertEquals(500, webxml.getMinorVersion());
======= aa7896b^:"test/org/apache/tomcat/util/descriptor/web/TestWebXml.java"

        webxml.setPublicId(
                org.apache.catalina.startup.Constants.WebDtdPublicId_22);
======= aa7896b^:"test/org/apache/tomcat/util/descriptor/web/TestWebXml.java"

        webxml.setPublicId(
                org.apache.catalina.startup.Constants.WebDtdPublicId_23);
    public void testParsePublicIdVersion24() {
        webxml.setPublicId(
                org.apache.catalina.startup.Constants.WebSchemaPublicId_24);
    public void testParsePublicIdVersion25() {
        webxml.setPublicId(
                org.apache.catalina.startup.Constants.WebSchemaPublicId_25);
    public void testParsePublicIdVersion30() {
        webxml.setPublicId(
                org.apache.catalina.startup.Constants.WebSchemaPublicId_30);
    public void testParsePublicIdVersion31() {
        webxml.setPublicId(
                org.apache.catalina.startup.Constants.WebSchemaPublicId_31);


      manifest="${tomcat.manifests}/jsp-api.jar.manifest"
      notice="${tomcat.manifests}/jsp-api.jar.notice"
      license="${tomcat.manifests}/jsp-api.jar.license" />
 Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
            targetNamespace="http://java.sun.com/xml/ns/j2ee"
            xmlns:j2ee="http://java.sun.com/xml/ns/j2ee"
            xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            elementFormDefault="qualified"
            attributeFormDefault="unqualified"
            version="2.0">
  <xsd:annotation>
    <xsd:documentation>
      @(#)jsp_2_0.xsds  1.17 03/18/03
    </xsd:documentation>
  </xsd:annotation>
  <xsd:annotation>
    <xsd:documentation>
      This is the XML Schema for the JSP 2.0 deployment descriptor
      types.  The JSP 2.0 schema contains all the special
      structures and datatypes that are necessary to use JSP files
      from a web application.
      The contents of this schema is used by the web-app_2_4.xsd
      file to define JSP specific content.
    </xsd:documentation>
  </xsd:annotation>
  <xsd:annotation>
    <xsd:documentation>
      The following conventions apply to all J2EE
      deployment descriptor elements unless indicated otherwise.
      - In elements that specify a pathname to a file within the
        same JAR file, relative filenames (i.e., those not
        starting with "/") are considered relative to the root of
        the JAR file's namespace.  Absolute filenames (i.e., those
        starting with "/") also specify names in the root of the
        JAR file's namespace.  In general, relative names are
        preferred.  The exception is .war files where absolute
        names are preferred for consistency with the Servlet API.
    </xsd:documentation>
  </xsd:annotation>
  <xsd:include schemaLocation="j2ee_1_4.xsd"/>
  <xsd:complexType name="jsp-configType">
    <xsd:annotation>
      <xsd:documentation>
        The jsp-configType is used to provide global configuration
        information for the JSP files in a web application. It has
        two subelements, taglib and jsp-property-group.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="taglib"
                   type="j2ee:taglibType"
                   minOccurs="0"
                   maxOccurs="unbounded"/>
      <xsd:element name="jsp-property-group"
                   type="j2ee:jsp-property-groupType"
                   minOccurs="0"
                   maxOccurs="unbounded"/>
    </xsd:sequence>
    <xsd:attribute name="id" type="xsd:ID"/>
  </xsd:complexType>
  <xsd:complexType name="jsp-fileType">
    <xsd:annotation>
      <xsd:documentation>
        The jsp-file element contains the full path to a JSP file
        within the web application beginning with a `/'.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:simpleContent>
      <xsd:restriction base="j2ee:pathType"/>
    </xsd:simpleContent>
  </xsd:complexType>
  <xsd:complexType name="jsp-property-groupType">
    <xsd:annotation>
      <xsd:documentation>
        The jsp-property-groupType is used to group a number of
        files so they can be given global property information.
        All files so described are deemed to be JSP files.  The
        following additional properties can be described:
            - Control whether EL is ignored
            - Control whether scripting elements are invalid
            - Indicate pageEncoding information.
            - Indicate that a resource is a JSP document (XML)
            - Prelude and Coda automatic includes.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:group ref="j2ee:descriptionGroup"/>
      <xsd:element name="url-pattern"
                   type="j2ee:url-patternType"
                   maxOccurs="unbounded"/>
      <xsd:element name="el-ignored"
                   type="j2ee:true-falseType"
                   minOccurs="0">
        <xsd:annotation>
          <xsd:documentation>
            Can be used to easily set the isELIgnored
            property of a group of JSP pages.  By default, the
            EL evaluation is enabled for Web Applications using
            a Servlet 2.4 or greater web.xml, and disabled
            otherwise.
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="page-encoding"
                   type="j2ee:string"
                   minOccurs="0">
        <xsd:annotation>
          <xsd:documentation>
            The valid values of page-encoding are those of the
            pageEncoding page directive.  It is a
            translation-time error to name different encodings
            in the pageEncoding attribute of the page directive
            of a JSP page and in a JSP configuration element
            matching the page.  It is also a translation-time
            error to name different encodings in the prolog
            or text declaration of a document in XML syntax and
            in a JSP configuration element matching the document.
            It is legal to name the same encoding through
            mulitple mechanisms.
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="scripting-invalid"
                   type="j2ee:true-falseType"
                   minOccurs="0">
        <xsd:annotation>
          <xsd:documentation>
            Can be used to easily disable scripting in a
            group of JSP pages.  By default, scripting is
            enabled.
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="is-xml"
                   type="j2ee:true-falseType"
                   minOccurs="0">
        <xsd:annotation>
          <xsd:documentation>
            If true, denotes that the group of resources
            that match the URL pattern are JSP documents,
            and thus must be interpreted as XML documents.
            If false, the resources are assumed to not
            be JSP documents, unless there is another
            property group that indicates otherwise.
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="include-prelude"
                   type="j2ee:pathType"
                   minOccurs="0"
                   maxOccurs="unbounded">
        <xsd:annotation>
          <xsd:documentation>
            The include-prelude element is a context-relative
            path that must correspond to an element in the
            Web Application.  When the element is present,
            the given path will be automatically included (as
            in an include directive) at the beginning of each
            JSP page in this jsp-property-group.
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="include-coda"
                   type="j2ee:pathType"
                   minOccurs="0"
                   maxOccurs="unbounded">
        <xsd:annotation>
          <xsd:documentation>
            The include-coda element is a context-relative
            path that must correspond to an element in the
            Web Application.  When the element is present,
            the given path will be automatically included (as
            in an include directive) at the end of each
            JSP page in this jsp-property-group.
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
    </xsd:sequence>
    <xsd:attribute name="id" type="xsd:ID"/>
  </xsd:complexType>
  <xsd:complexType name="taglibType">
    <xsd:annotation>
      <xsd:documentation>
        The taglibType defines the syntax for declaring in
        the deployment descriptor that a tag library is
        available to the application.  This can be done
        to override implicit map entries from TLD files and
        from the container.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="taglib-uri"
                   type="j2ee:string">
        <xsd:annotation>
          <xsd:documentation>
            A taglib-uri element describes a URI identifying a
            tag library used in the web application.  The body
            of the taglib-uri element may be either an
            absolute URI specification, or a relative URI.
            There should be no entries in web.xml with the
            same taglib-uri value.
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="taglib-location"
                   type="j2ee:pathType">
        <xsd:annotation>
          <xsd:documentation>
            the taglib-location element contains the location
            (as a resource relative to the root of the web
            application) where to find the Tag Library
            Description file for the tag library.
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
    </xsd:sequence>
    <xsd:attribute name="id" type="xsd:ID"/>
  </xsd:complexType>
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  **  The actual Sun XSD for this stripped down XSD can be found at
  **  http://java.sun.com/xml/ns/javaee/jsp_2_1.xsd
  **  This XSD contains only the functional elements for programatic use.
            targetNamespace="http://java.sun.com/xml/ns/javaee"
            xmlns:javaee="http://java.sun.com/xml/ns/javaee"
            xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            elementFormDefault="qualified"
            attributeFormDefault="unqualified"
            version="2.1">
    <xsd:include schemaLocation="javaee_5.xsd" />
    <xsd:complexType name="jsp-configType">
        <xsd:sequence>
            <xsd:element name="taglib" type="javaee:taglibType" minOccurs="0" maxOccurs="unbounded" />
            <xsd:element name="jsp-property-group" type="javaee:jsp-property-groupType" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
        <xsd:attribute name="id" type="xsd:ID" />
    </xsd:complexType>
    <xsd:complexType name="jsp-fileType">
        <xsd:simpleContent>
            <xsd:restriction base="javaee:pathType" />
        </xsd:simpleContent>
    </xsd:complexType>
    <xsd:complexType name="jsp-property-groupType">
        <xsd:sequence>
            <xsd:group ref="javaee:descriptionGroup"/>
            <xsd:element name="url-pattern" type="javaee:url-patternType" maxOccurs="unbounded" />
            <xsd:element name="el-ignored" type="javaee:true-falseType" minOccurs="0" />
            <xsd:element name="page-encoding" type="javaee:string" minOccurs="0" />
            <xsd:element name="scripting-invalid" type="javaee:true-falseType" minOccurs="0" />
            <xsd:element name="is-xml" type="javaee:true-falseType" minOccurs="0" />
            <xsd:element name="include-prelude" type="javaee:pathType" minOccurs="0" maxOccurs="unbounded" />
            <xsd:element name="include-coda" type="javaee:pathType" minOccurs="0" maxOccurs="unbounded" />
            <xsd:element name="deferred-syntax-allowed-as-literal" type="javaee:true-falseType" minOccurs="0" />
            <xsd:element name="trim-directive-whitespaces" type="javaee:true-falseType" minOccurs="0" />
        </xsd:sequence>
        <xsd:attribute name="id" type="xsd:ID" />
    </xsd:complexType>
    <xsd:complexType name="taglibType">
        <xsd:sequence>
            <xsd:element name="taglib-uri" type="javaee:string" />
            <xsd:element name="taglib-location" type="javaee:pathType" />
        </xsd:sequence>
        <xsd:attribute name="id" type="xsd:ID" />
    </xsd:complexType>
            targetNamespace="http://java.sun.com/xml/ns/javaee"
            xmlns:javaee="http://java.sun.com/xml/ns/javaee"
            xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            elementFormDefault="qualified"
            attributeFormDefault="unqualified"
            version="2.2">
  <xsd:annotation>
    <xsd:documentation>
      $Id$
    </xsd:documentation>
  </xsd:annotation>
  <xsd:annotation>
    <xsd:documentation>
      DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
      Copyright 2003-2009 Sun Microsystems, Inc. All rights reserved.
      The contents of this file are subject to the terms of either the
      GNU General Public License Version 2 only ("GPL") or the Common
      Development and Distribution License("CDDL") (collectively, the
      "License").  You may not use this file except in compliance with
      the License. You can obtain a copy of the License at
      https://glassfish.dev.java.net/public/CDDL+GPL.html or
      glassfish/bootstrap/legal/LICENSE.txt.  See the License for the
      specific language governing permissions and limitations under the
      License.
      When distributing the software, include this License Header
      Notice in each file and include the License file at
      glassfish/bootstrap/legal/LICENSE.txt.  Sun designates this
      particular file as subject to the "Classpath" exception as
      provided by Sun in the GPL Version 2 section of the License file
      that accompanied this code.  If applicable, add the following
      below the License Header, with the fields enclosed by brackets []
      replaced by your own identifying information:
      "Portions Copyrighted [year] [name of copyright owner]"
      Contributor(s):
      If you wish your version of this file to be governed by only the
      CDDL or only the GPL Version 2, indicate your decision by adding
      "[Contributor] elects to include this software in this
      distribution under the [CDDL or GPL Version 2] license."  If you
      don't indicate a single choice of license, a recipient has the
      option to distribute your version of this file under either the
      CDDL, the GPL Version 2 or to extend the choice of license to its
      licensees as provided above.  However, if you add GPL Version 2
      code and therefore, elected the GPL Version 2 license, then the
      option applies only if the new code is made subject to such
      option by the copyright holder.
    </xsd:documentation>
  </xsd:annotation>
  <xsd:annotation>
    <xsd:documentation>
      The Apache Software Foundation elects to include this software under the
      CDDL license.
    </xsd:documentation>
  </xsd:annotation>
  <xsd:annotation>
    <xsd:documentation>
      This is the XML Schema for the JSP 2.2 deployment descriptor
      types.  The JSP 2.2 schema contains all the special
      structures and datatypes that are necessary to use JSP files
      from a web application.
      The contents of this schema is used by the web-common_3_0.xsd
      file to define JSP specific content.
    </xsd:documentation>
  </xsd:annotation>
  <xsd:annotation>
    <xsd:documentation>
      The following conventions apply to all Java EE
      deployment descriptor elements unless indicated otherwise.
      - In elements that specify a pathname to a file within the
      same JAR file, relative filenames (i.e., those not
      starting with "/") are considered relative to the root of
      the JAR file's namespace.  Absolute filenames (i.e., those
      starting with "/") also specify names in the root of the
      JAR file's namespace.  In general, relative names are
      preferred.  The exception is .war files where absolute
      names are preferred for consistency with the Servlet API.
    </xsd:documentation>
  </xsd:annotation>
  <xsd:include schemaLocation="javaee_6.xsd"/>
  <xsd:complexType name="jsp-configType">
    <xsd:annotation>
      <xsd:documentation>
        The jsp-configType is used to provide global configuration
        information for the JSP files in a web application. It has
        two subelements, taglib and jsp-property-group.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="taglib"
                   type="javaee:taglibType"
                   minOccurs="0"
                   maxOccurs="unbounded"/>
      <xsd:element name="jsp-property-group"
                   type="javaee:jsp-property-groupType"
                   minOccurs="0"
                   maxOccurs="unbounded"/>
    </xsd:sequence>
    <xsd:attribute name="id"
                   type="xsd:ID"/>
  </xsd:complexType>
  <xsd:complexType name="jsp-fileType">
    <xsd:annotation>
      <xsd:documentation>
        The jsp-file element contains the full path to a JSP file
        within the web application beginning with a `/'.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:simpleContent>
      <xsd:restriction base="javaee:pathType"/>
    </xsd:simpleContent>
  </xsd:complexType>
  <xsd:complexType name="jsp-property-groupType">
    <xsd:annotation>
      <xsd:documentation>
        The jsp-property-groupType is used to group a number of
        files so they can be given global property information.
        All files so described are deemed to be JSP files.  The
        following additional properties can be described:
        - Control whether EL is ignored.
        - Control whether scripting elements are invalid.
        - Indicate pageEncoding information.
        - Indicate that a resource is a JSP document (XML).
        - Prelude and Coda automatic includes.
        - Control whether the character sequence #{ is allowed
        when used as a String literal.
        - Control whether template text containing only
        whitespaces must be removed from the response output.
        - Indicate the default contentType information.
        - Indicate the default buffering model for JspWriter
        - Control whether error should be raised for the use of
        undeclared namespaces in a JSP page.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:group ref="javaee:descriptionGroup"/>
      <xsd:element name="url-pattern"
                   type="javaee:url-patternType"
                   maxOccurs="unbounded"/>
      <xsd:element name="el-ignored"
                   type="javaee:true-falseType"
                   minOccurs="0">
        <xsd:annotation>
          <xsd:documentation>
            Can be used to easily set the isELIgnored
            property of a group of JSP pages.  By default, the
            EL evaluation is enabled for Web Applications using
            a Servlet 2.4 or greater web.xml, and disabled
            otherwise.
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="page-encoding"
                   type="javaee:string"
                   minOccurs="0">
        <xsd:annotation>
          <xsd:documentation>
            The valid values of page-encoding are those of the
            pageEncoding page directive.  It is a
            translation-time error to name different encodings
            in the pageEncoding attribute of the page directive
            of a JSP page and in a JSP configuration element
            matching the page.  It is also a translation-time
            error to name different encodings in the prolog
            or text declaration of a document in XML syntax and
            in a JSP configuration element matching the document.
            It is legal to name the same encoding through
            mulitple mechanisms.
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="scripting-invalid"
                   type="javaee:true-falseType"
                   minOccurs="0">
        <xsd:annotation>
          <xsd:documentation>
            Can be used to easily disable scripting in a
            group of JSP pages.  By default, scripting is
            enabled.
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="is-xml"
                   type="javaee:true-falseType"
                   minOccurs="0">
        <xsd:annotation>
          <xsd:documentation>
            If true, denotes that the group of resources
            that match the URL pattern are JSP documents,
            and thus must be interpreted as XML documents.
            If false, the resources are assumed to not
            be JSP documents, unless there is another
            property group that indicates otherwise.
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="include-prelude"
                   type="javaee:pathType"
                   minOccurs="0"
                   maxOccurs="unbounded">
        <xsd:annotation>
          <xsd:documentation>
            The include-prelude element is a context-relative
            path that must correspond to an element in the
            Web Application.  When the element is present,
            the given path will be automatically included (as
            in an include directive) at the beginning of each
            JSP page in this jsp-property-group.
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="include-coda"
                   type="javaee:pathType"
                   minOccurs="0"
                   maxOccurs="unbounded">
        <xsd:annotation>
          <xsd:documentation>
            The include-coda element is a context-relative
            path that must correspond to an element in the
            Web Application.  When the element is present,
            the given path will be automatically included (as
            in an include directive) at the end of each
            JSP page in this jsp-property-group.
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="deferred-syntax-allowed-as-literal"
                   type="javaee:true-falseType"
                   minOccurs="0">
        <xsd:annotation>
          <xsd:documentation>
            The character sequence #{ is reserved for EL expressions.
            Consequently, a translation error occurs if the #{
            character sequence is used as a String literal, unless
            this element is enabled (true). Disabled (false) by
            default.
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="trim-directive-whitespaces"
                   type="javaee:true-falseType"
                   minOccurs="0">
        <xsd:annotation>
          <xsd:documentation>
            Indicates that template text containing only whitespaces
            must be removed from the response output. It has no
            effect on JSP documents (XML syntax). Disabled (false)
            by default.
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="default-content-type"
                   type="javaee:string"
                   minOccurs="0">
        <xsd:annotation>
          <xsd:documentation>
            The valid values of default-content-type are those of the
            contentType page directive.  It specifies the default
            response contentType if the page directive does not include
            a contentType attribute.
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="buffer"
                   type="javaee:string"
                   minOccurs="0">
        <xsd:annotation>
          <xsd:documentation>
            The valid values of buffer are those of the
            buffer page directive.  It specifies if buffering should be
            used for the output to response, and if so, the size of the
            buffer to use.
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="error-on-undeclared-namespace"
                   type="javaee:true-falseType"
                   minOccurs="0">
        <xsd:annotation>
          <xsd:documentation>
            The default behavior when a tag with unknown namespace is used
            in a JSP page (regular syntax) is to silently ignore it.  If
            set to true, then an error must be raised during the translation
            time when an undeclared tag is used in a JSP page.  Disabled
            (false) by default.
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
    </xsd:sequence>
    <xsd:attribute name="id"
                   type="xsd:ID"/>
  </xsd:complexType>
  <xsd:complexType name="taglibType">
    <xsd:annotation>
      <xsd:documentation>
        The taglibType defines the syntax for declaring in
        the deployment descriptor that a tag library is
        available to the application.  This can be done
        to override implicit map entries from TLD files and
        from the container.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="taglib-uri"
                   type="javaee:string">
        <xsd:annotation>
          <xsd:documentation>
            A taglib-uri element describes a URI identifying a
            tag library used in the web application.  The body
            of the taglib-uri element may be either an
            absolute URI specification, or a relative URI.
            There should be no entries in web.xml with the
            same taglib-uri value.
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="taglib-location"
                   type="javaee:pathType">
        <xsd:annotation>
          <xsd:documentation>
            the taglib-location element contains the location
            (as a resource relative to the root of the web
            application) where to find the Tag Library
            Description file for the tag library.
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
    </xsd:sequence>
    <xsd:attribute name="id"
                   type="xsd:ID"/>
  </xsd:complexType>
            targetNamespace="http://xmlns.jcp.org/xml/ns/javaee"
            xmlns:javaee="http://xmlns.jcp.org/xml/ns/javaee"
            xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            elementFormDefault="qualified"
            attributeFormDefault="unqualified"
            version="2.3">
  <xsd:annotation>
    <xsd:documentation>
      DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
      Copyright (c) 2009-2013 Oracle and/or its affiliates. All rights reserved.
      The contents of this file are subject to the terms of either the GNU
      General Public License Version 2 only ("GPL") or the Common Development
      and Distribution License("CDDL") (collectively, the "License").  You
      may not use this file except in compliance with the License.  You can
      obtain a copy of the License at
      https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html
      or packager/legal/LICENSE.txt.  See the License for the specific
      language governing permissions and limitations under the License.
      When distributing the software, include this License Header Notice in each
      file and include the License file at packager/legal/LICENSE.txt.
      GPL Classpath Exception:
      Oracle designates this particular file as subject to the "Classpath"
      exception as provided by Oracle in the GPL Version 2 section of the License
      file that accompanied this code.
      Modifications:
      If applicable, add the following below the License Header, with the fields
      enclosed by brackets [] replaced by your own identifying information:
      "Portions Copyright [year] [name of copyright owner]"
      Contributor(s):
      If you wish your version of this file to be governed by only the CDDL or
      only the GPL Version 2, indicate your decision by adding "[Contributor]
      elects to include this software in this distribution under the [CDDL or GPL
      Version 2] license."  If you don't indicate a single choice of license, a
      recipient has the option to distribute your version of this file under
      either the CDDL, the GPL Version 2 or to extend the choice of license to
      its licensees as provided above.  However, if you add GPL Version 2 code
      and therefore, elected the GPL Version 2 license, then the option applies
      only if the new code is made subject to such option by the copyright
      holder.
    </xsd:documentation>
  </xsd:annotation>
  <xsd:annotation>
    <xsd:documentation>
      The Apache Software Foundation elects to include this software under the
      CDDL license.
    </xsd:documentation>
  </xsd:annotation>
  <xsd:annotation>
    <xsd:documentation>
      This is the XML Schema for the JSP 2.3 deployment descriptor
      types.  The JSP 2.3 schema contains all the special
      structures and datatypes that are necessary to use JSP files
      from a web application.
      The contents of this schema is used by the web-common_3_1.xsd
      file to define JSP specific content.
    </xsd:documentation>
  </xsd:annotation>
  <xsd:annotation>
    <xsd:documentation>
      The following conventions apply to all Java EE
      deployment descriptor elements unless indicated otherwise.
      - In elements that specify a pathname to a file within the
      same JAR file, relative filenames (i.e., those not
      starting with "/") are considered relative to the root of
      the JAR file's namespace.  Absolute filenames (i.e., those
      starting with "/") also specify names in the root of the
      JAR file's namespace.  In general, relative names are
      preferred.  The exception is .war files where absolute
      names are preferred for consistency with the Servlet API.
    </xsd:documentation>
  </xsd:annotation>
  <xsd:include schemaLocation="javaee_7.xsd"/>
  <xsd:complexType name="jsp-configType">
    <xsd:annotation>
      <xsd:documentation>
        The jsp-configType is used to provide global configuration
        information for the JSP files in a web application. It has
        two subelements, taglib and jsp-property-group.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="taglib"
                   type="javaee:taglibType"
                   minOccurs="0"
                   maxOccurs="unbounded"/>
      <xsd:element name="jsp-property-group"
                   type="javaee:jsp-property-groupType"
                   minOccurs="0"
                   maxOccurs="unbounded"/>
    </xsd:sequence>
    <xsd:attribute name="id"
                   type="xsd:ID"/>
  </xsd:complexType>
  <xsd:complexType name="jsp-fileType">
    <xsd:annotation>
      <xsd:documentation>
        The jsp-file element contains the full path to a JSP file
        within the web application beginning with a `/'.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:simpleContent>
      <xsd:restriction base="javaee:pathType"/>
    </xsd:simpleContent>
  </xsd:complexType>
  <xsd:complexType name="jsp-property-groupType">
    <xsd:annotation>
      <xsd:documentation>
        The jsp-property-groupType is used to group a number of
        files so they can be given global property information.
        All files so described are deemed to be JSP files.  The
        following additional properties can be described:
        - Control whether EL is ignored.
        - Control whether scripting elements are invalid.
        - Indicate pageEncoding information.
        - Indicate that a resource is a JSP document (XML).
        - Prelude and Coda automatic includes.
        - Control whether the character sequence #{ is allowed
        when used as a String literal.
        - Control whether template text containing only
        whitespaces must be removed from the response output.
        - Indicate the default contentType information.
        - Indicate the default buffering model for JspWriter
        - Control whether error should be raised for the use of
        undeclared namespaces in a JSP page.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:group ref="javaee:descriptionGroup"/>
      <xsd:element name="url-pattern"
                   type="javaee:url-patternType"
                   maxOccurs="unbounded"/>
      <xsd:element name="el-ignored"
                   type="javaee:true-falseType"
                   minOccurs="0">
        <xsd:annotation>
          <xsd:documentation>
            Can be used to easily set the isELIgnored
            property of a group of JSP pages.  By default, the
            EL evaluation is enabled for Web Applications using
            a Servlet 2.4 or greater web.xml, and disabled
            otherwise.
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="page-encoding"
                   type="javaee:string"
                   minOccurs="0">
        <xsd:annotation>
          <xsd:documentation>
            The valid values of page-encoding are those of the
            pageEncoding page directive.  It is a
            translation-time error to name different encodings
            in the pageEncoding attribute of the page directive
            of a JSP page and in a JSP configuration element
            matching the page.  It is also a translation-time
            error to name different encodings in the prolog
            or text declaration of a document in XML syntax and
            in a JSP configuration element matching the document.
            It is legal to name the same encoding through
            mulitple mechanisms.
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="scripting-invalid"
                   type="javaee:true-falseType"
                   minOccurs="0">
        <xsd:annotation>
          <xsd:documentation>
            Can be used to easily disable scripting in a
            group of JSP pages.  By default, scripting is
            enabled.
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="is-xml"
                   type="javaee:true-falseType"
                   minOccurs="0">
        <xsd:annotation>
          <xsd:documentation>
            If true, denotes that the group of resources
            that match the URL pattern are JSP documents,
            and thus must be interpreted as XML documents.
            If false, the resources are assumed to not
            be JSP documents, unless there is another
            property group that indicates otherwise.
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="include-prelude"
                   type="javaee:pathType"
                   minOccurs="0"
                   maxOccurs="unbounded">
        <xsd:annotation>
          <xsd:documentation>
            The include-prelude element is a context-relative
            path that must correspond to an element in the
            Web Application.  When the element is present,
            the given path will be automatically included (as
            in an include directive) at the beginning of each
            JSP page in this jsp-property-group.
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="include-coda"
                   type="javaee:pathType"
                   minOccurs="0"
                   maxOccurs="unbounded">
        <xsd:annotation>
          <xsd:documentation>
            The include-coda element is a context-relative
            path that must correspond to an element in the
            Web Application.  When the element is present,
            the given path will be automatically included (as
            in an include directive) at the end of each
            JSP page in this jsp-property-group.
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="deferred-syntax-allowed-as-literal"
                   type="javaee:true-falseType"
                   minOccurs="0">
        <xsd:annotation>
          <xsd:documentation>
            The character sequence #{ is reserved for EL expressions.
            Consequently, a translation error occurs if the #{
            character sequence is used as a String literal, unless
            this element is enabled (true). Disabled (false) by
            default.
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="trim-directive-whitespaces"
                   type="javaee:true-falseType"
                   minOccurs="0">
        <xsd:annotation>
          <xsd:documentation>
            Indicates that template text containing only whitespaces
            must be removed from the response output. It has no
            effect on JSP documents (XML syntax). Disabled (false)
            by default.
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="default-content-type"
                   type="javaee:string"
                   minOccurs="0">
        <xsd:annotation>
          <xsd:documentation>
            The valid values of default-content-type are those of the
            contentType page directive.  It specifies the default
            response contentType if the page directive does not include
            a contentType attribute.
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="buffer"
                   type="javaee:string"
                   minOccurs="0">
        <xsd:annotation>
          <xsd:documentation>
            The valid values of buffer are those of the
            buffer page directive.  It specifies if buffering should be
            used for the output to response, and if so, the size of the
            buffer to use.
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="error-on-undeclared-namespace"
                   type="javaee:true-falseType"
                   minOccurs="0">
        <xsd:annotation>
          <xsd:documentation>
            The default behavior when a tag with unknown namespace is used
            in a JSP page (regular syntax) is to silently ignore it.  If
            set to true, then an error must be raised during the translation
            time when an undeclared tag is used in a JSP page.  Disabled
            (false) by default.
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
    </xsd:sequence>
    <xsd:attribute name="id"
                   type="xsd:ID"/>
  </xsd:complexType>
  <xsd:complexType name="taglibType">
    <xsd:annotation>
      <xsd:documentation>
        The taglibType defines the syntax for declaring in
        the deployment descriptor that a tag library is
        available to the application.  This can be done
        to override implicit map entries from TLD files and
        from the container.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="taglib-uri"
                   type="javaee:string">
        <xsd:annotation>
          <xsd:documentation>
            A taglib-uri element describes a URI identifying a
            tag library used in the web application.  The body
            of the taglib-uri element may be either an
            absolute URI specification, or a relative URI.
            There should be no entries in web.xml with the
            same taglib-uri value.
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="taglib-location"
                   type="javaee:pathType">
        <xsd:annotation>
          <xsd:documentation>
            the taglib-location element contains the location
            (as a resource relative to the root of the web
            application) where to find the Tag Library
            Description file for the tag library.
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
    </xsd:sequence>
    <xsd:attribute name="id"
                   type="xsd:ID"/>
  </xsd:complexType>
 Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
   This is the DTD defining the JavaServer Pages 1.1 Tag Library
   descriptor (.tld) (XML) file format/syntax.
   A Tag Library is a JAR file containing a valid instance of a Tag Library
   Descriptor (taglib.tld) file in the META-INF subdirectory, along with the
   appropriate implementing classes, and other resources required to
   implement the tags defined therein.
   Use is subject to license terms.
  -->
            a JSP authoring tool to create names with a mnemonic
            value; for example, the it may be used as the prefered
            prefix value in taglib directives
            should be user discernable
          xmlns CDATA #FIXED
                "http://java.sun.com/j2ee/dtds/web-jsptaglibrary_1_1.dtd"
                implementation itself, and is most likely in a
                different "langage", e.g embedded SQL statements.
  by a scriptlet expression (optional)
 Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
   This is the DTD defining the JavaServer Pages 1.2 Tag Library
   descriptor (.tld) (XML) file format/syntax.
   A Tag Library is a JAR file containing a valid instance of a Tag Library
   Descriptor (taglib.tld) file in the META-INF subdirectory, along with the
   appropriate implementing classes, and other resources required to
   implement the tags defined therein.
   Use is subject to license terms.
  -->
          "-//Sun Microsystems, Inc.//DTD JSP Tag Library 1.2//EN">
  <!DOCTYPE taglib
        PUBLIC "-//Sun Microsystems, Inc.//DTD JSP Tag Library 1.2//EN"
        "http://java.sun.com/dtd/web-jsptaglibrary_1_2.dtd">
                a JSP authoring tool to create names with a mnemonic
                value; for example, the it may be used as the prefered
                prefix value in taglib directives
                is intended to be displayed by tools
                should be user discernable
                  display-name?, small-icon?, large-icon?, description?,
                  validator?, listener*, tag+) >
        xmlns CDATA #FIXED
        "http://java.sun.com/JSP/TagLibraryDescriptor"
                  javax.servlet.jsp.tagext.Tag
                  javax.servlet.jsp.tagext.TagExtraInfo
                  by tools
                  use of this tag
               small-icon?, large-icon?, description?, variable*, attribute*,
               example?) >
                implementation itself, and is most likely in a
                different "langage", e.g embedded SQL statements.
                         time) value will give the name of the
                         variable.  One of name-given or
                         name-from-attribute is required.
                         java.lang.String is default.
                         True is the default.
                         defined.  NESTED is default.
                    declare?, scope?, description?) >
  by a scriptlet expression (optional)
  by a scriptlet expression (optional)
 Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
     targetNamespace="http://java.sun.com/xml/ns/j2ee"
     xmlns:j2ee="http://java.sun.com/xml/ns/j2ee"
     xmlns:xsd="http://www.w3.org/2001/XMLSchema"
     xmlns:xml="http://www.w3.org/XML/1998/namespace"
     elementFormDefault="qualified"
     attributeFormDefault="unqualified"
     version="2.0">
  <xsd:annotation>
    <xsd:documentation>
      %W% %G%
    </xsd:documentation>
  </xsd:annotation>
  <xsd:annotation>
    <xsd:documentation>
      <![CDATA[
        This is the XML Schema for the JSP Taglibrary
        descriptor.  All Taglibrary descriptors must
        indicate the tag library schema by using the Taglibrary
        namespace:
        http://java.sun.com/xml/ns/j2ee
        and by indicating the version of the schema by
        using the version element as shown below:
            <taglib xmlns="http://java.sun.com/xml/ns/j2ee"
              xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
              xsi:schemaLocation="..."
              version="2.0">
              ...
            </taglib>
        The instance documents may indicate the published
        version of the schema using xsi:schemaLocation attribute
        for J2EE namespace with the following location:
        http://java.sun.com/xml/ns/j2ee/web-jsptaglibrary_2_0.xsd
        ]]>
    </xsd:documentation>
  </xsd:annotation>
  <xsd:include schemaLocation="j2ee_1_4.xsd"/>
  <xsd:element name="taglib" type="j2ee:tldTaglibType">
    <xsd:annotation>
      <xsd:documentation>
        The taglib tag is the document root.
        The definition of taglib is provided
        by the tldTaglibType.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:unique name="tag-name-uniqueness">
      <xsd:annotation>
        <xsd:documentation>
          The taglib element contains, among other things, tag and
          tag-file elements.
          The name subelements of these elements must each be unique.
        </xsd:documentation>
      </xsd:annotation>
      <xsd:selector xpath="j2ee:tag|j2ee:tag-file"/>
      <xsd:field    xpath="j2ee:name"/>
    </xsd:unique>
    <xsd:unique name="function-name-uniqueness">
      <xsd:annotation>
        <xsd:documentation>
          The taglib element contains function elements.
          The name subelements of these elements must each be unique.
        </xsd:documentation>
      </xsd:annotation>
      <xsd:selector xpath="j2ee:function"/>
      <xsd:field    xpath="j2ee:name"/>
    </xsd:unique>
  </xsd:element>
  <xsd:complexType name="body-contentType">
    <xsd:annotation>
      <xsd:documentation>
        Specifies the type of body that is valid for a tag.
        This value is used by the JSP container to validate
        that a tag invocation has the correct body syntax and
        by page composition tools to assist the page author
        in providing a valid tag body.
        There are currently four values specified:
        tagdependent    The body of the tag is interpreted by the tag
                        implementation itself, and is most likely
                        in a different "language", e.g embedded SQL
                        statements.
        JSP             The body of the tag contains nested JSP
                        syntax.
        empty           The body must be empty
        scriptless      The body accepts only template text, EL
                        Expressions, and JSP action elements.  No
                        scripting elements are allowed.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:simpleContent>
      <xsd:restriction base="j2ee:string">
        <xsd:enumeration value="tagdependent"/>
        <xsd:enumeration value="JSP"/>
        <xsd:enumeration value="empty"/>
        <xsd:enumeration value="scriptless"/>
      </xsd:restriction>
    </xsd:simpleContent>
  </xsd:complexType>
  <xsd:complexType name="extensibleType" abstract="true">
    <xsd:annotation>
      <xsd:documentation>
        The extensibleType is an abstract base type that is used to
        define the type of extension-elements. Instance documents
        must substitute a known type to define the extension by
        using xsi:type attribute to define the actual type of
        extension-elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:attribute name="id" type="xsd:ID"/>
  </xsd:complexType>
  <xsd:complexType name="functionType">
    <xsd:annotation>
      <xsd:documentation>
        The function element is used to provide information on each
        function in the tag library that is to be exposed to the EL.
        The function element may have several subelements defining:
        description         Optional tag-specific information
        display-name        A short name that is intended to be
                            displayed by tools
        icon                Optional icon element that can be used
                            by tools
        name                A unique name for this function
        function-class      Provides the name of the Java class that
                            implements the function
        function-signature  Provides the signature, as in the Java
                            Language Specification, of the Java
                            method that is to be used to implement
                            the function.
        example             Optional informal description of an
                            example of a use of this function
        function-extension  Zero or more extensions that provide extra
                            information about this function, for tool
                            consumption
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:group ref="j2ee:descriptionGroup"/>
      <xsd:element name="name"
                   type="j2ee:tld-canonical-nameType">
        <xsd:annotation>
          <xsd:documentation>
            A unique name for this function.
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="function-class"
                   type="j2ee:fully-qualified-classType">
        <xsd:annotation>
          <xsd:documentation>
            Provides the fully-qualified class name of the Java
            class containing the static method that implements
            the function.
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="function-signature"
                   type="j2ee:string">
        <xsd:annotation>
          <xsd:documentation>
            Provides the signature, of the static Java method that is
            to be used to implement the function.  The syntax of the
            function-signature element is as follows:
                FunctionSignature ::= ReturnType S MethodName S?
                                      '(' S? Parameters? S? ')'
                ReturnType        ::= Type
                MethodName        ::= Identifier
                Parameters        ::=   Parameter
                                      | ( Parameter S? ',' S? Parameters )
                Parameter         ::= Type
                Where:
                     * Type is a basic type or a fully qualified Java class name
                      (including package name), as per the 'Type' production
                      in the Java Language Specification, Second Edition,
                      Chapter 18.
                    * Identifier is a Java identifier, as per the 'Identifier'
                      production in the Java Language Specification, Second
                      Edition, Chapter 18.
            Example:
            java.lang.String nickName( java.lang.String, int )
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="example"
                   type="j2ee:xsdStringType"
                   minOccurs="0">
        <xsd:annotation>
          <xsd:documentation>
            The example element contains an informal description
            of an example of the use of this function.
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="function-extension"
                   type="j2ee:tld-extensionType"
                   minOccurs="0"
                   maxOccurs="unbounded">
        <xsd:annotation>
          <xsd:documentation>
            Function extensions are for tool use only and must not affect
            the behavior of a container.
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
    </xsd:sequence>
    <xsd:attribute name="id" type="xsd:ID"/>
  </xsd:complexType>
  <xsd:complexType name="tagFileType">
    <xsd:annotation>
      <xsd:documentation>
        Defines an action in this tag library that is implemented
        as a .tag file.
        The tag-file element has two required subelements:
        description       Optional tag-specific information
        display-name      A short name that is intended to be
                          displayed by tools
        icon              Optional icon element that can be used
                          by tools
        name              The unique action name
        path              Where to find the .tag file implementing this
                          action, relative to the root of the web
                          application or the root of the JAR file for a
                          tag library packaged in a JAR.  This must
                          begin with /WEB-INF/tags if the .tag file
                          resides in the WAR, or /META-INF/tags if the
                          .tag file resides in a JAR.
        example           Optional informal description of an
                          example of a use of this tag
        tag-extension     Zero or more extensions that provide extra
                          information about this tag, for tool
                          consumption
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:group ref="j2ee:descriptionGroup"/>
      <xsd:element name="name"
                   type="j2ee:tld-canonical-nameType"/>
      <xsd:element name="path"
                   type="j2ee:pathType"/>
      <xsd:element name="example"
                   type="j2ee:xsdStringType"
                   minOccurs="0">
        <xsd:annotation>
          <xsd:documentation>
            The example element contains an informal description
            of an example of the use of a tag.
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="tag-extension"
                   type="j2ee:tld-extensionType"
                   minOccurs="0"
                   maxOccurs="unbounded">
        <xsd:annotation>
          <xsd:documentation>
            Tag extensions are for tool use only and must not affect
            the behavior of a container.
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
    </xsd:sequence>
    <xsd:attribute name="id" type="xsd:ID"/>
  </xsd:complexType>
  <xsd:complexType name="tagType">
    <xsd:annotation>
      <xsd:documentation>
        The tag defines a unique tag in this tag library.  It has one
        attribute, id.
        The tag element may have several subelements defining:
        description       Optional tag-specific information
        display-name      A short name that is intended to be
                          displayed by tools
        icon              Optional icon element that can be used
                          by tools
        name              The unique action name
        tag-class         The tag handler class implementing
                          javax.servlet.jsp.tagext.JspTag
        tei-class         An optional subclass of
                          javax.servlet.jsp.tagext.TagExtraInfo
        body-content      The body content type
        variable          Optional scripting variable information
        attribute         All attributes of this action that are
                          evaluated prior to invocation.
        dynamic-attributes Whether this tag supports additional
                           attributes with dynamic names.  If
                           true, the tag-class must implement the
                           javax.servlet.jsp.tagext.DynamicAttributes
                           interface.  Defaults to false.
        example           Optional informal description of an
                          example of a use of this tag
        tag-extension     Zero or more extensions that provide extra
                          information about this tag, for tool
                          consumption
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:group ref="j2ee:descriptionGroup"/>
      <xsd:element name="name"
                   type="j2ee:tld-canonical-nameType"/>
      <xsd:element name="tag-class"
                   type="j2ee:fully-qualified-classType">
        <xsd:annotation>
          <xsd:documentation>
            Defines the subclass of javax.serlvet.jsp.tagext.JspTag
            that implements the request time semantics for
            this tag. (required)
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="tei-class"
                   type="j2ee:fully-qualified-classType"
                   minOccurs="0">
        <xsd:annotation>
          <xsd:documentation>
            Defines the subclass of javax.servlet.jsp.tagext.TagExtraInfo
            for this tag. (optional)
            If this is not given, the class is not consulted at
            translation time.
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="body-content"
                   type="j2ee:body-contentType">
        <xsd:annotation>
          <xsd:documentation>
            Specifies the format for the body of this tag.
            The default in JSP 1.2 was "JSP" but because this
            is an invalid setting for simple tag handlers, there
            is no longer a default in JSP 2.0.  A reasonable
            default for simple tag handlers is "scriptless" if
            the tag can have a body.
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="variable"
                   type="j2ee:variableType"
                   minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="attribute"
                   type="j2ee:tld-attributeType"
                   minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="dynamic-attributes"
                   type="j2ee:generic-booleanType"
                   minOccurs="0"/>
      <xsd:element name="example"
                   type="j2ee:xsdStringType"
                   minOccurs="0">
        <xsd:annotation>
          <xsd:documentation>
            The example element contains an informal description
            of an example of the use of a tag.
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="tag-extension"
                   type="j2ee:tld-extensionType"
                   minOccurs="0"
                   maxOccurs="unbounded">
        <xsd:annotation>
          <xsd:documentation>
            Tag extensions are for tool use only and must not affect
            the behavior of a container.
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
    </xsd:sequence>
    <xsd:attribute name="id" type="xsd:ID"/>
  </xsd:complexType>
  <xsd:complexType name="tld-attributeType">
    <xsd:annotation>
      <xsd:documentation>
        The attribute element defines an attribute for the nesting
        tag.  The attributre element may have several subelements
        defining:
        description     a description of the attribute
        name            the name of the attribute
        required        whether the attribute is required or
                        optional
        rtexprvalue     whether the attribute is a runtime attribute
        type            the type of the attributes
        fragment        whether this attribute is a fragment
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="description"
                   type="j2ee:descriptionType"
                   minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="name"
                   type="j2ee:java-identifierType"/>
      <xsd:element name="required"
                   type="j2ee:generic-booleanType"
                   minOccurs="0">
        <xsd:annotation>
          <xsd:documentation>
            Defines if the nesting attribute is required or
            optional.
            If not present then the default is "false", i.e
            the attribute is optional.
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:choice>
        <xsd:sequence>
          <xsd:element name="rtexprvalue"
                       type="j2ee:generic-booleanType"
                       minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>
                Defines if the nesting attribute can have scriptlet
                expressions as a value, i.e the value of the
                attribute may be dynamically calculated at request
                time, as opposed to a static value determined at
                translation time.
                If not present then the default is "false", i.e the
                attribute has a static value
              </xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="type"
                       type="j2ee:fully-qualified-classType"
                       minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>
                Defines the Java type of the attributes value.  For
                static values (those determined at translation time)
                the type is always java.lang.String.
              </xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
        <xsd:element name="fragment"
                     type="j2ee:generic-booleanType"
                     minOccurs="0">
          <xsd:annotation>
            <xsd:documentation>
              "true" if this attribute is of type
              javax.jsp.tagext.JspFragment, representing dynamic
              content that can be re-evaluated as many times
              as needed by the tag handler.  If omitted or "false",
              the default is still type="java.lang.String"
            </xsd:documentation>
          </xsd:annotation>
        </xsd:element>
      </xsd:choice>
    </xsd:sequence>
    <xsd:attribute name="id" type="xsd:ID"/>
  </xsd:complexType>
  <xsd:complexType name="tld-canonical-nameType">
    <xsd:annotation>
      <xsd:documentation>
        Defines the canonical name of a tag or attribute being
        defined.
        The name must conform to the lexical rules for an NMTOKEN.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:simpleContent>
      <xsd:restriction base="j2ee:xsdNMTOKENType"/>
    </xsd:simpleContent>
  </xsd:complexType>
  <xsd:complexType name="tld-extensionType">
    <xsd:annotation>
      <xsd:documentation>
        The tld-extensionType is used to indicate
        extensions to a specific TLD element.
        It is used by elements to designate an extension block
        that is targeted to a specific extension designated by
        a set of extension elements that are declared by a
        namespace. The namespace identifies the extension to
        the tool that processes the extension.
        The type of the extension-element is abstract. Therefore,
        a concrete type must be specified by the TLD using
        xsi:type attribute for each extension-element.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="extension-element"
                   type="j2ee:extensibleType"
                   maxOccurs="unbounded"/>
    </xsd:sequence>
    <xsd:attribute name="namespace"
                   use="required"
                   type="xsd:anyURI"/>
    <xsd:attribute name="id" type="xsd:ID"/>
  </xsd:complexType>
  <xsd:complexType name="tldTaglibType">
    <xsd:annotation>
      <xsd:documentation>
        The taglib tag is the document root, it defines:
        description     a simple string describing the "use" of this taglib,
                        should be user discernable
        display-name    the display-name element contains a
                        short name that is intended to be displayed
                        by tools
        icon            optional icon that can be used by tools
        tlib-version    the version of the tag library implementation
        short-name      a simple default short name that could be
                        used by a JSP authoring tool to create
                        names with a mnemonic value; for example,
                        the it may be used as the prefered prefix
                        value in taglib directives
        uri             a uri uniquely identifying this taglib
        validator       optional TagLibraryValidator information
        listener        optional event listener specification
        tag             tags in this tag library
        tag-file        tag files in this tag library
        function        zero or more EL functions defined in this
                        tag library
        taglib-extension zero or more extensions that provide extra
                        information about this taglib, for tool
                        consumption
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:group ref="j2ee:descriptionGroup"/>
      <xsd:element name="tlib-version"
                   type="j2ee:dewey-versionType">
        <xsd:annotation>
          <xsd:documentation>
            Describes this version (number) of the taglibrary.
            It is described as a dewey decimal.
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="short-name"
                   type="j2ee:tld-canonical-nameType">
        <xsd:annotation>
          <xsd:documentation>
            Defines a simple default name that could be used by
            a JSP authoring tool to create names with a
            mnemonicvalue; for example, it may be used as the
            preferred prefix value in taglib directives.  Do
            not use white space, and do not start with digits
            or underscore.
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="uri"
                   type="j2ee:xsdAnyURIType"
                   minOccurs="0">
        <xsd:annotation>
          <xsd:documentation>
            Defines a public URI that uniquely identifies this
            version of the taglibrary.  Leave it empty if it
            does not apply.
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="validator"
                   type="j2ee:validatorType"
                   minOccurs="0">
      </xsd:element>
      <xsd:element name="listener"
                   type="j2ee:listenerType"
                   minOccurs="0" maxOccurs="unbounded">
      </xsd:element>
      <xsd:element name="tag"
                   type="j2ee:tagType"
                   minOccurs="0"
                   maxOccurs="unbounded"/>
      <xsd:element name="tag-file"
                   type="j2ee:tagFileType"
                   minOccurs="0"
                   maxOccurs="unbounded"/>
      <xsd:element name="function"
                   type="j2ee:functionType"
                   minOccurs="0"
                   maxOccurs="unbounded"/>
      <xsd:element name="taglib-extension"
                   type="j2ee:tld-extensionType"
                   minOccurs="0"
                   maxOccurs="unbounded">
        <xsd:annotation>
          <xsd:documentation>
            Taglib extensions are for tool use only and must not affect
            the behavior of a container.
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
    </xsd:sequence>
    <xsd:attribute name="version"
                   type="j2ee:dewey-versionType"
                   fixed="2.0"
                   use="required">
      <xsd:annotation>
        <xsd:documentation>
          Describes the JSP version (number) this taglibrary
          requires in order to function (dewey decimal)
        </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="id" type="xsd:ID"/>
  </xsd:complexType>
  <xsd:complexType name="validatorType">
    <xsd:annotation>
      <xsd:documentation>
        A validator that can be used to validate
        the conformance of a JSP page to using this tag library is
        defined by a validatorType.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="description"
                   type="j2ee:descriptionType"
                   minOccurs="0"
                   maxOccurs="unbounded"/>
      <xsd:element name="validator-class"
                   type="j2ee:fully-qualified-classType">
        <xsd:annotation>
          <xsd:documentation>
            Defines the TagLibraryValidator class that can be used
            to validate the conformance of a JSP page to using this
            tag library.
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="init-param"
                   type="j2ee:param-valueType"
                   minOccurs="0" maxOccurs="unbounded">
        <xsd:annotation>
          <xsd:documentation>
            The init-param element contains a name/value pair as an
            initialization param.
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
    </xsd:sequence>
    <xsd:attribute name="id" type="xsd:ID"/>
  </xsd:complexType>
  <xsd:complexType name="variable-scopeType">
    <xsd:annotation>
      <xsd:documentation>
        This type defines scope of the scripting variable.  See
        TagExtraInfo for details.  The allowed values are,
        "NESTED", "AT_BEGIN" and "AT_END".
      </xsd:documentation>
    </xsd:annotation>
    <xsd:simpleContent>
      <xsd:restriction base="j2ee:string">
        <xsd:enumeration value="NESTED"/>
        <xsd:enumeration value="AT_BEGIN"/>
        <xsd:enumeration value="AT_END"/>
      </xsd:restriction>
    </xsd:simpleContent>
  </xsd:complexType>
  <xsd:complexType name="variableType">
    <xsd:annotation>
      <xsd:documentation>
        The variableType provides information on the scripting
        variables defined by using this tag.  It is a (translation
        time) error for a tag that has one or more variable
        subelements to have a TagExtraInfo class that returns a
        non-null value from a call to getVariableInfo().
        The subelements of variableType are of the form:
        description              Optional description of this
                                 variable
        name-given               The variable name as a constant
        name-from-attribute      The name of an attribute whose
                                 (translation time) value will
                                 give the name of the
                                 variable.  One of name-given or
                                 name-from-attribute is required.
        variable-class           Name of the class of the variable.
                                 java.lang.String is default.
        declare                  Whether the variable is declared
                                 or not.  True is the default.
        scope                    The scope of the scripting varaible
                                 defined.  NESTED is default.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="description"
                   type="j2ee:descriptionType"
                   minOccurs="0" maxOccurs="unbounded"/>
      <xsd:choice>
        <xsd:element name="name-given"
                     type="j2ee:java-identifierType">
          <xsd:annotation>
            <xsd:documentation>
              The name for the scripting variable.
            </xsd:documentation>
          </xsd:annotation>
        </xsd:element>
        <xsd:element name="name-from-attribute"
                     type="j2ee:java-identifierType">
          <xsd:annotation>
            <xsd:documentation>
              The name of an attribute whose
              (translation-time) value will give the name of
              the variable.
            </xsd:documentation>
          </xsd:annotation>
        </xsd:element>
      </xsd:choice>
      <xsd:element name="variable-class"
                   type="j2ee:fully-qualified-classType"
                   minOccurs="0">
        <xsd:annotation>
          <xsd:documentation>
            The optional name of the class for the scripting
            variable.  The default is java.lang.String.
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="declare"
                   type="j2ee:generic-booleanType"
                   minOccurs="0">
        <xsd:annotation>
          <xsd:documentation>
            Whether the scripting variable is to be defined
            or not.  See TagExtraInfo for details.  This
            element is optional and "true" is the default.
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="scope"
                   type="j2ee:variable-scopeType"
                   minOccurs="0">
        <xsd:annotation>
          <xsd:documentation>
            The element is optional and "NESTED" is the default.
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
    </xsd:sequence>
    <xsd:attribute name="id" type="xsd:ID"/>
  </xsd:complexType>
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  ** This XSD contains only the programatic elements required for an implementation.
  ** For the XSD from Sun that includes documentation and other copyrighted information
  ** please refer to http://java.sun.com/xml/ns/javaee/web-jsptaglibrary_2_1.xsd for a fully documented and latest
  **  XSD.
            xmlns:javaee="http://java.sun.com/xml/ns/javaee"
            xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            elementFormDefault="qualified"
            attributeFormDefault="unqualified"
            version="2.1">
    <xsd:include schemaLocation="javaee_5.xsd" />
    <xsd:element name="taglib" type="javaee:tldTaglibType">
        <xsd:unique name="tag-name-uniqueness">
            <xsd:selector xpath="javaee:tag|javaee:tag-file" />
            <xsd:field xpath="javaee:name" />
        </xsd:unique>
        <xsd:unique name="function-name-uniqueness">
            <xsd:selector xpath="javaee:function" />
            <xsd:field xpath="javaee:name" />
        </xsd:unique>
    </xsd:element>
    <xsd:complexType name="body-contentType">
        <xsd:simpleContent>
            <xsd:restriction base="javaee:string">
                <xsd:enumeration value="tagdependent" />
                <xsd:enumeration value="JSP" />
                <xsd:enumeration value="empty" />
                <xsd:enumeration value="scriptless" />
            </xsd:restriction>
        </xsd:simpleContent>
    </xsd:complexType>
    <xsd:complexType name="extensibleType" abstract="true">
        <xsd:attribute name="id" type="xsd:ID" />
    </xsd:complexType>
    <xsd:complexType name="functionType">
        <xsd:sequence>
            <xsd:group ref="javaee:descriptionGroup" />
            <xsd:element name="name" type="javaee:tld-canonical-nameType"></xsd:element>
            <xsd:element name="function-class" type="javaee:fully-qualified-classType"></xsd:element>
            <xsd:element name="function-signature" type="javaee:string"></xsd:element>
            <xsd:element name="example" type="javaee:xsdStringType" minOccurs="0"></xsd:element>
            <xsd:element name="function-extension" type="javaee:tld-extensionType" minOccurs="0" maxOccurs="unbounded"></xsd:element>
        </xsd:sequence>
        <xsd:attribute name="id" type="xsd:ID" />
    </xsd:complexType>
    <xsd:complexType name="tagFileType">
        <xsd:sequence>
            <xsd:group ref="javaee:descriptionGroup" />
            <xsd:element name="name" type="javaee:tld-canonical-nameType" />
            <xsd:element name="path" type="javaee:pathType" />
            <xsd:element name="example" type="javaee:xsdStringType" minOccurs="0"></xsd:element>
            <xsd:element name="tag-extension" type="javaee:tld-extensionType" minOccurs="0" maxOccurs="unbounded"></xsd:element>
        </xsd:sequence>
        <xsd:attribute name="id" type="xsd:ID" />
    </xsd:complexType>
    <xsd:complexType name="tagType">
        <xsd:sequence>
            <xsd:group ref="javaee:descriptionGroup" />
            <xsd:element name="name" type="javaee:tld-canonical-nameType" />
            <xsd:element name="tag-class" type="javaee:fully-qualified-classType"></xsd:element>
            <xsd:element name="tei-class" type="javaee:fully-qualified-classType" minOccurs="0"></xsd:element>
            <xsd:element name="body-content" type="javaee:body-contentType"></xsd:element>
            <xsd:element name="variable" type="javaee:variableType" minOccurs="0" maxOccurs="unbounded" />
            <xsd:element name="attribute" type="javaee:tld-attributeType" minOccurs="0" maxOccurs="unbounded" />
            <xsd:element name="dynamic-attributes" type="javaee:generic-booleanType" minOccurs="0" />
            <xsd:element name="example" type="javaee:xsdStringType" minOccurs="0" />
            <xsd:element name="tag-extension" type="javaee:tld-extensionType" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
        <xsd:attribute name="id" type="xsd:ID" />
    </xsd:complexType>
    <xsd:complexType name="tld-attributeType">
        <xsd:sequence>
            <xsd:element name="description" type="javaee:descriptionType" minOccurs="0" maxOccurs="unbounded" />
            <xsd:element name="name" type="javaee:java-identifierType" />
            <xsd:element name="required" type="javaee:generic-booleanType" minOccurs="0"></xsd:element>
            <xsd:choice>
                <xsd:sequence>
                    <xsd:sequence minOccurs="0">
                        <xsd:element name="rtexprvalue" type="javaee:generic-booleanType"></xsd:element>
                        <xsd:element name="type" type="javaee:fully-qualified-classType" minOccurs="0"></xsd:element>
                    </xsd:sequence>
                    <xsd:choice>
                        <xsd:element name="deferred-value" type="javaee:tld-deferred-valueType" minOccurs="0"></xsd:element>
                        <xsd:element name="deferred-method" type="javaee:tld-deferred-methodType" minOccurs="0"></xsd:element>
                    </xsd:choice>
                </xsd:sequence>
                <xsd:element name="fragment" type="javaee:generic-booleanType" minOccurs="0"></xsd:element>
            </xsd:choice>
        </xsd:sequence>
        <xsd:attribute name="id" type="xsd:ID" />
    </xsd:complexType>
    <xsd:complexType name="tld-canonical-nameType">
        <xsd:simpleContent>
            <xsd:restriction base="javaee:xsdNMTOKENType" />
        </xsd:simpleContent>
    </xsd:complexType>
    <xsd:complexType name="tld-deferred-methodType">
        <xsd:sequence>
            <xsd:element name="method-signature" type="javaee:string" minOccurs="0"></xsd:element>
        </xsd:sequence>
        <xsd:attribute name="id" type="xsd:ID" />
    </xsd:complexType>
    <xsd:complexType name="tld-deferred-valueType">
        <xsd:sequence>
            <xsd:element name="type" type="javaee:fully-qualified-classType" minOccurs="0"></xsd:element>
        </xsd:sequence>
        <xsd:attribute name="id" type="xsd:ID" />
    </xsd:complexType>
    <xsd:complexType name="tld-extensionType">
        <xsd:sequence>
            <xsd:element name="extension-element" type="javaee:extensibleType" maxOccurs="unbounded" />
        </xsd:sequence>
        <xsd:attribute name="namespace" use="required" type="xsd:anyURI" />
        <xsd:attribute name="id" type="xsd:ID" />
    </xsd:complexType>
    <xsd:complexType name="tldTaglibType">
        <xsd:sequence>
            <xsd:group ref="javaee:descriptionGroup" />
            <xsd:element name="tlib-version" type="javaee:dewey-versionType"></xsd:element>
            <xsd:element name="short-name" type="javaee:tld-canonical-nameType">
            </xsd:element>
            <xsd:element name="uri" type="javaee:xsdAnyURIType" minOccurs="0">
            </xsd:element>
            <xsd:element name="validator" type="javaee:validatorType" minOccurs="0">
            </xsd:element>
            <xsd:element name="listener" type="javaee:listenerType" minOccurs="0" maxOccurs="unbounded"></xsd:element>
            <xsd:element name="tag" type="javaee:tagType" minOccurs="0" maxOccurs="unbounded" />
            <xsd:element name="tag-file" type="javaee:tagFileType" minOccurs="0" maxOccurs="unbounded" />
            <xsd:element name="function" type="javaee:functionType" minOccurs="0" maxOccurs="unbounded" />
            <xsd:element name="taglib-extension" type="javaee:tld-extensionType" minOccurs="0" maxOccurs="unbounded"></xsd:element>
        </xsd:sequence>
        <xsd:attribute name="version" type="javaee:dewey-versionType" fixed="2.1" use="required"></xsd:attribute>
        <xsd:attribute name="id" type="xsd:ID" />
    </xsd:complexType>
    <xsd:complexType name="validatorType">
        <xsd:sequence>
            <xsd:element name="description" type="javaee:descriptionType" minOccurs="0" maxOccurs="unbounded" />
            <xsd:element name="validator-class" type="javaee:fully-qualified-classType"></xsd:element>
            <xsd:element name="init-param" type="javaee:param-valueType" minOccurs="0" maxOccurs="unbounded"></xsd:element>
        </xsd:sequence>
        <xsd:attribute name="id" type="xsd:ID" />
    </xsd:complexType>
    <xsd:complexType name="variable-scopeType">
        <xsd:simpleContent>
            <xsd:restriction base="javaee:string">
                <xsd:enumeration value="NESTED" />
                <xsd:enumeration value="AT_BEGIN" />
                <xsd:enumeration value="AT_END" />
            </xsd:restriction>
        </xsd:simpleContent>
    </xsd:complexType>
    <xsd:complexType name="variableType">
        <xsd:sequence>
            <xsd:element name="description" type="javaee:descriptionType" minOccurs="0" maxOccurs="unbounded" />
            <xsd:choice>
                <xsd:element name="name-given" type="javaee:java-identifierType"></xsd:element>
                <xsd:element name="name-from-attribute" type="javaee:java-identifierType"></xsd:element>
            </xsd:choice>
            <xsd:element name="variable-class" type="javaee:fully-qualified-classType" minOccurs="0"></xsd:element>
            <xsd:element name="declare" type="javaee:generic-booleanType" minOccurs="0"></xsd:element>
            <xsd:element name="scope" type="javaee:variable-scopeType" minOccurs="0"></xsd:element>
        </xsd:sequence>
        <xsd:attribute name="id" type="xsd:ID" />
    </xsd:complexType>
======= f554475^:"java/org/apache/catalina/startup/Constants.java"

        "/javax/servlet/jsp/resources/jsp_2_0.xsd";
        "/javax/servlet/jsp/resources/jsp_2_1.xsd";
        "/javax/servlet/jsp/resources/jsp_2_2.xsd";
        "/javax/servlet/jsp/resources/jsp_2_3.xsd";
                                 Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/
   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
   1. Definitions.
      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.
      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.
      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.
      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.
      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.
      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.
      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).
      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.
      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."
      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.
   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.
   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.
   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:
      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and
      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and
      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and
      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.
      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.
   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.
   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.
   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.
   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.
   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.
   END OF TERMS AND CONDITIONS
   APPENDIX: How to apply the Apache License to your work.
      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.
   Copyright [yyyy] [name of copyright owner]
   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at
       http://www.apache.org/licenses/LICENSE-2.0
   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
 - jsp_2_2.xsd
 - jsp_2_3.xsd
   1.1. Contributor. means each individual or entity that creates or contributes
        to the creation of Modifications.
   1.2. Contributor Version. means the combination of the Original Software,
        prior Modifications used by a Contributor (if any), and the
        Modifications made by that particular Contributor.
   1.3. Covered Software. means (a) the Original Software, or (b) Modifications,
        or (c) the combination of files containing Original Software with files
        containing Modifications, in each case including portions thereof.
   1.4. Executable. means the Covered Software in any form other than Source
        Code.
   1.5. Initial Developer. means the individual or entity that first makes
        Original Software available under this License.
   1.6. Larger Work. means a work which combines Covered Software or portions
        thereof with code not governed by the terms of this License.
   1.7. License. means this document.
   1.8. Licensable. means having the right to grant, to the maximum extent
        possible, whether at the time of the initial grant or subsequently
        acquired, any and all of the rights conveyed herein.
   1.9. Modifications. means the Source Code and Executable form of any of the
        following:
        A. Any file that results from an addition to, deletion from or
           modification of the contents of a file containing Original Software
           or previous Modifications;
        B. Any new file that contains any part of the Original Software or
           previous Modification; or
        C. Any new file that is contributed or otherwise made available under
           the terms of this License.
   1.10. Original Software. means the Source Code and Executable form of
         computer software code that is originally released under this License.
   1.11. Patent Claims. means any patent claim(s), now owned or hereafter
         acquired, including without limitation, method, process, and apparatus
         claims, in any patent Licensable by grantor.
   1.12. Source Code. means (a) the common form of computer software code in
         which modifications are made and (b) associated documentation included
         in or with such code.
   1.13. You. (or .Your.) means an individual or a legal entity exercising
         rights under, and complying with all of the terms of, this License. For
         legal entities, .You. includes any entity which controls, is controlled
         by, or is under common control with You. For purposes of this
         definition, .control. means (a) the power, direct or indirect, to cause
         the direction or management of such entity, whether by contract or
         otherwise, or (b) ownership of more than fifty percent (50%) of the
         outstanding shares or beneficial ownership of such entity.
      2.1. The Initial Developer Grant.
      Conditioned upon Your compliance with Section 3.1 below and subject to
      third party intellectual property claims, the Initial Developer hereby
      grants You a world-wide, royalty-free, non-exclusive license:
        (a) under intellectual property rights (other than patent or trademark)
            Licensable by Initial Developer, to use, reproduce, modify, display,
            perform, sublicense and distribute the Original Software (or
            portions thereof), with or without Modifications, and/or as part of
            a Larger Work; and
        (b) under Patent Claims infringed by the making, using or selling of
            Original Software, to make, have made, use, practice, sell, and
            offer for sale, and/or otherwise dispose of the Original Software
            (or portions thereof).
        (c) The licenses granted in Sections 2.1(a) and (b) are effective on the
            date Initial Developer first distributes or otherwise makes the
            Original Software available to a third party under the terms of this
            License.
        (d) Notwithstanding Section 2.1(b) above, no patent license is granted:
            (1) for code that You delete from the Original Software, or (2) for
            infringements caused by: (i) the modification of the Original
            Software, or (ii) the combination of the Original Software with
            other software or devices.
    2.2. Contributor Grant.
    Conditioned upon Your compliance with Section 3.1 below and subject to third
    party intellectual property claims, each Contributor hereby grants You a
    world-wide, royalty-free, non-exclusive license:
        (a) under intellectual property rights (other than patent or trademark)
            Licensable by Contributor to use, reproduce, modify, display,
            perform, sublicense and distribute the Modifications created by such
            Contributor (or portions thereof), either on an unmodified basis,
            with other Modifications, as Covered Software and/or as part of a
            Larger Work; and
        (b) under Patent Claims infringed by the making, using, or selling of
            Modifications made by that Contributor either alone and/or in
            combination with its Contributor Version (or portions of such
            combination), to make, use, sell, offer for sale, have made, and/or
            otherwise dispose of: (1) Modifications made by that Contributor (or
            portions thereof); and (2) the combination of Modifications made by
            that Contributor with its Contributor Version (or portions of such
            combination).
        (c) The licenses granted in Sections 2.2(a) and 2.2(b) are effective on
            the date Contributor first distributes or otherwise makes the
            Modifications available to a third party.
        (d) Notwithstanding Section 2.2(b) above, no patent license is granted:
            (1) for any code that Contributor has deleted from the Contributor
            Version; (2) for infringements caused by: (i) third party
            modifications of Contributor Version, or (ii) the combination of
            Modifications made by that Contributor with other software (except
            as part of the Contributor Version) or other devices; or (3) under
            Patent Claims infringed by Covered Software in the absence of
            Modifications made by that Contributor.
      3.1. Availability of Source Code.
      Any Covered Software that You distribute or otherwise make available in
      Executable form must also be made available in Source Code form and that
      Source Code form must be distributed only under the terms of this License.
      You must include a copy of this License with every copy of the Source Code
      form of the Covered Software You distribute or otherwise make available.
      You must inform recipients of any such Covered Software in Executable form
      as to how they can obtain such Covered Software in Source Code form in a
      reasonable manner on or through a medium customarily used for software
      exchange.
      3.2. Modifications.
      The Modifications that You create or to which You contribute are governed
      by the terms of this License. You represent that You believe Your
      Modifications are Your original creation(s) and/or You have sufficient
      rights to grant the rights conveyed by this License.
      3.3. Required Notices.
      You must include a notice in each of Your Modifications that identifies
      You as the Contributor of the Modification. You may not remove or alter
      any copyright, patent or trademark notices contained within the Covered
      Software, or any notices of licensing or any descriptive text giving
      attribution to any Contributor or the Initial Developer.
      3.4. Application of Additional Terms.
      You may not offer or impose any terms on any Covered Software in Source
      Code form that alters or restricts the applicable version of this License
      or the recipients. rights hereunder. You may choose to offer, and to
      charge a fee for, warranty, support, indemnity or liability obligations to
      one or more recipients of Covered Software. However, you may do so only on
      Your own behalf, and not on behalf of the Initial Developer or any
      Contributor. You must make it absolutely clear that any such warranty,
      support, indemnity or liability obligation is offered by You alone, and
      You hereby agree to indemnify the Initial Developer and every Contributor
      for any liability incurred by the Initial Developer or such Contributor as
      a result of warranty, support, indemnity or liability terms You offer.
      3.5. Distribution of Executable Versions.
      You may distribute the Executable form of the Covered Software under the
      terms of this License or under the terms of a license of Your choice,
      which may contain terms different from this License, provided that You are
      in compliance with the terms of this License and that the license for the
      Executable form does not attempt to limit or alter the recipient.s rights
      in the Source Code form from the rights set forth in this License. If You
      distribute the Covered Software in Executable form under a different
      license, You must make it absolutely clear that any terms which differ
      from this License are offered by You alone, not by the Initial Developer
      or Contributor. You hereby agree to indemnify the Initial Developer and
      every Contributor for any liability incurred by the Initial Developer or
      such Contributor as a result of any such terms You offer.
      3.6. Larger Works.
      You may create a Larger Work by combining Covered Software with other code
      not governed by the terms of this License and distribute the Larger Work
      as a single product. In such a case, You must make sure the requirements
      of this License are fulfilled for the Covered Software.
      4.1. New Versions.
      Sun Microsystems, Inc. is the initial license steward and may publish
      revised and/or new versions of this License from time to time. Each
      version will be given a distinguishing version number. Except as provided
      in Section 4.3, no one other than the license steward has the right to
      modify this License.
      4.2. Effect of New Versions.
      You may always continue to use, distribute or otherwise make the Covered
      Software available under the terms of the version of the License under
      which You originally received the Covered Software. If the Initial
      Developer includes a notice in the Original Software prohibiting it from
      being distributed or otherwise made available under any subsequent version
      of the License, You must distribute and make the Covered Software
      available under the terms of the version of the License under which You
      originally received the Covered Software. Otherwise, You may also choose
      to use, distribute or otherwise make the Covered Software available under
      the terms of any subsequent version of the License published by the
      license steward.
      4.3. Modified Versions.
      When You are an Initial Developer and You want to create a new license for
      Your Original Software, You may create and use a modified version of this
      License if You: (a) rename the license and remove any references to the
      name of the license steward (except to note that the license differs from
      this License); and (b) otherwise make it clear that the license contains
      terms which differ from this License.
   COVERED SOFTWARE IS PROVIDED UNDER THIS LICENSE ON AN .AS IS. BASIS, WITHOUT
   WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, WITHOUT
   LIMITATION, WARRANTIES THAT THE COVERED SOFTWARE IS FREE OF DEFECTS,
   MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE OR NON-INFRINGING. THE ENTIRE RISK
   AS TO THE QUALITY AND PERFORMANCE OF THE COVERED SOFTWARE IS WITH YOU. SHOULD
   ANY COVERED SOFTWARE PROVE DEFECTIVE IN ANY RESPECT, YOU (NOT THE INITIAL
   DEVELOPER OR ANY OTHER CONTRIBUTOR) ASSUME THE COST OF ANY NECESSARY
   SERVICING, REPAIR OR CORRECTION. THIS DISCLAIMER OF WARRANTY CONSTITUTES AN
   ESSENTIAL PART OF THIS LICENSE. NO USE OF ANY COVERED SOFTWARE IS AUTHORIZED
   HEREUNDER EXCEPT UNDER THIS DISCLAIMER.
      6.1. This License and the rights granted hereunder will terminate
           automatically if You fail to comply with terms herein and fail to
           cure such breach within 30 days of becoming aware of the breach.
           Provisions which, by their nature, must remain in effect beyond the
           termination of this License shall survive.
      6.2. If You assert a patent infringement claim (excluding declaratory
           judgment actions) against Initial Developer or a Contributor (the
           Initial Developer or Contributor against whom You assert such claim
           is referred to as .Participant.) alleging that the Participant
           Software (meaning the Contributor Version where the Participant is a
           Contributor or the Original Software where the Participant is the
           Initial Developer) directly or indirectly infringes any patent, then
           any and all rights granted directly or indirectly to You by such
           Participant, the Initial Developer (if the Initial Developer is not
           the Participant) and all Contributors under Sections 2.1 and/or 2.2
           of this License shall, upon 60 days notice from Participant terminate
           prospectively and automatically at the expiration of such 60 day
           notice period, unless if within such 60 day period You withdraw Your
           claim with respect to the Participant Software against such
           Participant either unilaterally or pursuant to a written agreement
           with Participant.
      6.3. In the event of termination under Sections 6.1 or 6.2 above, all end
           user licenses that have been validly granted by You or any
           distributor hereunder prior to termination (excluding licenses
           granted to You by any distributor) shall survive termination.
   UNDER NO CIRCUMSTANCES AND UNDER NO LEGAL THEORY, WHETHER TORT (INCLUDING
   NEGLIGENCE), CONTRACT, OR OTHERWISE, SHALL YOU, THE INITIAL DEVELOPER, ANY
   OTHER CONTRIBUTOR, OR ANY DISTRIBUTOR OF COVERED SOFTWARE, OR ANY SUPPLIER OF
   ANY OF SUCH PARTIES, BE LIABLE TO ANY PERSON FOR ANY INDIRECT, SPECIAL,
   INCIDENTAL, OR CONSEQUENTIAL DAMAGES OF ANY CHARACTER INCLUDING, WITHOUT
   LIMITATION, DAMAGES FOR LOST PROFITS, LOSS OF GOODWILL, WORK STOPPAGE,
   COMPUTER FAILURE OR MALFUNCTION, OR ANY AND ALL OTHER COMMERCIAL DAMAGES OR
   LOSSES, EVEN IF SUCH PARTY SHALL HAVE BEEN INFORMED OF THE POSSIBILITY OF
   SUCH DAMAGES. THIS LIMITATION OF LIABILITY SHALL NOT APPLY TO LIABILITY FOR
   DEATH OR PERSONAL INJURY RESULTING FROM SUCH PARTY.S NEGLIGENCE TO THE EXTENT
   APPLICABLE LAW PROHIBITS SUCH LIMITATION. SOME JURISDICTIONS DO NOT ALLOW THE
   EXCLUSION OR LIMITATION OF INCIDENTAL OR CONSEQUENTIAL DAMAGES, SO THIS
   EXCLUSION AND LIMITATION MAY NOT APPLY TO YOU.
   The Covered Software is a .commercial item,. as that term is defined in 48
   C.F.R. 2.101 (Oct. 1995), consisting of .commercial computer software. (as
   that term is defined at 48 C.F.R. ? 252.227-7014(a)(1)) and commercial
   computer software documentation. as such terms are used in 48 C.F.R. 12.212
   (Sept. 1995). Consistent with 48 C.F.R. 12.212 and 48 C.F.R. 227.7202-1
   through 227.7202-4 (June 1995), all U.S. Government End Users acquire Covered
   Software with only those rights set forth herein. This U.S. Government Rights
   clause is in lieu of, and supersedes, any other FAR, DFAR, or other clause or
   provision that addresses Government rights in computer software under this
   License.
   This License represents the complete agreement concerning subject matter
   hereof. If any provision of this License is held to be unenforceable, such
   provision shall be reformed only to the extent necessary to make it
   enforceable. This License shall be governed by the law of the jurisdiction
   specified in a notice contained within the Original Software (except to the
   extent applicable law, if any, provides otherwise), excluding such
   jurisdiction's conflict-of-law provisions. Any litigation relating to this
   License shall be subject to the jurisdiction of the courts located in the
   jurisdiction and venue specified in a notice contained within the Original
   Software, with the losing party responsible for costs, including, without
   limitation, court costs and reasonable attorneys. fees and expenses. The
   application of the United Nations Convention on Contracts for the
   International Sale of Goods is expressly excluded. Any law or regulation
   which provides that the language of a contract shall be construed against
   the drafter shall not apply to this License. You agree that You alone are
   responsible for compliance with the United States export administration
   regulations (and the export control laws and regulation of any other
   countries) when You use, distribute or otherwise make available any Covered
   Software.
   As between Initial Developer and the Contributors, each party is responsible
   for claims and damages arising, directly or indirectly, out of its
   utilization of rights under this License and You agree to work with Initial
   Developer and Contributors to distribute such responsibility on an equitable
   basis. Nothing herein is intended or shall be deemed to constitute any
   admission of liability.
   NOTICE PURSUANT TO SECTION 9 OF THE COMMON DEVELOPMENT AND DISTRIBUTION
   LICENSE (CDDL)
   The code released under the CDDL shall be governed by the laws of the State
   of California (excluding conflict-of-law provisions). Any litigation relating
   to this License shall be subject to the jurisdiction of the Federal Courts of
   the Northern District of California and the state courts of the State of
   California, with venue lying in Santa Clara County, California.
 - jsp_2_2.xsd
 - jsp_2_3.xsd
      <name>
        Apache License, Version 2.0 and
        Common Development And Distribution License (CDDL) Version 1.0
      </name>
      <url>
        http://www.apache.org/licenses/LICENSE-2.0.txt and
        http://www.opensource.org/licenses/cddl1.txt
      </url>
      <comments>
        The Apache License, version 2.0 applies to all files apart from
        jsp_2_2.xsd and jsp_2_3.xsd to which the CDDL version 1.0 applies.
      </comments>
        javaee_5.xsd, javaee_web_services_1_2.xsd,
        javaee_web_services_client_1_2.xsd, javaee_6.xsd,
        javaee_web_services_1_3.xsd, javaee_web_services_client_1_3.xsd,
        web-app_3_0.xsd, web-common_3_0.xsd, web-fragment_3_0.xsd, javaee_7.xsd,
        javaee_web_services_1_4.xsd, javaee_web_services_client_1_4.xsd,
        web-app_3_1.xsd, web-common_3_1.xsd and web-fragment_3_1.xsd to which
        the CDDL version 1.0 applies.

======= b932ace^:"java/org/apache/catalina/startup/ContextConfig.java"

            ServletContainerInitializer sci = null;
======= b932ace^:"java/org/apache/catalina/startup/ContextConfig.java"

                    sci = getServletContainerInitializer(is);
======= b932ace^:"java/org/apache/catalina/startup/ContextConfig.java"

            if (sci == null) {
            initializerClassMap.put(sci, new HashSet<Class<?>>());
            HandlesTypes ht = null;
            try {
                ht = sci.getClass().getAnnotation(HandlesTypes.class);
            } catch (Exception e) {
                if (log.isDebugEnabled()) {
                    log.info(sm.getString("contextConfig.sci.debug", url), e);
                } else {
                    log.info(sm.getString("contextConfig.sci.info", url));
            }
            if (ht != null) {
                Class<?>[] types = ht.value();
                if (types != null) {
                    for (Class<?> type : types) {
                        if (type.isAnnotation()) {
                            handlesTypesAnnotations = true;
                        } else {
                            handlesTypesNonAnnotations = true;
                        }
                        Set<ServletContainerInitializer> scis =
                            typeInitializerMap.get(type);
                        if (scis == null) {
                            scis = new HashSet<>();
                            typeInitializerMap.put(type, scis);
                        scis.add(sci);
     *
    protected ServletContainerInitializer getServletContainerInitializer(
        String className = null;
                BufferedReader br =
                    new BufferedReader(new InputStreamReader(is, "UTF-8"));
                line = br.readLine();
                if (line != null && line.trim().length() > 0) {
                    className = line.trim();
======= b932ace^:"java/org/apache/catalina/startup/ContextConfig.java"

            Class<?> clazz = Class.forName(className,true,
                    context.getLoader().getClassLoader());
             sci = (ServletContainerInitializer) clazz.newInstance();

======= 00e4f3f^:"java/org/apache/tomcat/websocket/AsyncChannelWrapperSecure.java"

                        Future<Integer> f = socketChannel.write(socketWriteBuffer);
                        Integer socketWrite = f.get();
                        if (socketWrite.intValue() != r.bytesProduced()) {
                            throw new IOException(sm.getString(
                                    "asyncChannelWrapperSecure.writeFail",
                                    Integer.valueOf(socketWrite.intValue()),
                                    Integer.valueOf(r.bytesProduced())));

======= 2eb065f^:"java/org/apache/coyote/Request.java"


======= a267dbf^:"java/org/apache/tomcat/websocket/pojo/PojoMethodMapping.java"

                } else if (decoderMatch.hasMatches()) {

======= a634d85^:"java/org/apache/tomcat/websocket/Constants.java"

======= a634d85^:"java/org/apache/tomcat/websocket/Constants.java"

======= a634d85^:"java/org/apache/tomcat/websocket/WsWebSocketContainer.java"

                    Constants.WS_PROTOCOL_HEADER_NAME);
======= a634d85^:"java/org/apache/tomcat/websocket/WsWebSocketContainer.java"

======= a634d85^:"java/org/apache/tomcat/websocket/WsWebSocketContainer.java"


======= b069c78^:"java/org/apache/tomcat/websocket/server/WsServerContainer.java"


======= 19c0bd3^:"java/org/apache/tomcat/websocket/WsPongMessage.java"

        this.applicationData = applicationData;
======= 19c0bd3^:"java/org/apache/tomcat/websocket/WsPongMessage.java"


======= 4da2de0^:"java/org/apache/coyote/http11/AbstractHttp11Processor.java"

                setSocketTimeout(endpoint.getSoTimeout());

======= ddd73d0^:"java/org/apache/tomcat/websocket/WsFrameBase.java"

======= ddd73d0^:"java/org/apache/tomcat/websocket/WsFrameBase.java"

                mhPong.onMessage(new WsPongMessage(controlBufferBinary));
======= ddd73d0^:"java/org/apache/tomcat/websocket/WsFrameBase.java"

            if (mh instanceof MessageHandler.Partial<?>) {
                ((MessageHandler.Partial<String>) mh).onMessage(
                        messageBufferText.toString(), last);
            } else {
                // Caller ensures last == true if this branch is used
                ((MessageHandler.Whole<String>) mh).onMessage(
                        messageBufferText.toString());
            messageBufferText.clear();
======= ddd73d0^:"java/org/apache/tomcat/websocket/WsFrameBase.java"

            if (mh instanceof MessageHandler.Partial<?>) {
                ((MessageHandler.Partial<ByteBuffer>) mh).onMessage(msg, last);
            } else {
                // Caller ensures last == true if this branch is used
                ((MessageHandler.Whole<ByteBuffer>) mh).onMessage(msg);

======= 21f0a5c^:"java/org/apache/catalina/valves/RemoteIpValve.java"

 * <td>RemoteIPProxiesHeader</td>
======= 21f0a5c^:"java/org/apache/catalina/valves/RemoteIpValve.java"

 *   remoteIpProxiesHeader="x-forwarded-by"
======= 21f0a5c^:"java/org/apache/catalina/valves/RemoteIpValve.java"

 *   remoteIpProxiesHeader="x-forwarded-by"
======= 21f0a5c^:"java/org/apache/catalina/valves/RemoteIpValve.java"

 *   remoteIpProxiesHeader="x-forwarded-by"
======= 21f0a5c^:"java/org/apache/catalina/valves/RemoteIpValve.java"

 *   remoteIpProxiesHeader="x-forwarded-by"

======= df6cee7^:"java/org/apache/coyote/http11/Http11Processor.java"

            socket.getSocket().setSoTimeout(endpoint.getSoTimeout());

======= 6871d4c^:"java/org/apache/catalina/realm/JAASRealm.java"

======= 6871d4c^:"java/org/apache/catalina/realm/JAASRealm.java"

======= 6871d4c^:"java/org/apache/catalina/realm/JAASRealm.java"

======= 6871d4c^:"java/org/apache/catalina/realm/JAASRealm.java"

    extends RealmBase
 {
======= 6871d4c^:"java/org/apache/catalina/realm/JAASRealm.java"

     protected boolean useContextClassLoader = true;
======= 6871d4c^:"java/org/apache/catalina/realm/JAASRealm.java"

            loginContext = new LoginContext(appName, callbackHandler);
======= 6871d4c^:"java/org/apache/catalina/realm/JAASRealm.java"


======= 9a01f2d^:"java/org/apache/coyote/http11/InternalNioInputBuffer.java"

                NioEndpoint.KeyAttachment att = (NioEndpoint.KeyAttachment)socket.getAttachment(false);
                if ( att == null ) throw new IOException("Key must be cancelled.");
                nRead = pool.read(socket.getBufHandler().getReadBuffer(),socket,selector,att.getTimeout());

======= ca956bd^:"java/org/apache/catalina/core/ApplicationHttpRequest.java"

            for (int i = 0; i < specialAttributes.length; i++) {

======= b7cad6b^:"java/org/apache/catalina/valves/ErrorReportValve.java"

        for (int i = 0; i < elements.length; i++) {

======= 45f59bb^:"java/org/apache/catalina/mbeans/JmxRemoteLifecycleListener.java"

======= 45f59bb^:"java/org/apache/catalina/mbeans/JmxRemoteLifecycleListener.java"

======= 45f59bb^:"java/org/apache/catalina/mbeans/JmxRemoteLifecycleListener.java"

======= 45f59bb^:"java/org/apache/catalina/mbeans/JmxRemoteLifecycleListener.java"

======= 45f59bb^:"java/org/apache/catalina/mbeans/JmxRemoteLifecycleListener.java"

                    rmiServerPortPlatform, env,
======= 45f59bb^:"java/org/apache/catalina/mbeans/JmxRemoteLifecycleListener.java"

            HashMap<String,Object> theEnv, MBeanServer theMBeanServer) {
            LocateRegistry.createRegistry(theRmiRegistryPort);
======= 45f59bb^:"java/org/apache/catalina/mbeans/JmxRemoteLifecycleListener.java"

    implements RMIClientSocketFactory, Serializable {
======= 45f59bb^:"java/org/apache/catalina/mbeans/JmxRemoteLifecycleListener.java"


======= d71136a^:"test/org/apache/tomcat/websocket/pojo/TestEncodingDecoding.java"

                ((MsgString) client.received.peek()).getData());
======= d71136a^:"test/org/apache/tomcat/websocket/pojo/TestEncodingDecoding.java"

                MsgString msg = new MsgString();
                msg.setData(MESSAGE_ONE);
======= d71136a^:"test/org/apache/tomcat/websocket/pojo/TestEncodingDecoding.java"

======= d71136a^:"test/org/apache/tomcat/websocket/pojo/TestEncodingDecoding.java"

            bb.position(bb.position() + 2);

======= 7aea9cb^:"java/org/apache/catalina/valves/AccessLogValve.java"

======= 7aea9cb^:"java/org/apache/catalina/valves/AccessLogValve.java"

======= 7aea9cb^:"java/org/apache/coyote/Response.java"

======= 7aea9cb^:"java/org/apache/coyote/Response.java"

======= 7aea9cb^:"java/org/apache/coyote/Response.java"

        commited = true;
======= 7aea9cb^:"java/org/apache/coyote/Response.java"


======= 3a36a8f^:"java/org/apache/catalina/core/StandardService.java"

        mapperListener.stop();
======= 3a36a8f^:"java/org/apache/catalina/startup/Catalina.java"

            log.error("Catalina.start: ", e);

======= 93bcdde^:"java/org/apache/tomcat/websocket/WsRemoteEndpointImplBase.java"

======= 93bcdde^:"java/org/apache/tomcat/websocket/WsRemoteEndpointImplBase.java"

    protected void setEncoders(List<Class<? extends Encoder>> encoders)
        for (Class<? extends Encoder> encoderClazz : encoders) {
======= 93bcdde^:"java/org/apache/tomcat/websocket/WsRemoteEndpointImplBase.java"

    protected abstract void close();
======= 93bcdde^:"java/org/apache/tomcat/websocket/WsRemoteEndpointImplClient.java"

    protected void close() {
======= 93bcdde^:"java/org/apache/tomcat/websocket/WsSession.java"

======= 93bcdde^:"java/org/apache/tomcat/websocket/WsSession.java"

            boolean secure, List<Class<? extends Encoder>> encoders,
            Map<String,Object> userProperties)
======= 93bcdde^:"java/org/apache/tomcat/websocket/WsSession.java"

        this.wsRemoteEndpoint.setEncoders(encoders);
        this.userProperties.putAll(userProperties);
======= 93bcdde^:"java/org/apache/tomcat/websocket/WsWebSocketContainer.java"

                clientEndpointConfiguration.getEncoders(),
                clientEndpointConfiguration.getUserProperties());
======= 93bcdde^:"java/org/apache/tomcat/websocket/server/WsHttpUpgradeHandler.java"

                    pathParameters, secure, endpointConfig.getEncoders(),
                    endpointConfig.getUserProperties());
======= 93bcdde^:"java/org/apache/tomcat/websocket/server/WsRemoteEndpointImplServer.java"

    protected void close() {
======= 93bcdde^:"test/org/apache/tomcat/websocket/pojo/TestEncodingDecoding.java"

======= 93bcdde^:"test/org/apache/tomcat/websocket/pojo/TestEncodingDecoding.java"

======= 93bcdde^:"test/org/apache/tomcat/websocket/pojo/TestEncodingDecoding.java"

======= 93bcdde^:"test/org/apache/tomcat/websocket/pojo/TestEncodingDecoding.java"

======= 93bcdde^:"test/org/apache/tomcat/websocket/pojo/TestEncodingDecoding.java"

            // NO-OP
            // NO-OP
======= 93bcdde^:"test/org/apache/tomcat/websocket/pojo/TestEncodingDecoding.java"

            // NO-OP
            // NO-OP
======= 93bcdde^:"test/org/apache/tomcat/websocket/pojo/TestEncodingDecoding.java"

            // NO-OP
            // NO-OP
======= 93bcdde^:"test/org/apache/tomcat/websocket/pojo/TestEncodingDecoding.java"

            // NO-OP
            // NO-OP

======= 366ddff^:"java/org/apache/tomcat/websocket/pojo/PojoMethodMapping.java"

======= 366ddff^:"java/org/apache/tomcat/websocket/pojo/PojoMethodMapping.java"

                                if (indexByteBuffer == -1) {
                                    indexByteBuffer = i;
                                } else {
                                    throw new IllegalArgumentException(sm.getString(
                                            "pojoMethodMapping.duplicateMessageParam",
                                            m.getName(), m.getDeclaringClass().getName()));
                                break;
                                if (indexString == -1) {
                                    indexString = i;
                                } else {
                                    throw new IllegalArgumentException(sm.getString(
                                            "pojoMethodMapping.duplicateMessageParam",
                                            m.getName(), m.getDeclaringClass().getName()));

======= c4a50f5^:"java/org/apache/catalina/authenticator/BasicAuthenticator.java"

    extends AuthenticatorBase {
======= c4a50f5^:"java/org/apache/catalina/authenticator/BasicAuthenticator.java"

        String username = null;
        String password = null;
======= c4a50f5^:"java/org/apache/catalina/authenticator/BasicAuthenticator.java"

            if (authorizationBC.startsWithIgnoreCase("basic ", 0)) {
                authorizationBC.setOffset(authorizationBC.getOffset() + 6);
                byte[] decoded = Base64.decodeBase64(
                        authorizationBC.getBuffer(),
                        authorizationBC.getOffset(),
                        authorizationBC.getLength());
                // Get username and password
                int colon = -1;
                for (int i = 0; i < decoded.length; i++) {
                    if (decoded[i] == ':') {
                        colon = i;
                        break;
                    }
                }
                if (colon < 0) {
                    username = new String(decoded, B2CConverter.ISO_8859_1);
                } else {
                    username = new String(
                            decoded, 0, colon, B2CConverter.ISO_8859_1);
                    password = new String(
                            decoded, colon + 1, decoded.length - colon - 1,
                            B2CConverter.ISO_8859_1);
                authorizationBC.setOffset(authorizationBC.getOffset() - 6);
            principal = context.getRealm().authenticate(username, password);
            if (principal != null) {
                register(request, response, principal,
                        HttpServletRequest.BASIC_AUTH, username, password);
                return (true);
======= c4a50f5^:"java/org/apache/catalina/authenticator/BasicAuthenticator.java"

======= c4a50f5^:"java/org/apache/catalina/authenticator/BasicAuthenticator.java"

======= c4a50f5^:"test/org/apache/catalina/authenticator/TestNonLoginAndBasicAuthenticator.java"

     * using white space around the username credential.
     *
     * The request is rejected with 401 SC_UNAUTHORIZED status.
     *
     * TODO: RFC2617 does not define the separation syntax between the
     *       auth-scheme and basic-credentials tokens. Tomcat should tolerate
     *       any reasonable amount of white space and return SC_OK.
                NO_COOKIES, HttpServletResponse.SC_UNAUTHORIZED);
     * using white space around the password credential.
     *
     * The request is rejected with 401 SC_UNAUTHORIZED status.
     *
     * TODO: RFC2617 does not define the separation syntax between the
     *       auth-scheme and basic-credentials tokens. Tomcat should tolerate
     *       any reasonable amount of white space and return SC_OK.
                NO_COOKIES, HttpServletResponse.SC_UNAUTHORIZED);

======= c7c30b6^:"java/org/apache/tomcat/util/scan/StandardJarScanner.java"

            if (urlStr.startsWith("file:") || urlStr.startsWith("jndi:")) {

======= f78c1a4^:"java/org/apache/catalina/core/StandardContext.java"

======= f78c1a4^:"java/org/apache/catalina/core/StandardContext.java"


======= 3e2ceee^:"java/org/apache/jasper/compiler/Validator.java"


======= 4979721^:"java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java"

            for (int j=0; j<mbrs.length; j++ )

======= 82bccd2^:"java/org/apache/catalina/servlets/WebdavServlet.java"

                if (ifHeader.indexOf(token) != -1)
======= 82bccd2^:"java/org/apache/catalina/servlets/WebdavServlet.java"

                    if (ifHeader.indexOf(token) != -1)

======= c48a2ed^:"test/org/apache/catalina/authenticator/TestNonLoginAndBasicAuthenticator.java"

======= c48a2ed^:"test/org/apache/tomcat/websocket/TestWsWebSocketContainer.java"


======= 99562d3^:"java/org/apache/juli/ClassLoaderLogManager.java"

        ClassLoader classLoader = Thread.currentThread()
            .getContextClassLoader();
            name = prefix + name;
======= 99562d3^:"java/org/apache/juli/ClassLoaderLogManager.java"

        // Simple property replacement (mostly for folder names)
        if (result != null) {
            result = replace(result);
        }

======= 72edec7^:"test/org/apache/catalina/filters/TesterHttpServletResponse.java"

======= 72edec7^:"test/org/apache/catalina/filters/TesterHttpServletResponse.java"

======= 72edec7^:"test/org/apache/catalina/filters/TesterHttpServletResponse.java"

    public PrintWriter getWriter() throws IOException { return null; }
    @Override
======= 72edec7^:"test/org/apache/catalina/filters/TesterHttpServletResponse.java"

    public String getHeader(String name) { return null; }
    @Override
    @Override
    public int getStatus() { return -1; }
======= 72edec7^:"test/org/apache/catalina/filters/TesterHttpServletResponse.java"

    public void addHeader(String name, String value) {/* NOOP */}
    @Override
======= 72edec7^:"test/org/apache/catalina/filters/TesterHttpServletResponse.java"

    public void setHeader(String name, String value) {/* NOOP */}
    @Override
    @Override
    public void setStatus(int status) {/* NOOP */}
======= 72edec7^:"test/org/apache/catalina/filters/TesterHttpServletResponse.java"

  <subsection name="Introduction">
    <p>This filter triggers parameters parsing in a request and rejects the
    request if some parameters were skipped during parameter parsing because
    of parsing errors or request size limitations (such as
    <code>maxParameterCount</code> attribute in a
    <a href="http.html">Connector</a>).
    This filter can be used to ensure that none parameter values submitted by
    client are lost.</p>
    <p>Note that parameter parsing may consume the body of an HTTP request, so
    caution is needed if the servlet protected by this filter uses
    <code>request.getInputStream()</code> or <code>request.getReader()</code>
    calls. In general the risk of breaking a web application by adding this
    filter is not so high, because parameter parsing does check content type
    of the request before consuming the request body.</p>
    <p>Note, that for the POST requests to be parsed correctly, a
    <code>SetCharacterEncodingFilter</code> filter must be configured above
    this one. See CharacterEncoding page in the FAQ for details.</p>
    <p>The request is rejected with HTTP status code 400 (Bad Request).</p>
  </subsection>
  <subsection name="Filter Class Name">
    <p>The filter class name for the Failed Request Filter is
    <strong><code>org.apache.catalina.filters.FailedRequestFilter</code>
    </strong>.</p>
  </subsection>
  <subsection name="Initialisation parameters">
    <p>The Failed Request Filter does not support any initialization parameters.</p>
  </subsection>

======= 712a351^:"java/org/apache/catalina/ant/DeployTask.java"

======= 712a351^:"java/org/apache/catalina/ant/DeployTask.java"

     * The context path of the web application we are managing.
     */
    protected String path = null;
    public String getPath() {
        return (this.path);
    }
    public void setPath(String path) {
        this.path = path;
    }
    /**
======= 712a351^:"java/org/apache/catalina/ant/DeployTask.java"

        StringBuilder sb = new StringBuilder("/deploy?path=");
            sb.append(URLEncoder.encode(this.path, getCharset()));

======= 6d789fe^:"java/org/apache/catalina/authenticator/AuthenticatorBase.java"


======= 6c6b25c^:"java/org/apache/tomcat/websocket/AsyncChannelWrapperSecure.java"

======= 6c6b25c^:"java/org/apache/tomcat/websocket/AsyncChannelWrapperSecure.java"

                HandshakeStatus handshakeStatus =
                        sslEngine.getHandshakeStatus();
======= 6c6b25c^:"java/org/apache/tomcat/websocket/AsyncChannelWrapperSecure.java"

                            handshakeStatus = checkResult(r, true);
======= 6c6b25c^:"java/org/apache/tomcat/websocket/AsyncChannelWrapperSecure.java"

                            if (socketReadBuffer.position() == 0) {
======= 6c6b25c^:"java/org/apache/tomcat/websocket/AsyncChannelWrapperSecure.java"

                            handshakeStatus = checkResult(r, false);
======= 6c6b25c^:"java/org/apache/tomcat/websocket/AsyncChannelWrapperSecure.java"

        private HandshakeStatus checkResult(SSLEngineResult result,
                boolean wrap) throws SSLException {
            if (result.getStatus() != Status.OK) {
======= 6c6b25c^:"java/org/apache/tomcat/websocket/AsyncChannelWrapperSecure.java"

            return result.getHandshakeStatus();

======= cccd0ac^:"java/org/apache/catalina/connector/Request.java"

                    ApplicationPart part = new ApplicationPart(item, mce);
======= cccd0ac^:"java/org/apache/catalina/core/ApplicationPart.java"

======= cccd0ac^:"java/org/apache/catalina/core/ApplicationPart.java"

======= cccd0ac^:"java/org/apache/catalina/core/ApplicationPart.java"

    private final MultipartConfigElement mce;
    public ApplicationPart(FileItem fileItem, MultipartConfigElement mce) {
        this.mce = mce;
======= cccd0ac^:"java/org/apache/catalina/core/ApplicationPart.java"

            file = new File(mce.getLocation(), fileName);

======= 65ab66e^:"java/org/apache/jasper/compiler/TagPluginManager.java"

                Class<?> pluginClass = Class.forName(pluginClassStr);

======= 6272fca^:"java/org/apache/tomcat/spdy/NetSupportSocket.java"

        ctx.getExecutor().execute(ch.inputThread);

======= c25112b^:"java/org/apache/coyote/spdy/SpdyProxyProtocol.java"

======= c25112b^:"java/org/apache/coyote/spdy/SpdyProxyProtocol.java"

        spdyContext.setTlsComprression(false, false);
======= c25112b^:"java/org/apache/coyote/spdy/SpdyProxyProtocol.java"


======= f763975^:"java/org/apache/coyote/http11/InternalNioInputBuffer.java"

        }
        if (parsingRequestLinePhase == 6) {
            // Mark the current buffer position
======= f763975^:"test/org/apache/catalina/startup/SimpleHttpClient.java"

    public static final String CRLF = "\r\n";
======= f763975^:"test/org/apache/coyote/http11/TestInternalInputBuffer.java"


======= 0de078e^:"test/org/apache/catalina/authenticator/TestFormAuthenticator.java"

======= 0de078e^:"test/org/apache/catalina/authenticator/TestFormAuthenticator.java"

    public void testGet() throws Exception {
        doTest("GET", "GET", false);
    public void testPostNoContinue() throws Exception {
        doTest("POST", "GET", false);
    public void testPostWithContinue() throws Exception {
        doTest("POST", "GET", true);
    public void testPostNoContinuePostRedirect() throws Exception {
        doTest("POST", "POST", false);
    public void testPostWithContinuePostRedirect() throws Exception {
        doTest("POST", "POST", true);
    private void doTest(String resourceMethod, String redirectMethod,
            boolean useContinue) throws Exception {
        FormAuthClient client = new FormAuthClient();
        // First request for authenticated resource
        client.doResourceRequest(resourceMethod);
        // Second request for the login page
        client.doLoginRequest();
        assertTrue(client.isResponse302());
        // Third request - follow the redirect
        client.doResourceRequest(redirectMethod);
        // Subsequent requests - direct to the resource
        for (int i = 0; i < 5; i++) {
            client.doResourceRequest(resourceMethod);
            assertTrue(client.isResponseBodyOK());
        private static final String LOGIN_PAGE = "j_security_check";
        private String protectedPage = "index.jsp";
        private String protectedLocation = "/examples/jsp/security/protected/";
        private String sessionId = null;
        private FormAuthClient() throws Exception {
======= 0de078e^:"test/org/apache/catalina/authenticator/TestFormAuthenticator.java"

        private void doResourceRequest(String method) throws Exception {
            String requestTail;
            requestHead.append(method).append(" ").append(protectedLocation)
                    .append(protectedPage);
            if ("GET".equals(method)) {
                requestHead.append("?role=bar");
            if (sessionId != null) {
                requestHead.append("Cookie: JSESSIONID=").append(sessionId)
                        .append(CRLF);
                requestHead.append("Content-length: 8").append(CRLF);
                requestHead.append(CRLF);
                requestTail = "role=bar";
            } else {
                requestTail = CRLF;
            String request[] = new String[2];
            request[0] = requestHead.toString();
            request[1] = requestTail;
            doRequest(request);
        }
        private void doLoginRequest() throws Exception {
            StringBuilder requestHead = new StringBuilder(128);
            requestHead.append("POST ").append(protectedLocation)
                    .append(LOGIN_PAGE).append(" HTTP/1.1").append(CRLF);
            requestHead.append("Host: localhost").append(CRLF);
            requestHead.append("Connection: close").append(CRLF);
            if (getUseContinue()) {
                requestHead.append("Expect: 100-continue").append(CRLF);
            }
            if (sessionId != null) {
                requestHead.append("Cookie: JSESSIONID=").append(sessionId)
                        .append(CRLF);
            }
            requestHead.append(
                    "Content-Type: application/x-www-form-urlencoded").append(
                    CRLF);
            requestHead.append("Content-length: 35").append(CRLF);
            request[1] = "j_username=tomcat&j_password=tomcat";
            String newSessionId = getSessionId();
            if (newSessionId != null) {
                sessionId = newSessionId;
            }
            if (requestCount == 1) {
                // First request should result in the login page
                assertContains(getResponseBody(),
                        "<title>Login Page for Examples</title>");
                return true;
            } else if (requestCount == 2) {
                // Second request should result in a redirect
                return true;
            } else {
                // Subsequent requests should result in the protected page
                // The role parameter should have reached the page
                String body = getResponseBody();
                assertContains(body,
                        "<title>Protected Page for Examples</title>");
                assertContains(body,
                        "<input type=\"text\" name=\"role\" value=\"bar\"");
                return true;
                fail("Response body check failure.\n"

======= 76a7098^:"java/org/apache/coyote/http11/AbstractOutputBuffer.java"


======= 7558546^:"java/org/apache/catalina/connector/Request.java"

                                encoding = Parameters.DEFAULT_ENCODING;
======= 7558546^:"test/org/apache/catalina/connector/TestRequest.java"

======= 7558546^:"test/org/apache/catalina/connector/TestRequest.java"

======= 7558546^:"test/org/apache/catalina/connector/TestRequest.java"

        HttpURLConnection conn = getConnection();
======= 7558546^:"test/org/apache/catalina/connector/TestRequest.java"

        HttpURLConnection conn = getConnection();
======= 7558546^:"test/org/apache/catalina/connector/TestRequest.java"

======= 7558546^:"test/org/apache/catalina/connector/TestRequest.java"

    private HttpURLConnection getConnection() throws IOException {
        final String query = "http://localhost:" + getPort() + "/";
======= 7558546^:"test/org/apache/catalina/connector/TestRequest.java"


======= 3960b22^:"test/org/apache/catalina/connector/TestCoyoteAdapter.java"

======= 3960b22^:"test/org/apache/catalina/connector/TestCoyoteAdapter.java"

======= 3960b22^:"test/org/apache/catalina/connector/TestCoyoteAdapter.java"


======= cdbf6b0^:"java/org/apache/catalina/mapper/Mapper.java"

                String name = path;

======= aabef09^:"java/org/apache/catalina/core/ApplicationContext.java"

        return context.getJspConfigDescriptor();
======= aabef09^:"test/org/apache/catalina/core/TestApplicationContext.java"


======= 41462ca^:"java/org/apache/catalina/core/ApplicationContext.java"

======= 41462ca^:"java/org/apache/catalina/core/ApplicationContext.java"

    private final SessionCookieConfig sessionCookieConfig =
        new ApplicationSessionCookieConfig();
======= 41462ca^:"java/org/apache/catalina/core/ApplicationSessionCookieConfig.java"

======= 41462ca^:"java/org/apache/catalina/core/ApplicationSessionCookieConfig.java"

======= 41462ca^:"java/org/apache/catalina/core/ApplicationSessionCookieConfig.java"


======= 7aeab0e^:"java/org/apache/tomcat/util/http/parser/HttpParser.java"

    private static SkipConstantResult skipConstant(StringReader input,
            String constant) throws IOException {
        int len = constant.length();
        // Skip lws
        while (c == 32 || c == 9) {
======= 7aeab0e^:"java/org/apache/tomcat/util/http/parser/HttpParser.java"

        int c = input.read();
        // Skip lws
        while (c == 32 || c == 9) {
            c = input.read();
        }
======= 7aeab0e^:"java/org/apache/tomcat/util/http/parser/HttpParser.java"

        int c = input.read();
        // Skip lws
        while (c == 32 || c == 9) {
            c = input.read();
        }
======= 7aeab0e^:"java/org/apache/tomcat/util/http/parser/HttpParser.java"

        // Use mark/reset as skip(-1) fails when reading the last character of
        // the input
        input.mark(1);
        int c = input.read();
        // Go back so first character is available to be read again
        input.reset();
======= 7aeab0e^:"java/org/apache/tomcat/util/http/parser/HttpParser.java"

        int c = input.read();
        // Skip lws
        while (c == 32 || c == 9) {
            c = input.read();
        }
======= 7aeab0e^:"java/org/apache/tomcat/util/http/parser/HttpParser.java"

        int c = input.read();
        // Skip lws
        while (c == 32 || c == 9) {
            c = input.read();
        }
======= 7aeab0e^:"test/org/apache/tomcat/util/http/parser/TestMediaType.java"

======= 7aeab0e^:"test/org/apache/tomcat/util/http/parser/TestMediaType.java"

======= 7aeab0e^:"test/org/apache/tomcat/util/http/parser/TestMediaType.java"

            sb.append(p.toString());
======= 7aeab0e^:"test/org/apache/tomcat/util/http/parser/TestMediaType.java"

    }

======= c06707c^:"java/org/apache/catalina/loader/WebappClassLoader.java"

======= c06707c^:"java/org/apache/catalina/loader/WebappClassLoader.java"

            while (iter.hasNext()) {
                Object entry = iter.next();
                if (loadedByThisOrChild(entry)) {
                    return true;

======= 2df191f^:"java/org/apache/tomcat/websocket/server/WsFilter.java"

        // Validate the rest of the headers and reject the request if that
        // validation fails
======= 2df191f^:"java/org/apache/tomcat/websocket/server/WsFilter.java"

        // Need an Endpoint instance to progress this further
        WsServerContainer sc = WsServerContainer.getServerContainer();
        String path;
        String pathInfo = req.getPathInfo();
        if (pathInfo == null) {
            path = req.getServletPath();
        } else {
            path = req.getServletPath() + pathInfo;
        }
        WsMappingResult mappingResult = sc.findMapping(path);
        if (mappingResult == null) {
            // No endpoint registered for the requested path. Let the
            // application handle it (it might redirect or forward for example)
            chain.doFilter(request, response);
            return;
        }
======= 2df191f^:"java/org/apache/tomcat/websocket/server/WsFilter.java"

======= 2df191f^:"java/org/apache/tomcat/websocket/server/WsFilter.java"


======= d440ae2^:"java/org/apache/jasper/tagplugins/jstl/core/ForEach.java"

======= d440ae2^:"test/org/apache/jasper/tagplugins/jstl/core/TestForEach.java"

======= d440ae2^:"test/org/apache/jasper/tagplugins/jstl/core/TestForEach.java"


======= 1631be1^:"java/org/apache/jasper/compiler/JspDocumentParser.java"

        if (tagDependentNesting > 0) {
======= 1631be1^:"test/org/apache/jasper/compiler/TestJspDocumentParser.java"

======= 1631be1^:"test/org/apache/jasper/compiler/TestJspDocumentParser.java"

        assertEquals(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, rc);
======= 1631be1^:"test/org/apache/jasper/compiler/TestJspDocumentParser.java"

        assertNull(e);
======= 1631be1^:"test/org/apache/jasper/compiler/TestJspDocumentParser.java"

======= 1631be1^:"test/org/apache/jasper/compiler/TestJspDocumentParser.java"

======= 1631be1^:"test/org/apache/jasper/compiler/TestJspDocumentParser.java"

======= 1631be1^:"test/org/apache/jasper/compiler/TestJspDocumentParser.java"


======= 4171baf^:"java/org/apache/catalina/core/AsyncContextImpl.java"

                } catch (IOException ioe) {
                            listener.getClass().getName() + "]", ioe);
======= 4171baf^:"java/org/apache/catalina/core/AsyncContextImpl.java"

                    } catch (IOException ioe) {
                                listener.getClass().getName() + "]", ioe);
======= 4171baf^:"java/org/apache/catalina/core/AsyncContextImpl.java"

            } catch (IOException ioe) {
                        listener.getClass().getName() + "]", ioe);
======= 4171baf^:"java/org/apache/catalina/core/AsyncContextImpl.java"

                } catch (IOException ioe) {
                            listener.getClass().getName() + "]", ioe);
======= 4171baf^:"test/org/apache/catalina/core/TestAsyncContextImpl.java"

        private int status = 200;
======= 4171baf^:"test/org/apache/catalina/core/TestAsyncContextImpl.java"


======= 59a0676^:"java/org/apache/catalina/core/StandardContext.java"

            String temp = getName();

======= 67ed3e7^:"java/org/apache/tomcat/websocket/server/WsFilter.java"

            // Note an HTTP request that includes a valid upgrade request to
======= 67ed3e7^:"java/org/apache/tomcat/websocket/server/WsFilter.java"

======= 67ed3e7^:"java/org/apache/tomcat/websocket/server/WsServerContainer.java"

======= 67ed3e7^:"java/org/apache/tomcat/websocket/server/WsServerContainer.java"

        fr.addMappingForUrlPatterns(null, false, "/*");
======= 67ed3e7^:"java/org/apache/tomcat/websocket/server/WsServerContainer.java"


======= e26d61d^:"webapps/examples/WEB-INF/classes/websocket/chat/ChatAnnotation.java"

        try {
            session.close();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

======= d2630df^:"java/org/apache/tomcat/websocket/WsWebSocketContainer.java"

======= d2630df^:"java/org/apache/tomcat/websocket/WsWebSocketContainer.java"

======= d2630df^:"java/org/apache/tomcat/websocket/WsWebSocketContainer.java"

======= d2630df^:"java/org/apache/tomcat/websocket/WsWebSocketContainer.java"

======= d2630df^:"java/org/apache/tomcat/websocket/WsWebSocketContainer.java"

            socketChannel = AsynchronousSocketChannel.open();
            throw new DeploymentException("TODO", ioe);
======= d2630df^:"java/org/apache/tomcat/websocket/WsWebSocketContainer.java"

            throw new DeploymentException("TODO", e);
======= d2630df^:"java/org/apache/tomcat/websocket/WsWebSocketContainer.java"


======= 0339fec^:"java/org/apache/tomcat/websocket/server/WsServerContainer.java"

                templateMatches = new TreeSet<>();
======= 0339fec^:"java/org/apache/tomcat/websocket/server/WsServerContainer.java"

                templateMatches =
                        new TreeSet<>(new TemplatePathMatchComparator());
======= 0339fec^:"java/org/apache/tomcat/websocket/server/WsServerContainer.java"

======= 0339fec^:"java/org/apache/tomcat/websocket/server/WsServerContainer.java"


======= 3da2133^:"java/org/apache/coyote/spdy/SpdyProcessor.java"

                request.requestURI().setBytes(frame.data, frame.off, valueLen);

======= e97e158^:"java/org/apache/catalina/startup/ContextConfig.java"


======= d025179^:"java/org/apache/tomcat/websocket/server/WsServlet.java"

                ep = (Endpoint) sec.getEndpointClass().newInstance();
        } catch (InstantiationException | IllegalAccessException e) {

======= cf0c064^:"java/org/apache/tomcat/websocket/WsFrameBase.java"

    private boolean closed = false;
======= cf0c064^:"java/org/apache/tomcat/websocket/WsFrameBase.java"

                if (closed) {
                    throw new IOException(sm.getString("wsFrame.closed"));
                }
======= cf0c064^:"java/org/apache/tomcat/websocket/WsFrameBase.java"

            closed = true;
======= cf0c064^:"java/org/apache/tomcat/websocket/WsFrameBase.java"

======= cf0c064^:"java/org/apache/tomcat/websocket/WsFrameClient.java"

        channel.read(response, null, handler);
======= cf0c064^:"java/org/apache/tomcat/websocket/server/WsFrameServer.java"

            while (sis.isReady()) {

======= 8cf47b4^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/StatementCache.java"

            closed = true;
            delegate = null;
======= 8cf47b4^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/StatementCache.java"

======= 8cf47b4^:"modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/test/TestStatementCache.java"

======= 8cf47b4^:"modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/test/TestStatementCache.java"

======= 8cf47b4^:"modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/test/TestStatementCache.java"

======= 8cf47b4^:"modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/test/TestStatementCache.java"


======= 8445d9a^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolProperties.java"

            for (int i=0; i<fields.length; i++) {
                    String name = prefix[j] + fields[i].substring(0, 1).toUpperCase(Locale.ENGLISH) +
                                  fields[i].substring(1);
                    buf.append(fields[i]);
                    buf.append(m.invoke(this, new Object[0]));
            //shouldn;t happen
            x.printStackTrace();

======= 12f89ff^:"java/org/apache/tomcat/websocket/WsSession.java"

======= 12f89ff^:"java/org/apache/tomcat/websocket/WsSession.java"

======= 12f89ff^:"java/org/apache/tomcat/websocket/WsSession.java"

======= 12f89ff^:"java/org/apache/tomcat/websocket/WsSession.java"

======= 12f89ff^:"java/org/apache/tomcat/websocket/WsSession.java"

======= 12f89ff^:"java/org/apache/tomcat/websocket/WsSession.java"

======= 12f89ff^:"java/org/apache/tomcat/websocket/WsSession.java"

======= 12f89ff^:"java/org/apache/tomcat/websocket/WsSession.java"

======= 12f89ff^:"java/org/apache/tomcat/websocket/WsSession.java"

======= 12f89ff^:"java/org/apache/tomcat/websocket/WsSession.java"

            // Fire the onClose event
            Thread t = Thread.currentThread();
            ClassLoader cl = t.getContextClassLoader();
            t.setContextClassLoader(applicationClassLoader);
            try {
                localEndpoint.onClose(this, closeReason);
            } finally {
                t.setContextClassLoader(cl);
            }
======= 12f89ff^:"java/org/apache/tomcat/websocket/WsSession.java"

======= 12f89ff^:"java/org/apache/tomcat/websocket/WsSession.java"

======= 12f89ff^:"java/org/apache/tomcat/websocket/WsSession.java"

======= 12f89ff^:"test/org/apache/tomcat/websocket/TestWsWebSocketContainer.java"

        setA = s3a.getOpenSessions();
        while (setA.size() > 0 && count < 8) {
            setA = s3a.getOpenSessions();
        if (setA.size() > 0) {
            Assert.fail("There were [" + setA.size() + "] open sessions");
======= 12f89ff^:"test/org/apache/tomcat/websocket/TestWsWebSocketContainer.java"

            Assert.assertEquals(expected, setA.size());
            while (setA.size() == expected && count < 5) {
                setA = s3a.getOpenSessions();
        Assert.assertEquals(0, setA.size());

======= 80ef59a^:"java/org/apache/tomcat/websocket/WsRemoteEndpointImplBase.java"

                Writer w = getSendWriter();
                ((Encoder.TextStream) encoder).encode(obj, w);
                OutputStream os = getSendStream();
                ((Encoder.BinaryStream) encoder).encode(obj, os);

======= 06800eb^:"java/org/apache/tomcat/websocket/pojo/PojoEndpointBase.java"

                        methodMapping.getOnCloseArgs(pathParameters, session));
======= 06800eb^:"java/org/apache/tomcat/websocket/pojo/PojoMessageHandlerBase.java"

    protected final boolean unwrap;
            Session session, Object[] params, int indexPayload, boolean unwrap,
        this.unwrap = unwrap;
======= 06800eb^:"java/org/apache/tomcat/websocket/pojo/PojoMessageHandlerPartialBase.java"

            boolean unwrap, int indexBoolean, int indexSession) {
        super(pojo, method, session, params, indexPayload, unwrap,
======= 06800eb^:"java/org/apache/tomcat/websocket/pojo/PojoMessageHandlerPartialBase.java"

        if (unwrap) {
======= 06800eb^:"java/org/apache/tomcat/websocket/pojo/PojoMessageHandlerPartialBinary.java"

            Session session, Object[] params, int indexPayload, boolean unwrap,
        super(pojo, method, session, params, indexPayload, unwrap, indexBoolean,
======= 06800eb^:"java/org/apache/tomcat/websocket/pojo/PojoMessageHandlerPartialText.java"

            Session session, Object[] params, int indexPayload, boolean unwrap,
        super(pojo, method, session, params, indexPayload, unwrap, indexBoolean,
======= 06800eb^:"java/org/apache/tomcat/websocket/pojo/PojoMessageHandlerWholeBase.java"

======= 06800eb^:"java/org/apache/tomcat/websocket/pojo/PojoMessageHandlerWholeBase.java"

            boolean unwrap, int indexSession) {
        super(pojo, method, session, params, indexPayload, unwrap,
======= 06800eb^:"java/org/apache/tomcat/websocket/pojo/PojoMessageHandlerWholeBase.java"

            // Not decoded. Unwrap if required. Unwrap only ever applies to
            // ByteBuffers
            if (unwrap) {
                ByteBuffer bb = (ByteBuffer) message;
                byte[] array = new byte[bb.remaining()];
                bb.get(array);
                payload = array;
======= 06800eb^:"java/org/apache/tomcat/websocket/pojo/PojoMessageHandlerWholeBase.java"

======= 06800eb^:"java/org/apache/tomcat/websocket/pojo/PojoMessageHandlerWholeBinary.java"

            int indexPayload, boolean unwrap, int indexSession) {
        super(pojo, method, session, params, indexPayload, unwrap, indexSession);
                } else if (Decoder.TextStream.class.isAssignableFrom(
                        decoderClazz)) {
======= 06800eb^:"java/org/apache/tomcat/websocket/pojo/PojoMessageHandlerWholeBinary.java"

======= 06800eb^:"java/org/apache/tomcat/websocket/pojo/PojoMessageHandlerWholeBinary.java"

======= 06800eb^:"java/org/apache/tomcat/websocket/pojo/PojoMessageHandlerWholePong.java"

            Session session, Object[] params, int indexPayload, boolean unwrap,
        super(pojo, method, session, params, indexPayload, unwrap, indexSession);
======= 06800eb^:"java/org/apache/tomcat/websocket/pojo/PojoMessageHandlerWholeText.java"

            int indexPayload, boolean unwrap, int indexSession) {
        super(pojo, method, session, params, indexPayload, unwrap,
======= 06800eb^:"java/org/apache/tomcat/websocket/pojo/PojoMessageHandlerWholeText.java"

                } else if (Decoder.TextStream.class.isAssignableFrom(
                        decoderClazz)) {
======= 06800eb^:"java/org/apache/tomcat/websocket/pojo/PojoMessageHandlerWholeText.java"

======= 06800eb^:"java/org/apache/tomcat/websocket/pojo/PojoMethodMapping.java"

======= 06800eb^:"java/org/apache/tomcat/websocket/pojo/PojoMethodMapping.java"

======= 06800eb^:"java/org/apache/tomcat/websocket/pojo/PojoMethodMapping.java"

        onOpenParams = getPathParams(onOpen, false);
        onCloseParams = getPathParams(onClose, false);
        onErrorParams = getPathParams(onError, true);
======= 06800eb^:"java/org/apache/tomcat/websocket/pojo/PojoMethodMapping.java"

        return buildArgs(onOpenParams, pathParameters, session, null);
======= 06800eb^:"java/org/apache/tomcat/websocket/pojo/PojoMethodMapping.java"

            Session session) {
        return buildArgs(onCloseParams, pathParameters, session, null);
======= 06800eb^:"java/org/apache/tomcat/websocket/pojo/PojoMethodMapping.java"

        return buildArgs(onErrorParams, pathParameters, session, throwable);
======= 06800eb^:"java/org/apache/tomcat/websocket/pojo/PojoMethodMapping.java"

    private static PojoPathParam[] getPathParams(Method m, boolean isOnError) {
======= 06800eb^:"java/org/apache/tomcat/websocket/pojo/PojoMethodMapping.java"

======= 06800eb^:"java/org/apache/tomcat/websocket/pojo/PojoMethodMapping.java"

            Throwable throwable) {
======= 06800eb^:"java/org/apache/tomcat/websocket/pojo/PojoMethodMapping.java"

======= 06800eb^:"java/org/apache/tomcat/websocket/pojo/PojoMethodMapping.java"

======= 06800eb^:"java/org/apache/tomcat/websocket/pojo/PojoMethodMapping.java"

======= 06800eb^:"java/org/apache/tomcat/websocket/pojo/PojoMethodMapping.java"

======= 06800eb^:"java/org/apache/tomcat/websocket/pojo/PojoMethodMapping.java"

======= 06800eb^:"java/org/apache/tomcat/websocket/pojo/PojoMethodMapping.java"

======= 06800eb^:"java/org/apache/tomcat/websocket/pojo/PojoMethodMapping.java"

======= 06800eb^:"java/org/apache/tomcat/websocket/pojo/PojoMethodMapping.java"

======= 06800eb^:"java/org/apache/tomcat/websocket/pojo/PojoMethodMapping.java"

                            config, params, indexByteArray, true, indexSession);
                            indexSession);

======= ad148dd^:"java/org/apache/tomcat/websocket/WsWebSocketContainer.java"

        if (!("http".equalsIgnoreCase(scheme) ||
                "https".equalsIgnoreCase(scheme))) {
======= ad148dd^:"java/org/apache/tomcat/websocket/WsWebSocketContainer.java"

            if ("http".equalsIgnoreCase(scheme)) {
======= ad148dd^:"test/org/apache/tomcat/websocket/TestWsRemoteEndpoint.java"

        URI uri = new URI("http://localhost:" + getPort() +
======= ad148dd^:"test/org/apache/tomcat/websocket/TestWsWebSocketContainer.java"

                new URI("http://localhost:" + getPort() +
======= ad148dd^:"test/org/apache/tomcat/websocket/TestWsWebSocketContainer.java"

                new URI("http://" + TesterEchoServer.Config.PATH_ASYNC));
======= ad148dd^:"test/org/apache/tomcat/websocket/TestWsWebSocketContainer.java"

                        new URI("http://localhost:" + getPort() +
======= ad148dd^:"test/org/apache/tomcat/websocket/TestWsWebSocketContainer.java"

                new URI("http://localhost:" + getPort() + BlockingConfig.PATH));
======= ad148dd^:"test/org/apache/tomcat/websocket/TestWsWebSocketContainer.java"

                new URI("http://localhost:" + getPort() +
======= ad148dd^:"test/org/apache/tomcat/websocket/TestWsWebSocketContainer.java"

                new URI("http://localhost:" + getPort() +
======= ad148dd^:"test/org/apache/tomcat/websocket/pojo/TestEncodingDecoding.java"

        URI uri = new URI("http://localhost:" + getPort() + "/");
======= ad148dd^:"test/org/apache/tomcat/websocket/pojo/TestPojoMethodMapping.java"

        URI uri = new URI("http://localhost:" + getPort() + "/" + PARAM_ONE +

======= dc16474^:"java/org/apache/catalina/connector/Connector.java"

             this.URIEncodingLower = URIEncoding.toLowerCase(Locale.US);
======= dc16474^:"java/org/apache/tomcat/util/buf/B2CConverter.java"

                    charset.name().toLowerCase(Locale.US), charset);
                        alias.toLowerCase(Locale.US), charset);
======= dc16474^:"java/org/apache/tomcat/util/buf/B2CConverter.java"

        String lowerCaseEnc = enc.toLowerCase(Locale.US);
======= dc16474^:"java/org/apache/tomcat/util/http/parser/HttpParser.java"

            Integer type = fieldTypes.get(field.toLowerCase(Locale.US));
======= dc16474^:"java/org/apache/tomcat/util/http/parser/HttpParser.java"

                parameters.put(attribute.toLowerCase(Locale.US), value);
                parameters.put(attribute.toLowerCase(Locale.US), "");
======= dc16474^:"java/org/apache/tomcat/util/http/parser/MediaType.java"

        return parameters.get(parameter.toLowerCase(Locale.US));
======= dc16474^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolProperties.java"

                    String name = prefix[j] + fields[i].substring(0, 1).toUpperCase(Locale.US) +
======= dc16474^:"test/org/apache/catalina/startup/SimpleHttpClient.java"

            SESSION_COOKIE_NAME.toLowerCase(Locale.US);


======= 7c88af9^:"java/org/apache/catalina/startup/ContextConfig.java"

======= 7c88af9^:"java/org/apache/catalina/startup/ContextConfig.java"

======= 7c88af9^:"java/org/apache/catalina/startup/ContextConfig.java"

                if (is != null) {
                    try {
                        is.close();
                    } catch (IOException ioe) {
                        // Ignore
                    }
                }
======= 7c88af9^:"java/org/apache/catalina/startup/ContextConfig.java"

                if (stream != null) {
                    try {
                        stream.close();
                    } catch (Throwable t) {
                        ExceptionUtils.handleThrowable(t);
                    }
                }

======= ca205c1^:"java/javax/servlet/http/Part.java"

======= ca205c1^:"java/org/apache/catalina/connector/Request.java"

                    if (part.getFilename() == null) {
======= ca205c1^:"java/org/apache/catalina/core/ApplicationPart.java"

    public String getFilename() {
======= ca205c1^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

======= ca205c1^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

======= ca205c1^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

                filename =
                    extractFilename(warPart.getHeader("Content-Disposition"));
======= ca205c1^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

    /*
     * Adapted from FileUploadBase.getFileName()
     */
    private String extractFilename(String cd) {
        String fileName = null;
        if (cd != null) {
            String cdl = cd.toLowerCase(Locale.ENGLISH);
            if (cdl.startsWith("form-data") || cdl.startsWith("attachment")) {
                ParameterParser parser = new ParameterParser();
                parser.setLowerCaseNames(true);
                // Parameter parser can handle null input
                Map<String,String> params =
                    parser.parse(cd, ';');
                if (params.containsKey("filename")) {
                    fileName = params.get("filename");
                    if (fileName != null) {
                        fileName = fileName.trim();
                    } else {
                        // Even if there is no value, the parameter is present,
                        // so we return an empty file name rather than no file
                        // name.
                        fileName = "";
                    }
                }
            }
        }
        return fileName;
    }

======= 2a03ca6^:"java/org/apache/catalina/valves/AccessLogValve.java"

        this.fileDateFormat = fileDateFormat;
======= 2a03ca6^:"java/org/apache/catalina/valves/AccessLogValve.java"

======= 2a03ca6^:"java/org/apache/catalina/valves/AccessLogValve.java"

        if (rotatable) {
            // Only do a logfile switch check once a second, max.
            long systime = System.currentTimeMillis();
            if ((systime - rotationLastChecked) > 1000) {
                synchronized(this) {
                    if ((systime - rotationLastChecked) > 1000) {
                        rotationLastChecked = systime;
                        String tsDate;
                        // Check for a change of date
                        tsDate = fileDateFormatter.format(new Date(systime));
                        // If the date has changed, switch log files
                        if (!dateStamp.equals(tsDate)) {
                            close(true);
                            dateStamp = tsDate;
                            open();
                        }
                    }
                }
            }
        }
======= 2a03ca6^:"java/org/apache/catalina/valves/AccessLogValve.java"

        if (format == null) {
            format = "";
            setFileDateFormat(format);
        }

======= fedf189^:"java/org/apache/tomcat/util/net/jsse/JSSESocketFactory.java"

======= fedf189^:"java/org/apache/tomcat/util/net/jsse/JSSESocketFactory.java"

            String ciphers[] = ssf.getSupportedCipherSuites();
            for (String cipher : ciphers) {
======= fedf189^:"java/org/apache/tomcat/util/net/jsse/JSSESocketFactory.java"

            return context.getDefaultSSLParameters().getCipherSuites();
======= fedf189^:"java/org/apache/tomcat/util/net/jsse/JSSESocketFactory.java"

            return context.getDefaultSSLParameters().getCipherSuites();
======= fedf189^:"java/org/apache/tomcat/util/net/jsse/JSSESocketFactory.java"

            return context.getDefaultSSLParameters().getProtocols();

======= 28c599f^:"java/javax/websocket/server/ServerContainerProvider.java"

    static ServerContainer getServerContainer() {

======= e1d16fd^:"java/org/apache/catalina/websocket/WsOutbound.java"

        outputStream.write(buffer.array(), 0, buffer.limit());

======= c9e056c^:"java/org/apache/catalina/authenticator/FormAuthenticator.java"

======= c9e056c^:"java/org/apache/catalina/authenticator/FormAuthenticator.java"

        // Swallow any request body since we will be replacing it
        byte[] buffer = new byte[4096];
        InputStream is = request.createInputStream();
        while (is.read(buffer) >= 0) {
            // Ignore request body
        }

======= 1255d32^:"java/org/apache/catalina/websocket/WsOutbound.java"

======= 1255d32^:"java/org/apache/catalina/websocket/WsOutbound.java"


======= 78b3c10^:"java/org/apache/catalina/manager/StatusTransformer.java"

                writer.write(" usageUsed='" + usage.getInit() + "'/>");

======= 9ad4904^:"java/org/apache/catalina/loader/WebappLoader.java"

======= 9ad4904^:"java/org/apache/catalina/loader/WebappLoader.java"


======= b2f0e7c^:"java/org/apache/catalina/connector/CoyoteAdapter.java"


======= 81eaf63^:"java/javax/servlet/http/Part.java"

 * TODO SERVLET3 - Add comments
     * Obtains the value of the specified mime header for the part.
     * @param name Header name
     * @return The header value or <code>null</code> if the header is not
     *         present

======= c11952d^:"java/javax/servlet/http/HttpServletRequest.java"

======= c11952d^:"java/javax/servlet/http/HttpServletRequestWrapper.java"

======= c11952d^:"java/javax/servlet/http/HttpServletRequestWrapper.java"

======= c11952d^:"java/org/apache/catalina/connector/Request.java"

======= c11952d^:"java/org/apache/catalina/connector/RequestFacade.java"

======= c11952d^:"java/org/apache/catalina/core/ApplicationContext.java"

======= c11952d^:"java/org/apache/catalina/core/ApplicationContext.java"

======= c11952d^:"java/org/apache/catalina/core/ApplicationContext.java"

======= c11952d^:"java/org/apache/catalina/core/StandardContext.java"

======= c11952d^:"java/org/apache/catalina/core/StandardContext.java"

======= c11952d^:"java/org/apache/catalina/ha/session/DeltaManager.java"

======= c11952d^:"java/org/apache/catalina/ha/session/DeltaManager.java"

======= c11952d^:"java/org/apache/catalina/session/ManagerBase.java"

======= c11952d^:"java/org/apache/catalina/session/ManagerBase.java"

======= c11952d^:"java/org/apache/catalina/websocket/WsHttpServletRequestWrapper.java"


======= ef9ed07^:"java/org/apache/catalina/valves/ErrorReportValve.java"

        // Do nothing if there is no report for the specified status code
======= ef9ed07^:"java/org/apache/catalina/valves/ErrorReportValve.java"

            return;
======= ef9ed07^:"test/org/apache/catalina/valves/TestErrorReportValve.java"


======= f8ac6a0^:"java/org/apache/jasper/compiler/Generator.java"

======= f8ac6a0^:"java/org/apache/jasper/compiler/Generator.java"

                v = JspUtil.interpreterCall(this.isTagFile, v, expectedType,
                        attr.getEL().getMapName(), false);
======= f8ac6a0^:"java/org/apache/jasper/compiler/Generator.java"

                        + JspUtil.interpreterCall(this.isTagFile, n.getType() +
                                "{" + n.getText() + "}", String.class,
                                n.getEL().getMapName(), false) + ");");
======= f8ac6a0^:"java/org/apache/jasper/compiler/Generator.java"

                    attrValue = JspUtil.interpreterCall(this.isTagFile, attrValue,
                            c[0], mapName, false);
======= f8ac6a0^:"java/org/apache/jasper/compiler/Generator.java"

    Generator(ServletWriter out, Compiler compiler) {
======= f8ac6a0^:"java/org/apache/jasper/compiler/Generator.java"


======= cc2f8db^:"java/org/apache/coyote/http11/filters/ChunkedInputFilter.java"

            readBytes();
======= cc2f8db^:"java/org/apache/coyote/http11/filters/ChunkedInputFilter.java"

        // Handle option trailer headers

======= b68bbb8^:"java/org/apache/catalina/authenticator/DigestAuthenticator.java"

======= b68bbb8^:"java/org/apache/catalina/authenticator/DigestAuthenticator.java"

======= b68bbb8^:"test/org/apache/catalina/authenticator/TestDigestAuthenticator.java"

======= b68bbb8^:"test/org/apache/catalina/authenticator/TestDigestAuthenticator.java"

======= b68bbb8^:"test/org/apache/catalina/authenticator/TestDigestAuthenticator.java"


======= a993d7c2^:"java/org/apache/catalina/core/StandardWrapper.java"

        return (singleThreadModel);

======= bbb13f6^:"java/org/apache/tomcat/util/net/AprEndpoint.java"

======= bbb13f6^:"java/org/apache/tomcat/util/net/AprEndpoint.java"

            Thread timeoutThread = new Thread(new AsyncTimeout(),
======= bbb13f6^:"java/org/apache/tomcat/util/net/AprEndpoint.java"

======= bbb13f6^:"java/org/apache/tomcat/util/net/AprEndpoint.java"

======= bbb13f6^:"java/org/apache/tomcat/util/net/AprEndpoint.java"

            while (running) {
======= bbb13f6^:"java/org/apache/tomcat/util/net/AprEndpoint.java"

                while (paused && running) {
======= bbb13f6^:"java/org/apache/tomcat/util/net/AprEndpoint.java"

======= bbb13f6^:"java/org/apache/tomcat/util/net/AprEndpoint.java"

======= bbb13f6^:"java/org/apache/tomcat/util/net/AprEndpoint.java"

======= bbb13f6^:"java/org/apache/tomcat/util/net/AprEndpoint.java"

======= bbb13f6^:"java/org/apache/tomcat/util/net/AprEndpoint.java"

                            destroySocket(desc[n*2+1]);
======= bbb13f6^:"java/org/apache/tomcat/util/net/AprEndpoint.java"

            while (running) {
======= bbb13f6^:"java/org/apache/tomcat/util/net/AprEndpoint.java"

                while (connectionCount < 1 && addList.size() < 1) {
                        if (getSoTimeout() > 0 && running) {
======= bbb13f6^:"java/org/apache/tomcat/util/net/AprEndpoint.java"

                    if (getSoTimeout() > 0 && maintain++ > 1000 && running) {
======= bbb13f6^:"java/org/apache/tomcat/util/net/AprEndpoint.java"

======= bbb13f6^:"java/org/apache/tomcat/util/net/AprEndpoint.java"

======= bbb13f6^:"java/org/apache/tomcat/util/net/AprEndpoint.java"

            while (running) {
======= bbb13f6^:"java/org/apache/tomcat/util/net/AprEndpoint.java"

                            maintainTime > 1000000L && running) {

======= ea16bda^:"java/org/apache/catalina/loader/WebappClassLoader.java"

======= ea16bda^:"java/org/apache/catalina/loader/WebappClassLoader.java"

        } catch (SecurityException e) {
            log.warn(sm.getString("webappClassLoader.checkThreadLocalsForLeaksFail",
                    getContextName()), e);
        } catch (NoSuchFieldException e) {
            log.warn(sm.getString("webappClassLoader.checkThreadLocalsForLeaksFail",
                    getContextName()), e);
        } catch (ClassNotFoundException e) {
            log.warn(sm.getString("webappClassLoader.checkThreadLocalsForLeaksFail",
                    getContextName()), e);
        } catch (IllegalArgumentException e) {
            log.warn(sm.getString("webappClassLoader.checkThreadLocalsForLeaksFail",
                    getContextName()), e);
        } catch (IllegalAccessException e) {
            log.warn(sm.getString("webappClassLoader.checkThreadLocalsForLeaksFail",
                    getContextName()), e);
        } catch (InvocationTargetException e) {
            log.warn(sm.getString("webappClassLoader.checkThreadLocalsForLeaksFail",
                    getContextName()), e);
        } catch (NoSuchMethodException e) {
            log.warn(sm.getString("webappClassLoader.checkThreadLocalsForLeaksFail",
                    getContextName()), e);

======= e1e4e4e^:"java/org/apache/catalina/tribes/membership/MemberImpl.java"

        StringBuilder buf = new StringBuilder("org.apache.catalina.tribes.membership.MemberImpl[");

======= ce55f25^:"java/org/apache/jasper/runtime/JspContextWrapper.java"

======= ce55f25^:"java/org/apache/jasper/runtime/JspContextWrapper.java"

======= ce55f25^:"java/org/apache/jasper/runtime/JspContextWrapper.java"

        return invokingJspCtxt.getAttribute(name, scope);
======= ce55f25^:"java/org/apache/jasper/runtime/JspContextWrapper.java"

            invokingJspCtxt.setAttribute(name, value, scope);
======= ce55f25^:"java/org/apache/jasper/runtime/JspContextWrapper.java"

            o = invokingJspCtxt.getAttribute(name, REQUEST_SCOPE);
                    o = invokingJspCtxt.getAttribute(name, SESSION_SCOPE);
                    o = invokingJspCtxt.getAttribute(name, APPLICATION_SCOPE);
======= ce55f25^:"java/org/apache/jasper/runtime/JspContextWrapper.java"

        invokingJspCtxt.removeAttribute(name, REQUEST_SCOPE);
            invokingJspCtxt.removeAttribute(name, SESSION_SCOPE);
        invokingJspCtxt.removeAttribute(name, APPLICATION_SCOPE);
======= ce55f25^:"java/org/apache/jasper/runtime/JspContextWrapper.java"

            invokingJspCtxt.removeAttribute(name, scope);
======= ce55f25^:"java/org/apache/jasper/runtime/JspContextWrapper.java"

            return invokingJspCtxt.getAttributesScope(name);
======= ce55f25^:"java/org/apache/jasper/runtime/JspContextWrapper.java"

        return invokingJspCtxt.getAttributeNamesInScope(scope);
======= ce55f25^:"java/org/apache/jasper/runtime/JspContextWrapper.java"

        return invokingJspCtxt.getOut();
        return invokingJspCtxt.getSession();
======= ce55f25^:"java/org/apache/jasper/runtime/JspContextWrapper.java"

        return invokingJspCtxt.getResponse();
======= ce55f25^:"java/org/apache/jasper/runtime/JspContextWrapper.java"

        return invokingJspCtxt.getServletContext();
======= ce55f25^:"java/org/apache/jasper/runtime/JspContextWrapper.java"

        return this.invokingJspCtxt.getELContext();

======= 6647531^:"java/org/apache/catalina/tribes/group/GroupChannel.java"

     * @param destination Member[] - destination.length > 1
======= 6647531^:"java/org/apache/catalina/tribes/group/GroupChannel.java"

     * @param destination Member[] - destination.length > 1

======= d7f744c^:"java/org/apache/jasper/compiler/DefaultErrorHandler.java"

                        Integer.valueOf(details[i].getJavaLineNumber()) };

======= 07a930d^:"java/org/apache/catalina/realm/DataSourceRealm.java"

                                 username));
======= 07a930d^:"java/org/apache/catalina/realm/DataSourceRealm.java"

                             username));
======= 07a930d^:"java/org/apache/catalina/realm/DataSourceRealm.java"

                sm.getString("dataSourceRealm.getRoles.exception", username));
======= 07a930d^:"java/org/apache/catalina/realm/DataSourceRealm.java"

                                     username));

======= ac78456^:"java/org/apache/catalina/core/DefaultInstanceManager.java"

                                        injections.get(method.getName()),
                                break;
======= ac78456^:"test/org/apache/catalina/startup/TestContextConfig.java"

    public void testBug54448() throws Exception {
======= ac78456^:"test/org/apache/catalina/startup/TestContextConfig.java"

        assertPageContains("/test/testServlet", "envEntry: 1");
======= ac78456^:"test/org/apache/catalina/startup/TesterServletWithAnnotations.java"

======= ac78456^:"test/org/apache/catalina/startup/TesterServletWithAnnotations.java"

    private int envEntry;
        resp.getWriter().print("envEntry: " + envEntry);

======= 74f5b3a^:"java/org/apache/catalina/deploy/NamingResources.java"

            targetType = convertPrimitiveType(targetType);
======= 74f5b3a^:"java/org/apache/catalina/deploy/NamingResources.java"

    private Class<?> convertPrimitiveType(Class<?> clazz) {
        if (clazz.equals(char.class)) {
            return Character.class;
        } else if (clazz.equals(int.class)) {
            return Integer.class;
        } else if (clazz.equals(boolean.class)) {
            return Boolean.class;
        } else if (clazz.equals(double.class)) {
            return Double.class;
        } else if (clazz.equals(byte.class)) {
            return Byte.class;
        } else if (clazz.equals(short.class)) {
            return Short.class;
        } else if (clazz.equals(long.class)) {
            return Long.class;
        } else if (clazz.equals(float.class)) {
            return Float.class;
        } else {
            return clazz;
        }
    }
======= 74f5b3a^:"java/org/apache/catalina/startup/WebAnnotationSet.java"

                    String defaultType = field.getType().getCanonicalName();
======= 74f5b3a^:"java/org/apache/catalina/startup/WebAnnotationSet.java"

                    String defaultType =
                            (method.getParameterTypes()[0]).getCanonicalName();
======= 74f5b3a^:"java/org/apache/catalina/startup/WebAnnotationSet.java"

            String defaultName, String defaultType) {
======= 74f5b3a^:"java/org/apache/catalina/startup/WebAnnotationSet.java"

    private static String getType(Resource annotation, String defaultType) {
        String type = annotation.type().getCanonicalName();
        if (type == null || type.equals("java.lang.Object")) {
        return type;
======= 74f5b3a^:"java/org/apache/catalina/util/Introspection.java"

======= 74f5b3a^:"test/org/apache/catalina/startup/TestContextConfig.java"

======= 74f5b3a^:"test/org/apache/catalina/startup/TestContextConfig.java"


======= ab44514^:"java/org/apache/coyote/http11/Http11AprProtocol.java"

======= ab44514^:"java/org/apache/tomcat/jni/SSL.java"

======= ab44514^:"java/org/apache/tomcat/jni/SSL.java"

     * Return true if SSL_OP_ if defined.
     * <p>
     * Currently used for testing weather the
     * SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION is supported by OpenSSL.
     * <p>
     * @param op SSL_OP to test.
     * @return true if SSL_OP is supported by OpenSSL library.
======= ab44514^:"java/org/apache/tomcat/util/net/AprEndpoint.java"

======= ab44514^:"java/org/apache/tomcat/util/net/AprEndpoint.java"


======= c8d5d88^:"java/org/apache/catalina/realm/RealmBase.java"

        String md5a1 = getDigest(username, realm).toLowerCase(Locale.ENGLISH);

======= 297b26a^:"java/org/apache/jasper/JspC.java"

======= 297b26a^:"java/org/apache/jasper/servlet/JspCServletContext.java"

    // ----------------------------------------------------------- Constructors
======= 297b26a^:"java/org/apache/jasper/servlet/JspCServletContext.java"

        return null;

======= 9f657ac^:"java/org/apache/tomcat/util/net/NioEndpoint.java"

======= 9f657ac^:"java/org/apache/tomcat/util/net/NioEndpoint.java"

        SSLContext sslContext = getSSLContext();
        if (sslContext != null) {
            SSLEngine engine = getSSLContext().createSSLEngine();
            if (getCiphersArray().length > 0) {
                engine.setEnabledCipherSuites(getCiphersArray());
            }
            return engine.getEnabledCipherSuites();
        } else {
            return new String[0];
        }
======= 9f657ac^:"java/org/apache/tomcat/util/net/NioEndpoint.java"

======= 9f657ac^:"java/org/apache/tomcat/util/net/NioEndpoint.java"

        if ( getCiphersArray().length > 0 ) engine.setEnabledCipherSuites(getCiphersArray());
        if ( getSslEnabledProtocolsArray().length > 0 ) engine.setEnabledProtocols(getSslEnabledProtocolsArray());
======= 9f657ac^:"java/org/apache/tomcat/util/net/SSLUtil.java"

======= 9f657ac^:"java/org/apache/tomcat/util/net/jsse/JSSESocketFactory.java"

======= 9f657ac^:"java/org/apache/tomcat/util/net/jsse/JSSESocketFactory.java"

======= 9f657ac^:"java/org/apache/tomcat/util/net/jsse/JSSESocketFactory.java"

    /*
     * Determines the SSL cipher suites to be enabled.
     *
     * @param requestedCiphers Comma-separated list of requested ciphers
     * @param supportedCiphers Array of supported ciphers
     *
     * @return Array of SSL cipher suites to be enabled, or null if none of the
     * requested ciphers are supported
     */
    protected String[] getEnabledCiphers(String requestedCiphers,
                                         String[] supportedCiphers) {
        String[] result = null;
        if (ALLOW_ALL_SUPPORTED_CIPHERS.equals(requestedCiphers)) {
            return supportedCiphers;
        }
        if (requestedCiphers != null) {
            Vector<String> vec = null;
            String cipher = requestedCiphers;
            int index = requestedCiphers.indexOf(',');
            if (index != -1) {
                int fromIndex = 0;
                while (index != -1) {
                    cipher =
                        requestedCiphers.substring(fromIndex, index).trim();
                    if (cipher.length() > 0) {
                        /*
                         * Check to see if the requested cipher is among the
                         * supported ciphers, i.e., may be enabled
                         */
                        for (int i=0; supportedCiphers != null
                                     && i<supportedCiphers.length; i++) {
                            if (supportedCiphers[i].equals(cipher)) {
                                if (vec == null) {
                                    vec = new Vector<>();
                                }
                                vec.addElement(cipher);
                                break;
                            }
                        }
                    }
                    fromIndex = index+1;
                    index = requestedCiphers.indexOf(',', fromIndex);
                } // while
                cipher = requestedCiphers.substring(fromIndex);
            }
            if (cipher != null) {
                cipher = cipher.trim();
                if (cipher.length() > 0) {
                    /*
                     * Check to see if the requested cipher is among the
                     * supported ciphers, i.e., may be enabled
                     */
                    for (int i=0; supportedCiphers != null
                                 && i<supportedCiphers.length; i++) {
                        if (supportedCiphers[i].equals(cipher)) {
                            if (vec == null) {
                                vec = new Vector<>();
                            }
                            vec.addElement(cipher);
                            break;
                        }
                    }
                }
            if (vec != null) {
                result = new String[vec.size()];
                vec.copyInto(result);
        } else {
            result = sslProxy.getDefaultCipherSuites();
        return result;
======= 9f657ac^:"java/org/apache/tomcat/util/net/jsse/JSSESocketFactory.java"

            String requestedCiphers = endpoint.getCiphers();
            enabledCiphers = getEnabledCiphers(requestedCiphers,
                    sslProxy.getSupportedCipherSuites());
======= 9f657ac^:"java/org/apache/tomcat/util/net/jsse/JSSESocketFactory.java"

    /**
     * Set the SSL protocol variants to be enabled.
     * @param socket the SSLServerSocket.
     * @param protocols the protocols to use.
     */
    protected void setEnabledProtocols(SSLServerSocket socket,
            String[] protocols){
        if (protocols != null) {
            socket.setEnabledProtocols(protocols);
        }
    }
    /**
     * Determines the SSL protocol variants to be enabled.
     *
     * @param socket The socket to get supported list from.
     * @param requestedProtocols Array of requested protocol names all of which
     *                           must be non-null and non-zero length
     *
     * @return Array of SSL protocol variants to be enabled, or null if none of
     * the requested protocol variants are supported
     */
    protected String[] getEnabledProtocols(SSLServerSocket socket,
                                           String[] requestedProtocols){
        String[] supportedProtocols = socket.getSupportedProtocols();
        String[] enabledProtocols = null;
        if (requestedProtocols != null && requestedProtocols.length > 0) {
            Vector<String> vec = null;
            for (String protocol : requestedProtocols) {
                /*
                 * Check to see if the requested protocol is among the supported
                 * protocols, i.e., may be enabled
                 */
                for (int i=0; supportedProtocols != null &&
                        i < supportedProtocols.length; i++) {
                    if (supportedProtocols[i].equals(protocol)) {
                        if (vec == null) {
                            vec = new Vector<>();
                        }
                        vec.addElement(protocol);
                        break;
                    }
                }
            }
            if (vec != null) {
                enabledProtocols = new String[vec.size()];
                vec.copyInto(enabledProtocols);
        return enabledProtocols;
======= 9f657ac^:"java/org/apache/tomcat/util/net/jsse/JSSESocketFactory.java"

        if (enabledCiphers != null) {
            socket.setEnabledCipherSuites(enabledCiphers);
        }
        String[] requestedProtocols = endpoint.getSslEnabledProtocolsArray();
        setEnabledProtocols(socket, getEnabledProtocols(socket,
                                                         requestedProtocols));
      <p>The comma separated list of encryption ciphers that this socket is
      allowed to use. By default, the default ciphers for the JVM will be used.
      Note that this usually means that the weak export grade ciphers will be
      included in the list of available ciphers. The ciphers are specified using
      the JSSE cipher naming convention. The special value of <code>ALL</code>
      will enable all supported ciphers. This will include many that are not
      secure. <code>ALL</code> is intended for testing purposes only.</p>
      connections. If specified, only the protocols listed will be supported. If
      not specified, the JVM default is used. The permitted values may be
      obtained from the JVM documentation for the allowed values for

======= 334c466^:"java/org/apache/catalina/deploy/WebXml.java"

        servletMappings.put(urlPattern, servletName);
======= 334c466^:"test/org/apache/catalina/deploy/TestWebXml.java"


======= 71d075e^:"java/org/apache/catalina/Context.java"

======= 71d075e^:"java/org/apache/catalina/Context.java"

======= 71d075e^:"java/org/apache/catalina/core/DefaultInstanceManager.java"

======= 71d075e^:"java/org/apache/catalina/core/DefaultInstanceManager.java"

======= 71d075e^:"java/org/apache/catalina/core/DefaultInstanceManager.java"

======= 71d075e^:"java/org/apache/catalina/core/DefaultInstanceManager.java"

======= 71d075e^:"java/org/apache/catalina/core/DefaultInstanceManager.java"

                    if (method.isAnnotationPresent(PostConstruct.class)) {
                        if ((postConstruct != null) ||
                                (method.getParameterTypes().length != 0) ||
                                (Modifier.isStatic(method.getModifiers())) ||
                                (method.getExceptionTypes().length > 0) ||
                                (!method.getReturnType().getName().equals("void"))) {
                            throw new IllegalArgumentException(
                                    "Invalid PostConstruct annotation");
                        }
                        postConstruct = method;
                    }
                    if (method.isAnnotationPresent(PreDestroy.class)) {
                        if ((preDestroy != null ||
                                method.getParameterTypes().length != 0) ||
                                (Modifier.isStatic(method.getModifiers())) ||
                                (method.getExceptionTypes().length > 0) ||
                                (!method.getReturnType().getName().equals("void"))) {
                            throw new IllegalArgumentException(
                                    "Invalid PreDestroy annotation");
                        }
                        preDestroy = method;
                    }
======= 71d075e^:"java/org/apache/catalina/core/DefaultInstanceManager.java"

======= 71d075e^:"java/org/apache/catalina/core/StandardContext.java"

======= 71d075e^:"java/org/apache/catalina/core/StandardContext.java"

======= 71d075e^:"java/org/apache/catalina/deploy/WebXml.java"

======= 71d075e^:"java/org/apache/catalina/deploy/WebXml.java"

======= 71d075e^:"java/org/apache/catalina/deploy/WebXml.java"

======= 71d075e^:"java/org/apache/catalina/deploy/WebXml.java"

======= 71d075e^:"java/org/apache/catalina/deploy/WebXml.java"

======= 71d075e^:"java/org/apache/catalina/startup/FailedContext.java"

======= 71d075e^:"java/org/apache/catalina/startup/FailedContext.java"

======= 71d075e^:"java/org/apache/catalina/startup/WebRuleSet.java"

======= 71d075e^:"java/org/apache/catalina/startup/WebRuleSet.java"

======= 71d075e^:"java/org/apache/catalina/util/Introspection.java"

======= 71d075e^:"java/org/apache/catalina/util/Introspection.java"

======= 71d075e^:"test/org/apache/catalina/core/TestStandardContext.java"

======= 71d075e^:"test/org/apache/catalina/core/TesterContext.java"

======= 71d075e^:"test/org/apache/catalina/core/TesterContext.java"

======= 71d075e^:"test/org/apache/catalina/deploy/TestWebXml.java"

======= 71d075e^:"test/org/apache/catalina/deploy/TestWebXml.java"

        assertEquals(3, webxml.getMajorVersion());
        assertEquals(0, webxml.getMinorVersion());
        assertEquals(2, webxml.getMajorVersion());
        assertEquals(5, webxml.getMinorVersion());
        assertEquals(0, webxml.getMajorVersion());
        assertEquals(0, webxml.getMinorVersion());
        assertEquals(0, webxml.getMajorVersion());
        assertEquals(0, webxml.getMinorVersion());
        assertEquals(3, webxml.getMajorVersion());
        assertEquals(0, webxml.getMinorVersion());
        assertEquals(3, webxml.getMajorVersion());
        assertEquals(0, webxml.getMinorVersion());
        assertEquals(0, webxml.getMajorVersion());
        assertEquals(5, webxml.getMinorVersion());
        assertEquals(2, webxml.getMajorVersion());
        assertEquals(500, webxml.getMinorVersion());
======= 71d075e^:"test/org/apache/catalina/deploy/TestWebXml.java"

        assertEquals(2, webxml.getMajorVersion());
        assertEquals(2, webxml.getMinorVersion());
        assertEquals("2.2", webxml.getVersion());
======= 71d075e^:"test/org/apache/catalina/deploy/TestWebXml.java"

        assertEquals(2, webxml.getMajorVersion());
        assertEquals(3, webxml.getMinorVersion());
        assertEquals("2.3", webxml.getVersion());
======= 71d075e^:"test/org/apache/catalina/deploy/TestWebXml.java"

        assertEquals(2, webxml.getMajorVersion());
        assertEquals(4, webxml.getMinorVersion());
        assertEquals("2.4", webxml.getVersion());
======= 71d075e^:"test/org/apache/catalina/deploy/TestWebXml.java"

        assertEquals(2, webxml.getMajorVersion());
        assertEquals(5, webxml.getMinorVersion());
        assertEquals("2.5", webxml.getVersion());
======= 71d075e^:"test/org/apache/catalina/deploy/TestWebXml.java"

        assertEquals(3, webxml.getMajorVersion());
        assertEquals(0, webxml.getMinorVersion());
        assertEquals("3.0", webxml.getVersion());
======= 71d075e^:"test/org/apache/catalina/startup/TestContextConfig.java"

======= 71d075e^:"test/org/apache/catalina/startup/TestContextConfig.java"

======= 71d075e^:"test/org/apache/catalina/startup/TestWebRuleSet.java"

======= 71d075e^:"test/org/apache/catalina/startup/TestWebRuleSet.java"

======= 71d075e^:"test/org/apache/catalina/startup/TestWebRuleSet.java"

======= 71d075e^:"test/org/apache/catalina/startup/TestWebRuleSet.java"


======= d83a5e5^:"java/org/apache/catalina/ssi/SSIProcessor.java"

        String command = null;
        if (firstLetter != -1) {
            command = cmd.substring(firstLetter, lastLetter + 1);
        return command;

======= 5f7af1b^:"java/org/apache/catalina/websocket/StreamHandler.java"

                    // NO-OP
======= 5f7af1b^:"java/org/apache/catalina/websocket/StreamHandler.java"

======= 5f7af1b^:"java/org/apache/catalina/websocket/StreamHandler.java"


======= 95e6056^:"java/org/apache/catalina/filters/RemoteIpFilter.java"

                        request.getRemoteAddr());
                        request.getRemoteHost());
                        request.getProtocol());
                        Integer.valueOf(request.getServerPort()));
======= 95e6056^:"test/org/apache/catalina/filters/TestRemoteIpFilter.java"

======= 95e6056^:"test/org/apache/catalina/filters/TestRemoteIpFilter.java"

            // NOOP. Prevents NPE during testing.
======= 95e6056^:"test/org/apache/catalina/filters/TestRemoteIpFilter.java"

======= 95e6056^:"test/org/apache/catalina/valves/TestRemoteIpValve.java"

======= 95e6056^:"test/org/apache/catalina/valves/TestRemoteIpValve.java"

            // NOOP. Prevents NPE during testing.
======= 95e6056^:"test/org/apache/catalina/valves/TestRemoteIpValve.java"


======= 3a9990b^:"java/org/apache/catalina/mapper/MapperListener.java"

                registerWrapper((Wrapper) obj);
                registerContext((Context) obj);

======= f7fc27a^:"java/org/apache/tomcat/util/buf/B2CConverter.java"

======= f7fc27a^:"java/org/apache/tomcat/util/buf/B2CConverter.java"

======= f7fc27a^:"java/org/apache/tomcat/util/buf/B2CConverter.java"

======= f7fc27a^:"java/org/apache/tomcat/util/buf/B2CConverter.java"

    public void reset()
        throws IOException
    {
        // destroy the reader/iis
        iis=new IntermediateInputStream();
        conv = new ReadConvertor(iis, getCharset(encoding));
======= f7fc27a^:"java/org/apache/tomcat/util/buf/B2CConverter.java"

    public ReadConvertor(IntermediateInputStream in, Charset charset) {
        super(in, charset);
======= f7fc27a^:"java/org/apache/tomcat/util/buf/B2CConverter.java"


======= 113c0bd^:"java/org/apache/catalina/core/ApplicationContext.java"

======= 113c0bd^:"java/org/apache/catalina/core/ApplicationContext.java"

======= 113c0bd^:"java/org/apache/catalina/deploy/FilterDef.java"

======= 113c0bd^:"java/org/apache/catalina/deploy/FilterDef.java"

======= 113c0bd^:"java/org/apache/catalina/deploy/FilterDef.java"

======= 113c0bd^:"java/org/apache/catalina/deploy/ServletDef.java"

======= 113c0bd^:"java/org/apache/catalina/deploy/ServletDef.java"

======= 113c0bd^:"java/org/apache/catalina/deploy/ServletDef.java"

======= 113c0bd^:"test/org/apache/catalina/core/TestApplicationContext.java"

======= 113c0bd^:"test/org/apache/catalina/core/TestApplicationContext.java"

======= 113c0bd^:"test/org/apache/catalina/core/TestApplicationContext.java"

======= 113c0bd^:"test/org/apache/catalina/core/TestApplicationContext.java"


======= 5418e2b^:"java/org/apache/catalina/deploy/WebXml.java"

    public void addAbsoluteOrdering(String fragmentName) {
        if (absoluteOrdering == null) {
            absoluteOrdering = new LinkedHashSet<>();
        }
======= 5418e2b^:"java/org/apache/catalina/startup/WebRuleSet.java"

======= 5418e2b^:"test/org/apache/catalina/startup/TestContextConfig.java"

======= 5418e2b^:"test/org/apache/catalina/startup/TestContextConfig.java"

        ByteChunk res = new ByteChunk();
        int rc =getUrl("http://localhost:" + getPort() + "/test", res, null);
        // Check return code
        assertEquals(HttpServletResponse.SC_OK, rc);
        // Check context
        assertEquals("OK - Custom default Servlet", res.toString());
======= 5418e2b^:"test/org/apache/catalina/startup/TestContextConfig.java"

        ByteChunk bc = new ByteChunk();
        int rc = getUrl("http://localhost:" + getPort() +
                "/test/bug51396.jsp", bc, null);
        assertEquals(HttpServletResponse.SC_OK, rc);
        assertTrue(bc.toString().contains("<p>OK</p>"));
======= 5418e2b^:"test/org/apache/catalina/startup/TestContextConfig.java"

        ByteChunk res = new ByteChunk();
        int rc = getUrl("http://localhost:" + getPort() +
                "/test/bug53574", res, null);
        Assert.assertEquals(HttpServletResponse.SC_OK, rc);
        String body = res.toString();
        Assert.assertTrue(body.contains("OK"));
======= 5418e2b^:"test/org/apache/catalina/startup/TestContextConfig.java"

======= 5418e2b^:"test/org/apache/catalina/startup/TestContextConfig.java"


======= 5361e86^:"java/org/apache/el/util/ReflectionUtil.java"

    @SuppressWarnings("null")
======= 5361e86^:"java/org/apache/el/util/ReflectionUtil.java"

======= 5361e86^:"java/org/apache/el/util/ReflectionUtil.java"

======= 5361e86^:"java/org/apache/el/util/ReflectionUtil.java"

                sb.append(types[i].getName()).append(", ");
======= 5361e86^:"java/org/apache/el/util/ReflectionUtil.java"

======= 5361e86^:"java/org/apache/el/util/ReflectionUtil.java"


======= 94da507^:"java/org/apache/jasper/util/FastRemovalDequeue.java"

        if (!element.getValid()) {

======= 0ae2f34^:"java/org/apache/catalina/util/ExtensionValidator.java"

                if (jar.getName().toLowerCase(Locale.ENGLISH).endsWith(".jar") &&
                        ManifestResource mre = new ManifestResource(
                                                    jar.getName(),
                                                    jmanifest,
                                                    ManifestResource.APPLICATION);

======= 29c4a0e^:"java/org/apache/catalina/startup/Bootstrap.java"


======= ffc4525^:"java/org/apache/jasper/runtime/JspWriterImpl.java"

    /**
     * Write a string.  This method cannot be inherited from the Writer class
     * because it must suppress I/O exceptions.
     */
    @Override
    public void write(String s) throws IOException {
        // Simple fix for Bugzilla 35410
        // Calling the other write function so as to init the buffer anyways
        if(s == null) {
            write(s, 0, 0);
        } else {
            write(s, 0, s.length());
        }
    }
======= ffc4525^:"java/org/apache/jasper/runtime/JspWriterImpl.java"

======= ffc4525^:"java/org/apache/jasper/runtime/JspWriterImpl.java"

======= ffc4525^:"java/org/apache/jasper/runtime/JspWriterImpl.java"


======= 1c61fb1^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/DataSource.java"

            this.oname = createObjectName(name);
            if (oname!=null) registerJmx();

======= b021a22^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java"

                proxies[i].getInterceptorClass().newInstance().poolClosed(this);

======= a2d1441^:"java/org/apache/catalina/valves/ErrorReportValve.java"

        if ((statusCode < 400) || (response.getContentWritten() > 0)) {
======= a2d1441^:"test/org/apache/catalina/valves/TestErrorReportValve.java"


======= a81538d^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java"

======= a81538d^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java"

    protected class PoolCleaner extends TimerTask {
        protected ConnectionPool pool;
        protected volatile boolean run = true;
            this.pool = pool;
======= a81538d^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java"

            if (pool.isClosed()) {
                if (pool.getSize() <= 0) {
                    run = false;
                }
            } else if ((System.currentTimeMillis() - lastRun) > sleepTime) {
======= a81538d^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java"

                } // catch
            } // end if
        } // run

======= d6b4740^:"java/org/apache/naming/java/javaURLContextFactory.java"

 * java.naming.factory.url.pkgs=org.apache.catalina.util.naming property

======= 3c13e90^:"java/javax/servlet/http/HttpServletResponse.java"

     * Sends an error response to the client using the specified status. The
     * server defaults to creating the response to look like an HTML-formatted
     * server error page containing the specified message, setting the content
     * type to "text/html", leaving cookies and other headers unmodified. If an
     * error-page declaration has been made for the web application
     * corresponding to the status code passed in, it will be served back in
     * preference to the suggested msg parameter.
======= 3c13e90^:"java/javax/servlet/http/HttpServletResponse.java"

     * clearing the buffer.
     * <p>
     * If the response has already been committed, this method throws an
     * IllegalStateException. After using this method, the response should be
     * considered to be committed and should not be written to.

======= 7c4a841^:"java/org/apache/jasper/tagplugins/jstl/Util.java"

    @SuppressWarnings("null") // escapedBuffer cannot be null
        int length = buffer.length();
        char[] arrayBuffer = buffer.toCharArray();
======= 7c4a841^:"java/org/apache/jasper/tagplugins/jstl/Util.java"

            return buffer;
======= 7c4a841^:"java/org/apache/jasper/tagplugins/jstl/core/Out.java"

======= 7c4a841^:"java/org/apache/jasper/tagplugins/jstl/core/Out.java"

        ctxt.generateJavaSource("String " + strValName + " = null;");
        ctxt.generateJavaSource("if(");
        ctxt.generateJavaSource("!=null){");
        ctxt.generateJavaSource("    " + strValName + " = (");
        ctxt.generateAttribute("value");
        ctxt.generateJavaSource(").toString();");
        ctxt.generateJavaSource("String " + strDefName + " = null;\n");
======= 7c4a841^:"java/org/apache/jasper/tagplugins/jstl/core/Out.java"

                strValName + ", " + strDefName + ", " + strEscapeXmlName +
                ");");
    public static boolean output(JspWriter out, String value, String defaultValue,
            boolean escapeXml) throws IOException {
        String v = value != null ? value : defaultValue;
        if (v != null) {
            if(escapeXml){
                v = org.apache.jasper.tagplugins.jstl.Util.escapeXml(v);
            out.write(v);
            return false;
======= 7c4a841^:"test/org/apache/jasper/tagplugins/jstl/core/TestOut.java"

         pageEncoding="ISO-8859-1" session="false"%>
    <p><c:out value="${session.doesNotExist}">OK - 1</c:out></p>
    <p><c:out value="${session.doesNotExist}">${'OK - '}${1+1}</c:out></p>

======= 9998c80^:"java/org/apache/catalina/manager/StatusTransformer.java"

======= 9998c80^:"java/org/apache/catalina/manager/StatusTransformer.java"

======= 9998c80^:"java/org/apache/catalina/manager/StatusTransformer.java"

======= 9998c80^:"java/org/apache/catalina/manager/StatusTransformer.java"


======= 2ed3d7d^:"java/org/apache/catalina/startup/RealmRuleSet.java"

======= 2ed3d7d^:"java/org/apache/catalina/startup/RealmRuleSet.java"

        digester.addObjectCreate(prefix + "Realm",
                                 null, // MUST be specified in the element,
                                 "className");
        digester.addSetProperties(prefix + "Realm");
        digester.addSetNext(prefix + "Realm",
                            "setRealm",
                            "org.apache.catalina.Realm");
        digester.addObjectCreate(prefix + "Realm/Realm",
                                 null, // MUST be specified in the element
                                 "className");
        digester.addSetProperties(prefix + "Realm/Realm");
        digester.addSetNext(prefix + "Realm/Realm",
                            "addRealm",
                            "org.apache.catalina.Realm");

======= 810732d^:"java/javax/servlet/http/HttpServlet.java"

                long ifModifiedSince = req.getDateHeader(HEADER_IFMODSINCE);

======= 8f53c89^:"test/org/apache/catalina/startup/SimpleHttpClient.java"

======= 8f53c89^:"test/org/apache/catalina/startup/SimpleHttpClient.java"

======= 8f53c89^:"test/org/apache/catalina/startup/SimpleHttpClient.java"

        // Send the request
            if (first) {
                first = false;
            } else {
                Thread.sleep(requestPause);
            writer.write(requestPart);
            writer.flush();

======= 76f84eb^:"java/org/apache/catalina/core/AsyncContextImpl.java"

            request.setAttribute(ASYNC_REQUEST_URI, request.getRequestURI()+"?"+request.getQueryString());

======= 14637ef^:"java/org/apache/catalina/core/AsyncContextImpl.java"

======= 14637ef^:"java/org/apache/catalina/core/AsyncContextImpl.java"

                    // No listeners, container calls complete
                    complete();
======= 14637ef^:"java/org/apache/catalina/core/AsyncContextImpl.java"

======= 14637ef^:"java/org/apache/catalina/core/StandardHostValve.java"

======= 14637ef^:"java/org/apache/catalina/core/StandardHostValve.java"

                request.setAttribute(RequestDispatcher.ERROR_EXCEPTION, t);
                throwable(request, response, t);
            if (!(request.isAsync() || (asyncAtStart && request.getAttribute(
                        RequestDispatcher.ERROR_EXCEPTION) != null))) {
                // Protect against NPEs if context was destroyed during a long
                // running request.
                    // Error page processing
                    response.setSuspended(false);
                    Throwable t = (Throwable) request.getAttribute(
                            RequestDispatcher.ERROR_EXCEPTION);
                    if (t != null) {
                        throwable(request, response, t);
                    } else {
                        status(request, response);
======= 14637ef^:"java/org/apache/catalina/core/StandardHostValve.java"

    private void throwable(Request request, Response response,
======= 14637ef^:"java/org/apache/coyote/AsyncStateMachine.java"

                state == AsyncState.TIMING_OUT) {
======= 14637ef^:"test/org/apache/catalina/core/TestAsyncContextImpl.java"

======= 14637ef^:"test/org/apache/catalina/core/TestAsyncContextImpl.java"

======= 14637ef^:"test/org/apache/catalina/core/TestAsyncContextImpl.java"

======= 14637ef^:"test/org/apache/catalina/core/TestAsyncContextImpl.java"

        alv.validateAccessLog(2, 200,
======= 14637ef^:"test/org/apache/catalina/core/TestAsyncContextImpl.java"

        doTestTimeout(true, null);
        doTestTimeout(false, null);
        doTestTimeout(true, "/nonasync");
        doTestTimeout(false, "/nonasync");
    private void doTestTimeout(boolean completeOnTimeout, String dispatchUrl)
======= 14637ef^:"test/org/apache/catalina/core/TestAsyncContextImpl.java"

            new TimeoutServlet(completeOnTimeout, dispatchUrl);
======= 14637ef^:"test/org/apache/catalina/core/TestAsyncContextImpl.java"

        expected.append("TimeoutServletGet-onTimeout-");
        if (completeOnTimeout) {
======= 14637ef^:"test/org/apache/catalina/core/TestAsyncContextImpl.java"

======= 14637ef^:"test/org/apache/catalina/core/TestAsyncContextImpl.java"

        if (completeOnTimeout && dispatchUrl != null) {
======= 14637ef^:"test/org/apache/catalina/core/TestAsyncContextImpl.java"

        private final boolean completeOnTimeout;
        public TimeoutServlet(boolean completeOnTimeout, String dispatchUrl) {
======= 14637ef^:"test/org/apache/catalina/core/TestAsyncContextImpl.java"

                ac.addListener(new TrackingListener(
                        false, completeOnTimeout, dispatchUrl));
======= 14637ef^:"test/org/apache/catalina/core/TestAsyncContextImpl.java"

        TimeoutServlet timeout = new TimeoutServlet(true, null);
======= 14637ef^:"test/org/apache/catalina/core/TestAsyncContextImpl.java"


======= 8fea85c^:"java/org/apache/catalina/websocket/WsOutbound.java"

======= 8fea85c^:"java/org/apache/catalina/websocket/WsOutbound.java"

        upgradeOutbound.write(0x8A);

======= 48314f9^:"java/org/apache/catalina/core/NamingContextListener.java"

======= 48314f9^:"java/org/apache/catalina/core/NamingContextListener.java"

                logger.error(sm.getString("naming.invalidEnvEntryType", env.getName()));
======= 48314f9^:"java/org/apache/catalina/core/NamingContextListener.java"

======= 48314f9^:"test/org/apache/catalina/core/TestNamingContextListener.java"

    private static final String JNDI_NAME = "TestName";
    private static final String JNDI_VALUE= "Test Value";
======= 48314f9^:"test/org/apache/catalina/core/TestNamingContextListener.java"

        environment.setType(JNDI_VALUE.getClass().getName());
        environment.setName(JNDI_NAME);
        environment.setValue(JNDI_VALUE);
======= 48314f9^:"test/org/apache/catalina/core/TestNamingContextListener.java"

                String value = (String) envCtx.lookup(JNDI_NAME);
                if (!JNDI_VALUE.equals(value)) {
======= 48314f9^:"test/org/apache/catalina/core/TestNamingContextListener.java"


======= 9f65875^:"java/org/apache/catalina/authenticator/SpnegoAuthenticator.java"

======= 9f65875^:"java/org/apache/catalina/authenticator/SpnegoAuthenticator.java"

======= 9f65875^:"java/org/apache/catalina/authenticator/SpnegoAuthenticator.java"


======= 07d343a^:"java/org/apache/catalina/deploy/WebXml.java"

======= 07d343a^:"java/org/apache/catalina/deploy/WebXml.java"

            List<String> order = new LinkedList<>();
            // Start by adding all fragments - order doesn't matter
            order.addAll(fragments.keySet());
            // Now go through and move elements to start/end depending on if
            // they specify others
            for (WebXml fragment : fragments.values()) {
                String name = fragment.getName();
                if (fragment.getBeforeOrdering().contains(WebXml.ORDER_OTHERS)) {
                    // Move to beginning
                    order.remove(name);
                    order.add(0, name);
                } else if (fragment.getAfterOrdering().contains(WebXml.ORDER_OTHERS)) {
                    // Move to end
                    order.remove(name);
                    order.add(name);
                }
            }
            // Now apply remaining ordering
                String name = fragment.getName();
                    if (!before.equals(WebXml.ORDER_OTHERS) &&
                            order.contains(before) &&
                            order.indexOf(before) < order.indexOf(name)) {
                        order.remove(name);
                        order.add(order.indexOf(before), name);
                    if (!after.equals(WebXml.ORDER_OTHERS) &&
                            order.contains(after) &&
                            order.indexOf(after) > order.indexOf(name)) {
                        order.remove(name);
                        order.add(order.indexOf(after) + 1, name);
            // Finally check ordering was applied correctly - if there are
            // errors then that indicates circular references
                String name = fragment.getName();
                for (String before : fragment.getBeforeOrdering()) {
                    if (!before.equals(WebXml.ORDER_OTHERS) &&
                            order.contains(before) &&
                            order.indexOf(before) < order.indexOf(name)) {
                        throw new IllegalArgumentException(
                                sm.getString("webXml.mergeConflictOrder"));
                    }
                for (String after : fragment.getAfterOrdering()) {
                    if (!after.equals(WebXml.ORDER_OTHERS) &&
                            order.contains(after) &&
                            order.indexOf(after) > order.indexOf(name)) {
                        throw new IllegalArgumentException(
                                sm.getString("webXml.mergeConflictOrder"));
                    }
            // Build the ordered list
            for (String name : order) {
                orderedFragments.add(fragments.get(name));
======= 07d343a^:"test/org/apache/catalina/deploy/TestWebXmlOrdering.java"

======= 07d343a^:"test/org/apache/catalina/deploy/TestWebXmlOrdering.java"

    public void setUp() throws Exception {
======= 07d343a^:"test/org/apache/catalina/deploy/TestWebXmlOrdering.java"

        fragments = new HashMap<>();
======= 07d343a^:"test/org/apache/catalina/deploy/TestWebXmlOrdering.java"

        a.addAfterOrderingOthers();
        a.addAfterOrdering("c");
        b.addBeforeOrderingOthers();
        c.addAfterOrderingOthers();
        f.addBeforeOrderingOthers();
        f.addBeforeOrdering("b");
        Set<WebXml> ordered = WebXml.orderWebFragments(app, fragments);
        Iterator<WebXml> iter = ordered.iterator();
        assertEquals(f,iter.next());
        assertEquals(b,iter.next());
        assertEquals(d,iter.next());
        assertEquals(e,iter.next());
        assertEquals(c,iter.next());
        assertEquals(a,iter.next());
        a.addAfterOrderingOthers();
        a.addBeforeOrdering("c");
        b.addBeforeOrderingOthers();
        d.addAfterOrderingOthers();
        e.addBeforeOrderingOthers();
        Set<WebXml> ordered = WebXml.orderWebFragments(app, fragments);
        Iterator<WebXml> iter = ordered.iterator();
        // A number of orders are possible but the algorithm is deterministic
        // and this order is valid. If this fails after a change to the
        // algorithm, then check to see if the new order is also valid.
        assertEquals(b,iter.next());
        assertEquals(e,iter.next());
        assertEquals(f,iter.next());
        assertEquals(a,iter.next());
        assertEquals(c,iter.next());
        assertEquals(d,iter.next());
    public void testOrderWebFragmentsRelative3() {
        // Third example from spec
        a.addAfterOrdering("b");
        c.addBeforeOrderingOthers();
        fragments.remove("e");
        fragments.remove("f");
        Set<WebXml> ordered = WebXml.orderWebFragments(app, fragments);
        Iterator<WebXml> iter = ordered.iterator();
        // A number of orders are possible but the algorithm is deterministic
        // and this order is valid. If this fails after a change to the
        // algorithm, then check to see if the new order is also valid.
        assertEquals(c,iter.next());
        assertEquals(d,iter.next());
        assertEquals(b,iter.next());
        assertEquals(a,iter.next());
    public void testOrderWebFragmentsrelativeCircular() {
        Exception exception = null;
        try {
            WebXml.orderWebFragments(app, fragments);
        } catch (Exception e1) {
            exception = e1;
        assertTrue(exception instanceof IllegalArgumentException);

======= 9308b3f^:"java/org/apache/coyote/http11/AbstractHttp11Processor.java"

        if ((statusCode == 204) || (statusCode == 205)
            || (statusCode == 304)) {

======= c40ca99^:"java/org/apache/jasper/runtime/PageContextImpl.java"

    private static String XmlEscape(String s) {
        if (s == null)
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < s.length(); i++) {
            if (c == '<') {
                sb.append("&lt;");
            } else if (c == '>') {
                sb.append("&gt;");
            } else if (c == '\'') {
                sb.append("&#039;"); // &apos;
            } else if (c == '&') {
                sb.append("&amp;");
            } else if (c == '"') {
                sb.append("&#034;"); // &quot;
            } else {
                sb.append(c);
        return sb.toString();
======= c40ca99^:"java/org/apache/jasper/runtime/PageContextImpl.java"


======= 05fe671^:"java/org/apache/catalina/servlets/CGIServlet.java"

    private static final Hashtable<String,String> shellEnv = new Hashtable<>();

======= 874c332^:"java/org/apache/coyote/AbstractProtocol.java"

                    if (status == SocketStatus.DISCONNECT) {
                        //do nothing here, just wait for it to get recycled
                    } else if (processor.isAsync() || state == SocketState.ASYNC_END) {

======= 095a403^:"java/org/apache/jasper/compiler/Generator.java"

                return "new String(" + quoted + ")";

======= a0ff3f9^:"java/org/apache/jasper/compiler/Compiler.java"

                errDispatcher), ctxt.getJspFile());
======= a0ff3f9^:"java/org/apache/jasper/compiler/PageInfo.java"

    PageInfo(BeanRepository beanRepository, String jspFile) {
======= a0ff3f9^:"java/org/apache/jasper/compiler/PageInfo.java"

======= a0ff3f9^:"java/org/apache/jasper/compiler/TagPluginManager.java"

======= a0ff3f9^:"java/org/apache/jasper/compiler/tagplugin/TagPluginContext.java"

======= a0ff3f9^:"java/org/apache/jasper/tagplugins/jstl/core/Set.java"

            ctxt.generateJavaSource("    pageContext.setAttribute(\"" + strVar + "\"," + resultName + "," + iScope + ");");
                ctxt.generateJavaSource("    pageContext.removeAttribute(\"" + strVar + "\"," + iScope + ");");
                ctxt.generateJavaSource("    pageContext.removeAttribute(\"" + strVar + "\");");

======= d2b41b5^:"java/org/apache/catalina/tribes/group/interceptors/TcpFailureDetector.java"

======= d2b41b5^:"java/org/apache/catalina/tribes/group/interceptors/TcpFailureDetector.java"

======= d2b41b5^:"java/org/apache/catalina/tribes/group/interceptors/TcpFailureDetector.java"

======= d2b41b5^:"java/org/apache/catalina/tribes/group/interceptors/TcpFailureDetector.java"


======= 9f04094^:"java/org/apache/coyote/ajp/AbstractAjpProcessor.java"

                request.scheme().setString("https");
                request.scheme().setString("https");
                request.scheme().setString("https");

======= 39c4270^:"java/org/apache/catalina/valves/AccessLogValve.java"

======= 39c4270^:"java/org/apache/catalina/valves/AccessLogValve.java"

            if (request != null) {
                if (request.getSession(false) != null) {
                    buf.append(request.getSessionInternal(false)
                            .getIdInternal());
                } else {
            } else {
                buf.append('-');

======= 88d8dd5^:"java/org/apache/jasper/compiler/JspReader.java"

                       setCurrent(restart);
======= 88d8dd5^:"java/org/apache/jasper/compiler/JspReader.java"

======= 88d8dd5^:"java/org/apache/jasper/compiler/JspReader.java"


======= a3e0f09^:"java/org/apache/naming/resources/BaseDirContext.java"

======= a3e0f09^:"java/org/apache/naming/resources/BaseDirContext.java"

    public NamingEnumeration<NameClassPair> list(Name name)
======= a3e0f09^:"java/org/apache/naming/resources/BaseDirContext.java"

    public abstract NamingEnumeration<NameClassPair> list(String name)
        throws NamingException;
======= a3e0f09^:"java/org/apache/naming/resources/FileDirContext.java"

======= a3e0f09^:"java/org/apache/naming/resources/FileDirContext.java"

======= a3e0f09^:"java/org/apache/naming/resources/FileDirContext.java"

     * Enumerates the names bound in the named context, along with the class
     * names of objects bound to them. The contents of any subcontexts are
     * not included.
     * <p>
     * If a binding is added to or removed from this context, its effect on
     * an enumeration previously returned is undefined.
     *
     * @param name the name of the context to list
     * @return an enumeration of the names and class names of the bindings in
     * this context. Each element of the enumeration is of type NameClassPair.
     * @exception NamingException if a naming exception is encountered
     */
    @Override
    public NamingEnumeration<NameClassPair> list(String name)
        throws NamingException {
        File file = file(name);
        if (file == null)
            throw new NameNotFoundException
                (sm.getString("resources.notFound", name));
        return new NamingContextEnumeration(list(file).iterator());
    }
    /**
======= a3e0f09^:"java/org/apache/naming/resources/WARDirContext.java"

======= a3e0f09^:"java/org/apache/naming/resources/WARDirContext.java"

======= a3e0f09^:"java/org/apache/naming/resources/WARDirContext.java"

     * Enumerates the names bound in the named context, along with the class
     * names of objects bound to them. The contents of any subcontexts are
     * not included.
     * <p>
     * If a binding is added to or removed from this context, its effect on
     * an enumeration previously returned is undefined.
     *
     * @param name the name of the context to list
     * @return an enumeration of the names and class names of the bindings in
     * this context. Each element of the enumeration is of type NameClassPair.
     * @exception NamingException if a naming exception is encountered
     */
    @Override
    public NamingEnumeration<NameClassPair> list(String name)
        throws NamingException {
        return list(getEscapedJndiName(name));
    }
    /**
     * Enumerates the names bound in the named context, along with the class
     * names of objects bound to them. The contents of any subcontexts are
     * not included.
     * <p>
     * If a binding is added to or removed from this context, its effect on
     * an enumeration previously returned is undefined.
     *
     * @param name the name of the context to list
     * @return an enumeration of the names and class names of the bindings in
     * this context. Each element of the enumeration is of type NameClassPair.
     * @exception NamingException if a naming exception is encountered
     */
    @Override
    public NamingEnumeration<NameClassPair> list(Name name)
        throws NamingException {
        if (name.isEmpty())
            return new NamingContextEnumeration(list(entries).iterator());
        Entry entry = treeLookup(name);
        if (entry == null)
            throw new NameNotFoundException
                (sm.getString("resources.notFound", name));
        return new NamingContextEnumeration(list(entry).iterator());
    }
    /**

======= 7f6f99e^:"java/org/apache/catalina/startup/Tomcat.java"


======= 97cefcc^:"java/org/apache/catalina/Host.java"

======= 97cefcc^:"java/org/apache/catalina/core/StandardHost.java"

======= 97cefcc^:"java/org/apache/catalina/startup/HostConfig.java"

======= 97cefcc^:"java/org/apache/catalina/startup/HostConfig.java"

======= 97cefcc^:"java/org/apache/catalina/startup/HostConfig.java"

                    if (log.isInfoEnabled())
                        log.info(sm.getString("hostConfig.undeploy", app.name));
                    Container context = host.findChild(app.name);
                    try {
                        host.removeChild(context);
                    } catch (Throwable t) {
                        ExceptionUtils.handleThrowable(t);
                        log.warn(sm.getString
                                 ("hostConfig.context.remove", app.name), t);
                    }
                    // Delete other redeploy resources
                    for (int j = i + 1; j < resources.length; j++) {
                        try {
                            File current = new File(resources[j]);
                            current = current.getCanonicalFile();
                            // Never delete per host context.xml defaults
                            if (Constants.HostContextXml.equals(
                                    current.getName())) {
                                continue;
                            }
                            // Only delete resources in the appBase or the
                            // host's configBase
                            if ((current.getAbsolutePath().startsWith(
                                    host.getAppBaseFile().getAbsolutePath() +
                                    File.separator))
                                    || (current.getAbsolutePath().startsWith(
                                            host.getConfigBaseFile().getAbsolutePath()))) {
                                if (log.isDebugEnabled())
                                    log.debug("Delete " + current);
                                ExpandWar.delete(current);
                            }
                        } catch (IOException e) {
                            log.warn(sm.getString
                                    ("hostConfig.canonicalizing", app.name), e);
                        }
                    }
                    deployed.remove(app.name);
======= 97cefcc^:"java/org/apache/catalina/startup/HostConfig.java"

                if (log.isInfoEnabled())
                    log.info(sm.getString("hostConfig.undeploy", app.name));
                Container context = host.findChild(app.name);
                try {
                    host.removeChild(context);
                } catch (Throwable t) {
                    ExceptionUtils.handleThrowable(t);
                    log.warn(sm.getString
                             ("hostConfig.context.remove", app.name), t);
                }
                // Delete all redeploy resources
                for (int j = i + 1; j < resources.length; j++) {
                    try {
                        File current = new File(resources[j]);
                        current = current.getCanonicalFile();
                        // Never delete per host context.xml defaults
                        if (Constants.HostContextXml.equals(
                                current.getName())) {
                            continue;
                        }
                        // Only delete resources in the appBase or the host's
                        // configBase
                        if ((current.getAbsolutePath().startsWith(
                                host.getAppBaseFile().getAbsolutePath() + File.separator))
                            || (current.getAbsolutePath().startsWith(
                                    host.getConfigBaseFile().getAbsolutePath()))) {
                            if (log.isDebugEnabled())
                                log.debug("Delete " + current);
                            ExpandWar.delete(current);
                        }
                    } catch (IOException e) {
                        log.warn(sm.getString
                                ("hostConfig.canonicalizing", app.name), e);
                    }
                }
                // Delete reload resources as well (to remove any remaining .xml
                // descriptor)
                String[] resources2 =
                    app.reloadResources.keySet().toArray(new String[0]);
                for (int j = 0; j < resources2.length; j++) {
                    try {
                        File current = new File(resources2[j]);
                        current = current.getCanonicalFile();
                        // Never delete per host context.xml defaults
                        if (Constants.HostContextXml.equals(
                                current.getName())) {
                            continue;
                        }
                        // Only delete resources in the appBase or the host's
                        // configBase
                        if ((current.getAbsolutePath().startsWith(
                                host.getAppBaseFile().getAbsolutePath() + File.separator))
                            || ((current.getAbsolutePath().startsWith(
                                    host.getConfigBaseFile().getAbsolutePath())
                                 && (current.getAbsolutePath().endsWith(".xml"))))) {
                            if (log.isDebugEnabled())
                                log.debug("Delete " + current);
                            ExpandWar.delete(current);
                        }
                    } catch (IOException e) {
                        log.warn(sm.getString
                                ("hostConfig.canonicalizing", app.name), e);
                    }
                }
                deployed.remove(app.name);
======= 97cefcc^:"java/org/apache/catalina/startup/HostConfig.java"

======= 97cefcc^:"java/org/apache/catalina/startup/HostConfig.java"

======= 97cefcc^:"java/org/apache/catalina/startup/HostConfig.java"


======= 5fccf68^:"java/org/apache/jasper/compiler/JspReader.java"

======= 5fccf68^:"java/org/apache/jasper/compiler/JspReader.java"

        while (!stop.equals(mark()))
        reset(oldstart);
======= 5fccf68^:"java/org/apache/jasper/compiler/JspReader.java"

======= 5fccf68^:"java/org/apache/jasper/compiler/JspReader.java"

        Mark mark = mark();
        int ch = 0;
        int i = 0;
        do {
            ch = nextChar();
            if (((char) ch) != string.charAt(i++)) {
                reset(mark);
                return false;
            }
        } while (i < string.length());
        return true;
======= 5fccf68^:"java/org/apache/jasper/compiler/JspReader.java"

        reset(mark);
======= 5fccf68^:"java/org/apache/jasper/compiler/JspReader.java"

       reset(mark);
======= 5fccf68^:"java/org/apache/jasper/compiler/JspReader.java"

            reset( mark );
======= 5fccf68^:"java/org/apache/jasper/compiler/JspReader.java"

        Mark ret = null;
        int ch;
        for (ret = mark(), ch = nextChar() ; ch != -1 ;
                 ret = mark(), ch = nextChar()) {
            if (ch == limit.charAt(0)) {
                Mark restart = mark();
                for (int i = 1 ; i < limlen ; i++) {
                    if (peekChar() == limit.charAt(i))
                        nextChar();
                    else {
                        reset(restart);
                        continue skip;
                    }
                }
                return ret;
======= 5fccf68^:"java/org/apache/jasper/compiler/JspReader.java"

        Mark ret = null;
        for (ret = mark(), ch = nextChar() ; ch != -1 ;
                 ret = mark(), prev = ch, ch = nextChar()) {
            }
            else if (ch == limit.charAt(0) && prev != '\\') {
======= 5fccf68^:"java/org/apache/jasper/compiler/JspReader.java"

                    reset(mark);
                    reset(mark);
======= 5fccf68^:"java/org/apache/jasper/compiler/Mark.java"

        this.reader = other.reader;
        this.ctxt = other.reader.getJspCompilationContext();
        this.stream = other.stream;
        this.fileId = other.fileId;
        this.fileName = other.fileName;
        this.baseDir = other.baseDir;
        this.encoding = other.encoding;
        // clone includeStack without cloning contents
        includeStack = new Stack<>();
        for ( int i=0; i < other.includeStack.size(); i++ ) {
            includeStack.addElement( other.includeStack.elementAt(i) );

======= a81d941^:"java/org/apache/catalina/websocket/StreamInbound.java"

            doOnClose(Constants.OPCODE_CLOSE);

======= 95d7a0f^:"java/org/apache/catalina/realm/RealmBase.java"

                    found = true;
======= 95d7a0f^:"java/org/apache/catalina/realm/RealmBase.java"

        if(results == null) {

======= 44eabba^:"java/org/apache/naming/resources/FileDirContext.java"

                tempContext.setDocBase(file.getPath());

======= fcc3d65^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

                args[0] = "<a href=\"" + URL_ENCODER.encode(displayPath)

======= cd05aa1^:"java/org/apache/coyote/http11/filters/ChunkedInputFilter.java"

                if (HexUtils.getDec(buf[pos]) != -1) {
                    result += HexUtils.getDec(buf[pos]);
======= cd05aa1^:"java/org/apache/tomcat/util/buf/HexUtils.java"

        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 10, 11, 12, 13, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
======= cd05aa1^:"java/org/apache/tomcat/util/buf/HexUtils.java"

        return DEC[index];
======= cd05aa1^:"java/org/apache/tomcat/util/buf/HexUtils.java"


======= 6b934d8^:"java/org/apache/catalina/startup/ContextConfig.java"

                    if (jar.entryExists("META-INF/resources/")) {
                        context.addResourceJarUrl(url);

======= 8f169e4^:"java/org/apache/catalina/core/ApplicationFilterRegistration.java"

                context.addFilterMapBefore(filterMap);
            } else {
======= 8f169e4^:"java/org/apache/catalina/core/ApplicationFilterRegistration.java"

                context.addFilterMapBefore(filterMap);
            } else {

======= 3dff241^:"java/org/apache/coyote/http11/filters/FlushableGZIPOutputStream.java"

        } while (len != 0);

======= 15e8d8e^:"java/org/apache/catalina/startup/Constants.java"

======= 15e8d8e^:"java/org/apache/catalina/startup/ContextConfig.java"

======= 15e8d8e^:"java/org/apache/catalina/startup/ContextConfig.java"

======= 15e8d8e^:"java/org/apache/catalina/startup/ContextConfig.java"

======= 15e8d8e^:"java/org/apache/catalina/startup/ContextConfig.java"

                context.getLoader().getClassLoader(), callback, null);
======= 15e8d8e^:"java/org/apache/catalina/startup/TldConfig.java"

======= 15e8d8e^:"java/org/apache/catalina/startup/TldConfig.java"

    /**
     * Sets the list of JARs that are known not to contain any TLDs.
     *
     * @param jarNames List of comma-separated names of JAR files that are
     * known not to contain any TLDs.
     */
    public static void setNoTldJars(String jarNames) {
        if (jarNames == null) {
            noTldJars = null;
        } else {
            if (noTldJars == null) {
                noTldJars = new HashSet<>();
            } else {
                noTldJars.clear();
            }
            StringTokenizer tokenizer = new StringTokenizer(jarNames, ",");
            while (tokenizer.hasMoreElements()) {
                noTldJars.add(tokenizer.nextToken());
            }
        }
    }
======= 15e8d8e^:"java/org/apache/jasper/Constants.java"

======= 15e8d8e^:"java/org/apache/jasper/compiler/TldLocationsCache.java"

======= 15e8d8e^:"java/org/apache/jasper/compiler/TldLocationsCache.java"

    /**
     * The mapping of the 'global' tag library URI to the location (resource
     * path) of the TLD associated with that tag library. The location is
     * returned as a String array:
     *    [0] The location
     *    [1] If the location is a jar file, this is the location of the tld.
     */
    private Hashtable<String, TldLocation> mappings;
    private volatile boolean initialized;
    private ServletContext ctxt;
    /** Constructor.
     *
     * @param ctxt the servlet context of the web application in which Jasper
     * is running
     */
    public TldLocationsCache(ServletContext ctxt) {
        this.ctxt = ctxt;
        mappings = new Hashtable<String, TldLocation>();
        initialized = false;
======= 15e8d8e^:"java/org/apache/jasper/compiler/TldLocationsCache.java"

    public static void setNoTldJars(String jarNames) {
                noTldJars = new HashSet<String>();
======= 15e8d8e^:"java/org/apache/jasper/compiler/TldLocationsCache.java"


======= 6c13431^:"java/org/apache/coyote/http11/AbstractHttp11Processor.java"

======= 6c13431^:"java/org/apache/coyote/http11/Http11NioProcessor.java"

        comet = false;

======= e38a097^:"java/org/apache/catalina/core/ApplicationJspPropertyGroupDescriptor.java"

======= e38a097^:"java/org/apache/catalina/core/ApplicationJspPropertyGroupDescriptor.java"

        Collection<String> result = new HashSet<>();
        if (jspPropertyGroup.getUrlPattern() != null) {
            result.add(jspPropertyGroup.getUrlPattern());
        }
        return result;
======= e38a097^:"java/org/apache/catalina/deploy/JspPropertyGroup.java"

======= e38a097^:"java/org/apache/catalina/deploy/JspPropertyGroup.java"

    private String urlPattern = null;
    public void setUrlPattern(String urlPattern) {
        this.urlPattern = urlPattern;
    public String getUrlPattern() { return this.urlPattern; }
======= e38a097^:"java/org/apache/catalina/deploy/WebXml.java"

                appendElement(sb, INDENT6, "url-pattern", jpg.getUrlPattern());
======= e38a097^:"java/org/apache/catalina/deploy/WebXml.java"

                context.addServletMapping(jspPropertyGroup.getUrlPattern(),
                        jspServletName, true);
                if(log.isDebugEnabled())
                    log.debug("Skiping " + jspPropertyGroup.getUrlPattern() +
                            " , no servlet " + jspServletName);
======= e38a097^:"java/org/apache/catalina/startup/WebRuleSet.java"

                               "setUrlPattern", 0);

======= 1efc23d^:"java/org/apache/jasper/compiler/Compiler.java"

                if (key.startsWith("jar:")) {

======= e37b01e^:"java/org/apache/catalina/core/ApplicationDispatcher.java"

        State state = new State(request, response, true);
        String contextPath = context.getPath();
        if (requestURI != null)
            wrequest.setAttribute(RequestDispatcher.INCLUDE_REQUEST_URI,
                                  requestURI);
        if (contextPath != null)
            wrequest.setAttribute(RequestDispatcher.INCLUDE_CONTEXT_PATH,
                                  contextPath);
        if (servletPath != null)
            wrequest.setAttribute(RequestDispatcher.INCLUDE_SERVLET_PATH,
                                  servletPath);
        if (pathInfo != null)
            wrequest.setAttribute(RequestDispatcher.INCLUDE_PATH_INFO,
                                  pathInfo);
            wrequest.setAttribute(RequestDispatcher.INCLUDE_QUERY_STRING,
                                  queryString);
======= e37b01e^:"java/org/apache/catalina/core/ApplicationDispatcher.java"

        wrequest.setContextPath(contextPath);

======= 2a3b42d^:"java/javax/servlet/ServletInputStream.java"

     * @return
======= 2a3b42d^:"java/javax/servlet/ServletOutputStream.java"

     * @return
======= 2a3b42d^:"java/javax/servlet/jsp/JspException.java"

     * @see <code>java.lang.Exception.Exception(String, Throwable)</code>
======= 2a3b42d^:"java/javax/servlet/jsp/JspException.java"

     * @see <code>java.lang.Exception.Exception(Throwable)</code>
======= 2a3b42d^:"java/org/apache/catalina/Executor.java"

     * @throws org.apache.catalina.util.RejectedExecutionException if this task
======= 2a3b42d^:"java/org/apache/catalina/Manager.java"

     * @deprecated Use {@link #setContext()}. This method will be removed in
======= 2a3b42d^:"java/org/apache/catalina/Manager.java"

     * @param container The newly associated Context
======= 2a3b42d^:"java/org/apache/catalina/tribes/ErrorHandler.java"

     * @see Channel#send(Member[], Serializable, int, ErrorHandler)
     * @see Channel#send(Member[], Serializable, int, ErrorHandler)
======= 2a3b42d^:"java/org/apache/naming/SelectorContext.java"

     * @exception javax.naming.InvalidAttributesException if object did not
======= 2a3b42d^:"java/org/apache/naming/SelectorContext.java"

     * @exception javax.naming.InvalidAttributesException if object did not
======= 2a3b42d^:"java/org/apache/naming/SelectorContext.java"

     * @exception javax.naming.InvalidAttributesException if object did not
======= 2a3b42d^:"java/org/apache/naming/SelectorContext.java"

     * @exception javax.naming.InvalidAttributesException if object did not
======= 2a3b42d^:"java/org/apache/naming/SelectorContext.java"

     * @exception javax.naming.InvalidAttributesException if creation of the
======= 2a3b42d^:"java/org/apache/naming/SelectorContext.java"

     * @exception javax.naming.InvalidAttributesException if creation of the
======= 2a3b42d^:"java/org/apache/tomcat/util/http/fileupload/FileItem.java"

 * #parseRequest(javax.servlet.http.HttpServletRequest)}), you may
======= 2a3b42d^:"webapps/examples/WEB-INF/classes/compressionFilters/CompressionResponseStream.java"

     * @param response The associated response
     * @param response
     * @param originalOutput

======= a2ca744^:"java/org/apache/coyote/http11/InternalNioOutputBuffer.java"

    int total = 0;
======= a2ca744^:"java/org/apache/coyote/http11/InternalNioOutputBuffer.java"

        total+= written;
        //System.out.println("Successful write("+written+ " / "+total);

======= f9b0182^:"java/org/apache/catalina/startup/ContextConfig.java"

======= f9b0182^:"test/org/apache/catalina/startup/TestContextConfig.java"

======= f9b0182^:"test/org/apache/catalina/startup/TestContextConfig.java"

======= f9b0182^:"test/org/apache/catalina/startup/TestContextConfig.java"


======= 5a6b27b^:"java/org/apache/jasper/runtime/PageContextImpl.java"

======= 5a6b27b^:"java/org/apache/jasper/runtime/PageContextImpl.java"

======= 5a6b27b^:"java/org/apache/jasper/runtime/PageContextImpl.java"

======= 5a6b27b^:"java/org/apache/jasper/runtime/PageContextImpl.java"

======= 5a6b27b^:"java/org/apache/jasper/runtime/PageContextImpl.java"

======= 5a6b27b^:"java/org/apache/jasper/runtime/PageContextImpl.java"


======= 432bd0f^:"java/org/apache/naming/resources/VirtualDirContext.java"


======= 82e5dce^:"java/org/apache/coyote/http11/Http11AprProtocol.java"

======= 82e5dce^:"java/org/apache/tomcat/util/net/AprEndpoint.java"

======= 82e5dce^:"java/org/apache/tomcat/util/net/AprEndpoint.java"


======= af45441^:"java/org/apache/catalina/websocket/WebSocketServlet.java"

                "Sec-WebSocket-Protocol-Client");

======= 57b56f2^:"java/org/apache/catalina/tribes/group/interceptors/TcpPingInterceptor.java"

======= 57b56f2^:"java/org/apache/catalina/tribes/group/interceptors/TcpPingInterceptor.java"


======= eb9f94e^:"java/org/apache/catalina/tribes/group/interceptors/TcpPingInterceptor.java"

        if (failureDetector.get() != null) {
            failureDetector.get().checkMembers(true);
            StaticMembershipInterceptor smi = staticMembers.get();
            if (staticOnly && smi != null) {

======= 7db08d3^:"java/org/apache/catalina/startup/ContextConfig.java"

        JavaClass javaClass = cacheEntry.getJavaClass();
        String superClassName = javaClass.getSuperclassName();
======= 7db08d3^:"java/org/apache/catalina/startup/ContextConfig.java"

        for (String interfaceName : javaClass.getInterfaceNames()) {
======= 7db08d3^:"java/org/apache/catalina/startup/ContextConfig.java"

        private final JavaClass javaClass;
            this.javaClass = javaClass;
        public JavaClass getJavaClass() {
            return javaClass;

======= 9a80d06^:"java/org/apache/catalina/connector/Response.java"

        String absolute = toAbsolute(url);
======= 9a80d06^:"java/org/apache/catalina/connector/Response.java"

            // Prevent from going outside our context
======= 9a80d06^:"java/org/apache/catalina/connector/Response.java"

        // Add the query string (if present) back in
======= 9a80d06^:"test/org/apache/catalina/connector/TestResponse.java"


======= 3ea8285^:"java/org/apache/catalina/tribes/group/GroupChannel.java"

                    interrupted();
======= 3ea8285^:"java/org/apache/catalina/tribes/group/interceptors/NonBlockingCoordinator.java"

                }catch ( InterruptedException x ) {
                    Thread.interrupted();
                if ( suggestedviewId == null && (!coordMsgReceived.get())) {
                    //no message arrived, send the coord msg
                    fireInterceptorEvent(new CoordinationEvent(CoordinationEvent.EVT_ELECT_ABANDONED,this,"Election abandoned, waiting timed out."));
                    fireInterceptorEvent(new CoordinationEvent(CoordinationEvent.EVT_ELECT_ABANDONED,this,"Election abandoned, received a message"));
            }//end if
======= 3ea8285^:"java/org/apache/catalina/tribes/group/interceptors/TcpPingInterceptor.java"

                    interrupted();
======= 3ea8285^:"java/org/apache/catalina/tribes/membership/McastServiceImpl.java"

                    if (x instanceof InterruptedException) interrupted();
                    else {
                        if (errorCounter==0 && doRunReceiver) log.warn("Error receiving mcast package. Sleeping 500ms",x);
                        else if (log.isDebugEnabled()) log.debug("Error receiving mcast package"+(doRunReceiver?". Sleeping 500ms":"."),x);
                        if (doRunReceiver) {
                            try { Thread.sleep(500); } catch ( Exception ignore ){}
                            if ( (++errorCounter)>=recoveryCounter ) {
                                errorCounter=0;
                                RecoveryThread.recover(McastServiceImpl.this);
                            }
======= 3ea8285^:"java/org/apache/juli/AsyncFileHandler.java"

            //allow thread to be interrupted and back out of the publish operation
            //after this we clear the flag
            Thread.interrupted();
======= 3ea8285^:"java/org/apache/juli/AsyncFileHandler.java"

                }catch (InterruptedException x) {
                    Thread.interrupted();
                }catch (Exception x) {
            }//while
======= 3ea8285^:"java/org/apache/tomcat/util/net/AprEndpoint.java"

                        // Ignore and clean the interrupt flag
                        Thread.interrupted();
======= 3ea8285^:"java/org/apache/tomcat/util/net/NioBlockingSelector.java"

                }catch (InterruptedException ignore) {
                    Thread.interrupted();
======= 3ea8285^:"java/org/apache/tomcat/util/net/NioBlockingSelector.java"

                }catch (InterruptedException ignore) {
                    Thread.interrupted();
======= 3ea8285^:"java/org/apache/tomcat/util/threads/ThreadPoolExecutor.java"

                    Thread.interrupted();

======= eac6366^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java"

            if (con.getPoolProperties().getDefaultAutoCommit()==Boolean.FALSE) {

======= f54bb45^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolConfiguration.java"

     * This parameter is only looked at if the {@link java.sql.Connection#getAutoCommit()} returns false
======= f54bb45^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolConfiguration.java"

     * This parameter is only looked at if the {@link java.sql.Connection#getAutoCommit()} returns false

======= 4c03dff^:"java/org/apache/catalina/ha/tcp/SimpleTcpCluster.java"

======= 4c03dff^:"java/org/apache/catalina/ha/tcp/SimpleTcpCluster.java"

                    channel.send(new Member[] {dest}, msg,channelSendOptions);
                    channel.send(destmembers,msg,channelSendOptions);

======= 4aef8e3^:"java/org/apache/catalina/core/ApplicationContext.java"

    private Map<String,String> parameters =
======= 4aef8e3^:"java/org/apache/catalina/core/ApplicationContext.java"

        boolean found = false;
        if (readOnlyAttributes.containsKey(name))
        found = attributes.containsKey(name);
        if (found) {
            value = attributes.get(name);
            attributes.remove(name);
        } else {
======= 4aef8e3^:"java/org/apache/catalina/core/ApplicationContext.java"

        if (parameters.containsKey(name)) {
            return false;
        }
        parameters.put(name, value);
        return true;
======= 4aef8e3^:"java/org/apache/catalina/ha/context/ReplicatedContext.java"

            if (tomcatAttributes.containsKey(name) )
                return tomcatAttributes.get(name);
            else

======= f8e173b^:"java/org/apache/catalina/core/StandardContext.java"

            mimeMappings.put(extension, mimeType);
======= f8e173b^:"java/org/apache/catalina/core/StandardContext.java"

        return (mimeMappings.get(extension));

======= 6213b38^:"java/org/apache/catalina/core/StandardContext.java"

     * HTTP status code (as an Integer).
======= 6213b38^:"java/org/apache/catalina/core/StandardHostValve.java"

======= 6213b38^:"java/org/apache/catalina/deploy/ErrorPage.java"

     * The error (status) code for which this error page is active.
======= 6213b38^:"java/org/apache/catalina/deploy/ErrorPage.java"


======= 4de4325^:"java/org/apache/catalina/core/ApplicationContext.java"

                URI uri = new URI("jndi", getJNDIUri(hostName, fullPath), null);
======= 4de4325^:"test/org/apache/catalina/core/TestApplicationContext.java"

======= 4de4325^:"test/org/apache/catalina/core/TestApplicationContext.java"

======= 4de4325^:"test/org/apache/catalina/core/TestApplicationContext.java"


======= ff9a272^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/DataSource.java"

        if (original.getKeyProperty("path")!=null) {

======= 7ecd402^:"java/org/apache/catalina/startup/WebRuleSet.java"

======= 7ecd402^:"java/org/apache/catalina/startup/WebRuleSet.java"

======= 7ecd402^:"java/org/apache/catalina/startup/WebRuleSet.java"

======= 7ecd402^:"java/org/apache/catalina/startup/WebRuleSet.java"

======= 7ecd402^:"java/org/apache/catalina/startup/WebRuleSet.java"

======= 7ecd402^:"java/org/apache/catalina/startup/WebRuleSet.java"

======= 7ecd402^:"java/org/apache/catalina/startup/WebRuleSet.java"

======= 7ecd402^:"java/org/apache/catalina/startup/WebRuleSet.java"

======= 7ecd402^:"java/org/apache/catalina/startup/WebRuleSet.java"

======= 7ecd402^:"java/org/apache/catalina/startup/WebRuleSet.java"

======= 7ecd402^:"test/org/apache/naming/resources/TestNamingContext.java"


======= 294c52b^:"java/org/apache/jasper/compiler/Generator.java"

        out.printil("else log(t.getMessage(), t);");
======= 294c52b^:"java/org/apache/jasper/runtime/JspFactoryImpl.java"


======= 4e010fc^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java"

    public static final String POOL_JMX_TYPE_PREFIX = "tomcat.jdbc:type=";
======= 4e010fc^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/DataSource.java"

        String domain = "tomcat.jdbc";
======= 4e010fc^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/SlowQueryReportJmx.java"

======= 4e010fc^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/SlowQueryReportJmx.java"

    public static ObjectName getObjectName(Class<?> clazz, String poolName) throws MalformedObjectNameException {
        ObjectName oname = new ObjectName(ConnectionPool.POOL_JMX_TYPE_PREFIX+clazz.getName()+",name=" + poolName);
======= 4e010fc^:"modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/test/TestSlowQueryReport.java"

                SlowQueryReportJmx.getObjectName(SlowQueryReportJmx.class, pool.getName()),

======= 553259c^:"java/org/apache/catalina/connector/Connector.java"

======= 553259c^:"java/org/apache/coyote/AbstractProtocol.java"

======= 553259c^:"java/org/apache/coyote/ProtocolHandler.java"

======= 553259c^:"java/org/apache/coyote/ajp/AjpAprProtocol.java"

    // ------------------------------------------------------------ Constructor
======= 553259c^:"java/org/apache/coyote/http11/Http11AprProtocol.java"


======= 8a13b39^:"java/javax/el/BeanELResolver.java"

                                    type.getName(), descriptor.getName() }));
======= 8a13b39^:"java/javax/el/BeanELResolver.java"

                                    type.getName(), descriptor.getName() }));
======= 8a13b39^:"java/javax/el/BeanELResolver.java"


======= 91a13d2^:"java/org/apache/catalina/core/ContainerBase.java"

======= 91a13d2^:"java/org/apache/catalina/core/ContainerBase.java"

     * The container event listeners for this Container.
    protected ArrayList<ContainerListener> listeners =
            new ArrayList<ContainerListener>();
    protected final ReadWriteLock listenersLock = new ReentrantReadWriteLock();
======= 91a13d2^:"java/org/apache/catalina/core/ContainerBase.java"

        Lock write = listenersLock.writeLock();
        write.lock();
        try {
            listeners.add(listener);
        } finally {
            write.unlock();
        }
======= 91a13d2^:"java/org/apache/catalina/core/ContainerBase.java"

        Lock read = listenersLock.readLock();
        read.lock();
        try {
            ContainerListener[] results =
                new ContainerListener[listeners.size()];
            return listeners.toArray(results);
        } finally {
            read.unlock();
        }
======= 91a13d2^:"java/org/apache/catalina/core/ContainerBase.java"

        Lock write = listenersLock.writeLock();
        write.lock();
        try {
            listeners.remove(listener);
        } finally {
            write.unlock();
        }
======= 91a13d2^:"java/org/apache/catalina/core/ContainerBase.java"

        /*
         * Implementation note
         * There are two options here.
         * 1) Take a copy of listeners and fire the events outside of the read
         *    lock
         * 2) Don't take a copy and fire the events inside the read lock
         *
         * Approach 2 has been used here since holding the read lock only
         * prevents writes and that is preferable to creating lots of array
         * objects. Since writes occur on start / stop (unless an external
         * management tool is used) then holding the read lock for a relatively
         * long time should not be an issue.
         */
        Lock read = listenersLock.readLock();
        read.lock();
        try {
            if (listeners.size() < 1)
                return;
            ContainerEvent event = new ContainerEvent(this, type, data);
            for (ContainerListener listener : listeners) {
                listener.containerEvent(event);
            }
        } finally {
            read.unlock();

======= ce24a10^:"java/org/apache/coyote/http11/Http11AprProcessor.java"

        if (error) {
======= ce24a10^:"java/org/apache/coyote/http11/Http11NioProcessor.java"

        if (error) {

======= bf41254^:"java/org/apache/catalina/authenticator/DigestAuthenticator.java"

                    return false;
======= bf41254^:"java/org/apache/catalina/authenticator/DigestAuthenticator.java"

                if (nc.length() != 8) {

======= 37e8c59^:"java/org/apache/catalina/startup/ContextConfig.java"

            HandlesTypes ht =
                sci.getClass().getAnnotation(HandlesTypes.class);

======= 2bf1556^:"java/org/apache/catalina/manager/StatusTransformer.java"

                writer.write(" requestBytesRecieved=\"0\"");
        is recieved, the next stage will br "Parse and Prepare Requst". If no
        <xs:attribute name="requestBytesRecieved" type="xs:long" use="required"/>

======= d73c07a^:"java/org/apache/catalina/core/ContainerBase.java"

        private ThreadGroup group;
        private AtomicInteger threadNumber = new AtomicInteger(1);
        private String namePrefix;

======= 0290e57^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/DataSourceFactory.java"

======= 0290e57^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/DataSourceFactory.java"

        PROP_ALTERNATE_USERNAME_ALLOWED
======= 0290e57^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/DataSourceFactory.java"


======= cf703d2^:"java/org/apache/naming/resources/BaseDirContext.java"

            if (kv.length != 2 || kv[0].length() == 0 || kv[1].length() == 0)
======= cf703d2^:"test/org/apache/naming/resources/TestNamingContext.java"

======= cf703d2^:"test/org/apache/naming/resources/TestNamingContext.java"

======= cf703d2^:"test/org/apache/naming/resources/TestNamingContext.java"


======= 1412935^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java"

                con.connect();
======= 1412935^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PooledConnection.java"

            if (driver==null)

======= 957d33b^:"java/org/apache/jasper/JspC.java"

======= 957d33b^:"java/org/apache/jasper/JspC.java"

======= 957d33b^:"java/org/apache/jasper/JspC.java"

    protected Project project;
======= 957d33b^:"java/org/apache/jasper/JspC.java"

======= 957d33b^:"java/org/apache/jasper/JspC.java"

     * Sets the Ant project.
     *
     * @param theProject The project
     */
    public void setProject(final Project theProject) {
        project = theProject;
    }
    /**
     * Returns the project: may be <code>null</code> if not running
     * inside an Ant project.
     *
     * @return The project
     */
    public Project getProject() {
        return project;
    }
    /**
======= 957d33b^:"java/org/apache/jasper/JspC.java"

    public void execute() throws JasperException {
======= 957d33b^:"java/org/apache/jasper/JspC.java"

            throw new JasperException(ioe);
======= 957d33b^:"java/org/apache/jasper/JspC.java"

            throw je;

======= ea77dfb^:"java/org/apache/catalina/session/ManagerBase.java"

            throw new IllegalStateException(
                    sm.getString("managerBase.createSession.ise"));
======= ea77dfb^:"java/org/apache/catalina/session/ManagerBase.java"


======= b82c47e^:"java/org/apache/catalina/startup/ContextConfig.java"

======= b82c47e^:"java/org/apache/catalina/startup/ContextConfig.java"

======= b82c47e^:"java/org/apache/catalina/startup/ContextConfig.java"

            filterMap.setFilterName(filterName);
            fragment.addFilterMapping(filterMap);

======= d713894^:"java/org/apache/catalina/websocket/StreamInbound.java"

======= d713894^:"java/org/apache/catalina/websocket/StreamInbound.java"

                    onBinaryData(wsIs);
                    onTextData(r);
======= d713894^:"java/org/apache/catalina/websocket/StreamInbound.java"

            onClose(status);
======= d713894^:"java/org/apache/catalina/websocket/StreamInbound.java"

            onClose(Constants.OPCODE_CLOSE);
    public void onUpgradeComplete() {
        onOpen(outbound);
======= d713894^:"test/org/apache/catalina/websocket/TestWebSocket.java"

======= d713894^:"test/org/apache/catalina/websocket/TestWebSocket.java"

        // Swallow the headers
======= d713894^:"test/org/apache/catalina/websocket/TestWebSocket.java"

        // Swallow the headers
======= d713894^:"test/org/apache/catalina/websocket/TestWebSocket.java"


======= a1c6165^:"test/org/apache/catalina/authenticator/TestNonLoginAndBasicAuthenticator.java"

                false, 200, false, 200);
======= a1c6165^:"test/org/apache/catalina/authenticator/TestNonLoginAndBasicAuthenticator.java"

                true, 401, false, 200);
======= a1c6165^:"test/org/apache/catalina/authenticator/TestNonLoginAndBasicAuthenticator.java"

                true, 401, false, 200);
                true, 401, false, 200);
======= a1c6165^:"test/org/apache/catalina/authenticator/TestNonLoginAndBasicAuthenticator.java"

                true, 401, false, 200);
======= a1c6165^:"test/org/apache/catalina/authenticator/TestNonLoginAndBasicAuthenticator.java"

======= a1c6165^:"test/org/apache/catalina/authenticator/TestNonLoginAndBasicAuthenticator.java"

        String authLine = "Basic " + base64auth;

======= c6b691d^:"java/org/apache/catalina/core/ApplicationDispatcher.java"

======= c6b691d^:"test/org/apache/catalina/core/TestAsyncContextImpl.java"

======= c6b691d^:"test/org/apache/catalina/core/TestAsyncContextImpl.java"


======= 6ce3128^:"java/org/apache/catalina/startup/Tomcat.java"

        boolean init = false;
======= 6ce3128^:"java/org/apache/catalina/startup/Tomcat.java"

                if (!init) {
                    init = true;
======= 6ce3128^:"test/org/apache/catalina/startup/TestTomcat.java"

======= 6ce3128^:"test/org/apache/catalina/startup/TestTomcat.java"

======= 6ce3128^:"test/org/apache/catalina/startup/TestTomcat.java"


======= ad3b503^:"java/org/apache/catalina/deploy/ServletDef.java"

======= ad3b503^:"java/org/apache/catalina/startup/WebRuleSet.java"

        digester.addCallMethod(fullPrefix + "/servlet/security-role-ref",
                               "addSecurityRoleRef", 2);
        digester.addCallParam(fullPrefix + "/servlet/security-role-ref/role-link", 1);
        digester.addCallParam(fullPrefix + "/servlet/security-role-ref/role-name", 0);

======= 84342f5^:"java/org/apache/catalina/core/ContainerBase.java"

======= 84342f5^:"java/org/apache/catalina/core/ContainerBase.java"

                startStopQueue);
======= 84342f5^:"java/org/apache/catalina/core/ContainerBase.java"


======= e90cd4b^:"java/org/apache/tomcat/util/scan/FileUrlJar.java"


======= 280beac^:"java/org/apache/coyote/http11/AbstractHttp11Processor.java"

        MessageBytes connectionValueMB = headers.getValue("connection");
======= 280beac^:"java/org/apache/coyote/http11/AbstractHttp11Processor.java"

            if (entityBody && http11) {
======= 280beac^:"java/org/apache/coyote/http11/AbstractHttp11Processor.java"

            headers.addValue(Constants.CONNECTION).setString(Constants.CLOSE);
======= 280beac^:"java/org/apache/coyote/http11/AbstractHttp11Processor.java"

======= 280beac^:"test/org/apache/coyote/http11/TestAbstractHttp11Processor.java"

======= 280beac^:"test/org/apache/coyote/http11/TestAbstractHttp11Processor.java"


======= 13100e9^:"java/org/apache/catalina/core/DefaultInstanceManager.java"

======= 13100e9^:"java/org/apache/catalina/core/DefaultInstanceManager.java"

                            String fieldName = Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);
======= 13100e9^:"java/org/apache/catalina/core/DefaultInstanceManager.java"

        StringBuilder name = new StringBuilder(setter.getName());
        // remove 'set'
        name.delete(0, 3);
        // lowercase first char
        name.setCharAt(0, Character.toLowerCase(name.charAt(0)));
        return name.toString();

======= 39c8e18^:"java/org/apache/catalina/core/DefaultInstanceManager.java"

                        if (injections != null && methodName.startsWith("set") && methodName.length() > 3) {

======= 5d12129^:"java/org/apache/catalina/loader/WebappClassLoader.java"

======= 5d12129^:"java/org/apache/catalina/loader/WebappClassLoader.java"

                if (binaryStream != null) {
======= 5d12129^:"java/org/apache/catalina/loader/WebappClassLoader.java"

        return (null);

======= de1f763^:"java/org/apache/catalina/core/DefaultInstanceManager.java"

======= de1f763^:"java/org/apache/catalina/core/DefaultInstanceManager.java"

            Map<String, String> injections = injectionMap.get(clazz.getName());
======= de1f763^:"java/org/apache/catalina/core/DefaultInstanceManager.java"


======= 098a647^:"java/org/apache/catalina/websocket/StreamInbound.java"

======= 098a647^:"java/org/apache/catalina/websocket/StreamInbound.java"

======= 098a647^:"java/org/apache/coyote/ajp/AjpAprProtocol.java"

                        socket.getSocket().longValue(), true);
======= 098a647^:"java/org/apache/coyote/http11/Http11AprProtocol.java"

                        socket.getSocket().longValue(), true);
======= 098a647^:"java/org/apache/coyote/http11/Http11AprProtocol.java"

                        socket.getSocket().longValue(), false);
                        socket.getSocket().longValue(), false);
======= 098a647^:"java/org/apache/coyote/http11/upgrade/UpgradeAprProcessor.java"

======= 098a647^:"java/org/apache/coyote/http11/upgrade/UpgradeBioProcessor.java"

======= 098a647^:"java/org/apache/coyote/http11/upgrade/UpgradeInbound.java"

======= 098a647^:"java/org/apache/coyote/http11/upgrade/UpgradeNioProcessor.java"

======= 098a647^:"java/org/apache/tomcat/util/net/AprEndpoint.java"

         * Add specified socket and associated pool to the poller. The socket will
         * be added to a temporary array, and polled first after a maximum amount
         * of time equal to pollTime (in most cases, latency will be much lower,
         * however).
         * @param socket to add to the poller
        public void add(long socket, boolean keepAlive) {
======= 098a647^:"java/org/apache/tomcat/util/net/AprEndpoint.java"

                if (keepAlive) {
                    addSocketTimeout[addCount] = getKeepAliveTimeout();
                } else {
                    addSocketTimeout[addCount] = getSoTimeout();
                }
======= 098a647^:"java/org/apache/tomcat/util/net/AprEndpoint.java"

                                            Poll.APR_POLLIN,
                                            addSocketTimeout[i] * 1000);
======= 098a647^:"java/org/apache/tomcat/util/net/AprEndpoint.java"

                                    getPoller().add(state.socket, true);
======= 098a647^:"java/org/apache/tomcat/util/net/AprEndpoint.java"

                        getPoller().add(socket.getSocket().longValue(), false);

======= f170929^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java"

======= f170929^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java"

======= f170929^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java"

======= f170929^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java"

======= f170929^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java"

            while ( (idle.size()>=getPoolProperties().getMinIdle()) && unlocked.hasNext()) {
======= f170929^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java"

                    if ((con.getReleaseTime()>0) && ((now - time) > con.getReleaseTime()) && (getSize()>getPoolProperties().getMinIdle())) {
======= f170929^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java"

======= f170929^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java"

======= f170929^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java"

======= f170929^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/DataSourceProxy.java"

======= f170929^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PooledConnection.java"

======= f170929^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PooledConnection.java"

======= f170929^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/jmx/ConnectionPool.java"

======= f170929^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/jmx/ConnectionPoolMBean.java"

======= f170929^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/jmx/ConnectionPoolMBean.java"


======= 111dc8e^:"java/org/apache/catalina/websocket/WebSocketServlet.java"

======= 111dc8e^:"java/org/apache/catalina/websocket/WebSocketServlet.java"

        // Small hack until the Servlet API provides a way to do this.
        ((RequestFacade) req).doUpgrade(inbound);

======= be365e5^:"java/org/apache/tomcat/util/net/AbstractEndpoint.java"

        if (running && executor!=null) {
======= be365e5^:"java/org/apache/tomcat/util/net/JIoEndpoint.java"

            setMaxConnections(getMaxThreads());
      <strong>maxThreads</strong>. For NIO the default is <code>10000</code>.
      <strong>maxThreads</strong>. For NIO the default is <code>10000</code>.

======= 48b9153^:"java/org/apache/catalina/ha/session/DeltaSession.java"

======= 48b9153^:"java/org/apache/catalina/ha/session/DeltaSession.java"

    protected long getLastTimeReplicated() {
======= 48b9153^:"java/org/apache/catalina/ha/session/DeltaSession.java"

    protected void setLastTimeReplicated(long lastTimeReplicated) {
======= 48b9153^:"java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java"

            //check to see if we need to replicate this object isDirty()||complete
            boolean repl = complete || ( (value instanceof ReplicatedMapEntry) && ( (ReplicatedMapEntry) value).isDirty());
======= 48b9153^:"java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java"

            boolean diff = ( (value instanceof ReplicatedMapEntry) && ( (ReplicatedMapEntry) value).isDiffable());
            if (diff) {
======= 48b9153^:"java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java"

======= 48b9153^:"java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java"

======= 48b9153^:"java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java"

======= 48b9153^:"java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java"

======= 48b9153^:"java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java"

======= 48b9153^:"java/org/apache/catalina/tribes/tipis/ReplicatedMapEntry.java"


======= df88ecb^:"java/org/apache/catalina/core/AprLifecycleListener.java"

                    + minor + "." + patch));

======= 518662f^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java"

        //if the evictor thread is supposed to run, start it now
        if (properties.isPoolSweeperEnabled()) {
            poolCleaner = new PoolCleaner(this, properties.getTimeBetweenEvictionRunsMillis());
            poolCleaner.start();
        } //end if
======= 518662f^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java"

======= 518662f^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolProperties.java"

    protected Properties dbProperties = new Properties();
    protected String url = null;
    protected String driverClassName = null;
    protected Boolean defaultAutoCommit = null;
    protected Boolean defaultReadOnly = null;
    protected int defaultTransactionIsolation = DataSourceFactory.UNKNOWN_TRANSACTIONISOLATION;
    protected String defaultCatalog = null;
    protected String connectionProperties;
    protected int initialSize = 10;
    protected int maxActive = DEFAULT_MAX_ACTIVE;
    protected int maxIdle = maxActive;
    protected int minIdle = initialSize;
    protected int maxWait = 30000;
    protected String validationQuery;
    protected String validatorClassName;
    protected Validator validator;
    protected boolean testOnBorrow = false;
    protected boolean testOnReturn = false;
    protected boolean testWhileIdle = false;
    protected int timeBetweenEvictionRunsMillis = 5000;
    protected int numTestsPerEvictionRun;
    protected int minEvictableIdleTimeMillis = 60000;
    protected final boolean accessToUnderlyingConnectionAllowed = true;
    protected boolean removeAbandoned = false;
    protected int removeAbandonedTimeout = 60;
    protected boolean logAbandoned = false;
    protected String name = "Tomcat Connection Pool["+(poolCounter.addAndGet(1))+"-"+System.identityHashCode(PoolProperties.class)+"]";
    protected String password;
    protected String username;
    protected long validationInterval = 30000;
    protected boolean jmxEnabled = true;
    protected String initSQL;
    protected boolean testOnConnect =false;
    protected String jdbcInterceptors=null;
    protected boolean fairQueue = true;
    protected boolean useEquals = true;
    protected int abandonWhenPercentageFull = 0;
    protected long maxAge = 0;
    protected boolean useLock = false;
    protected InterceptorDefinition[] interceptors = null;
    protected int suspectTimeout = 0;
    protected Object dataSource = null;
    protected String dataSourceJNDI = null;
    protected boolean alternateUsernameAllowed = false;
    protected boolean commitOnReturn = false;
    protected boolean rollbackOnReturn = false;
    protected boolean useDisposableConnectionFacade = true;
    protected boolean logValidationErrors = false;
    protected boolean propagateInterruptState = false;
======= 518662f^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/jmx/ConnectionPool.java"

        // TODO Auto-generated method stub
        // TODO Auto-generated method stub
        // TODO Auto-generated method stub
        // TODO Auto-generated method stub
        // TODO Auto-generated method stub
        // TODO Auto-generated method stub
        // TODO Auto-generated method stub
        // TODO Auto-generated method stub
        // TODO Auto-generated method stub
        // TODO Auto-generated method stub
        // TODO Auto-generated method stub
        // TODO Auto-generated method stub
        // TODO Auto-generated method stub
        // TODO Auto-generated method stub
        // TODO Auto-generated method stub
        // TODO Auto-generated method stub
        // TODO Auto-generated method stub
        // TODO Auto-generated method stub
        // TODO Auto-generated method stub
        // TODO Auto-generated method stub
        // TODO Auto-generated method stub
        // TODO Auto-generated method stub
        // TODO Auto-generated method stub
        // TODO Auto-generated method stub
        // TODO Auto-generated method stub
======= 518662f^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/jmx/ConnectionPool.java"

        //no op
======= 518662f^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/jmx/ConnectionPool.java"

        //noop
======= 518662f^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/jmx/ConnectionPool.java"

        //noop
======= 518662f^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/jmx/ConnectionPool.java"

        //noop

======= 7da5fa9^:"java/javax/el/ExpressionFactory.java"

======= 7da5fa9^:"java/javax/el/ExpressionFactory.java"

======= 7da5fa9^:"java/javax/el/ExpressionFactory.java"

        String className = discoverClassName(tccl);
            Class<?> clazz = null;
            if (tccl == null) {
                clazz = Class.forName(className);
            } else {
                clazz = tccl.loadClass(className);
======= 7da5fa9^:"java/javax/el/ExpressionFactory.java"

        } catch (ClassNotFoundException e) {
            throw new ELException(
                    "Unable to find ExpressionFactory of type: " + className,
                    e);
                    "Unable to create ExpressionFactory of type: " + className,
                    "Unable to create ExpressionFactory of type: " + className,
                    "Unable to create ExpressionFactory of type: " + className,
======= 7da5fa9^:"java/javax/el/ExpressionFactory.java"

                    "Unable to create ExpressionFactory of type: " + className,
======= 7da5fa9^:"java/javax/el/ExpressionFactory.java"



======= 67a926c^:"java/org/apache/catalina/startup/WebAnnotationSet.java"

======= 67a926c^:"java/org/apache/catalina/startup/WebAnnotationSet.java"

======= 67a926c^:"java/org/apache/catalina/startup/WebAnnotationSet.java"

======= 67a926c^:"java/org/apache/catalina/startup/WebAnnotationSet.java"

            loadClassAnnotation(context, applicationListeners[i]);
======= 67a926c^:"java/org/apache/catalina/startup/WebAnnotationSet.java"

            loadClassAnnotation(context, (filterDefs[i]).getFilterClass());
======= 67a926c^:"java/org/apache/catalina/startup/WebAnnotationSet.java"

        ClassLoader classLoader = context.getLoader().getClassLoader();
======= 67a926c^:"java/org/apache/catalina/startup/WebAnnotationSet.java"

                try {
                    classClass = classLoader.loadClass(wrapper.getServletClass());
                } catch (ClassNotFoundException e) {
                    // We do nothing
                } catch (NoClassDefFoundError e) {
                    // We do nothing
                }
                loadClassAnnotation(context, wrapper.getServletClass());
======= 67a926c^:"java/org/apache/catalina/startup/WebAnnotationSet.java"

    protected static void loadClassAnnotation(Context context, String fileString) {
        ClassLoader classLoader = context.getLoader().getClassLoader();
        Class<?> classClass = null;
        try {
            classClass = classLoader.loadClass(fileString);
        } catch (ClassNotFoundException e) {
            // We do nothing
        } catch (NoClassDefFoundError e) {
            // We do nothing
        }
        if (classClass == null) {
            return;
        }
======= 67a926c^:"java/org/apache/catalina/startup/WebAnnotationSet.java"

======= 67a926c^:"java/org/apache/catalina/startup/WebAnnotationSet.java"

        if (annotation.type().getCanonicalName().equals("java.lang.String") ||
                annotation.type().getCanonicalName().equals("java.lang.Character") ||
                annotation.type().getCanonicalName().equals("java.lang.Integer") ||
                annotation.type().getCanonicalName().equals("java.lang.Boolean") ||
                annotation.type().getCanonicalName().equals("java.lang.Double") ||
                annotation.type().getCanonicalName().equals("java.lang.Byte") ||
                annotation.type().getCanonicalName().equals("java.lang.Short") ||
                annotation.type().getCanonicalName().equals("java.lang.Long") ||
                annotation.type().getCanonicalName().equals("java.lang.Float")) {
            resource.setName(annotation.name());
            resource.setType(annotation.type().getCanonicalName());
======= 67a926c^:"java/org/apache/catalina/startup/WebAnnotationSet.java"

        } else if (annotation.type().getCanonicalName().equals("javax.xml.rpc.Service")) {
            service.setName(annotation.name());
            service.setType(annotation.type().getCanonicalName());
        } else if (annotation.type().getCanonicalName().equals("javax.sql.DataSource") ||
                annotation.type().getCanonicalName().equals("javax.jms.ConnectionFactory") ||
                annotation.type().getCanonicalName()
                .equals("javax.jms.QueueConnectionFactory") ||
                annotation.type().getCanonicalName()
                .equals("javax.jms.TopicConnectionFactory") ||
                annotation.type().getCanonicalName().equals("javax.mail.Session") ||
                annotation.type().getCanonicalName().equals("java.net.URL") ||
                annotation.type().getCanonicalName()
                .equals("javax.resource.cci.ConnectionFactory") ||
                annotation.type().getCanonicalName().equals("org.omg.CORBA_2_3.ORB") ||
                annotation.type().getCanonicalName().endsWith("ConnectionFactory")) {
            resource.setName(annotation.name());
            resource.setType(annotation.type().getCanonicalName());
======= 67a926c^:"java/org/apache/catalina/startup/WebAnnotationSet.java"

        } else if (annotation.type().getCanonicalName().equals("javax.jms.Queue") ||
                annotation.type().getCanonicalName().equals("javax.jms.Topic")) {
            resource.setName(annotation.name());
            resource.setType(annotation.type().getCanonicalName());
        } else if (annotation.type().getCanonicalName()
                .equals("javax.resource.cci.InteractionSpec") ||
                annotation.type().getCanonicalName()
                .equals("javax.transaction.UserTransaction") ||
            resource.setName(annotation.name());
            resource.setType(annotation.type().getCanonicalName());
======= 67a926c^:"java/org/apache/catalina/startup/WebAnnotationSet.java"


======= 6a8e480^:"java/org/apache/catalina/core/StandardServer.java"

            ClassLoader cl =
                    getCatalina().getParentClassLoader();
            while (cl != ClassLoader.getSystemClassLoader()) {

======= fe16ac2^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java"

                Thread.interrupted();
======= fe16ac2^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java"

                Thread.interrupted();//clear the flag, and bail out
======= fe16ac2^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/DataSourceProxy.java"

======= fe16ac2^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolConfiguration.java"

======= fe16ac2^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolProperties.java"

======= fe16ac2^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolProperties.java"

======= fe16ac2^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/jmx/ConnectionPool.java"

======= fe16ac2^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/jmx/ConnectionPool.java"


======= d5cee34^:"java/org/apache/catalina/core/StandardPipeline.java"

        // Stop this valve if necessary
        if (getState().isAvailable()) {
            if (valve instanceof Lifecycle) {
        }
        try {
            ((Lifecycle) valve).destroy();
        } catch (LifecycleException e) {
            log.error("StandardPipeline.removeValve: destroy: ", e);


======= e092870^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/DataSourceProxy.java"

======= e092870^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolConfiguration.java"

======= e092870^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolProperties.java"

    protected boolean useDisposableConnectionFacade;
======= e092870^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolProperties.java"

======= e092870^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PooledConnection.java"

======= e092870^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PooledConnection.java"

        } catch (Exception ignore) {
            if (log.isDebugEnabled())
                log.debug("Unable to validate object:",ignore);
======= e092870^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/jmx/ConnectionPool.java"


======= 9d687eb^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java"

                throw new SQLException("[" + Thread.currentThread().getName()+"] " +
                    throw new SQLException("[" + Thread.currentThread().getName()+"] " +
======= 9d687eb^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java"

======= 9d687eb^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/jmx/ConnectionPool.java"


======= 0eb38b8^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/SlowQueryReport.java"

======= 0eb38b8^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/SlowQueryReport.java"


======= dcb8808^:"java/org/apache/tomcat/util/net/NioEndpoint.java"


======= 9f8c8d6^:"java/org/apache/catalina/session/StandardManager.java"

            oos = new ObjectOutputStream(new BufferedOutputStream(fos));
            if (fos != null) {
                try {
                    fos.close();
                } catch (IOException f) {
                    // Ignore
            throw e;

======= adbf442^:"java/org/apache/catalina/loader/WebappClassLoader.java"

======= adbf442^:"java/org/apache/catalina/loader/WebappClassLoader.java"

                    if (thread.getClass().getName().equals(
                            "java.util.TimerThread") &&
======= adbf442^:"java/org/apache/catalina/loader/WebappClassLoader.java"

                        Field targetField =
                            thread.getClass().getDeclaredField("target");
                        targetField.setAccessible(true);
                        Object target = targetField.get(thread);
                        if (target != null &&
                                target.getClass().getCanonicalName().equals(
                                "java.util.concurrent.ThreadPoolExecutor.Worker")) {
                            Field executorField =
                                target.getClass().getDeclaredField("this$0");
                            executorField.setAccessible(true);
                            Object executor = executorField.get(target);
                            if (executor instanceof ThreadPoolExecutor) {
                                ((ThreadPoolExecutor) executor).shutdownNow();
======= adbf442^:"java/org/apache/catalina/loader/WebappClassLoader.java"

            Field newTasksMayBeScheduledField =
                thread.getClass().getDeclaredField("newTasksMayBeScheduled");
            newTasksMayBeScheduledField.setAccessible(true);
            Field queueField = thread.getClass().getDeclaredField("queue");
            queueField.setAccessible(true);
            Object queue = queueField.get(thread);
            Method clearMethod = queue.getClass().getDeclaredMethod("clear");
            clearMethod.setAccessible(true);
            synchronized(queue) {
                newTasksMayBeScheduledField.setBoolean(thread, false);
                clearMethod.invoke(queue);
                queue.notify();  // In case queue was already empty.
======= adbf442^:"java/org/apache/catalina/loader/WebappClassLoader.java"

            Class<?> tlmClass =
                Class.forName("java.lang.ThreadLocal$ThreadLocalMap");
                    checkThreadLocalMapForLeaks(threadLocalMap, tableField);
                    threadLocalMap =
                        inheritableThreadLocalsField.get(threads[i]);
                    checkThreadLocalMapForLeaks(threadLocalMap, tableField);
======= adbf442^:"java/org/apache/catalina/loader/WebappClassLoader.java"

======= adbf442^:"java/org/apache/catalina/loader/WebappClassLoader.java"

            if(cl == this) {
======= adbf442^:"java/org/apache/catalina/loader/WebappClassLoader.java"

======= adbf442^:"java/org/apache/catalina/loader/WebappClassLoader.java"


======= faf26da^:"java/org/apache/jasper/compiler/Generator.java"

            // Restore EL context
            out.printil("jspContext.getELContext().putContext(javax.servlet.jsp.JspContext.class,getJspContext());");
======= faf26da^:"java/org/apache/jasper/compiler/Generator.java"

======= faf26da^:"java/org/apache/jasper/compiler/Generator.java"


======= 401c703^:"java/org/apache/catalina/realm/RealmBase.java"

======= 401c703^:"java/org/apache/catalina/realm/RealmBase.java"

======= 401c703^:"java/org/apache/catalina/realm/RealmBase.java"

======= 401c703^:"java/org/apache/catalina/realm/RealmBase.java"

        return(getPrincipal(usercert.getSubjectDN().getName()));
======= 401c703^:"java/org/apache/catalina/realm/RealmBase.java"

======= 401c703^:"java/org/apache/catalina/realm/RealmBase.java"

======= 401c703^:"java/org/apache/catalina/realm/RealmBase.java"


======= 78c02a7^:"java/org/apache/catalina/loader/WebappClassLoader.java"

     * @param jarfile The JAR file to be checked
    protected boolean validateJarFile(File jarfile)
        JarFile jarFile = new JarFile(jarfile);
        for (int i = 0; i < triggers.length; i++) {
            Class<?> clazz = null;
            try {
                if (parent != null) {
                    clazz = parent.loadClass(triggers[i]);
                } else {
                    clazz = Class.forName(triggers[i]);
            } catch (Exception e) {
                clazz = null;
            if (clazz == null)
                continue;
            String name = triggers[i].replace('.', '/') + ".class";
            if (log.isDebugEnabled())
                log.debug(" Checking for " + name);
            JarEntry jarEntry = jarFile.getJarEntry(name);
            if (jarEntry != null) {
                log.info("validateJarFile(" + jarfile +
                    ") - jar not loaded. See Servlet Spec 2.3, "
                    + "section 9.7.2. Offending class: " + name);
                jarFile.close();
                return (false);
        jarFile.close();
        return (true);

======= 7cec4ff^:"java/org/apache/naming/NamingContext.java"

                (sm.getString("namingContext.nameNotBound", name.get(0)));
======= 7cec4ff^:"java/org/apache/naming/NamingContext.java"

                (sm.getString("namingContext.nameNotBound", name.get(0)));
======= 7cec4ff^:"java/org/apache/naming/NamingContext.java"

                (sm.getString("namingContext.nameNotBound", name.get(0)));
======= 7cec4ff^:"java/org/apache/naming/NamingContext.java"

                (sm.getString("namingContext.nameNotBound", name.get(0)));
======= 7cec4ff^:"java/org/apache/naming/NamingContext.java"

                (sm.getString("namingContext.nameNotBound", name.get(0)));
======= 7cec4ff^:"java/org/apache/naming/NamingContext.java"

                throw new NameNotFoundException
                    (sm.getString("namingContext.nameNotBound", name.get(0)));

======= 35958df^:"java/org/apache/jasper/JspC.java"

            if( context==null ) {
                scanFiles( new File( uriRoot ));
            }
            File uriRootF = new File(uriRoot);
            if (!uriRootF.exists() || !uriRootF.isDirectory()) {
                throw new JasperException(
                    Localizer.getMessage("jsp.error.jspc.uriroot_not_dir"));

======= 4f75b2d^:"java/org/apache/tomcat/util/net/NioBlockingSelector.java"

                    att.awaitWriteLatch(writeTimeout,TimeUnit.MILLISECONDS);

======= 1f4663d^:"java/org/apache/catalina/valves/JDBCAccessLogValve.java"

 * When Tomcat is started, a database connection (with autoReconnect option)
 * is created and used for all the log activity. When Tomcat is shutdown, the
 * database connection is closed.
======= 1f4663d^:"java/org/apache/catalina/valves/JDBCAccessLogValve.java"

        props.put("autoReconnect", "true");

======= a01418d^:"java/org/apache/catalina/authenticator/NonLoginAuthenticator.java"

        Principal principal = request.getUserPrincipal();

======= 6399c83^:"java/javax/el/ExpressionFactory.java"

                br = new BufferedReader(new InputStreamReader(is, "UTF-8"));
======= 6399c83^:"java/javax/el/ExpressionFactory.java"


======= 2b1d195^:"java/org/apache/jasper/compiler/JDTCompiler.java"

                    reader = new BufferedReader(new InputStreamReader(is,
                            ctxt.getOptions().getJavaEncoding()));
======= 2b1d195^:"java/org/apache/jasper/compiler/JDTCompiler.java"


======= 683d5c1^:"java/org/apache/catalina/valves/CometConnectionManagerValve.java"

                    CometEventImpl cometEvent = request.getEvent();
                    cometEvent.close();

======= 8293a6e^:"java/org/apache/catalina/startup/HostConfig.java"

======= 8293a6e^:"java/org/apache/catalina/startup/HostConfig.java"

                    ostream =
                        new BufferedOutputStream
                        (new FileOutputStream(xml), 1024);
======= 8293a6e^:"java/org/apache/catalina/startup/HostConfig.java"

                    ostream.close();
                    ostream = null;
                    istream.close();
                    istream = null;
======= 8293a6e^:"java/org/apache/catalina/startup/HostConfig.java"

                    } catch (Throwable t) {
                        ExceptionUtils.handleThrowable(t);
                    } catch (Throwable t) {
                        ExceptionUtils.handleThrowable(t);
======= 8293a6e^:"java/org/apache/catalina/startup/HostConfig.java"

                    } catch (Throwable t) {
                        ExceptionUtils.handleThrowable(t);

======= a30ce07^:"java/org/apache/catalina/users/MemoryUserDatabase.java"

======= a30ce07^:"java/org/apache/catalina/users/MemoryUserDatabase.java"

======= a30ce07^:"java/org/apache/catalina/users/MemoryUserDatabase.java"

======= a30ce07^:"java/org/apache/catalina/users/MemoryUserDatabase.java"

                FileInputStream fis = new FileInputStream(file);
======= a30ce07^:"java/org/apache/catalina/users/MemoryUserDatabase.java"

                    fis.close();
                } catch (Exception e) {
                    try {
                        fis.close();
                    } catch (Throwable t) {
                        ExceptionUtils.handleThrowable(t);
                    throw e;

======= bf0287e^:"java/org/apache/jasper/compiler/JspUtil.java"

======= bf0287e^:"java/org/apache/jasper/compiler/JspUtil.java"

            className = "org.apache.jsp.tag.web.";
======= bf0287e^:"java/org/apache/jasper/compiler/JspUtil.java"

        StringBuilder base = new StringBuilder("org.apache.jsp.tag.meta.");

======= 7c51f61^:"java/org/apache/catalina/startup/Catalina.java"

                FileInputStream fis = new FileInputStream(file);
                fis.close();
======= 7c51f61^:"java/org/apache/catalina/startup/Catalina.java"

        try {
            if (s.getPort()>0) {
                Socket socket = new Socket(s.getAddress(), s.getPort());
                OutputStream stream = socket.getOutputStream();
                stream.close();
                socket.close();
            } else {
                log.error(sm.getString("catalina.stopServer"));
        } catch (IOException e) {
            log.error("Catalina.stop: ", e);
======= 7c51f61^:"java/org/apache/catalina/startup/Catalina.java"

            inputStream.close();
======= 7c51f61^:"java/org/apache/catalina/startup/Catalina.java"


======= 55baca6^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolProperties.java"

======= 55baca6^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolProperties.java"


======= 833e6b1^:"java/org/apache/catalina/filters/ExpiresFilter.java"

 *          &lt;param-name&gt;ExpiresByType text/javascript&lt;/param-name&gt;
======= 833e6b1^:"java/org/apache/catalina/filters/ExpiresFilter.java"

 *       text/javascript=ExpiresConfiguration[startingPoint=ACCESS_TIME, duration=[10 MINUTE]]}]
    &lt;param-name&gt;ExpiresByType text/javascript&lt;/param-name&gt;

======= 2e7f5ab^:"java/org/apache/jasper/compiler/JDTCompiler.java"


======= 3fe64a5^:"java/org/apache/catalina/mbeans/MBeanDumper.java"


======= 34b1a7e^:"java/org/apache/catalina/startup/ContextConfig.java"

======= 34b1a7e^:"java/org/apache/catalina/startup/ContextConfig.java"

======= 34b1a7e^:"java/org/apache/catalina/startup/ContextConfig.java"

                                File webInfCLassDir = new File(
                                processAnnotationsFile(webInfCLassDir, webXml);
======= 34b1a7e^:"java/org/apache/catalina/startup/ContextConfig.java"

                    context.getServletContext().setAttribute(
                            mergedWebXml);

======= bf9bf39^:"java/org/apache/el/lang/ELSupport.java"

        } else if (obj0 instanceof Boolean || obj1 instanceof Boolean) {
            return coerceToBoolean(obj0).equals(coerceToBoolean(obj1));
        } else if (obj0.getClass().isEnum()) {
            return obj0.equals(coerceToEnum(obj1, obj0.getClass()));
        } else if (obj1.getClass().isEnum()) {
            return obj1.equals(coerceToEnum(obj0, obj1.getClass()));
        } else if (obj0 instanceof String || obj1 instanceof String) {
            int lexCompare = coerceToString(obj0).compareTo(coerceToString(obj1));
            return (lexCompare == 0) ? true : false;
        }
        if (isBigDecimalOp(obj0, obj1)) {
        }
        if (isDoubleOp(obj0, obj1)) {
        }
        if (isBigIntegerOp(obj0, obj1)) {
        }
        if (isLongOp(obj0, obj1)) {
======= bf9bf39^:"test/org/apache/el/lang/TestELSupport.java"


======= 4b6d583^:"java/org/apache/catalina/core/StandardServer.java"

======= 4b6d583^:"java/org/apache/catalina/core/StandardServer.java"

======= 4b6d583^:"java/org/apache/catalina/core/StandardServer.java"

======= 4b6d583^:"java/org/apache/catalina/util/ExtensionValidator.java"

        addFolderList("catalina.ext.dirs");

======= 6f766be^:"java/org/apache/coyote/ajp/AbstractAjpProcessor.java"


======= fbf9166^:"java/org/apache/catalina/mbeans/MBeanDumper.java"

======= fbf9166^:"java/org/apache/catalina/mbeans/MBeanDumper.java"

                            " " + attName, t);

======= 660513c^:"java/org/apache/catalina/core/StandardHostValve.java"

        request.setPathInfo(errorPage.getLocation());

======= 2fd117b^:"java/org/apache/catalina/connector/OutputBuffer.java"

======= 2fd117b^:"java/org/apache/catalina/connector/OutputBuffer.java"

        gotEnc = false;
        enc = null;
======= 2fd117b^:"java/org/apache/catalina/connector/Response.java"

        outputBuffer.reset();
======= 2fd117b^:"test/org/apache/catalina/connector/TestOutputBuffer.java"

======= 2fd117b^:"test/org/apache/catalina/connector/TestOutputBuffer.java"


======= 49a52cb^:"java/org/apache/catalina/core/StandardEngine.java"


======= f4896de^:"java/org/apache/catalina/startup/ContextConfig.java"

======= f4896de^:"java/org/apache/catalina/startup/ContextConfig.java"

        new LinkedHashMap<ServletContainerInitializer, Set<Class<?>>>();
        new HashMap<Class<?>, Set<ServletContainerInitializer>>();
======= f4896de^:"java/org/apache/catalina/startup/ContextConfig.java"

======= f4896de^:"java/org/apache/catalina/startup/ContextConfig.java"

======= f4896de^:"java/org/apache/catalina/startup/ContextConfig.java"

        // No choice but to load the class
            return;
            return;
            return;
            return;
        }
        if (clazz.isAnnotation()) {
            // Skip
            return;
        }
        boolean match = false;
        for (Map.Entry<Class<?>, Set<ServletContainerInitializer>> entry :
                typeInitializerMap.entrySet()) {
            if (entry.getKey().isAnnotation()) {
                AnnotationEntry[] annotationEntries = javaClass.getAnnotationEntries();
                for (AnnotationEntry annotationEntry : annotationEntries) {
                    if (entry.getKey().getName().equals(
                        getClassName(annotationEntry.getAnnotationType()))) {
                        match = true;
                        break;
                    }
                }
            } else if (entry.getKey().isAssignableFrom(clazz)) {
                match = true;
            }
            if (match) {
                for (ServletContainerInitializer sci : entry.getValue()) {
                    initializerClassMap.get(sci).add(clazz);
                }
                match = false;
            }
======= f4896de^:"java/org/apache/catalina/startup/ContextConfig.java"

======= f4896de^:"java/org/apache/tomcat/util/bcel/classfile/JavaClass.java"

======= f4896de^:"test/org/apache/catalina/startup/TestContextConfigAnnotation.java"


======= f2edc92^:"java/org/apache/coyote/http11/AbstractOutputBuffer.java"


======= ee0562d^:"java/org/apache/coyote/http11/AbstractOutputBuffer.java"

======= ee0562d^:"java/org/apache/coyote/http11/AbstractOutputBuffer.java"

======= ee0562d^:"java/org/apache/coyote/http11/AbstractOutputBuffer.java"

======= ee0562d^:"java/org/apache/coyote/http11/AbstractOutputBuffer.java"

======= ee0562d^:"java/org/apache/coyote/http11/AbstractOutputBuffer.java"


======= 3277494^:"java/org/apache/catalina/startup/ContextConfig.java"

======= 3277494^:"java/org/apache/catalina/startup/ContextConfig.java"

                        NamingEnumeration<Binding> listBindings =
                            context.getResources().listBindings("/WEB-INF/classes");
                        while (listBindings.hasMoreElements()) {
                                File webInfCLassDir =
                                    new File(
  metadata-complete="true">

======= 2dd8a40^:"java/org/apache/catalina/startup/TldRuleSet.java"

            tldConfig.addApplicationListener(text);

======= 9722128^:"java/org/apache/catalina/ant/AbstractCatalinaTask.java"

======= 9722128^:"java/org/apache/catalina/ant/AbstractCatalinaTask.java"

                Base64.encode(input.getBytes(Charset.defaultCharset()));
======= 9722128^:"java/org/apache/catalina/authenticator/DigestAuthenticator.java"

======= 9722128^:"java/org/apache/catalina/authenticator/DigestAuthenticator.java"

======= 9722128^:"java/org/apache/catalina/authenticator/DigestAuthenticator.java"

                    ipTimeKey.getBytes(Charset.defaultCharset()));
======= 9722128^:"java/org/apache/catalina/authenticator/DigestAuthenticator.java"

                        serverIpTimeKey.getBytes(Charset.defaultCharset()));
======= 9722128^:"java/org/apache/catalina/authenticator/DigestAuthenticator.java"

                buffer = md5Helper.digest(a2.getBytes(Charset.defaultCharset()));
======= 9722128^:"java/org/apache/catalina/realm/JNDIRealm.java"

======= 9722128^:"java/org/apache/catalina/realm/JNDIRealm.java"

======= 9722128^:"java/org/apache/catalina/realm/JNDIRealm.java"

                    md.update(credentials.getBytes(Charset.defaultCharset()));
======= 9722128^:"java/org/apache/catalina/realm/JNDIRealm.java"

                    md.update(credentials.getBytes(Charset.defaultCharset()));
                        pwbc.append(password.getBytes(Charset.defaultCharset()),
======= 9722128^:"java/org/apache/catalina/realm/RealmBase.java"

            return Charset.defaultCharset();
======= 9722128^:"java/org/apache/catalina/servlets/WebdavServlet.java"

======= 9722128^:"java/org/apache/catalina/servlets/WebdavServlet.java"

======= 9722128^:"java/org/apache/catalina/servlets/WebdavServlet.java"

                    lockTokenStr.getBytes(Charset.defaultCharset())));
======= 9722128^:"java/org/apache/catalina/util/RequestUtil.java"

        // encoding is not specified, let it use platform default
                bytes = str.getBytes(Charset.defaultCharset());
======= 9722128^:"java/org/apache/catalina/valves/AccessLogValve.java"

            charset = Charset.defaultCharset();
======= 9722128^:"java/org/apache/catalina/valves/SSLValve.java"

======= 9722128^:"java/org/apache/catalina/valves/SSLValve.java"

======= 9722128^:"java/org/apache/catalina/valves/SSLValve.java"

                    strcerts.getBytes(Charset.defaultCharset()));
======= 9722128^:"java/org/apache/coyote/http11/filters/BufferedInputFilter.java"

======= 9722128^:"java/org/apache/coyote/http11/filters/BufferedInputFilter.java"

        ENCODING.setBytes(ENCODING_NAME.getBytes(Charset.defaultCharset()), 0,
======= 9722128^:"java/org/apache/coyote/http11/filters/ChunkedInputFilter.java"

======= 9722128^:"java/org/apache/coyote/http11/filters/ChunkedInputFilter.java"

        ENCODING.setBytes(ENCODING_NAME.getBytes(Charset.defaultCharset()), 0,
======= 9722128^:"java/org/apache/coyote/http11/filters/IdentityInputFilter.java"

======= 9722128^:"java/org/apache/coyote/http11/filters/IdentityInputFilter.java"

        ENCODING.setBytes(ENCODING_NAME.getBytes(Charset.defaultCharset()), 0,
======= 9722128^:"java/org/apache/coyote/http11/filters/VoidInputFilter.java"

======= 9722128^:"java/org/apache/coyote/http11/filters/VoidInputFilter.java"

        ENCODING.setBytes(ENCODING_NAME.getBytes(Charset.defaultCharset()), 0,
======= 9722128^:"java/org/apache/jasper/Constants.java"

======= 9722128^:"java/org/apache/jasper/Constants.java"

======= 9722128^:"java/org/apache/jasper/compiler/SmapUtil.java"

======= 9722128^:"java/org/apache/jasper/compiler/SmapUtil.java"

                    smap[i+1].getBytes(Charset.defaultCharset()));
======= 9722128^:"java/org/apache/naming/resources/Constants.java"

======= 9722128^:"java/org/apache/naming/resources/Constants.java"

======= 9722128^:"java/org/apache/naming/resources/ProxyDirContext.java"

======= 9722128^:"java/org/apache/naming/resources/ProxyDirContext.java"

                (object.toString().getBytes(Charset.defaultCharset())));
======= 9722128^:"java/org/apache/naming/resources/ProxyDirContext.java"

                        (object.toString().getBytes(Charset.defaultCharset())));
======= 9722128^:"java/org/apache/naming/resources/ProxyDirContext.java"

                        (object.toString().getBytes(Charset.defaultCharset())));
======= 9722128^:"java/org/apache/tomcat/util/buf/MessageBytes.java"

======= 9722128^:"java/org/apache/tomcat/util/buf/MessageBytes.java"

        byte bb[] = strValue.getBytes(Charset.defaultCharset());

======= b553519^:"java/org/apache/catalina/loader/WebappLoader.java"

======= b553519^:"java/org/apache/catalina/loader/WebappLoader.java"

                    repository = repository.substring(7);
                    repository = repository.substring(5);
======= b553519^:"java/org/apache/catalina/loader/WebappLoader.java"


======= bd478e5^:"java/org/apache/catalina/manager/JMXProxyServlet.java"

======= bd478e5^:"java/org/apache/catalina/manager/JMXProxyServlet.java"

======= bd478e5^:"java/org/apache/catalina/manager/JMXProxyServlet.java"

            writer.println("Error - " + ex.toString());
======= bd478e5^:"java/org/apache/catalina/manager/JMXProxyServlet.java"

            writer.println("Error - " + ex.toString());
======= bd478e5^:"java/org/apache/catalina/manager/JMXProxyServlet.java"

        } catch (Exception e) {
            writer.println("Error - " + e.toString());
======= bd478e5^:"java/org/apache/catalina/manager/JMXProxyServlet.java"


======= 53615e5^:"java/org/apache/catalina/startup/ContextConfig.java"

======= 53615e5^:"java/org/apache/catalina/startup/ContextConfig.java"

======= 53615e5^:"java/org/apache/catalina/startup/ContextConfig.java"

    implements LifecycleListener {
======= 53615e5^:"java/org/apache/catalina/startup/ContextConfig.java"

                File f = new File(new URI(globalWebXml.getSystemId()));
                globalTimeStamp = f.lastModified();
            } catch (URISyntaxException e) {
                File f = new File(new URI(hostWebXml.getSystemId()));
                hostTimeStamp = f.lastModified();
            } catch (URISyntaxException e) {

======= 3c8f40f^:"java/org/apache/el/parser/AstValue.java"

            values = ((AstMethodParameters)
                    this.jjtGetChild(2)).getParameters(ctx);
======= 3c8f40f^:"java/org/apache/el/parser/AstValue.java"

        if (this.children.length > 2
                && this.jjtGetChild(2) instanceof AstMethodParameters) {
            return true;
======= 3c8f40f^:"test/org/apache/el/TestMethodExpressionImpl.java"


======= c38ed95^:"java/org/apache/catalina/startup/Tomcat.java"

 * behavior of the <pre>addWebapp</pre> methods, you may want to call three
 * methods of this class: {@link #getDefaultRealm()},
 * {@link #noDefaultWebXmlPath()}, and {@link #getDefaultWebXmlListener()}.
======= c38ed95^:"java/org/apache/catalina/startup/Tomcat.java"

    // Default in-memory realm, will be set by default on
    // created contexts. Can be replaced with setRealm() on
    // the context.
    protected Realm defaultRealm;
======= c38ed95^:"java/org/apache/catalina/startup/Tomcat.java"

     * Set a custom realm for auth. If not called, a simple
     * default will be used, using an internal map.
     *
     * Must be called before adding a context.
     */
    public void setDefaultRealm(Realm realm) {
        defaultRealm = realm;
    }
    /**
======= c38ed95^:"java/org/apache/catalina/startup/Tomcat.java"

======= c38ed95^:"java/org/apache/catalina/startup/Tomcat.java"

        if (defaultRealm == null) {
            initSimpleAuth();
        }
        ctx.setRealm(defaultRealm);
======= c38ed95^:"java/org/apache/catalina/startup/Tomcat.java"

    /**
     * For complex configurations, this accessor allows callers of this class
     * to obtain the simple realm created by default.
     * @return the simple in-memory realm created by default.
     */
    public Realm getDefaultRealm() {
        if (defaultRealm == null) {
            initSimpleAuth();
        }
        return defaultRealm;
    }
     * Initialize an in-memory realm. You can replace it
     * for contexts with a real one.
    protected void initSimpleAuth() {
        defaultRealm = new RealmBase() {
======= c38ed95^:"test/org/apache/catalina/mbeans/TestRegistration.java"


======= ee2a461^:"java/org/apache/catalina/loader/WebappClassLoader.java"

        "javax.servlet.Servlet"                     // Servlet API
======= ee2a461^:"java/org/apache/catalina/loader/WebappClassLoader.java"


======= f277b14^:"java/org/apache/el/parser/AstIdentifier.java"

======= f277b14^:"java/org/apache/el/parser/AstIdentifier.java"

======= f277b14^:"test/org/apache/el/TestValueExpressionImpl.java"


======= 9c7ec4c^:"java/org/apache/catalina/connector/OutputBuffer.java"

======= 9c7ec4c^:"java/org/apache/catalina/connector/OutputBuffer.java"

        conv.flushBuffer();
======= 9c7ec4c^:"java/org/apache/catalina/connector/OutputBuffer.java"

        conv.flushBuffer();
======= 9c7ec4c^:"java/org/apache/catalina/connector/OutputBuffer.java"

        conv.flushBuffer();
======= 9c7ec4c^:"java/org/apache/catalina/connector/OutputBuffer.java"

        conv.flushBuffer();
======= 9c7ec4c^:"java/org/apache/catalina/connector/OutputBuffer.java"


======= 3787242^:"java/org/apache/catalina/startup/Tomcat.java"

        silence(contextPath);
======= 3787242^:"java/org/apache/catalina/startup/Tomcat.java"

        silence(url);
======= 3787242^:"java/org/apache/catalina/startup/Tomcat.java"

    private void silence(String ctx) {
        base += getHost().getName();

======= addd522^:"java/org/apache/catalina/startup/ContextConfig.java"

            log.warn(sm.getString("contextConfig.invalidSciHandlesTypes",
            log.warn(sm.getString("contextConfig.invalidSciHandlesTypes",
            log.warn(sm.getString("contextConfig.invalidSciHandlesTypes",

======= 9f52382^:"java/org/apache/catalina/valves/AccessLogValve.java"


======= 8b6d341^:"java/org/apache/catalina/authenticator/NonLoginAuthenticator.java"

======= 8b6d341^:"java/org/apache/catalina/authenticator/NonLoginAuthenticator.java"

     * Authenticate the user making this request, based on the specified
     * login configuration.  Return <code>true</code> if any specified
     * constraint has been satisfied, or <code>false</code> if we have
     * created a response challenge already.
     * @param request Request we are processing
     * @param response Response we are populating
     * @param config    Login configuration describing how authentication
     *              should be performed
======= 8b6d341^:"java/org/apache/catalina/authenticator/NonLoginAuthenticator.java"

        /*  Associating this request's session with an SSO would allow
            coordinated session invalidation, but should the session for
            a webapp that the user didn't log into be invalidated when
            another session is logged out?
        String ssoId = (String) request.getNote(Constants.REQ_SSOID_NOTE);
        if (ssoId != null)
            associate(ssoId, getSession(request, true));
        */
        if (containerLog.isDebugEnabled()) {
            containerLog.debug("User authentication is not required");
        return (true);

======= 34b011b^:"java/org/apache/tomcat/util/http/Parameters.java"

======= 34b011b^:"java/org/apache/tomcat/util/http/Parameters.java"

            tmpValue.setBytes(bytes, valueStart, valueEnd - valueStart);
======= 34b011b^:"java/org/apache/tomcat/util/http/Parameters.java"

                    origValue.append(bytes, valueStart, valueEnd - valueStart);
======= 34b011b^:"java/org/apache/tomcat/util/http/Parameters.java"

                if (decodeValue) {
                    urlDecode(tmpValue);
                tmpValue.setCharset(charset);
                value = tmpValue.toString();

======= 6f3cafe^:"java/org/apache/catalina/tribes/transport/bio/util/FastQueue.java"

    private int size = 0;

======= 8983419^:"java/org/apache/catalina/tribes/transport/bio/util/FastQueue.java"

    private boolean checkLock = false;
    private boolean inAdd = false;
    private boolean inRemove = false;
    private boolean inMutex = false;

======= d69fb8e^:"java/org/apache/catalina/tribes/transport/bio/util/FastQueue.java"

    private boolean enabled = true;
======= d69fb8e^:"java/org/apache/catalina/tribes/transport/bio/util/FastQueue.java"

        if (!enabled) {

======= 33e48db^:"java/org/apache/catalina/startup/ContextConfig.java"

            if (docBase.toLowerCase(Locale.ENGLISH).endsWith(".war")) {
                // TODO - This is never executed. Bug or code to delete?

======= 22e7e15^:"java/org/apache/catalina/core/ApplicationJspConfigDescriptor.java"

======= 22e7e15^:"java/org/apache/catalina/core/ApplicationJspConfigDescriptor.java"

        new HashSet<JspPropertyGroupDescriptor>();
======= 22e7e15^:"java/org/apache/catalina/deploy/WebXml.java"

        new HashSet<JspPropertyGroup>();

======= 9403e4f^:"java/org/apache/catalina/tribes/transport/nio/NioReceiver.java"

======= 9403e4f^:"java/org/apache/catalina/tribes/transport/nio/NioReceiver.java"

                Iterator<SelectionKey> it = (selector!=null)?selector.selectedKeys().iterator():null;
======= 9403e4f^:"java/org/apache/catalina/tribes/transport/nio/NioReceiver.java"

                    if (selector!=null) it.remove();

======= 63f708a^:"java/org/apache/catalina/connector/Connector.java"

======= 63f708a^:"java/org/apache/catalina/connector/Connector.java"

    protected int port = 0;
======= 63f708a^:"java/org/apache/catalina/connector/Connector.java"

======= 63f708a^:"java/org/apache/catalina/connector/Connector.java"

     * Return the port number on which we listen for requests.
======= 63f708a^:"java/org/apache/catalina/connector/Connector.java"

======= 63f708a^:"java/org/apache/catalina/connector/Connector.java"

        sb.append(getPort());
======= 63f708a^:"java/org/apache/catalina/connector/Connector.java"

        if (getPort() < 1) {
======= 63f708a^:"java/org/apache/catalina/connector/Connector.java"

        sb.append(getPort());
          description="The port number on which we listen for requests"
======= 63f708a^:"java/org/apache/coyote/AbstractProtocol.java"

======= 63f708a^:"java/org/apache/coyote/AbstractProtocol.java"

======= 63f708a^:"java/org/apache/coyote/AbstractProtocol.java"

======= 63f708a^:"java/org/apache/coyote/AbstractProtocol.java"

======= 63f708a^:"java/org/apache/coyote/AbstractProtocol.java"

        name.append(endpoint.getPort());
======= 63f708a^:"java/org/apache/coyote/AbstractProtocol.java"

        name.append(getPort());
======= 63f708a^:"java/org/apache/coyote/AbstractProtocol.java"

======= 63f708a^:"java/org/apache/tomcat/util/net/AbstractEndpoint.java"

======= 63f708a^:"java/org/apache/tomcat/util/net/AprEndpoint.java"

======= 63f708a^:"java/org/apache/tomcat/util/net/AprEndpoint.java"

    // --------------------------------------------------------- Public Methods
======= 63f708a^:"java/org/apache/tomcat/util/net/JIoEndpoint.java"

======= 63f708a^:"java/org/apache/tomcat/util/net/NioEndpoint.java"

======= 63f708a^:"java/org/apache/tomcat/util/net/NioEndpoint.java"

======= 63f708a^:"test/org/apache/catalina/authenticator/TestFormAuthenticator.java"

            setPort(getPort());
======= 63f708a^:"test/org/apache/catalina/connector/TestConnector.java"

======= 63f708a^:"test/org/apache/catalina/connector/TestConnector.java"

======= 63f708a^:"test/org/apache/catalina/connector/TestRequest.java"

        client.setPort(getPort());
======= 63f708a^:"test/org/apache/catalina/connector/TestRequest.java"

        client.setPort(getPort());
======= 63f708a^:"test/org/apache/catalina/connector/TestRequest.java"

======= 63f708a^:"test/org/apache/catalina/connector/TestRequest.java"

        client.setPort(getPort());
======= 63f708a^:"test/org/apache/catalina/connector/TestRequest.java"

======= 63f708a^:"test/org/apache/catalina/core/TestStandardContext.java"

        Bug46243Client client = new Bug46243Client();
        client.setPort(getPort());
======= 63f708a^:"test/org/apache/catalina/core/TestStandardContext.java"

======= 63f708a^:"test/org/apache/catalina/core/TestStandardContext.java"

        client.setPort(getPort());
======= 63f708a^:"test/org/apache/catalina/core/TestStandardContext.java"

======= 63f708a^:"test/org/apache/catalina/core/TestSwallowAbortedUploads.java"

        client.setPort(getPort());
======= 63f708a^:"test/org/apache/catalina/core/TestSwallowAbortedUploads.java"

        client.setPort(getPort());
======= 63f708a^:"test/org/apache/catalina/core/TestSwallowAbortedUploads.java"

======= 63f708a^:"test/org/apache/catalina/core/TestSwallowAbortedUploads.java"

======= 63f708a^:"test/org/apache/catalina/filters/TestExpiresFilter.java"

                    "http://localhost:" + tomcat.getConnector().getPort() +
======= 63f708a^:"test/org/apache/catalina/filters/TestRemoteIpFilter.java"

        HttpURLConnection httpURLConnection = (HttpURLConnection) new URL("http://localhost:" + tomcat.getConnector().getPort() + "/test")
                .openConnection();
======= 63f708a^:"test/org/apache/catalina/mbeans/TestRegistration.java"

        expected.addAll(Arrays.asList(connectorMBeanNames(Integer.toString(getPort()), protocol)));
======= 63f708a^:"test/org/apache/catalina/servlets/TestDefaultServlet.java"

        TestCustomErrorClient client = new TestCustomErrorClient();
        client.setPort(getPort());
======= 63f708a^:"test/org/apache/catalina/servlets/TestDefaultServlet.java"

        TestCustomErrorClient client = new TestCustomErrorClient();
        client.setPort(getPort());
======= 63f708a^:"test/org/apache/catalina/servlets/TestDefaultServlet.java"

======= 63f708a^:"test/org/apache/catalina/startup/SimpleHttpClient.java"

    public void setPort(int thePort) {
======= 63f708a^:"test/org/apache/catalina/startup/TomcatBaseTest.java"

    private static int port = 8000;
======= 63f708a^:"test/org/apache/catalina/startup/TomcatBaseTest.java"

        return port;
    }
    /**
     * Sub-classes may want to add connectors on a new port
     */
    public int getNextPort() {
        port++;
        return getPort();
======= 63f708a^:"test/org/apache/catalina/startup/TomcatBaseTest.java"

        // If each test is running on same port - they
        // may interfere with each other
        connector.setPort(getNextPort());
======= 63f708a^:"test/org/apache/coyote/http11/TestAbstractHttp11Processor.java"

        Client client = new Client();
        client.setPort(getPort());
======= 63f708a^:"test/org/apache/coyote/http11/TestAbstractHttp11Processor.java"

        Client client = new Client();
        client.setPort(getPort());
======= 63f708a^:"test/org/apache/coyote/http11/TestAbstractHttp11Processor.java"

        Client client = new Client();
        client.setPort(getPort());
======= 63f708a^:"test/org/apache/coyote/http11/TestAbstractHttp11Processor.java"

        Client client = new Client();
        client.setPort(getPort());
======= 63f708a^:"test/org/apache/coyote/http11/TestAbstractHttp11Processor.java"

        Client client = new Client();
        client.setPort(getPort());
======= 63f708a^:"test/org/apache/coyote/http11/TestAbstractHttp11Processor.java"

        final Client client = new Client();
        client.setPort(getPort());
======= 63f708a^:"test/org/apache/coyote/http11/TestAbstractHttp11Processor.java"

======= 63f708a^:"test/org/apache/coyote/http11/TestInternalInputBuffer.java"

        client.setPort(getPort());
======= 63f708a^:"test/org/apache/coyote/http11/TestInternalInputBuffer.java"

======= 63f708a^:"test/org/apache/coyote/http11/TestInternalInputBuffer.java"

        client.setPort(getPort());
======= 63f708a^:"test/org/apache/coyote/http11/TestInternalInputBuffer.java"

        client.setPort(getPort());
======= 63f708a^:"test/org/apache/coyote/http11/TestInternalInputBuffer.java"

        client.setPort(getPort());
======= 63f708a^:"test/org/apache/coyote/http11/TestInternalInputBuffer.java"

        client.setPort(getPort());
======= 63f708a^:"test/org/apache/coyote/http11/TestInternalInputBuffer.java"

        client.setPort(getPort());
======= 63f708a^:"test/org/apache/coyote/http11/TestInternalInputBuffer.java"

======= 63f708a^:"test/org/apache/coyote/http11/filters/TestChunkedInputFilter.java"

        TrailerClient client = new TrailerClient();
        client.setPort(getPort());
======= 63f708a^:"test/org/apache/coyote/http11/filters/TestChunkedInputFilter.java"

        TrailerClient client = new TrailerClient();
        client.setPort(getPort());
======= 63f708a^:"test/org/apache/coyote/http11/filters/TestChunkedInputFilter.java"

        TrailerClient client = new TrailerClient();
        client.setPort(getPort());
======= 63f708a^:"test/org/apache/coyote/http11/filters/TestChunkedInputFilter.java"

======= 63f708a^:"test/org/apache/tomcat/util/http/TestCookiesAllowEquals.java"

            setPort(tomcat.getConnector().getPort());
======= 63f708a^:"test/org/apache/tomcat/util/http/TestCookiesAllowHttpSeps.java"

            setPort(tomcat.getConnector().getPort());
======= 63f708a^:"test/org/apache/tomcat/util/http/TestCookiesAllowNameOnly.java"

            setPort(tomcat.getConnector().getPort());
======= 63f708a^:"test/org/apache/tomcat/util/http/TestCookiesDisallowEquals.java"

            setPort(tomcat.getConnector().getPort());
======= 63f708a^:"test/org/apache/tomcat/util/net/TestXxxEndpoint.java"

        int port = getPort();
      to a particular port number on a particular IP address.</p>
      to a particular port number on a particular IP address.</p>

======= f3a7cd9^:"java/org/apache/tomcat/util/http/mapper/Mapper.java"

        newHost.object = realHost;
======= f3a7cd9^:"test/org/apache/tomcat/util/http/mapper/TestMapper.java"

======= f3a7cd9^:"test/org/apache/tomcat/util/http/mapper/TestMapper.java"

        // Check we have the right number (add 16 but one is a duplicate)
        assertEquals(15, mapper.hosts.length);
        assertEquals("blah7", mapper.hosts[3].object);
======= f3a7cd9^:"test/org/apache/tomcat/util/http/mapper/TestMapper.java"

======= f3a7cd9^:"test/org/apache/tomcat/util/http/mapper/TestMapper.java"

======= f3a7cd9^:"test/org/apache/tomcat/util/http/mapper/TestMapper.java"


======= 574af73^:"java/org/apache/catalina/loader/WebappClassLoader.java"

 * <strong>IMPLEMENTATION NOTE</strong> - This class loader faithfully follows
 * the delegation model recommended in the specification. The system class
 * from the webapp repository.
======= 574af73^:"java/org/apache/catalina/loader/WebappClassLoader.java"

     * found locally.
======= 574af73^:"java/org/apache/catalina/loader/WebappClassLoader.java"


======= c2001ce^:"java/org/apache/catalina/core/AprLifecycleListener.java"

======= c2001ce^:"java/org/apache/catalina/core/AprLifecycleListener.java"

======= c2001ce^:"java/org/apache/catalina/core/AprLifecycleListener.java"

                        log.info(sm.getString("aprListener.sslInit"));
======= c2001ce^:"java/org/apache/catalina/core/AprLifecycleListener.java"

======= c2001ce^:"java/org/apache/catalina/core/AprLifecycleListener.java"

======= c2001ce^:"java/org/apache/catalina/core/AprLifecycleListener.java"

======= c2001ce^:"java/org/apache/catalina/core/AprLifecycleListener.java"

======= c2001ce^:"java/org/apache/catalina/core/AprLifecycleListener.java"

======= c2001ce^:"java/org/apache/tomcat/jni/SSL.java"


======= b7f5c7e^:"java/org/apache/catalina/core/ApplicationContext.java"

                resources.lookup(path);

======= d7af36d^:"java/org/apache/catalina/mbeans/MBeanFactory.java"

            context.setConfigFile(configFile.toURI().toURL());

======= 62ff013^:"java/org/apache/jasper/JspCompilationContext.java"

======= 62ff013^:"java/org/apache/jasper/compiler/JspUtil.java"

======= 62ff013^:"java/org/apache/jasper/compiler/JspUtil.java"

                err.jspError("jsp.error.file.not.found", fname);
======= 62ff013^:"java/org/apache/jasper/compiler/JspUtil.java"

            err.jspError("jsp.error.file.not.found", fname);

======= b90c0a1^:"java/org/apache/catalina/connector/CoyoteAdapter.java"

======= b90c0a1^:"java/org/apache/catalina/connector/CoyoteAdapter.java"

                if (postParseSuccess) {
======= b90c0a1^:"test/org/apache/catalina/comet/TestCometProcessor.java"

======= b90c0a1^:"test/org/apache/catalina/comet/TestCometProcessor.java"

======= b90c0a1^:"test/org/apache/catalina/comet/TestCometProcessor.java"

        Tomcat.addServlet(root, "comet", new SimpleCometServlet());
======= b90c0a1^:"test/org/apache/catalina/comet/TestCometProcessor.java"

        // Validate response
        assertEquals("HTTP/1.1 200 OK", response[0]);
        assertEquals("Server: Apache-Coyote/1.1", response[1]);
        assertTrue(response[2].startsWith("Set-Cookie: JSESSIONID="));
        assertEquals("Content-Type: text/plain;charset=ISO-8859-1", response[3]);
        assertEquals("Transfer-Encoding: chunked", response[4]);
        assertTrue(response[5].startsWith("Date: "));
        assertEquals("", response[6]);
        assertEquals("7", response[7]);
        assertEquals("BEGIN", response[8]);
        assertEquals("", response[9]);
        assertEquals("17", response[10]);
        assertEquals("Client: READ: 4 bytes", response[11]);
        assertEquals("", response[12]);
        assertEquals("17", response[13]);
        assertEquals("Client: READ: 4 bytes", response[14]);
        assertEquals("", response[15]);
        assertEquals("17", response[16]);
        assertEquals("Client: READ: 4 bytes", response[17]);
        assertEquals("", response[18]);
        assertEquals("17", response[19]);
        assertEquals("Client: READ: 4 bytes", response[20]);
        assertEquals("", response[21]);
        assertEquals("d", response[22]);
        assertEquals("Client: END", response[23]);
        assertEquals("", response[24]);
        assertEquals("0", response[25]);
        // Expect 26 lines
        assertEquals(26, response.length);
======= b90c0a1^:"test/org/apache/catalina/comet/TestCometProcessor.java"

======= b90c0a1^:"test/org/apache/catalina/comet/TestCometProcessor.java"

======= b90c0a1^:"test/org/apache/catalina/comet/TestCometProcessor.java"


======= e70797e^:"java/org/apache/catalina/connector/Response.java"

        if (leadingSlash || !hasScheme(location)) {

======= 3ab3757^:"java/org/apache/catalina/Context.java"

======= 3ab3757^:"java/org/apache/catalina/connector/Response.java"

            PrintWriter writer = getWriter();
            writer.print(sm.getString("coyoteResponse.sendRedirect.note",
                    RequestUtil.filter(absolute)));
            flushBuffer();
======= 3ab3757^:"java/org/apache/catalina/core/StandardContext.java"


======= d6d1c6f^:"java/org/apache/catalina/filters/RemoteAddrFilter.java"

        processCometEvent(event.getHttpServletRequest().getRemoteHost(),
======= d6d1c6f^:"java/org/apache/catalina/filters/RemoteAddrFilter.java"

    

======= b080c7e^:"webapps/examples/WEB-INF/classes/async/Async0.java"

            req.getAsyncContext().complete();

======= a450d2c^:"java/org/apache/catalina/core/StandardWrapperValve.java"


======= 136097e^:"java/org/apache/tomcat/util/net/AprEndpoint.java"

                long s = System.currentTimeMillis() + 30000;
                while (acceptors[i].isAlive()) {

======= 18792f4^:"java/org/apache/catalina/connector/CoyoteAdapter.java"

        boolean create = false;
            create = true;
======= 18792f4^:"java/org/apache/catalina/connector/CoyoteAdapter.java"

        }
        
        if (create) {
======= 18792f4^:"java/org/apache/coyote/ajp/AbstractAjpProcessor.java"

                        adapter.log(request, response, 0);
======= 18792f4^:"java/org/apache/coyote/ajp/AbstractAjpProcessor.java"

            adapter.log(request, response, 0);
======= 18792f4^:"java/org/apache/coyote/ajp/AbstractAjpProcessor.java"

======= 18792f4^:"java/org/apache/coyote/ajp/AbstractAjpProcessor.java"

                adapter.log(request, response, 0);
======= 18792f4^:"java/org/apache/coyote/ajp/AbstractAjpProcessor.java"

                    adapter.log(request, response, 0);
======= 18792f4^:"java/org/apache/coyote/ajp/AjpAprProcessor.java"

            if (!cping && endpoint.isPaused()) {
======= 18792f4^:"java/org/apache/coyote/ajp/AjpNioProcessor.java"

            if (!cping && endpoint.isPaused()) {
======= 18792f4^:"java/org/apache/coyote/ajp/AjpProcessor.java"

            if (!cping && endpoint.isPaused()) {
======= 18792f4^:"java/org/apache/coyote/http11/AbstractHttp11Processor.java"

                    adapter.log(request, response, 0);
======= 18792f4^:"java/org/apache/coyote/http11/AbstractHttp11Processor.java"

            adapter.log(request, response, 0);
======= 18792f4^:"java/org/apache/coyote/http11/AbstractHttp11Processor.java"

                    adapter.log(request, response, 0);
======= 18792f4^:"java/org/apache/coyote/http11/AbstractHttp11Processor.java"

                adapter.log(request, response, 0);
======= 18792f4^:"java/org/apache/coyote/http11/AbstractHttp11Processor.java"

            adapter.log(request, response, 0);
======= 18792f4^:"java/org/apache/coyote/http11/AbstractHttp11Processor.java"

======= 18792f4^:"java/org/apache/coyote/http11/AbstractHttp11Processor.java"

                    adapter.log(request, response, 0);
======= 18792f4^:"java/org/apache/coyote/http11/AbstractHttp11Processor.java"

            adapter.log(request, response, 0);

======= 73a6e56^:"test/org/apache/catalina/startup/TomcatBaseTest.java"

======= 73a6e56^:"test/org/apache/catalina/startup/TomcatBaseTest.java"

        tomcat = new Tomcat();
======= 73a6e56^:"test/org/apache/catalina/startup/TomcatBaseTest.java"


======= 66f2d5b^:"java/org/apache/tomcat/util/net/jsse/JSSEKeyManager.java"

======= 66f2d5b^:"java/org/apache/tomcat/util/net/jsse/JSSEKeyManager.java"

======= 66f2d5b^:"java/org/apache/tomcat/util/net/jsse/JSSEKeyManager.java"

======= 66f2d5b^:"java/org/apache/tomcat/util/net/jsse/JSSEKeyManager.java"

     * @param keyType The key algorithm type name (ignored)
     * @param issuers The list of acceptable CA issuer subject names, or null
     * if it does not matter which issuers are used (ignored)
     * @param socket The socket to be used for this connection. This parameter
     * can be null, in which case this method will return the most generic
     * alias to use (ignored)
======= 66f2d5b^:"java/org/apache/tomcat/util/net/jsse/JSSEKeyManager.java"


======= bfabec5^:"java/javax/el/BeanELResolver.java"

                if (m.isVarArgs()) {
======= bfabec5^:"java/javax/el/BeanELResolver.java"

                for (int i = 0; (i < varArgIndex - 1); i++) {
                // Last parameter is the varags
                    Object varargs = Array.newInstance(
                            parameterTypes[paramCount],
                            (paramCount - varArgIndex));
                    Array.set(varargs, i,
                    parameters[varArgIndex] = varargs;
======= bfabec5^:"java/javax/el/BeanELResolver.java"


======= feff880^:"java/org/apache/catalina/startup/ExpandWar.java"

======= feff880^:"java/org/apache/catalina/startup/ExpandWar.java"


======= 423fd89^:"java/org/apache/catalina/core/JreMemoryLeakPreventionListener.java"

======= 423fd89^:"java/org/apache/catalina/core/JreMemoryLeakPreventionListener.java"


======= 9425437^:"java/org/apache/coyote/http11/AbstractHttp11JsseProtocol.java"

    private String sslImplemenationName = null;
    public String getSslImplemenationName() { return sslImplemenationName; }
    public void setSslImplemenationName(String s) {
        this.sslImplemenationName = s;
======= 9425437^:"java/org/apache/coyote/http11/AbstractHttp11JsseProtocol.java"

        sslImplementation = SSLImplementation.getInstance(sslImplemenationName);
======= 9425437^:"test/org/apache/tomcat/util/net/TestCustomSsl.java"

        connector.setProperty("sslImplemenationName", 
    <attribute name="sslImplemenationName" required="false">

======= 58429a8^:"java/org/apache/tomcat/util/net/NioEndpoint.java"

                            if (wakeupCounter.get()>0) {
                            }else {
                                keyCount = selector.keys().size();
                                wakeupCounter.set(-1);

======= a2538ce^:"java/org/apache/coyote/ajp/AbstractAjpProcessor.java"

======= a2538ce^:"java/org/apache/coyote/ajp/AjpAprProcessor.java"

                    // Usually the servlet didn't read the previous request body
                    if(log.isDebugEnabled()) {
                        log.debug("Unexpected message: "+type);
                    continue;
======= a2538ce^:"java/org/apache/coyote/ajp/AjpNioProcessor.java"

                    // Usually the servlet didn't read the previous request body
                    if(log.isDebugEnabled()) {
                        log.debug("Unexpected message: "+type);
                    continue;
======= a2538ce^:"java/org/apache/coyote/ajp/AjpProcessor.java"

                    // Usually the servlet didn't read the previous request body
                    if(log.isDebugEnabled()) {
                        log.debug("Unexpected message: "+type);
                    continue;

======= 3513acc^:"java/org/apache/catalina/authenticator/FormAuthenticator.java"

======= 3513acc^:"java/org/apache/catalina/authenticator/FormAuthenticator.java"


======= 196a8f5^:"java/org/apache/catalina/authenticator/AuthenticatorBase.java"

            !request.isSecure() &&

======= 87a32d6^:"java/org/apache/catalina/ha/session/BackupManager.java"

======= 87a32d6^:"java/org/apache/catalina/ha/session/BackupManager.java"

                                                          DEFAULT_REPL_TIMEOUT,
======= 87a32d6^:"java/org/apache/catalina/ha/session/BackupManager.java"

======= 87a32d6^:"java/org/apache/catalina/ha/session/BackupManager.java"

======= 87a32d6^:"java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java"

            for (int i = 0; i < resp.length; i++) {
                mapMemberAdded(resp[i].getSource());
                messageReceived(resp[i].getMessage(), resp[i].getSource());

======= 4587f13^:"java/org/apache/catalina/core/StandardContext.java"

        if (!dir.exists() && !dir.mkdirs()) {
======= 4587f13^:"java/org/apache/catalina/loader/WebappClassLoader.java"

                                        }                                 
                                        resourceFile.getParentFile().mkdirs();
======= 4587f13^:"java/org/apache/catalina/loader/WebappLoader.java"

                if (!classRepository.isDirectory()) {
                    if (!classRepository.mkdirs())
                        throw new IOException(
                                sm.getString("webappLoader.mkdirFailure"));
======= 4587f13^:"java/org/apache/catalina/loader/WebappLoader.java"

                if (!destDir.isDirectory()) {
                    if (!destDir.mkdirs())
                        throw new IOException(
                                sm.getString("webappLoader.mkdirFailure"));
======= 4587f13^:"java/org/apache/catalina/manager/ManagerServlet.java"

            if (!deployedPath.isDirectory() && !deployedPath.mkdirs()) {
======= 4587f13^:"java/org/apache/catalina/manager/ManagerServlet.java"

                        if (!configBase.isDirectory() && !configBase.mkdirs()) {
======= 4587f13^:"java/org/apache/catalina/manager/host/HostManagerServlet.java"

        if (!appBaseFile.exists()) {
            if (!appBaseFile.mkdirs()) {
                writer.println(smClient.getString(
                        "hostManagerServlet.appBaseCreateFail",
                        appBaseFile.toString(), name));
                return;
            }
======= 4587f13^:"java/org/apache/catalina/manager/host/HostManagerServlet.java"

        if (!configBase.exists()) {
            if (!configBase.mkdirs()) {
                return null;
            }
======= 4587f13^:"java/org/apache/catalina/servlets/CGIServlet.java"

            if (!dir.mkdirs() && debug >= 2) {
                log("expandCGIScript: failed to create directories for '" +
                        dir.getAbsolutePath() + "'");
======= 4587f13^:"java/org/apache/catalina/session/FileStore.java"

    private File directory() {
======= 4587f13^:"java/org/apache/catalina/session/FileStore.java"

            file.delete();
            file.mkdirs();
======= 4587f13^:"java/org/apache/catalina/session/FileStore.java"

    private File file(String id) {
======= 4587f13^:"java/org/apache/catalina/startup/ExpandWar.java"

                    parent.mkdirs();
======= 4587f13^:"java/org/apache/catalina/startup/HostConfig.java"

                if ( (!dirs[i].isDirectory()) && (!dirs[i].mkdirs())) {
======= 4587f13^:"java/org/apache/catalina/valves/AccessLogValve.java"

        if (!dir.exists()) {
            if (!dir.mkdirs()) {
                log.error(sm.getString("accessLogValve.openDirFail", dir));
            }
======= 4587f13^:"java/org/apache/catalina/valves/AccessLogValve.java"

        if (!parent.exists()) {
            if (!parent.mkdirs()) {
                log.error(sm.getString("accessLogValve.openDirFail", parent));
            }
======= 4587f13^:"java/org/apache/jasper/JspCompilationContext.java"

            return (outDirFile.exists() || outDirFile.mkdirs());
======= 4587f13^:"java/org/apache/juli/FileHandler.java"

        if (!dir.exists() && !dir.mkdirs()) {
======= 4587f13^:"java/org/apache/juli/FileHandler.java"

            if (!parent.exists()) {
                if (!parent.mkdirs()) {
                    reportError("Unable to create [" + parent + "]", null,
                            ErrorManager.OPEN_FAILURE);
                    writer = null;
                    return;
                }
======= 4587f13^:"test/org/apache/catalina/connector/TestCoyoteAdapter.java"

        if (!foo.exists() && !foo.mkdirs()) {
======= 4587f13^:"test/org/apache/catalina/core/TestAsyncContextImpl.java"

        if (!foo.exists() && !foo.mkdirs()) {
======= 4587f13^:"test/org/apache/catalina/core/TestStandardContext.java"

        if (!docBase.exists() && !docBase.mkdirs()) {
======= 4587f13^:"test/org/apache/catalina/servlets/TestDefaultServlet.java"

        if (!webInf.mkdirs()) {
======= 4587f13^:"test/org/apache/catalina/servlets/TestDefaultServlet.java"

        if (!webInf.mkdirs()) {
======= 4587f13^:"test/org/apache/catalina/startup/TomcatBaseTest.java"

        if (!tempDir.exists() && !tempDir.mkdirs()) {

======= 25f02b4^:"java/org/apache/catalina/startup/Tomcat.java"

======= 25f02b4^:"java/org/apache/catalina/startup/Tomcat.java"

        ctx.setManager( new StandardManager());
======= 25f02b4^:"test/org/apache/catalina/startup/TestTomcat.java"

======= 25f02b4^:"test/org/apache/catalina/startup/TestTomcat.java"

     * Simple servlet to test in-line registration 
======= 25f02b4^:"test/org/apache/catalina/startup/TestTomcat.java"

======= 25f02b4^:"test/org/apache/catalina/startup/TestTomcat.java"


======= 517fd9b^:"java/org/apache/catalina/connector/Connector.java"

            log.error
                (sm.getString
                 ("coyoteConnector.protocolHandlerInstantiationFailed", e));

======= 0cdbfa6^:"java/org/apache/catalina/core/JreMemoryLeakPreventionListener.java"

    
======= 0cdbfa6^:"java/org/apache/catalina/core/JreMemoryLeakPreventionListener.java"

                

======= bf4a544^:"java/org/apache/coyote/ajp/AjpAprProtocol.java"

                        socket.getSocket().longValue());
======= bf4a544^:"java/org/apache/coyote/http11/Http11AprProtocol.java"

                        socket.getSocket().longValue());
======= bf4a544^:"java/org/apache/coyote/http11/Http11AprProtocol.java"

                        socket.getSocket().longValue());
======= bf4a544^:"java/org/apache/tomcat/util/net/AprEndpoint.java"

        protected long serverPollset = 0;
        protected long pool = 0;
        protected long[] desc;
        protected long[] addS;
        protected volatile int addCount = 0;
        protected boolean comet = true;
======= bf4a544^:"java/org/apache/tomcat/util/net/AprEndpoint.java"

         * Create the poller. With some versions of APR, the maximum poller size will
         * be 62 (recompiling APR is necessary to remove this limitation).
            int timeout = getKeepAliveTimeout();
            if (timeout <= 0) {
                timeout = socketProperties.getSoTimeout();
            serverPollset = allocatePoller(size, pool, timeout);
            if (serverPollset == 0 && size > 1024) {
                serverPollset = allocatePoller(size, pool, timeout);
            if (serverPollset == 0) {
                serverPollset = allocatePoller(size, pool, timeout);
            addS = new long[size];
======= bf4a544^:"java/org/apache/tomcat/util/net/AprEndpoint.java"

                    processSocket(addS[i], SocketStatus.STOP);
                    destroySocket(addS[i]);
            // Close all sockets still in the poller
            int rv = Poll.pollset(serverPollset, desc);
            if (rv > 0) {
                for (int n = 0; n < rv; n++) {
                    if (comet) {
                        processSocket(desc[n*2+1], SocketStatus.STOP);
                    } else {
                        destroySocket(desc[n*2+1]);
                    }
                }
======= bf4a544^:"java/org/apache/tomcat/util/net/AprEndpoint.java"

======= bf4a544^:"java/org/apache/tomcat/util/net/AprEndpoint.java"

        public void add(long socket) {
                if (addCount >= addS.length) {
======= bf4a544^:"java/org/apache/tomcat/util/net/AprEndpoint.java"

                addS[addCount] = socket;
======= bf4a544^:"java/org/apache/tomcat/util/net/AprEndpoint.java"

                                    int rv = Poll.add
                                        (serverPollset, addS[i], Poll.APR_POLLIN);
                                            processSocket(addS[i], SocketStatus.ERROR);
                                            destroySocket(addS[i]);
======= bf4a544^:"java/org/apache/tomcat/util/net/AprEndpoint.java"

                    // Pool for the specified interval
                    int rv = Poll.poll(serverPollset, pollTime, desc, true);
                    if (rv > 0) {
                        keepAliveCount -= rv;
                        for (int n = 0; n < rv; n++) {
                            // Check for failed sockets and hand this socket off to a worker
                            if (((desc[n*2] & Poll.APR_POLLHUP) == Poll.APR_POLLHUP)
                                    || ((desc[n*2] & Poll.APR_POLLERR) == Poll.APR_POLLERR)
                                    || (comet && (!processSocket(desc[n*2+1], SocketStatus.OPEN)))
                                    || (!comet && (!processSocket(desc[n*2+1])))) {
                                // Close socket and clear pool
                                if (comet) {
                                    processSocket(desc[n*2+1], SocketStatus.DISCONNECT);
                                } else {
                                    destroySocket(desc[n*2+1]);
                                }
                                continue;
                            }
                        }
                    } else if (rv < 0) {
                        int errn = -rv;
                        /* Any non timeup or interrupted error is critical */
                        if ((errn != Status.TIMEUP) && (errn != Status.EINTR)) {
                            if (errn >  Status.APR_OS_START_USERERR) {
                                errn -=  Status.APR_OS_START_USERERR;
                            }
                            log.error(sm.getString("endpoint.poll.fail", "" + errn, Error.strerror(errn)));
                            // Handle poll critical failure
                            synchronized (this) {
                                destroy();
                                init();
                            }
                            continue;
                        }
                    if (socketProperties.getSoTimeout() > 0 && maintainTime > 1000000L && running) {
                        rv = Poll.maintain(serverPollset, desc, true);
                        if (rv > 0) {
                            keepAliveCount -= rv;
                            for (int n = 0; n < rv; n++) {
                                // Close socket and clear pool
                                if (comet) {
                                    processSocket(desc[n], SocketStatus.TIMEOUT);
                                } else {
                                    destroySocket(desc[n]);
                                }
                            }
======= bf4a544^:"java/org/apache/tomcat/util/net/AprEndpoint.java"

    }
    // ----------------------------------------------------- Worker Inner Class
======= bf4a544^:"java/org/apache/tomcat/util/net/AprEndpoint.java"

                                    getPoller().add(state.socket);
======= bf4a544^:"java/org/apache/tomcat/util/net/AprEndpoint.java"

                        getPoller().add(socket.getSocket().longValue());

======= 5d55842^:"java/org/apache/catalina/connector/CoyoteAdapter.java"

                    ((Context) request.mappingData.context).logAccess(

======= c4d1631^:"java/org/apache/catalina/startup/HostConfig.java"


======= 7562fc1^:"java/org/apache/catalina/util/RequestUtil.java"

     * @param encoding The encoding to use; if null, the default encoding is
     * used. If an unsupported encoding is specified the parameters will not be
======= 7562fc1^:"java/org/apache/catalina/util/RequestUtil.java"

            // given string so that the encoding is not lost. If an
            // encoding is not specified, let it use platform default
                if (encoding == null) {
                    bytes = data.getBytes(Charset.defaultCharset());
                } else {
                    bytes = data.getBytes(B2CConverter.getCharset(encoding));
                }

======= 841e9fc^:"java/org/apache/jasper/compiler/DefaultErrorHandler.java"

======= 841e9fc^:"java/org/apache/jasper/compiler/DefaultErrorHandler.java"

                buf.append("\n\n");
                buf.append("\n");
                buf.append("\n");
                buf.append("\n\n");
                buf.append("\n");
        buf.append("\n\nStacktrace:");
======= 841e9fc^:"java/org/apache/jasper/compiler/ErrorDispatcher.java"

======= 841e9fc^:"java/org/apache/jasper/compiler/ErrorDispatcher.java"

                errMsgBuf.append("\n");

======= bb7072c^:"java/org/apache/naming/resources/DirContextURLConnection.java"

                // Strip off the hostname and the contextpath
                if(context instanceof ProxyDirContext &&
                        "".equals(((ProxyDirContext)context).getContextPath())){
                    start = file.indexOf('/',1);
                }
                else

======= cd2fecd^:"java/org/apache/catalina/core/JreMemoryLeakPreventionListener.java"

======= cd2fecd^:"java/org/apache/catalina/core/JreMemoryLeakPreventionListener.java"

     * <code>com.sun.jndi.ldap.LdapPoolManager</code> class spawns a thread when it
     * is initialized if the system property
======= cd2fecd^:"java/org/apache/catalina/core/JreMemoryLeakPreventionListener.java"

    
======= cd2fecd^:"java/org/apache/catalina/core/JreMemoryLeakPreventionListener.java"


======= 7ffca5b^:"java/org/apache/coyote/http11/Http11NioProtocol.java"

            Http11NioProcessor processor = connections.remove(socket);

======= 8c41e9c^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PooledConnection.java"

            connection = connection = driver.connect(driverURL, properties);

======= ed0588b^:"java/org/apache/catalina/util/LifecycleBase.java"

======= ed0588b^:"java/org/apache/catalina/util/LifecycleBase.java"

        } catch (LifecycleException e) {
            throw e;
======= ed0588b^:"java/org/apache/catalina/util/LifecycleBase.java"

        } catch (LifecycleException e) {
            throw e;
======= ed0588b^:"java/org/apache/catalina/util/LifecycleBase.java"

        } catch (LifecycleException e) {
            throw e;
======= ed0588b^:"java/org/apache/catalina/util/LifecycleBase.java"

        } catch (LifecycleException e) {
            throw e;

======= 29e9966^:"java/org/apache/catalina/session/StoreBase.java"

                try {
                    if (manager.findSession(keys[i]) != null) {
                        isLoaded = true;
                } catch (IOException ioe) {
                    // Ignore - session will be expired

======= 77213bb^:"java/org/apache/catalina/valves/AccessLogValve.java"

    private AccessLogElement createAccessLogElement(String header, char pattern) {
======= 77213bb^:"java/org/apache/catalina/valves/AccessLogValve.java"

    private AccessLogElement createAccessLogElement(char pattern) {

======= 0b340ac^:"java/org/apache/catalina/startup/ContextConfig.java"


======= 6200dd9^:"java/org/apache/coyote/http11/AbstractInputBuffer.java"

    public abstract boolean parseRequestLine(boolean useAvailableDataOnly) throws IOException;
    
    public abstract boolean parseHeaders() throws IOException;
    
    protected abstract boolean fill(boolean block) throws IOException; 
    // -------------------------------------------------------------- Constants
    // ----------------------------------------------------------- Constructors
    // -------------------------------------------------------------- Variables
======= 6200dd9^:"java/org/apache/coyote/http11/AbstractInputBuffer.java"

    // ----------------------------------------------------- Instance Variables
======= 6200dd9^:"java/org/apache/coyote/http11/AbstractInputBuffer.java"

======= 6200dd9^:"java/org/apache/coyote/http11/AbstractInputBuffer.java"

    
======= 6200dd9^:"java/org/apache/coyote/http11/InternalAprInputBuffer.java"

======= 6200dd9^:"java/org/apache/coyote/http11/InternalAprInputBuffer.java"

    // -------------------------------------------------------------- Constants
======= 6200dd9^:"java/org/apache/coyote/http11/InternalAprInputBuffer.java"

======= 6200dd9^:"java/org/apache/coyote/http11/InternalAprInputBuffer.java"

======= 6200dd9^:"java/org/apache/coyote/http11/InternalInputBuffer.java"

======= 6200dd9^:"java/org/apache/coyote/http11/InternalInputBuffer.java"

======= 6200dd9^:"java/org/apache/coyote/http11/InternalInputBuffer.java"

======= 6200dd9^:"java/org/apache/coyote/http11/InternalInputBuffer.java"

======= 6200dd9^:"java/org/apache/coyote/http11/InternalNioInputBuffer.java"

======= 6200dd9^:"java/org/apache/coyote/http11/InternalNioInputBuffer.java"

    /**
     * Logger.
     */
======= 6200dd9^:"java/org/apache/coyote/http11/InternalNioInputBuffer.java"

    enum HeaderParsePosition {HEADER_START, HEADER_NAME, HEADER_VALUE, HEADER_MULTI_LINE}
======= 6200dd9^:"java/org/apache/coyote/http11/InternalNioInputBuffer.java"

======= 6200dd9^:"java/org/apache/coyote/http11/InternalNioInputBuffer.java"

======= 6200dd9^:"java/org/apache/coyote/http11/InternalNioInputBuffer.java"

======= 6200dd9^:"test/org/apache/coyote/http11/TestInternalInputBuffer.java"

======= 6200dd9^:"test/org/apache/coyote/http11/TestInternalInputBuffer.java"


======= 00a1fdf^:"java/org/apache/catalina/valves/ExtendedAccessLogValve.java"

======= 00a1fdf^:"java/org/apache/catalina/valves/ExtendedAccessLogValve.java"

        Move the SetCharacaterEncoding filter from the examples web application
    <li><b>%I</b> - current request thread name (can compare later with stacktraces)</li>

======= 95d67fe^:"java/org/apache/catalina/Lifecycle.java"

======= 95d67fe^:"java/org/apache/catalina/Lifecycle.java"

 *    init()
 * NEW ->-- INITIALIZING
 * |||           |                  --------------------<-----------------------
 * |||           |auto              |                                          |
 * |||          \|/    start()     \|/       auto          auto         stop() |
 * |||      INITIALIZED -->-- STARTING_PREP -->- STARTING -->- STARTED -->---  |
 * |||                              ^                             |         |  |
 * |||        start()               |                             |         |  |
 * ||----------->--------------------                             |         |  |
 * ||                                                             |         |  |
 * |---                auto                    auto               |         |  |
 * |  |          ---------<----- MUST_STOP ---------------------<--         |  |
 * |  |          |                                                          |  |
 * |  |          ---------------------------<--------------------------------  ^
 * |  |          |                                                             |
 * |  |         \|/            auto                 auto              start()  |
 * |  |     STOPPING_PREP ------>----- STOPPING ------>----- STOPPED ---->------
 * |  |                                   ^                  |  |  ^
 * |  |                  stop()           |                  |  |  |
 * |  |          --------------------------                  |  |  |
 * |  |          |                                  auto     |  |  |
 * |  |          |                  MUST_DESTROY------<-------  |  |
 * |  |          |                    |                         |  |
 * |  |          |                    |auto                     |  |
 * |  |          |    destroy()      \|/              destroy() |  |
 * |  |       FAILED ---->------ DESTROYING ---<-----------------  |
 * |  |                           ^     |                          |
 * |  |        destroy()          |     |auto                      |
 * |  -----------------------------    \|/                         |
======= 95d67fe^:"java/org/apache/catalina/Lifecycle.java"

 * TODO: Not all components may transition from STOPPED to STARTING_PREP
======= 95d67fe^:"java/org/apache/catalina/util/LifecycleBase.java"

                !state.equals(LifecycleState.NEW)) {

======= 8baaa98^:"java/org/apache/catalina/connector/ResponseFacade.java"

                (/*sm.getString("responseBase.reset.ise")*/);
======= 8baaa98^:"java/org/apache/catalina/connector/ResponseFacade.java"

                (/*sm.getString("responseBase.reset.ise")*/);
======= 8baaa98^:"java/org/apache/catalina/connector/ResponseFacade.java"

                (/*sm.getString("responseBase.reset.ise")*/);
======= 8baaa98^:"java/org/apache/catalina/connector/ResponseFacade.java"

                (/*sm.getString("responseBase.reset.ise")*/);
======= 8baaa98^:"java/org/apache/catalina/connector/ResponseFacade.java"

                (/*sm.getString("responseBase.reset.ise")*/);
======= 8baaa98^:"java/org/apache/catalina/connector/ResponseFacade.java"

                (/*sm.getString("responseBase.reset.ise")*/);

======= 4d9fcc0^:"java/org/apache/tomcat/jni/SSL.java"

    public static final int SSL_PROTOCOL_ALL   = (SSL_PROTOCOL_SSLV2|SSL_PROTOCOL_SSLV3|SSL_PROTOCOL_TLSV1);

======= bcee77d^:"java/org/apache/jasper/compiler/Compiler.java"

                URL includeUrl = ctxt.getResource(include.getKey());

======= 400745e^:"java/org/apache/catalina/filters/CsrfPreventionFilter.java"

            cache.put(key, null);
        
            return cache.containsKey(key);
======= 400745e^:"java/org/apache/catalina/filters/CsrfPreventionFilter.java"


======= 5de2739^:"java/org/apache/catalina/startup/WebRuleSet.java"

            digester.addCallMethod(fullPrefix + "/absolute-ordering/name/others",

======= a3f3379^:"java/org/apache/coyote/ajp/AjpAprProcessor.java"

            if (Socket.sendbb(socketRef, 0, outputBuffer.position()) < 0) {
        if (explicit && !finished) {

======= 1e79993^:"java/org/apache/catalina/connector/Connector.java"


======= 6ee5a22^:"java/org/apache/tomcat/jni/Library.java"

======= 6ee5a22^:"java/org/apache/tomcat/jni/Library.java"

======= 6ee5a22^:"java/org/apache/tomcat/util/net/AprEndpoint.java"

            int value = SSL.SSL_PROTOCOL_ALL;
            if ("SSLv2".equalsIgnoreCase(SSLProtocol)) {
                value = SSL.SSL_PROTOCOL_SSLV2;
            } else if ("SSLv3".equalsIgnoreCase(SSLProtocol)) {
                value = SSL.SSL_PROTOCOL_SSLV3;
            } else if ("TLSv1".equalsIgnoreCase(SSLProtocol)) {
                value = SSL.SSL_PROTOCOL_TLSV1;
            } else if ("SSLv2+SSLv3".equalsIgnoreCase(SSLProtocol)) {
                value = SSL.SSL_PROTOCOL_SSLV2 | SSL.SSL_PROTOCOL_SSLV3;
            } else if ("all".equalsIgnoreCase(SSLProtocol) ||
                    SSLProtocol == null || SSLProtocol.length() == 0) {
                // NOOP, use the default defined above
                // Protocol not recognized, fail to start as it is safer than
                // continuing with the default which might enable more than the
                // is required
                throw new Exception(sm.getString(
                        "endpoint.apr.invalidSslProtocol", SSLProtocol));
        library, the native/APR connector will be used. If the native library
        that the native/APR connector has different settings for HTTPS than the
      is "all", with other acceptable values being "SSLv2", "SSLv3", "TLSv1"
      and "SSLv2+SSLv3".</p>

======= 871dabd^:"java/org/apache/catalina/valves/AccessLogValve.java"

======= 871dabd^:"java/org/apache/catalina/valves/AccessLogValve.java"

======= 871dabd^:"java/org/apache/catalina/valves/AccessLogValve.java"

    
======= 871dabd^:"java/org/apache/catalina/valves/AccessLogValve.java"

======= 871dabd^:"java/org/apache/catalina/valves/AccessLogValve.java"

            writer = new PrintWriter(new BufferedWriter(new FileWriter(
                    pathname, true), 128000), false);
            

======= 3a95db4^:"java/org/apache/catalina/core/StandardContextValve.java"

                context.fireRequestDestroyEvent(request);

======= acc5619^:"java/org/apache/catalina/tribes/group/interceptors/GzipInterceptor.java"

     * TODO Fix to create an automatically growing buffer.
     * @param data byte[]
     * @return byte[]
        int length = gin.read(tmp);
        byte[] result = new byte[length];
        System.arraycopy(tmp,0,result,0,length);
        return result;
======= acc5619^:"test/org/apache/catalina/tribes/group/interceptors/TestGzipInterceptor.java"

    public void testBasic() throws Exception {
        byte[] data = new byte[1024];
        Arrays.fill(data,(byte)1);

======= ec00abf^:"java/org/apache/catalina/security/SecurityConfig.java"

======= ec00abf^:"java/org/apache/catalina/security/SecurityConfig.java"

                definition += ",";
            Security.setProperty(properties,
                // FIX ME package "javax." was removed to prevent HotSpot
                // fatal internal errors
                definition + packageList);      

======= eb98373^:"java/org/apache/catalina/core/StandardContext.java"

            t.run();

======= 6020bf6^:"java/org/apache/catalina/manager/host/HostManagerServlet.java"

        // Don't start host of already started
======= 6020bf6^:"java/org/apache/catalina/manager/host/HostManagerServlet.java"

     * Start the host with the specified name.
======= 6020bf6^:"java/org/apache/catalina/manager/host/HostManagerServlet.java"

        // Prevent starting our own host
        // Don't stop host of already stopped

======= df9bc17^:"java/org/apache/catalina/authenticator/AuthenticatorBase.java"

        if (!authRequired) {
        if (!authRequired) {

======= 92af111^:"java/org/apache/el/lang/ExpressionBuilder.java"

======= 92af111^:"java/org/apache/el/lang/ExpressionBuilder.java"

            } catch (ParseException pe) {
                throw new ELException("Error Parsing: " + expr, pe);

======= 6dffc54^:"java/org/apache/catalina/core/StandardContextValve.java"

            notFound(response);
======= 6dffc54^:"java/org/apache/catalina/core/StandardContextValve.java"

            notFound(response);
                notFound(response);
======= 6dffc54^:"java/org/apache/catalina/core/StandardContextValve.java"

     * Report a "not found" error for the specified resource.  FIXME:  We
    private void notFound(HttpServletResponse response) {
            response.sendError(HttpServletResponse.SC_NOT_FOUND);
======= 6dffc54^:"java/org/apache/catalina/core/StandardWrapperValve.java"

        // Acknowledge the request
        try {
            response.sendAcknowledgement();
        } catch (IOException e) {
            container.getLogger().warn(sm.getString("standardWrapper.acknowledgeException",
                             wrapper.getName()), e);
            throwable = e;
            exception(request, response, e);
        } catch (Throwable e) {
            ExceptionUtils.handleThrowable(e);
            container.getLogger().error(sm.getString("standardWrapper.acknowledgeException",
                             wrapper.getName()), e);
            throwable = e;
            exception(request, response, e);
            servlet = null;
        }

======= d36c5d9^:"java/org/apache/catalina/core/AsyncContextImpl.java"

======= d36c5d9^:"java/org/apache/catalina/core/AsyncContextImpl.java"

======= d36c5d9^:"java/org/apache/catalina/core/AsyncContextImpl.java"

======= d36c5d9^:"java/org/apache/catalina/core/AsyncContextImpl.java"

======= d36c5d9^:"java/org/apache/catalina/core/AsyncContextImpl.java"

======= d36c5d9^:"java/org/apache/catalina/core/AsyncContextImpl.java"

======= d36c5d9^:"java/org/apache/catalina/core/AsyncContextImpl.java"

======= d36c5d9^:"java/org/apache/catalina/core/AsyncContextImpl.java"

======= d36c5d9^:"java/org/apache/catalina/core/AsyncContextImpl.java"

======= d36c5d9^:"java/org/apache/catalina/core/AsyncContextImpl.java"

======= d36c5d9^:"java/org/apache/catalina/core/AsyncContextImpl.java"

        hasOriginalRequestAndResponse = true;
        context = null;
        event = null;
======= d36c5d9^:"java/org/apache/catalina/core/AsyncContextImpl.java"

======= d36c5d9^:"java/org/apache/catalina/core/AsyncContextImpl.java"

======= d36c5d9^:"java/org/apache/catalina/core/AsyncContextImpl.java"


======= 3d85a85^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

            StringManager smClient) throws IOException {
        if ((cn == null) || !(cn.getPath().startsWith("/") ||
                cn.getPath().equals(""))) {
            String path = null;
            if (cn != null) {
                path = cn.getPath();
            throw new IllegalArgumentException(smClient.getString(
                    "managerServlet.invalidPath",
                    RequestUtil.filter(path)));
        }
        
        Context ctxt = (Context) host.findChild(cn.getName());
        if (null == ctxt) {
            throw new IllegalArgumentException(smClient.getString(
                    "managerServlet.noContext",
                    RequestUtil.filter(cn.getDisplayName())));
        Session session = ctxt.getManager().findSession(id);
        return session;

======= f83c07e^:"java/org/apache/catalina/startup/Tomcat.java"

======= f83c07e^:"java/org/apache/catalina/startup/Tomcat.java"

    private Map<String, List<String>> userRoles = 
            new HashMap<String, List<String>>();
    private Map<String, Principal> userPrincipals = new HashMap<String, Principal>();
======= f83c07e^:"java/org/apache/catalina/startup/Tomcat.java"


======= f2dd57b^:"java/org/apache/juli/FileHandler.java"

                // Ignore

======= 7c274bb^:"java/org/apache/catalina/startup/WebRuleSet.java"

    protected SetSessionConfig sessionConfig;
    protected SetLoginConfig loginConfig;
    protected SetJspConfig jspConfig;
======= 7c274bb^:"java/org/apache/catalina/startup/WebRuleSet.java"

        sessionConfig = new SetSessionConfig();
        jspConfig = new SetJspConfig();
        loginConfig = new SetLoginConfig();
        

======= f75418b^:"java/org/apache/catalina/startup/ContextConfig.java"

                convertJsp(servletDef, jspServlet);
    private void convertJsp(ServletDef servletDef, ServletDef jspServletDef) {
======= f75418b^:"java/org/apache/catalina/startup/ContextConfig.java"

        for (Map.Entry<String, String> initParam: jspServletDef.getParameterMap().entrySet()) {
======= f75418b^:"test/org/apache/catalina/startup/TestContextConfig.java"


======= 7d6c439^:"java/org/apache/catalina/valves/AccessLogValve.java"

======= 7d6c439^:"java/org/apache/catalina/valves/AccessLogValve.java"

======= 7d6c439^:"java/org/apache/catalina/valves/AccessLogValve.java"

        "org.apache.catalina.valves.AccessLogValve/2.1";
======= 7d6c439^:"java/org/apache/catalina/valves/AccessLogValve.java"

    private static class AccessDateStruct {
        private Date currentDate = new Date();
        private String currentDateString = null;
        private SimpleDateFormat dayFormatter = new SimpleDateFormat("dd");
        private SimpleDateFormat monthFormatter = new SimpleDateFormat("MM");
        private SimpleDateFormat yearFormatter = new SimpleDateFormat("yyyy");
        private SimpleDateFormat timeFormatter = new SimpleDateFormat("HH:mm:ss");
        public AccessDateStruct() {
            TimeZone tz = TimeZone.getDefault();
            dayFormatter.setTimeZone(tz);
            monthFormatter.setTimeZone(tz);
            yearFormatter.setTimeZone(tz);
            timeFormatter.setTimeZone(tz);
    
    private static final ThreadLocal<AccessDateStruct> currentDateStruct =
            new ThreadLocal<AccessDateStruct>() {
        protected AccessDateStruct initialValue() {
            return new AccessDateStruct();
======= 7d6c439^:"java/org/apache/catalina/valves/AccessLogValve.java"

        Date date = getDate();
======= 7d6c439^:"java/org/apache/catalina/valves/AccessLogValve.java"

    private Date getDate() {
        // Only create a new Date once per second, max.
        long systime = System.currentTimeMillis();
        AccessDateStruct struct = currentDateStruct.get(); 
        if ((systime - struct.currentDate.getTime()) > 1000) {
            struct.currentDate.setTime(systime);
            struct.currentDateString = null;
        }
        return struct.currentDate;
======= 7d6c439^:"java/org/apache/catalina/valves/AccessLogValve.java"

        dateStamp = fileDateFormatter.format(currentDateStruct.get().currentDate);
======= 7d6c439^:"java/org/apache/catalina/valves/AccessLogValve.java"

     * write date and time, in Common Log Format - %t
            AccessDateStruct struct = currentDateStruct.get();
            if (struct.currentDateString == null) {
                StringBuilder current = new StringBuilder(32);
                current.append('[');
                current.append(struct.dayFormatter.format(date));
                current.append('/');
                current.append(lookup(struct.monthFormatter.format(date)));
                current.append('/');
                current.append(struct.yearFormatter.format(date));
                current.append(':');
                current.append(struct.timeFormatter.format(date));
                current.append(' ');
                current.append(getTimeZone(date));
                current.append(']');
                struct.currentDateString = current.toString();
            buf.append(struct.currentDateString);
======= 7d6c439^:"java/org/apache/catalina/valves/AccessLogValve.java"


======= 9f8b983^:"java/org/apache/catalina/startup/ContextConfig.java"

======= 9f8b983^:"test/org/apache/catalina/startup/TestContextConfigAnnotation.java"

======= 9f8b983^:"test/org/apache/catalina/startup/TestContextConfigAnnotation.java"


======= 874048a^:"java/org/apache/catalina/ssi/ExpressionParseTree.java"

======= 874048a^:"java/org/apache/catalina/ssi/ExpressionParseTree.java"


======= 2b8e6cf^:"java/org/apache/catalina/manager/Constants.java"

            " <td colspan=\"6\" class=\"title\">{0}</td>\n" +
======= 2b8e6cf^:"java/org/apache/catalina/manager/Constants.java"

======= 2b8e6cf^:"java/org/apache/catalina/manager/Constants.java"

======= 2b8e6cf^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

======= 2b8e6cf^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

        args = new Object[7];
======= 2b8e6cf^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

        args = new Object[6];
======= 2b8e6cf^:"java/org/apache/catalina/manager/StatusManagerServlet.java"

======= 2b8e6cf^:"java/org/apache/catalina/manager/StatusManagerServlet.java"

        args = new Object[7];
======= 2b8e6cf^:"java/org/apache/catalina/manager/StatusManagerServlet.java"

        args = new Object[6];

======= 4e5571f^:"java/org/apache/catalina/ha/session/DeltaManager.java"

        session.setMaxInactiveInterval(getMaxInactiveInterval());
======= 4e5571f^:"java/org/apache/catalina/ha/session/DeltaSession.java"

        if(expiredId != null && manager != null &&

======= 71b18c8^:"java/org/apache/catalina/servlets/WebdavServlet.java"

            // At least one of the tokens of the locks must have been given
            tokenList = toRenew.tokens.elements();
            while (tokenList.hasMoreElements()) {
                String token = tokenList.nextElement();
                if (ifHeader.indexOf(token) != -1) {
                    toRenew.expiresAt = lock.expiresAt;
                    lock = toRenew;

======= 4892b57^:"java/org/apache/catalina/startup/Embedded.java"

======= 4892b57^:"java/org/apache/catalina/startup/Embedded.java"

======= 4892b57^:"java/org/apache/catalina/startup/Embedded.java"

     * The lifecycle event support for this component.
     */
    protected LifecycleSupport lifecycle = new LifecycleSupport(this);
    /**
======= 4892b57^:"java/org/apache/catalina/startup/Embedded.java"

     * Add a lifecycle event listener to this component.
     *
     * @param listener The listener to add
     */
    @Override
    public void addLifecycleListener(LifecycleListener listener) {
        lifecycle.addLifecycleListener(listener);
    }
    /**
     * Get the lifecycle listeners associated with this lifecycle. If this 
     * Lifecycle has no listeners registered, a zero-length array is returned.
     */
    @Override
    public LifecycleListener[] findLifecycleListeners() {
        return lifecycle.findLifecycleListeners();
    }
    /**
     * Remove a lifecycle event listener from this component.
     *
     * @param listener The listener to remove
     */
    @Override
    public void removeLifecycleListener(LifecycleListener listener) {
        lifecycle.removeLifecycleListener(listener);
    }
    /**
        <bug>51249</bug>: Further improve system property replacement code
        in ClassLoaderLogManager of Tomcat JULI to cover some corner cases.
        (kkolinko)

======= 1fe28a6^:"java/org/apache/catalina/startup/ContextConfig.java"

        synchronized(digester) {
======= 1fe28a6^:"java/org/apache/catalina/startup/ContextConfig.java"

                if (fragment) {
                    webFragmentRuleSet.recycle();
                } else {
                    webRuleSet.recycle();
                }

======= 1bbbdb2^:"java/org/apache/catalina/connector/OutputBuffer.java"

======= 1bbbdb2^:"java/org/apache/catalina/connector/OutputBuffer.java"

        doFlush = true;
        if (initial) {
            coyoteResponse.sendHeaders();
            initial = false;
        }
        if (bb.getLength() > 0) {
            bb.flushBuffer();
        doFlush = false;

======= d19daf5^:"java/org/apache/catalina/ant/ReloadTask.java"

======= d19daf5^:"java/org/apache/catalina/ant/ReloadTask.java"

    // ------------------------------------------------------------- Properties
    /**
     * The context path of the web application we are managing.
     */
    protected String path = null;
    public String getPath() {
        return (this.path);
    }
    public void setPath(String path) {
        this.path = path;
    }
    // --------------------------------------------------------- Public Methods
======= d19daf5^:"java/org/apache/catalina/ant/ReloadTask.java"

        if (path == null) {
            throw new BuildException
                ("Must specify 'path' attribute");
        }
        try {
            execute("/reload?path=" + URLEncoder.encode(this.path, getCharset()));
        } catch (UnsupportedEncodingException e) {
            throw new BuildException
                ("Invalid 'charset' attribute: " + getCharset());
        }
======= d19daf5^:"java/org/apache/catalina/ant/SessionsTask.java"

======= d19daf5^:"java/org/apache/catalina/ant/SessionsTask.java"

    // Properties
    /**
     * The context path of the web application we are managing.
     */
    protected String path = null;
    public String getPath() {
        return (this.path);
    public void setPath(String path) {
        this.path = path;
    // Public Methods
======= d19daf5^:"java/org/apache/catalina/ant/SessionsTask.java"

        if (path == null) {
            throw new BuildException
                ("Must specify 'path' attribute");
        }
        
        try {
            execute("/sessions?path=" + URLEncoder.encode(this.path, getCharset()));
        } catch (UnsupportedEncodingException e) {
            throw new BuildException
                ("Invalid 'charset' attribute: " + getCharset());
        }
======= d19daf5^:"java/org/apache/catalina/ant/StartTask.java"

======= d19daf5^:"java/org/apache/catalina/ant/StartTask.java"

    // ------------------------------------------------------------- Properties
    /**
     * The context path of the web application we are managing.
     */
    protected String path = null;
    public String getPath() {
        return (this.path);
    }
    public void setPath(String path) {
        this.path = path;
    }
    // --------------------------------------------------------- Public Methods
======= d19daf5^:"java/org/apache/catalina/ant/StartTask.java"

        if (path == null) {
            throw new BuildException
                ("Must specify 'path' attribute");
        }
        try {
            execute("/start?path=" + URLEncoder.encode(this.path, getCharset()));
        } catch (UnsupportedEncodingException e) {
            throw new BuildException
                ("Invalid 'charset' attribute: " + getCharset());
        }
======= d19daf5^:"java/org/apache/catalina/ant/StopTask.java"

======= d19daf5^:"java/org/apache/catalina/ant/StopTask.java"

    // ------------------------------------------------------------- Properties
    /**
     * The context path of the web application we are managing.
     */
    protected String path = null;
    public String getPath() {
        return (this.path);
    }
    public void setPath(String path) {
        this.path = path;
    }
    // --------------------------------------------------------- Public Methods
======= d19daf5^:"java/org/apache/catalina/ant/StopTask.java"

        if (path == null) {
            throw new BuildException
                ("Must specify 'path' attribute");
        }
        try {
            execute("/stop?path=" + URLEncoder.encode(this.path, getCharset()));
        } catch (UnsupportedEncodingException e) {
            throw new BuildException
                ("Invalid 'charset' attribute: " + getCharset());
        }
======= d19daf5^:"java/org/apache/catalina/ant/UndeployTask.java"

======= d19daf5^:"java/org/apache/catalina/ant/UndeployTask.java"

    // ------------------------------------------------------------- Properties
    /**
     * The context path of the web application we are managing.
     */
    protected String path = null;
    public String getPath() {
        return (this.path);
    }
    public void setPath(String path) {
        this.path = path;
    }
    // --------------------------------------------------------- Public Methods
======= d19daf5^:"java/org/apache/catalina/ant/UndeployTask.java"

        if (path == null) {
            throw new BuildException
                ("Must specify 'path' attribute");
        }
        try {
            execute("/undeploy?path=" +
                    URLEncoder.encode(this.path, getCharset()));
        } catch (UnsupportedEncodingException e) {
            throw new BuildException
                ("Invalid 'charset' attribute: " + getCharset());
        }

======= 5109678^:"java/org/apache/catalina/startup/ContextConfig.java"

======= 5109678^:"java/org/apache/catalina/startup/ContextConfig.java"

======= 5109678^:"java/org/apache/catalina/startup/ContextConfig.java"

            JarInputStream jarInputStream = null;
                    JarURLConnection jarConn =
                        (JarURLConnection) url.openConnection();
                    URL resourceURL = jarConn.getJarFileURL();
                    URLConnection resourceConn = resourceURL.openConnection();
                    resourceConn.setUseCaches(false);
                    
                    jarInputStream =
                        new JarInputStream(resourceConn.getInputStream());
                    JarEntry entry = jarInputStream.getNextJarEntry();
                    while (entry != null) {
                        if (SCI_LOCATION.equals(entry.getName())) {
                            break;
                        }
                        entry = jarInputStream.getNextJarEntry();
                    }
                    if (entry != null) {
                        is = jarInputStream;
                    }
======= 5109678^:"java/org/apache/catalina/startup/ContextConfig.java"

                if (jarInputStream != null) {
                    try {
                        jarInputStream.close();
                    } catch (IOException e) {
                        // Ignore
                    }
======= 5109678^:"java/org/apache/catalina/startup/ContextConfig.java"

            JarInputStream jarInputStream = null;
                    JarURLConnection jarConn =
                        (JarURLConnection) url.openConnection();
                    URL resourceURL = jarConn.getJarFileURL();
                    URLConnection resourceConn = resourceURL.openConnection();
                    resourceConn.setUseCaches(false);
                    jarInputStream =
                        new JarInputStream(resourceConn.getInputStream());
                    JarEntry entry = jarInputStream.getNextJarEntry();
                    while (entry != null) {
                        if ("META-INF/resources/".equals(entry.getName())) {
                            break;
                        }
                        entry = jarInputStream.getNextJarEntry();
                    }
                    if (entry != null) {
======= 5109678^:"java/org/apache/catalina/startup/ContextConfig.java"

                if (jarInputStream != null) {
                    try {
                        jarInputStream.close();
                    } catch (IOException e) {
                        // Ignore
                    }
======= 5109678^:"java/org/apache/catalina/startup/ContextConfig.java"

        JarInputStream jarInputStream = null;
            URLConnection urlConn = url.openConnection();
            JarURLConnection jarConn;
            if (!(urlConn instanceof JarURLConnection)) {
                // This should never happen
                sm.getString("contextConfig.jarUrl", url);
                return;
            }
            jarConn = (JarURLConnection) urlConn;
            jarConn.setUseCaches(false);
            URL resourceURL = jarConn.getJarFileURL();
            URLConnection resourceConn = resourceURL.openConnection();
            jarInputStream = new JarInputStream(resourceConn.getInputStream());
            JarEntry entry = jarInputStream.getNextJarEntry();
            while (entry != null) {
                String entryName = entry.getName();
                        processAnnotationsStream(jarInputStream, fragment);
                entry = jarInputStream.getNextJarEntry();
            if (jarInputStream != null) {
                try {
                    jarInputStream.close();
                } catch (Throwable t) {
                    ExceptionUtils.handleThrowable(t);
                }
======= 5109678^:"java/org/apache/catalina/startup/ContextConfig.java"

            // JarURLConnection#getJarFile() creates temporary copies of the JAR
            // if the underlying resource is not a file URL. That can be slow so
            // the InputStream for the resource is used
            JarInputStream jarInputStream = null;
                URLConnection resourceConn = resourceURL.openConnection();
                resourceConn.setUseCaches(false);
                jarInputStream =
                    new JarInputStream(resourceConn.getInputStream());
                JarEntry entry = jarInputStream.getNextJarEntry();
                while (entry != null) {
                    if (FRAGMENT_LOCATION.equals(entry.getName())) {
                        break;
                    }
                    entry = jarInputStream.getNextJarEntry();
                }
                if (entry == null) {
                    source.setByteStream(jarInputStream);
                if (jarInputStream != null) {
                        jarInputStream.close();
                    } catch (Throwable t) {
                        ExceptionUtils.handleThrowable(t);
                fragment.setURL(jarConn.getURL());
======= 5109678^:"java/org/apache/catalina/startup/TldConfig.java"

======= 5109678^:"java/org/apache/catalina/startup/TldConfig.java"

======= 5109678^:"java/org/apache/catalina/startup/TldConfig.java"

        // JarURLConnection#getJarFile() creates temporary copies of the JAR if
        // the underlying resource is not a file URL. That can be slow so the
        // InputStream for the resource is used
        URL resourceURL = jarConn.getJarFileURL();
        NonClosingJarInputStream jarInputStream = null;
        String name = null;
            URLConnection resourceConn = resourceURL.openConnection();
            resourceConn.setUseCaches(false);
            jarInputStream =
                new NonClosingJarInputStream(resourceConn.getInputStream());
            JarEntry entry = jarInputStream.getNextJarEntry();
            while (entry != null) {
                name = entry.getName();
                if (name.startsWith("META-INF/") && name.endsWith(".tld")) {
                    XmlErrorHandler handler = tldScanStream(jarInputStream);
                    handler.logFindings(log, jarConn.getURL() + name);
                entry = jarInputStream.getNextJarEntry();
            log.warn(sm.getString("tldConfig.jarFail", jarConn.getURL() + name),
                    ioe);
            if (jarInputStream != null) {
                try {
                    jarInputStream.reallyClose();
                } catch (Throwable t) {
                    ExceptionUtils.handleThrowable(t);
                }
======= 5109678^:"java/org/apache/jasper/compiler/TldLocationsCache.java"

======= 5109678^:"java/org/apache/jasper/compiler/TldLocationsCache.java"

======= 5109678^:"java/org/apache/jasper/compiler/TldLocationsCache.java"

        // JarURLConnection#getJarFile() creates temporary copies of the JAR if
        // the underlying resource is not a file URL. That can be slow so the
        // InputStream for the resource is used
        NonClosingJarInputStream jarInputStream = null;
        
        boolean foundTld = false;
            URLConnection resourceConn = resourceURL.openConnection();
            resourceConn.setUseCaches(false);
            jarInputStream =
                new NonClosingJarInputStream(resourceConn.getInputStream());
            JarEntry entry = jarInputStream.getNextJarEntry();
            while (entry != null) {
                String name = entry.getName();
                if (name.startsWith("META-INF/") && name.endsWith(".tld")) {
                    foundTld = true;
                    tldScanStream(resourcePath, name, jarInputStream);
                entry = jarInputStream.getNextJarEntry();
            if (jarInputStream != null) {
                try {
                    jarInputStream.reallyClose();
                } catch (Throwable t) {
                    ExceptionUtils.handleThrowable(t);
                }
======= 5109678^:"java/org/apache/jasper/compiler/TldLocationsCache.java"

======= 5109678^:"java/org/apache/jasper/compiler/TldLocationsCache.java"

======= 5109678^:"java/org/apache/jasper/compiler/TldLocationsCache.java"

======= 5109678^:"java/org/apache/jasper/compiler/TldLocationsCache.java"


======= 5b0919c^:"java/org/apache/catalina/authenticator/FormAuthenticator.java"

            context.getServletContext().getRequestDispatcher
            (config.getLoginPage());
======= 5b0919c^:"java/org/apache/catalina/authenticator/FormAuthenticator.java"


======= 73f9592^:"java/org/apache/tomcat/util/net/AbstractEndpoint.java"

======= 73f9592^:"java/org/apache/tomcat/util/net/AbstractEndpoint.java"

    private volatile CounterLatch connectionCounterLatch = null;
======= 73f9592^:"java/org/apache/tomcat/util/net/AbstractEndpoint.java"

    public void setMaxConnections(int maxCon) { this.maxConnections = maxCon; }
======= 73f9592^:"java/org/apache/tomcat/util/net/AbstractEndpoint.java"

    protected CounterLatch initializeConnectionLatch() {
        if (connectionCounterLatch==null) {
            connectionCounterLatch = new CounterLatch(0,getMaxConnections());
        return connectionCounterLatch;
        CounterLatch latch = connectionCounterLatch;
        connectionCounterLatch = null;
    }
    
    protected void awaitConnection() throws InterruptedException {
        CounterLatch latch = connectionCounterLatch;
        if (latch!=null) latch.await();
    protected long countUpConnection() {
        CounterLatch latch = connectionCounterLatch;
        if (latch!=null) return latch.countUp();
        else return -1;
        CounterLatch latch = connectionCounterLatch;
======= 73f9592^:"java/org/apache/tomcat/util/net/AprEndpoint.java"

                    awaitConnection();
======= 73f9592^:"java/org/apache/tomcat/util/net/AprEndpoint.java"

                    //increment socket count
                    countUpConnection();
======= 73f9592^:"java/org/apache/tomcat/util/net/JIoEndpoint.java"

                    awaitConnection();
======= 73f9592^:"java/org/apache/tomcat/util/net/JIoEndpoint.java"

                        } else {
                            countUpConnection();
======= 73f9592^:"java/org/apache/tomcat/util/net/NioEndpoint.java"

                    awaitConnection();
======= 73f9592^:"java/org/apache/tomcat/util/net/NioEndpoint.java"

                        } else {
                            countUpConnection();
======= 73f9592^:"java/org/apache/tomcat/util/threads/CounterLatch.java"

 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
 * Simple counter latch that allows code to keep an up and down counter, and waits while the latch holds a certain wait value.
 * and threads using the latch to wait if the count has reached a certain value.
 * The counter latch can be used to keep track of an atomic counter, since the operations {@link #countDown()}
 * and {@link #countUp()} are atomic.
 * When the latch reaches the wait value, threads will block. The counter latch can hence act like a 
 * count down latch or a count up latch, while letting you keep track of the counter as well.
 * This counter latch works opposite as the java.util.concurrent.CountDownLatch, since the CounterLatch only blocks on a single value and releases the threads on all other values.
 * @author fhanik
 * @see <a href="http://download.oracle.com/javase/6/docs/api/java/util/concurrent/CountDownLatch.html">CountDownLatch</a>
 *
 */
    private class Sync extends AbstractQueuedSynchronizer {
        private static final long serialVersionUID = 1L;
        public Sync() {
        }
        @Override
        protected int tryAcquireShared(int arg) {
            return ((!released) && count.get() == signal) ? -1 : 1;
        }
        @Override
        protected boolean tryReleaseShared(int arg) {
            return true;
        }
    }
    private final Sync sync;
    private final AtomicLong count;
    private volatile long signal;
    private volatile boolean released = false;
    
    /**
     * Instantiates a CounterLatch object with an initial value and a wait value.
     * @param initial - initial value of the counter
     * @param waitValue - when the counter holds this value, 
     * threads calling {@link #await()} or {@link #await(long, TimeUnit)} 
     * will wait until the counter changes value or until they are interrupted.  
     */
    public CounterLatch(long initial, long waitValue) {
        this.signal = waitValue;
        this.count = new AtomicLong(initial);
        this.sync = new Sync();
    }
    /**
     * Causes the calling thread to wait if the counter holds the waitValue.
     * If the counter holds any other value, the thread will return
     * If the thread is interrupted or becomes interrupted an InterruptedException is thrown
     * @throws InterruptedException
     */
    public void await() throws InterruptedException {
        sync.acquireSharedInterruptibly(1);
    }
    /**
     * Causes the calling thread to wait if the counter holds the waitValue.
     * If the counter holds any other value, the thread will return
     * If the thread is interrupted or becomes interrupted an InterruptedException is thrown
     * @return true if the value changed, false if the timeout has elapsed
     * @throws InterruptedException
     */
    public boolean await(long timeout, TimeUnit unit) throws InterruptedException {
        return sync.tryAcquireSharedNanos(1, unit.toNanos(timeout));
    }
    /**
     * Increments the counter
     * @return the previous counter value
     */
    public long countUp() {
        long previous = count.getAndIncrement();
        if (previous == signal) {
            sync.releaseShared(0);
        }
        return previous;
    }
    /**
     * Decrements the counter
     * @return the previous counter value
     */
    public long countDown() {
        long previous = count.getAndDecrement();
        if (previous == signal) {
            sync.releaseShared(0);
        }
        return previous;
    }
    
    /**
     * Returns the current counter value
     * @return the current counter value
     */
    public long getCount() {
        return count.get();
    }
    
    /**
     * Performs an atomic update of the counter 
     * If the operation is successful and {@code expect==waitValue && expect!=update} waiting threads will be released.  
     * @param expect - the expected counter value
     * @param update - the new counter value
     * @return <code>true</code> if successful, <code>false</code> if the
     *         current value wasn't as expected
     */
    public boolean compareAndSet(long expect, long update) {
        boolean result = count.compareAndSet(expect, update);
        if (result && expect==signal && expect != update) {
            sync.releaseShared(0);
        }
        return result;
    }
    
    /**
     * returns true if there are threads blocked by this latch
     * @return true if there are threads blocked by this latch
     */
    public boolean hasQueuedThreads() {
        return sync.hasQueuedThreads();
    }
    
    /**
     * Returns a collection of the blocked threads
     * @return a collection of the blocked threads
     */
    public Collection<Thread> getQueuedThreads() {
        return sync.getQueuedThreads();
    }
    
    /**
     * releases all waiting threads. This operation is permanent, and no threads will block,
     * even if the counter hits the {@code waitValue} until {@link #reset(long)} has been called.
     * @return <code>true</code> if this release of shared mode may permit a
     *         waiting acquire (shared or exclusive) to succeed; and
     *         <code>false</code> otherwise
     */
    public boolean releaseAll() {
        released = true;
        return sync.releaseShared(0);
    }
    
    /**
     * Resets the latch and initializes the counter with the new value.
     * @param value the new counter value
     * @see #releaseAll()
     */
    public void reset(long value) {
        this.count.set(value);
        released = false;
    }
======= 73f9592^:"java/org/apache/tomcat/util/threads/CounterLatch.java"

======= 73f9592^:"test/org/apache/tomcat/util/threads/TestCounterLatch.java"

 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
    private volatile CounterLatch latch = null;
    @Override
    public void tearDown() {
        CounterLatch temp = latch;
        if (temp!=null) temp.releaseAll();
        latch = null;
    }
    public void testNoThreads() throws Exception {
        latch = new CounterLatch(0,0);
        assertEquals("No threads should be waiting", false, latch.hasQueuedThreads());
    }
    public void testOneThreadNoWait() throws Exception {
        latch = new CounterLatch(0,1);
        assertEquals("No threads should be waiting", false, latch.hasQueuedThreads());
        Thread testThread = new Thread() {
            @Override
            public void run() {
                try {
                    latch.await();
                } catch (InterruptedException x) {
                    x.printStackTrace();
                }
            }
        };
        testThread.start();
        Thread.sleep(50);
        assertEquals("0 threads should be waiting", 0, latch.getQueuedThreads().size());
        latch.countUp();
        Thread.sleep(50);
        assertEquals("No threads should be waiting", false, latch.hasQueuedThreads());
    }
    public void testOneThreadWaitCountUp() throws Exception {
        latch = new CounterLatch(0,1);
        assertEquals("No threads should be waiting", false, latch.hasQueuedThreads());
        Thread testThread = new Thread() {
            @Override
            public void run() {
                try {
                    latch.await();
                } catch (InterruptedException x) {
                    x.printStackTrace();
                }
            }
        };
        latch.countUp();
        testThread.start();
        Thread.sleep(50);
        assertEquals("1 threads should be waiting", 1, latch.getQueuedThreads().size());
        latch.countUp();
        Thread.sleep(50);
        assertEquals("No threads should be waiting", false, latch.hasQueuedThreads());
    }
    public void testOneThreadWaitCountDown() throws Exception {
        latch = new CounterLatch(1,0);
        assertEquals("No threads should be waiting", false, latch.hasQueuedThreads());
        Thread testThread = new Thread() {
            @Override
            public void run() {
                try {
                    //System.out.println("Entering ["+Thread.currentThread().getName()+"]");
                    latch.await();
                } catch (InterruptedException x) {
                    x.printStackTrace();
                }
                //System.out.println("Exiting ["+Thread.currentThread().getName()+"]");
            }
        };
        latch.countDown();
        testThread.start();
        Thread.sleep(50);
        assertEquals("1 threads should be waiting", 1, latch.getQueuedThreads().size());
        latch.countDown();
        Thread.sleep(50);
        assertEquals("No threads should be waiting", false, latch.hasQueuedThreads());
    }
    
    public void testOneRelease() throws Exception {
        latch = new CounterLatch(1,0);
        assertEquals("No threads should be waiting", false, latch.hasQueuedThreads());
        Thread testThread = new Thread() {
            @Override
            public void run() {
                try {
                    latch.await();
                } catch (InterruptedException x) {
                    x.printStackTrace();
                }
            }
        };
        latch.countDown();
        testThread.start();
        Thread.sleep(50);
        assertEquals("1 threads should be waiting", 1, latch.getQueuedThreads().size());
        latch.releaseAll();
        Thread.sleep(50);
        assertEquals("No threads should be waiting", false, latch.hasQueuedThreads());
    }    
======= 73f9592^:"test/org/apache/tomcat/util/threads/TestCounterLatch.java"


======= 1cd5e7b^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

        super.findleaks(printWriter, smClient);
        if (stringWriter.getBuffer().length() > 0) {
            msg.append(smClient.getString("htmlManagerServlet.findleaksList"));
            msg.append(stringWriter.toString());
======= 1cd5e7b^:"java/org/apache/catalina/manager/ManagerServlet.java"

======= 1cd5e7b^:"java/org/apache/catalina/manager/ManagerServlet.java"

            findleaks(writer, smClient);
======= 1cd5e7b^:"java/org/apache/catalina/manager/ManagerServlet.java"

    protected void findleaks(PrintWriter writer, StringManager smClient) {
======= 1cd5e7b^:"java/org/apache/catalina/manager/ManagerServlet.java"

        for (String result : results) {
            if ("".equals(result)) {
                result = "/";
            writer.println(result);

======= 4161179^:"java/org/apache/catalina/authenticator/AuthenticatorBase.java"

     * with IE 
    protected boolean securePagesWithPragma = true;
======= 4161179^:"java/org/apache/catalina/authenticator/AuthenticatorBase.java"

            // FIXME: Disabled for Mozilla FORM support over SSL 
            // (improper caching issue)
            //!request.isSecure() &&
                // FIXME: These cause problems with downloading office docs
                // from IE under SSL and may not be needed for newer Mozilla
                // clients.
        If not set, the default value of <code>true</code> will be used.</p>
        If not set, the default value of <code>true</code> will be used.</p>
        If not set, the default value of <code>true</code> will be used.</p>
        If not set, the default value of <code>true</code> will be used.</p>
        If not set, the default value of <code>true</code> will be used.</p>

======= 4bdd8d0^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/DataSourceProxy.java"

    public synchronized ConnectionPool createPool() throws SQLException {

======= 9bb6e4f^:"java/org/apache/catalina/startup/HostConfig.java"

                if ( (!dirs[i].exists()) && (!dirs[i].mkdirs())) {

======= c46e56c^:"java/org/apache/jasper/compiler/Generator.java"

======= c46e56c^:"java/org/apache/jasper/compiler/Generator.java"

        if (pageInfo.getExtends(false) == null) {

======= 55d8b72^:"webapps/examples/WEB-INF/classes/async/Async0.java"

            req.getAsyncContext().complete();
   <a href="<%=response.encodeURL("/examples/async/stock")%>"> StockTicker </a>

======= b24b17c^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/SlowQueryReport.java"

        private int nrOfInvocations;
        private long maxInvocationTime = Long.MIN_VALUE;
        private long maxInvocationDate;
        private long minInvocationTime = Long.MAX_VALUE;
        private long minInvocationDate;
        private long totalInvocationTime;
        private long failures;
        private int prepareCount;
        private long prepareTime;

======= 2bb247a^:"modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolProperties.java"

                            definitions[i].addProperty(new InterceptorProperty(propName,propValue));

======= de7f0e1^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

        " <td class=\"row-left\" bgcolor=\"{13}\" rowspan=\"2\">\n" +
======= de7f0e1^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

        "</tr>\n<tr></tr>\n";

======= f477068^:"java/javax/servlet/jsp/el/ELException.java"

 * @deprecated
======= f477068^:"java/javax/servlet/jsp/el/ELParseException.java"

 * @deprecated
======= f477068^:"java/javax/servlet/jsp/el/Expression.java"

 * @deprecated
======= f477068^:"java/javax/servlet/jsp/el/ExpressionEvaluator.java"

 * @deprecated
======= f477068^:"java/javax/servlet/jsp/el/FunctionMapper.java"

 * @deprecated
======= f477068^:"java/javax/servlet/jsp/el/VariableResolver.java"

 * @deprecated

======= 01e1850^:"java/javax/servlet/ServletContext.java"

     * @deprecated
======= 01e1850^:"java/javax/servlet/ServletContext.java"

     * @deprecated
======= 01e1850^:"java/javax/servlet/ServletContext.java"

     * @deprecated
======= 01e1850^:"java/javax/servlet/ServletContext.java"

     * @deprecated

======= 0559491^:"java/org/apache/catalina/ha/session/DeltaSession.java"

            if (addDeltaRequest && (deltaRequest != null)) deltaRequest.setAttribute(name, value);
======= 0559491^:"java/org/apache/catalina/ha/session/DeltaSession.java"

            if (addDeltaRequest && (deltaRequest != null)) deltaRequest.removeAttribute(name);

======= 343a609^:"java/org/apache/catalina/authenticator/SpnegoAuthenticator.java"

======= 343a609^:"java/org/apache/catalina/authenticator/SpnegoAuthenticator.java"

                lc = new LoginContext(loginConfigName);
======= 343a609^:"java/org/apache/catalina/authenticator/SpnegoAuthenticator.java"

            GSSManager manager = GSSManager.getInstance();
            gssContext = manager.createContext(manager.createCredential(null,
                    GSSCredential.DEFAULT_LIFETIME,
                    new Oid("1.3.6.1.5.5.2"),
                    GSSCredential.ACCEPT_ONLY));
======= 343a609^:"java/org/apache/catalina/authenticator/SpnegoAuthenticator.java"

                    storeDelegatedCredential);
======= 343a609^:"java/org/apache/catalina/authenticator/SpnegoAuthenticator.java"


======= 2ffa0f7^:"java/org/apache/catalina/mbeans/JmxRemoteLifecycleListener.java"

======= 2ffa0f7^:"java/org/apache/catalina/mbeans/JmxRemoteLifecycleListener.java"

======= 2ffa0f7^:"java/org/apache/catalina/mbeans/JmxRemoteLifecycleListener.java"


======= 2cdbcd5^:"java/org/apache/jasper/runtime/BodyContentImpl.java"

        bufferSize = Constants.DEFAULT_TAG_BUFFER_SIZE;
        cb = new char[bufferSize];
======= 2cdbcd5^:"java/org/apache/jasper/runtime/BodyContentImpl.java"

                bufferSize = Constants.DEFAULT_TAG_BUFFER_SIZE;
                cb = new char[bufferSize];
======= 2cdbcd5^:"java/org/apache/jasper/runtime/BodyContentImpl.java"

        bufferSize = cb.length + len;
        char[] tmp = new char[bufferSize];
        
        tmp = null;
        

======= 2dc54c4^:"java/org/apache/catalina/startup/Tomcat.java"

        ctx.setPath( contextPath );
======= 2dc54c4^:"java/org/apache/catalina/startup/Tomcat.java"

        ctx.setPath( url );

======= 75d28d4^:"java/org/apache/tomcat/util/net/AprEndpoint.java"


======= 3a847c7^:"java/org/apache/tomcat/util/net/AprEndpoint.java"


======= dc3758e^:"java/org/apache/catalina/Session.java"

     * Set the session identifier for this session.
======= dc3758e^:"java/org/apache/catalina/Session.java"

======= dc3758e^:"java/org/apache/catalina/ha/session/DeltaManager.java"

        if(notifySessionListenersOnReplication) {
            session.setId(msg.getSessionID());
        } else {
            session.setIdInternal(msg.getSessionID());
            add(session);
        }
======= dc3758e^:"java/org/apache/catalina/ha/session/DeltaManager.java"

            if (notifySessionListenersOnReplication) {
                session.setId(newSessionID);
            } else {
                session.setIdInternal(newSessionID);
                add(session);
            }
======= dc3758e^:"java/org/apache/catalina/ha/session/DeltaSession.java"

     * Set the session identifier for this session without notify listeners.
     *
     * @param id
     *            The new session identifier
    public void setIdInternal(String id) {
        this.id = id;
======= dc3758e^:"java/org/apache/catalina/ha/session/JvmRouteBinderValve.java"

        // FIXME: setId trigger session Listener, but only chance to register manager with correct id!
        catalinaSession.setId(newSessionID);
======= dc3758e^:"java/org/apache/catalina/manager/DummyProxySession.java"

======= dc3758e^:"java/org/apache/catalina/session/ManagerBase.java"

        session.setId(generateSessionId());
======= dc3758e^:"java/org/apache/catalina/session/StandardSession.java"

======= dc3758e^:"java/org/apache/catalina/session/StandardSession.java"

        tellNew();

======= dc3dff4^:"java/org/apache/catalina/connector/CoyoteAdapter.java"

======= dc3dff4^:"test/org/apache/catalina/core/TestAsyncContextImpl.java"

======= dc3dff4^:"test/org/apache/catalina/core/TestAsyncContextImpl.java"

======= dc3dff4^:"test/org/apache/catalina/core/TestAsyncContextImpl.java"

======= dc3dff4^:"test/org/apache/catalina/core/TestAsyncContextImpl.java"

======= dc3dff4^:"test/org/apache/catalina/core/TestAsyncContextImpl.java"

======= dc3dff4^:"test/org/apache/catalina/core/TestAsyncContextImpl.java"

======= dc3dff4^:"test/org/apache/catalina/core/TestAsyncContextImpl.java"

======= dc3dff4^:"test/org/apache/catalina/core/TestAsyncContextImpl.java"

======= dc3dff4^:"test/org/apache/catalina/core/TestAsyncContextImpl.java"

======= dc3dff4^:"test/org/apache/catalina/core/TestAsyncContextImpl.java"

                        Thread.sleep(1000);
======= dc3dff4^:"test/org/apache/catalina/core/TestAsyncContextImpl.java"

======= dc3dff4^:"test/org/apache/catalina/core/TestAsyncContextImpl.java"

                                Thread.sleep(1000);
======= dc3dff4^:"test/org/apache/catalina/core/TestAsyncContextImpl.java"

======= dc3dff4^:"test/org/apache/catalina/core/TestAsyncContextImpl.java"

            actxt.setTimeout(1000);
======= dc3dff4^:"test/org/apache/catalina/core/TestAsyncContextImpl.java"

======= dc3dff4^:"test/org/apache/catalina/core/TestAsyncContextImpl.java"

======= dc3dff4^:"test/org/apache/catalina/core/TestAsyncContextImpl.java"

======= dc3dff4^:"test/org/apache/catalina/core/TestAsyncContextImpl.java"

                ac.setTimeout(3000);
======= dc3dff4^:"test/org/apache/catalina/core/TestAsyncContextImpl.java"

======= dc3dff4^:"test/org/apache/catalina/core/TestAsyncContextImpl.java"

======= dc3dff4^:"test/org/apache/catalina/core/TestAsyncContextImpl.java"

======= dc3dff4^:"test/org/apache/catalina/core/TestAsyncContextImpl.java"

======= dc3dff4^:"test/org/apache/catalina/core/TestAsyncContextImpl.java"

======= dc3dff4^:"test/org/apache/catalina/core/TestAsyncContextImpl.java"

======= dc3dff4^:"test/org/apache/catalina/core/TestAsyncContextImpl.java"

        ErrorServlet error = new ErrorServlet();
        Tomcat.addServlet(ctx, "error", error);
        ctx.addServletMapping("/stage2", "error");
======= dc3dff4^:"test/org/apache/catalina/core/TestAsyncContextImpl.java"

                        Thread.sleep(3 * 1000);
======= dc3dff4^:"test/org/apache/catalina/core/TestAsyncContextImpl.java"

======= dc3dff4^:"test/org/apache/catalina/core/TestAsyncContextImpl.java"

======= dc3dff4^:"test/org/apache/catalina/core/TestAsyncContextImpl.java"

                        Thread.sleep(5000); 
======= dc3dff4^:"test/org/apache/catalina/core/TestAsyncContextImpl.java"


======= 62ddb9e^:"java/org/apache/catalina/startup/ContextConfig.java"

            WebXml fragment = null;
======= 62ddb9e^:"java/org/apache/catalina/startup/ContextConfig.java"

                    fragment = new WebXml();
======= 62ddb9e^:"java/org/apache/catalina/startup/ContextConfig.java"

                if (fragment == null) {
                    fragments.put(file.toURI().toURL().toString(), fragment);
                } else {
                    fragment.setURL(file.toURI().toURL());
                    if (fragment.getName() == null) {
                        fragment.setName(fragment.getURL().toString());
                    }
                    fragments.put(fragment.getName(), fragment);
======= 62ddb9e^:"java/org/apache/tomcat/util/scan/StandardJarScanner.java"


======= e34f848^:"java/org/apache/tomcat/util/net/AprEndpoint.java"


======= 0c96676^:"java/javax/servlet/http/HttpUtils.java"

            throw new IllegalArgumentException(e.getMessage());
======= 0c96676^:"java/javax/servlet/http/HttpUtils.java"

            throw new IllegalArgumentException(e.getMessage());
======= 0c96676^:"java/org/apache/catalina/connector/CoyoteInputStream.java"

                    throw new RuntimeException(e.getMessage());
======= 0c96676^:"java/org/apache/catalina/connector/CoyoteInputStream.java"

                    throw new RuntimeException(e.getMessage());
======= 0c96676^:"java/org/apache/catalina/connector/CoyoteInputStream.java"

                    throw new RuntimeException(e.getMessage());
======= 0c96676^:"java/org/apache/catalina/connector/CoyoteInputStream.java"

                    throw new RuntimeException(e.getMessage());
======= 0c96676^:"java/org/apache/catalina/connector/CoyoteInputStream.java"

                    throw new RuntimeException(e.getMessage());
======= 0c96676^:"java/org/apache/catalina/realm/JDBCRealm.java"

                throw new SQLException(e.getMessage());
======= 0c96676^:"java/org/apache/catalina/valves/JDBCAccessLogValve.java"

                throw new SQLException(e.getMessage());
======= 0c96676^:"java/org/apache/naming/resources/WARDirContext.java"

                throw new IOException(e.getMessage());
======= 0c96676^:"java/org/apache/tomcat/util/digester/NodeCreateRule.java"

                throw new SAXException(e.getMessage());
======= 0c96676^:"java/org/apache/tomcat/util/digester/NodeCreateRule.java"

                throw new SAXException(e.getMessage());
======= 0c96676^:"java/org/apache/tomcat/util/digester/NodeCreateRule.java"

                throw new SAXException(e.getMessage());
======= 0c96676^:"java/org/apache/tomcat/util/digester/NodeCreateRule.java"

                throw new SAXException(e.getMessage());
      <fix>
        Make root cause exception available if JSSE SSL initialisation fails.
        Patch provided by sebb. (markt) 
      </fix>

======= c8ea62e^:"java/org/apache/coyote/ajp/AjpProcessor.java"

======= c8ea62e^:"java/org/apache/coyote/http11/Http11AprProcessor.java"

                    break;
                request.setStartTime(System.currentTimeMillis());
                keptAlive = true;
                if (!disableUploadTimeout) {
                    Socket.timeoutSet(socketRef,
                            connectionUploadTimeout * 1000);
                inputBuffer.parseHeaders();
======= c8ea62e^:"java/org/apache/coyote/http11/Http11NioProcessor.java"

                    break;
                }
                keptAlive = true;
                if ( !inputBuffer.parseHeaders() ) {
                    //we've read part of the request, don't recycle it
                    //instead associate it with the socket
                    openSocket = true;
                    recycle = false;
                    break;
                request.setStartTime(System.currentTimeMillis());
                if (!disableUploadTimeout) { //only for body, not for request headers
                    socket.getIOChannel().socket().setSoTimeout(
                            connectionUploadTimeout);
======= c8ea62e^:"java/org/apache/coyote/http11/Http11Processor.java"

                request.setStartTime(System.currentTimeMillis());
                keptAlive = true;
                if (disableUploadTimeout) {
                    socket.getSocket().setSoTimeout(soTimeout);
                    socket.getSocket().setSoTimeout(connectionUploadTimeout);
                inputBuffer.parseHeaders();
======= c8ea62e^:"java/org/apache/coyote/http11/Http11Processor.java"

======= c8ea62e^:"java/org/apache/coyote/http11/Http11Processor.java"

======= c8ea62e^:"test/org/apache/catalina/startup/TomcatBaseTest.java"

======= c8ea62e^:"test/org/apache/catalina/startup/TomcatBaseTest.java"

        connection.setReadTimeout(1000000);

======= 552c4b7^:"java/org/apache/catalina/valves/SSLValve.java"

======= 552c4b7^:"java/org/apache/catalina/valves/SSLValve.java"

======= 552c4b7^:"java/org/apache/catalina/valves/SSLValve.java"

======= 552c4b7^:"java/org/apache/catalina/valves/SSLValve.java"

                CertificateFactory cf = CertificateFactory.getInstance("X.509");
======= 552c4b7^:"java/org/apache/coyote/AbstractProtocolHandler.java"

======= 552c4b7^:"java/org/apache/coyote/ajp/AbstractAjpProcessor.java"

======= 552c4b7^:"java/org/apache/coyote/ajp/AbstractAjpProcessor.java"

======= 552c4b7^:"java/org/apache/coyote/ajp/AbstractAjpProcessor.java"

                   CertificateFactory cf =
                       CertificateFactory.getInstance("X.509");
======= 552c4b7^:"java/org/apache/coyote/ajp/AbstractAjpProcessor.java"

======= 552c4b7^:"java/org/apache/coyote/ajp/AjpAprProtocol.java"

======= 552c4b7^:"java/org/apache/coyote/ajp/AjpProtocol.java"

======= 552c4b7^:"java/org/apache/coyote/http11/Http11AprProcessor.java"

======= 552c4b7^:"java/org/apache/coyote/http11/Http11AprProcessor.java"

                        CertificateFactory cf = CertificateFactory.getInstance("X.509");
======= 552c4b7^:"java/org/apache/coyote/http11/Http11AprProtocol.java"


======= 5d61212^:"java/org/apache/jasper/compiler/ELFunctionMapper.java"

                clazz = Class.forName(className, true, tccl);

======= 1211dbe^:"java/org/apache/catalina/core/StandardContext.java"

        // Currently this is effectively a NO-OP but needs to be called to
        // ensure the NamingResources follows the correct lifecycle
        // Binding thread
        ClassLoader oldCCL = bindThread();
======= 1211dbe^:"java/org/apache/catalina/deploy/NamingResources.java"

======= 1211dbe^:"java/org/apache/catalina/deploy/NamingResources.java"

======= 1211dbe^:"java/org/apache/catalina/deploy/NamingResources.java"

      <fix>
      </fix>
      <fix>
      </fix>

======= f622e3a^:"java/org/apache/catalina/loader/WebappLoader.java"

            new DirContextURLStreamHandlerFactory();
======= f622e3a^:"java/org/apache/naming/resources/Constants.java"

    public static final String PROTOCOL_HANDLER_VARIABLE = 
        "java.protocol.handler.pkgs";
    // Default namespace name
    public static final String DEFAULT_NAMESPACE = "DAV:";
======= f622e3a^:"java/org/apache/naming/resources/DirContextURLStreamHandlerFactory.java"

 * Factory for Stream handlers to a JNDI directory context.
    implements URLStreamHandlerFactory {
    
    // ----------------------------------------------------------- Constructors
    
    
    public DirContextURLStreamHandlerFactory() {
        // NOOP
    
    
    // ----------------------------------------------------- Instance Variables
    
    
    // ------------------------------------------------------------- Properties
    
    
    // ---------------------------------------- URLStreamHandlerFactory Methods
======= f622e3a^:"java/org/apache/naming/resources/DirContextURLStreamHandlerFactory.java"

======= f622e3a^:"java/org/apache/naming/resources/DirContextURLStreamHandlerFactory.java"


======= b24b0c0^:"java/org/apache/catalina/authenticator/AuthenticatorBase.java"

        if (log.isDebugEnabled())
            log.debug("Authenticated '" + principal.getName() + "' with type '"
                + authType + "'");

======= ef547fb^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java"

        PooledConnection pc = this.borrowConnection(0, null, null);
        if (pc!=null) {
            
            return new ConnectionFuture(pc);
        } 

======= 4a4d86e^:"java/org/apache/naming/resources/DirContextURLConnection.java"

        throw new FileNotFoundException();
======= 4a4d86e^:"java/org/apache/naming/resources/DirContextURLConnection.java"

            throw new FileNotFoundException();
======= 4a4d86e^:"java/org/apache/naming/resources/DirContextURLConnection.java"

            throw new FileNotFoundException();
======= 4a4d86e^:"java/org/apache/naming/resources/DirContextURLConnection.java"

                throw new FileNotFoundException();

======= e1bf740^:"java/org/apache/catalina/ant/JMXGetTask.java"

======= e1bf740^:"java/org/apache/catalina/ant/JMXGetTask.java"

                " in bean " + bean ); 
        execute("/jmxproxy/?get=" + bean 
                + "&att=" + attribute );
======= e1bf740^:"java/org/apache/catalina/ant/JMXQueryTask.java"

======= e1bf740^:"java/org/apache/catalina/ant/JMXQueryTask.java"

        String queryString = (query == null) ? "":("?qry="+query);
======= e1bf740^:"java/org/apache/catalina/ant/JMXSetTask.java"

======= e1bf740^:"java/org/apache/catalina/ant/JMXSetTask.java"

        execute("/jmxproxy/?set=" + bean 
                + "&att=" + attribute 
                + "&val=" + value);
======= e1bf740^:"java/org/apache/catalina/ant/ResourcesTask.java"

======= e1bf740^:"java/org/apache/catalina/ant/ResourcesTask.java"

            execute("/resources?type=" + type);
======= e1bf740^:"java/org/apache/catalina/ant/UndeployTask.java"

======= e1bf740^:"java/org/apache/catalina/ant/UndeployTask.java"

        execute("/undeploy?path=" + this.path);

======= 4b4ef0c^:"java/org/apache/catalina/startup/CatalinaProperties.java"

                System.setProperty(name, value);

======= 92ff888^:"java/org/apache/catalina/Lifecycle.java"

 * The valid state transitions for components that support Lifecycle are:
======= 92ff888^:"java/org/apache/catalina/Lifecycle.java"

 * |  |          ^                                           |  |  ^
 * |  |          |stop()            MUST_DESTROY------<-------  |  |
======= 92ff888^:"java/org/apache/catalina/Lifecycle.java"

     * Get the lifecycle listeners associated with this lifecycle. If this 
     * Lifecycle has no listeners registered, a zero-length array is returned.
======= 92ff888^:"java/org/apache/catalina/Lifecycle.java"

     * Prepare for the beginning of active use of the public methods of this
     * component.  This method should be called before any of the public
     * methods of this component are utilized. The following
     * {@link LifecycleEvent}s will be fired in the following order:
======= 92ff888^:"java/org/apache/catalina/Lifecycle.java"

     *                    and that the public methods may be used.</li>
======= 92ff888^:"java/org/apache/catalina/Lifecycle.java"

     * Gracefully terminate the active use of the public methods of this
     * component. Once the STOP_EVENT is fired, the public methods should not
     * be used. The following {@link LifecycleEvent}s will be fired in the
     * following order:
======= 92ff888^:"java/org/apache/catalina/Lifecycle.java"

     *                   and that the public methods may no longer be used.</li>
======= 92ff888^:"java/org/apache/catalina/LifecycleListener.java"

 * Lifecycle interface.
======= 92ff888^:"java/org/apache/catalina/LifecycleState.java"

    MUST_DESTROY(true, null);
======= 92ff888^:"java/org/apache/catalina/LifecycleState.java"

     * Is a component in this state available for use?
======= 92ff888^:"java/org/apache/catalina/util/LifecycleBase.java"

        setStateInternal(LifecycleState.STOPPING_PREP, null, false);
======= 92ff888^:"java/org/apache/catalina/util/LifecycleBase.java"

            // stopInternal() permits STOPPING_PREP to STOPPING

======= dcda15d^:"java/org/apache/coyote/http11/Http11NioProcessor.java"

======= dcda15d^:"java/org/apache/coyote/http11/Http11NioProcessor.java"

======= dcda15d^:"java/org/apache/coyote/http11/Http11NioProcessor.java"

                    Object sslO = sslSupport.getPeerCertificateChain(true);
======= dcda15d^:"java/org/apache/tomcat/util/net/NioChannel.java"

    public boolean isInitHandshakeComplete() {
======= dcda15d^:"java/org/apache/tomcat/util/net/SecureNioChannel.java"

    protected boolean initHandshakeComplete = false;
    protected HandshakeStatus initHandshakeStatus; //gets set by begin handshake
======= dcda15d^:"java/org/apache/tomcat/util/net/SecureNioChannel.java"

        initHandshakeComplete = false;
        initHandshakeStatus = sslEngine.getHandshakeStatus();
======= dcda15d^:"java/org/apache/tomcat/util/net/SecureNioChannel.java"

        if ( initHandshakeComplete ) return 0; //we have done our initial handshake
        while (!initHandshakeComplete) {
            switch ( initHandshakeStatus ) {
                    initHandshakeComplete = !netOutBuffer.hasRemaining();
                    return initHandshakeComplete?0:SelectionKey.OP_WRITE; 
                        if (initHandshakeStatus == HandshakeStatus.NEED_TASK) 
                            initHandshakeStatus = tasks();
                    if ( initHandshakeStatus != HandshakeStatus.NEED_UNWRAP || (!flush(netOutBuffer)) ) {
======= dcda15d^:"java/org/apache/tomcat/util/net/SecureNioChannel.java"

                        if (initHandshakeStatus == HandshakeStatus.NEED_TASK) 
                            initHandshakeStatus = tasks();
                        throw new IOException("Invalid handshake status:"+initHandshakeStatus+" during handshake UNWRAP.");
                    initHandshakeStatus = tasks();
                default: throw new IllegalStateException("Invalid handshake status:"+initHandshakeStatus);
        return initHandshakeComplete?0:(SelectionKey.OP_WRITE|SelectionKey.OP_READ);
======= dcda15d^:"java/org/apache/tomcat/util/net/SecureNioChannel.java"

        initHandshakeStatus = result.getHandshakeStatus();
======= dcda15d^:"java/org/apache/tomcat/util/net/SecureNioChannel.java"

            initHandshakeStatus = result.getHandshakeStatus();
                initHandshakeStatus = tasks();
                   initHandshakeStatus == HandshakeStatus.NEED_UNWRAP;
======= dcda15d^:"java/org/apache/tomcat/util/net/SecureNioChannel.java"

        if (!initHandshakeComplete) throw new IllegalStateException("Handshake incomplete, you must complete handshake before reading data.");
======= dcda15d^:"java/org/apache/tomcat/util/net/SecureNioChannel.java"

    public boolean isInitHandshakeComplete() {
        return initHandshakeComplete;

======= 9d542ed^:"java/org/apache/catalina/core/StandardContext.java"

        // Send j2ee.object.deleted notification 
        Notification notification = 
            new Notification("j2ee.object.deleted", this.getObjectName(), 
                             sequenceNumber.getAndIncrement());
        broadcaster.sendNotification(notification);
======= 9d542ed^:"test/org/apache/catalina/startup/TestTomcat.java"

        Thw new Crawler Session Manager Valve ensures that crawlers are

======= f22600c^:"java/org/apache/catalina/realm/JNDIRealm.java"

======= f22600c^:"java/org/apache/catalina/realm/JNDIRealm.java"

======= f22600c^:"java/org/apache/catalina/realm/JNDIRealm.java"

            results = context.search(roleBase, filter, controls);
        <p>The base directory entry for performing role searches. If
        not specified the top-level element in the directory context
        will be used.</p>

======= a085c4a^:"java/org/apache/catalina/realm/JNDIRealm.java"

======= a085c4a^:"java/org/apache/catalina/realm/JNDIRealm.java"

        NamingEnumeration<SearchResult> results =
            context.search(roleBase, filter, controls);

======= 514e713^:"java/org/apache/catalina/connector/OutputBuffer.java"


======= a9c3193^:"java/org/apache/naming/resources/BaseDirContext.java"

======= a9c3193^:"java/org/apache/naming/resources/BaseDirContext.java"

        NamingEnumeration<Binding> bindings = doListBindings(name);
        if (bindings != null)
            return bindings;
        
            if (altDirContext instanceof BaseDirContext)
                bindings = ((BaseDirContext) altDirContext).doListBindings(
            else {
                try {
                    bindings = altDirContext.listBindings(name);
                } catch (NamingException ne) {
                    // Ignore
            if (bindings != null)
                return bindings;
======= a9c3193^:"java/org/apache/naming/resources/BaseDirContext.java"

    protected abstract NamingEnumeration<Binding> doListBindings(String name)
======= a9c3193^:"java/org/apache/naming/resources/FileDirContext.java"

======= a9c3193^:"java/org/apache/naming/resources/FileDirContext.java"

======= a9c3193^:"java/org/apache/naming/resources/FileDirContext.java"

    protected NamingEnumeration<Binding> doListBindings(String name)
======= a9c3193^:"java/org/apache/naming/resources/FileDirContext.java"

        return new NamingContextBindingsEnumeration(list(file).iterator(),
                this);
======= a9c3193^:"java/org/apache/naming/resources/FileDirContext.java"

    protected ArrayList<NamingEntry> list(File file) {
        ArrayList<NamingEntry> entries = new ArrayList<NamingEntry>();
======= a9c3193^:"java/org/apache/naming/resources/VirtualDirContext.java"

    protected ArrayList<NamingEntry> list(File file) {
        ArrayList<NamingEntry> entries = super.list(file);
======= a9c3193^:"java/org/apache/naming/resources/WARDirContext.java"

======= a9c3193^:"java/org/apache/naming/resources/WARDirContext.java"

======= a9c3193^:"java/org/apache/naming/resources/WARDirContext.java"

    protected NamingEnumeration<Binding> doListBindings(String strName)
            return new NamingContextBindingsEnumeration(list(entries).iterator(),
                    this);
        return new NamingContextBindingsEnumeration(list(entry).iterator(),
                this);

======= b56bf50^:"java/org/apache/coyote/ajp/AjpAprProtocol.java"

                    if (state == SocketState.OPEN) {
                        connections.put(socket, processor);
                    }

======= 3810b04^:"java/org/apache/catalina/Context.java"

======= 3810b04^:"java/org/apache/catalina/core/ApplicationDispatcher.java"

            if (disInt != DispatcherType.ERROR) {
                state.outerRequest.setAttribute
                    (ApplicationFilterFactory.DISPATCHER_REQUEST_PATH_ATTR,
                     getCombinedPath());
                state.outerRequest.setAttribute
                    (ApplicationFilterFactory.DISPATCHER_TYPE_ATTR,
                     DispatcherType.FORWARD);
                invoke(state.outerRequest, response, state);
            } else {
                invoke(state.outerRequest, response, state);
        }
======= 3810b04^:"java/org/apache/catalina/core/StandardContext.java"


======= cfab791^:"java/javax/el/BeanELResolver.java"

                if (m.getParameterTypes().length == paramCount) {
======= cfab791^:"java/org/apache/el/parser/AstValue.java"

                base = resolver.invoke(ctx, base, suffix,
                        mps.getParameterTypes(ctx), mps.getParameters(ctx));
======= cfab791^:"test/org/apache/el/TestMethodExpressionImpl.java"


======= 72418ba^:"java/org/apache/catalina/connector/CoyoteAdapter.java"

======= 72418ba^:"java/org/apache/catalina/core/StandardContext.java"

======= 72418ba^:"java/org/apache/catalina/core/StandardContext.java"

            // Don't fire the listener for async requests
            if (!DispatcherType.ASYNC.equals(request.getDispatcherType())) {
                ServletRequestEvent event = 
                        new ServletRequestEvent(getServletContext(), request);
    
                for (int i = 0; i < instances.length; i++) {
                    if (instances[i] == null)
                        continue;
                    if (!(instances[i] instanceof ServletRequestListener))
                        continue;
                    ServletRequestListener listener =
                        (ServletRequestListener) instances[i];
                    
                    try {
                        listener.requestInitialized(event);
                    } catch (Throwable t) {
                        ExceptionUtils.handleThrowable(t);
                        getLogger().error(sm.getString(
                                "standardContext.requestListener.requestInit",
                                instances[i].getClass().getName()), t);
                        request.setAttribute(RequestDispatcher.ERROR_EXCEPTION, t);
                        return false;
                    }
======= 72418ba^:"java/org/apache/catalina/core/StandardContext.java"

            // Don't fire the listener for async requests
            if (!DispatcherType.ASYNC.equals(request.getDispatcherType())) {
                ServletRequestEvent event = 
                    new ServletRequestEvent(getServletContext(), request);
                for (int i = 0; i < instances.length; i++) {
                    int j = (instances.length -1) -i;
                    if (instances[j] == null)
                        continue;
                    if (!(instances[j] instanceof ServletRequestListener))
                        continue;
                    ServletRequestListener listener =
                        (ServletRequestListener) instances[j];
                    
                    try {
                        listener.requestDestroyed(event);
                    } catch (Throwable t) {
                        ExceptionUtils.handleThrowable(t);
                        getLogger().error(sm.getString(
                                "standardContext.requestListener.requestInit",
                                instances[j].getClass().getName()), t);
                        request.setAttribute(RequestDispatcher.ERROR_EXCEPTION, t);
                        return false;
                    }
======= 72418ba^:"java/org/apache/catalina/core/StandardContextValve.java"

======= 72418ba^:"java/org/apache/catalina/core/StandardContextValve.java"

        if (context.fireRequestInitEvent(request)) {
            context.fireRequestDestroyEvent(request);
======= 72418ba^:"test/org/apache/catalina/core/TestAsyncContextImpl.java"

======= 72418ba^:"test/org/apache/catalina/core/TestAsyncContextImpl.java"

======= 72418ba^:"test/org/apache/catalina/core/TestAsyncContextImpl.java"

        StringBuilder expected = new StringBuilder();
======= 72418ba^:"test/org/apache/catalina/core/TestAsyncContextImpl.java"

======= 72418ba^:"test/org/apache/catalina/core/TestAsyncContextImpl.java"

======= 72418ba^:"test/org/apache/catalina/core/TestAsyncContextImpl.java"

        StringBuilder expected = new StringBuilder();
======= 72418ba^:"test/org/apache/catalina/core/TestAsyncContextImpl.java"

======= 72418ba^:"test/org/apache/catalina/core/TestAsyncContextImpl.java"

======= 72418ba^:"test/org/apache/catalina/core/TestAsyncContextImpl.java"

        StringBuilder expected = new StringBuilder();
======= 72418ba^:"test/org/apache/catalina/core/TestAsyncContextImpl.java"

        expected.append("ErrorServletGet-onError-onComplete-");

======= 4b21973^:"java/org/apache/catalina/ant/RolesTask.java"

 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 * Ant task that implements the <code>/roles</code> command, supported by the
 * Tomcat manager application.
 *
 * @author Craig R. McClanahan
 * @version $Id$
 * @since 4.1
 */
    // ------------------------------------------------------------- Properties
    // --------------------------------------------------------- Public Methods
    /**
     * Execute the requested operation.
     *
     * @exception BuildException if an error occurs
     */
    @Override
    public void execute() throws BuildException {
        super.execute();
        execute("/roles");
    }
        name="roles"
        classname="org.apache.catalina.ant.RolesTask" />
  <typedef
======= 4b21973^:"java/org/apache/catalina/manager/ManagerServlet.java"

======= 4b21973^:"java/org/apache/catalina/manager/ManagerServlet.java"

======= 4b21973^:"java/org/apache/catalina/manager/ManagerServlet.java"

 * <li><b>/roles</b> - Enumerate the available security role names and
 *     descriptions from the user database connected to the <code>users</code>
 *     resource reference.
======= 4b21973^:"java/org/apache/catalina/manager/ManagerServlet.java"

        } else if (command.equals("/roles")) {
            roles(writer, smClient);
======= 4b21973^:"java/org/apache/catalina/manager/ManagerServlet.java"

     * Render a list of security role names (and corresponding descriptions)
     * from the <code>org.apache.catalina.UserDatabase</code> resource that is
     * connected to the <code>users</code> resource reference.  Typically, this
     * will be the global user database, but can be adjusted if you have
     * different user databases for different virtual hosts.
     *
     * @param writer Writer to render to
     */
    protected void roles(PrintWriter writer,  StringManager smClient) {
        if (debug >= 1) {
            log("roles:  List security roles from user database");
        }
        // Look up the UserDatabase instance we should use
        UserDatabase database = null;
        try {
            InitialContext ic = new InitialContext();
            database = (UserDatabase) ic.lookup("java:comp/env/users");
        } catch (NamingException e) {
            writer.println(smClient.getString(
                    "managerServlet.userDatabaseError"));
            log("java:comp/env/users", e);
            return;
        }
        if (database == null) {
            writer.println(smClient.getString(
                    "managerServlet.userDatabaseMissing"));
            return;
        }
        // Enumerate the available roles
        writer.println(smClient.getString("managerServlet.rolesList"));
        Iterator<Role> roles = database.getRoles();
        if (roles != null) {
            while (roles.hasNext()) {
                Role role = roles.next();
                writer.print(role.getRolename());
                writer.print(':');
                if (role.getDescription() != null) {
                    writer.print(role.getDescription());
                }
                writer.println();
            }
        }
    }
    /**
        <rev>1068549</rev> <bug>50667</bug>: Allow RPC callers to get confirmation when sending a reply.
  &lt;!-- Link to the user database we will get roles from --&gt;
  &lt;ResourceLink name="users" global="UserDatabase"
                type="org.apache.catalina.UserDatabase"/&gt;
  &lt;!-- Link to the user database we will get roles from --&gt;
  &lt;ResourceLink name="users" global="UserDatabase"
                type="org.apache.catalina.UserDatabase"/&gt;
  OK - Listed security roles
    in the user database.</li>
    creating user interfaces for selecting roles.</li>
    the successful lookup of the <code>org.apache.catalina.UserDatabase</code>
    resource.  Check the Tomcat log files for a stack trace associated with
    this error.</li>
    reference for the <code>users</code> resource that points at an
    appropriate user database instance.  Check your <code>manager.xml</code>
    file and ensure that you have created an appropriate
    <code>&lt;ResourceLink&gt;</code> or
    <code>&lt;ResourceParams&gt;</code> element for this resource.</li>
  &lt;taskdef name="roles"     classname="org.apache.catalina.ant.RolesTask"/&gt;
  <!-- Define reference to the user database for looking up roles -->
  <resource-env-ref>
    <description>
      Link to the UserDatabase instance from which we request lists of
      defined role names.  Typically, this will be connected to the global
      user database with a ResourceLink element in server.xml or the context
      configuration file for the Manager web application.
    </description>
    <resource-env-ref-name>users</resource-env-ref-name>
    <resource-env-ref-type>
      org.apache.catalina.UserDatabase
    </resource-env-ref-type>
  </resource-env-ref>

======= a073ac8^:"java/org/apache/catalina/core/StandardContext.java"

        ServletContext sc = getServletContext();
            sc.setInitParameter(names[i], findParameter(names[i]));
                if (sc.getInitParameter(params[i].getName()) == null) {
                    sc.setInitParameter(params[i].getName(),
                sc.setInitParameter(params[i].getName(), params[i].getValue());

======= 877a3df^:"java/org/apache/catalina/ha/session/DeltaRequest.java"

======= 877a3df^:"java/org/apache/catalina/ha/session/DeltaRequest.java"

======= 877a3df^:"java/org/apache/catalina/ha/session/DeltaRequest.java"

======= 877a3df^:"java/org/apache/catalina/ha/session/DeltaRequest.java"

======= 877a3df^:"java/org/apache/catalina/ha/session/DeltaSession.java"


======= d0f3899^:"java/org/apache/jasper/compiler/Generator.java"

                String charArrayName = textMap.get(text);
                if (charArrayName == null) {
                    charArrayName = "_jspx_char_array_" + charArrayCount++;
                    textMap.put(text, charArrayName);
                    caOut.printin("static char[] ");
                    caOut.print(charArrayName);
                    caOut.print(" = ");
                    caOut.print(quote(text));
                    caOut.println(".toCharArray();");
                n.setBeginJavaLine(out.getJavaLine());
                out.printil("out.write(" + charArrayName + ");");
                n.setEndJavaLine(out.getJavaLine());

======= 50f16fe^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/PooledConnection.java"

            return poolProperties.getValidator().validate(connection, validateAction);

======= 0313ded^:"java/org/apache/catalina/realm/JNDIRealm.java"


======= 272e30c^:"java/org/apache/catalina/startup/Embedded.java"

                log.debug( "INITIAL_CONTEXT_FACTORY alread set " + value );

======= e4bc803^:"java/org/apache/jasper/compiler/WebXml.java"

======= e4bc803^:"java/org/apache/jasper/compiler/WebXml.java"

    private InputStream is;
    private InputSource ip;
======= e4bc803^:"java/org/apache/jasper/compiler/WebXml.java"

            is = new ByteArrayInputStream(webXml.getBytes());
        if (is == null) {
======= e4bc803^:"java/org/apache/jasper/compiler/WebXml.java"

                    is = uri.openStream();
======= e4bc803^:"java/org/apache/jasper/compiler/WebXml.java"

        if (is == null) {
                is = uri.openStream();
        if (is == null) {
            ip = new InputSource(is);
            ip.setSystemId(systemId);
======= e4bc803^:"java/org/apache/jasper/compiler/WebXml.java"

        return ip;
        if (is != null) {
                is.close();

======= 5c9e352^:"java/org/apache/catalina/util/RequestUtil.java"

                if (ix + 2 >= len) {
======= 5c9e352^:"test/org/apache/catalina/util/TestRequestUtil.java"

    public void testURLDecodeString() {
======= 5c9e352^:"test/org/apache/catalina/util/TestRequestUtil.java"

        point the response is committed when a writer is beng used. (markt)

======= 9f41c91^:"java/org/apache/catalina/core/ApplicationContextFacade.java"

    implements ServletContext {

======= 6ac4a27^:"java/org/apache/catalina/core/StandardServer.java"

    private boolean stopAwait = false;
======= 6ac4a27^:"java/org/apache/catalina/core/StandardServer.java"

======= 6ac4a27^:"java/org/apache/catalina/core/StandardServer.java"

            while( true ) {
                try {
                    Thread.sleep( 10000 );
                } catch( InterruptedException ex ) {
                if( stopAwait ) return;
        
        ServerSocket serverSocket = null;
            serverSocket =
                new ServerSocket(port, 1,
                                 InetAddress.getByName(address));
            System.exit(1);
        // Loop waiting for a connection and a valid command
        while (true) {
            // Wait for the next connection
            Socket socket = null;
            InputStream stream = null;
            try {
                socket = serverSocket.accept();
                socket.setSoTimeout(10 * 1000);  // Ten seconds
                stream = socket.getInputStream();
            } catch (AccessControlException ace) {
                log.warn("StandardServer.accept security exception: "
                                   + ace.getMessage(), ace);
                continue;
            } catch (IOException e) {
                log.error("StandardServer.await: accept: ", e);
                System.exit(1);
            }
            // Read a set of characters from the socket
            StringBuilder command = new StringBuilder();
            int expected = 1024; // Cut off to avoid DoS attack
            while (expected < shutdown.length()) {
                if (random == null)
                    random = new Random();
                expected += (random.nextInt() % 1024);
            }
            while (expected > 0) {
                int ch = -1;
                    ch = stream.read();
                } catch (IOException e) {
                    log.warn("StandardServer.await: read: ", e);
                    ch = -1;
                if (ch < 32)  // Control character or EOF terminates loop
                command.append((char) ch);
                expected--;
            // Close the socket now that we are done with it
            try {
                socket.close();
            } catch (IOException e) {
                // Ignore
            // Match against our command string
            boolean match = command.toString().equals(shutdown);
            if (match) {
                log.info(sm.getString("standardServer.shutdownViaPort"));
                break;
            } else
                log.warn("StandardServer.await: Invalid command '" +
                                   command.toString() + "' received");
        // Close the server socket and return
        try {
            serverSocket.close();
        } catch (IOException e) {
            // Ignore
        }
======= 6ac4a27^:"java/org/apache/catalina/core/StandardServer.java"

        if (port == -1)
======= 6ac4a27^:"java/org/apache/catalina/startup/Catalina.java"

======= 6ac4a27^:"java/org/apache/catalina/startup/Catalina.java"

        if( getServer() == null ) {
======= 6ac4a27^:"java/org/apache/catalina/startup/Catalina.java"

            // Shutdown hook will take care of clean-up
            System.exit(0);
            if (getServer().getPort()>0) {
                Socket socket = new Socket(getServer().getAddress(),
                        getServer().getPort());
======= 6ac4a27^:"java/org/apache/catalina/startup/Catalina.java"

            getServer().stop();
        <bug>50683</bug>: Ensure annotations are scanned when upackWars is set
        to <code>false</code> in the Host where a web application is deployed.
        (markt)

======= 0084470^:"java/org/apache/coyote/http11/InternalNioInputBuffer.java"

        buf = new byte[headerBufferSize];
======= 0084470^:"java/org/apache/coyote/http11/InternalNioInputBuffer.java"

======= 0084470^:"java/org/apache/coyote/http11/InternalNioInputBuffer.java"

======= 0084470^:"java/org/apache/coyote/http11/InternalNioInputBuffer.java"

            parsingRequestLineStart = pos;
            parsingRequestLinePhase = 1;
        } 
        if ( parsingRequestLinePhase == 1 ) {
            // Mark the current buffer position
            
            if (pos >= lastValid) {
                if (useAvailableDataOnly) {
                    return false;
                }
                // Do a simple read with a short timeout
                if ( readSocket(true, false)==0 ) return false;
======= 0084470^:"java/org/apache/coyote/http11/InternalNioInputBuffer.java"

======= 0084470^:"java/org/apache/coyote/http11/InternalNioInputBuffer.java"

======= 0084470^:"java/org/apache/coyote/http11/InternalNioInputBuffer.java"

            if (buf.length - end < 4500) {
                // In this case, the request header was really large, so we allocate a 
                // brand new one; the old one will get GCed when subsequent requests
                // clear all references
                buf = new byte[buf.length];
                end = 0;
            }
            pos = end;
            lastValid = pos;

======= b4e9488^:"java/org/apache/tomcat/util/net/jsse/JSSESocketFactory.java"

======= b4e9488^:"java/org/apache/tomcat/util/net/jsse/JSSESocketFactory.java"

    static String defaultProtocol = "TLS";
    static String defaultKeystoreType = "JKS";
======= b4e9488^:"java/org/apache/tomcat/util/net/jsse/JSSESocketFactory.java"

    static final org.apache.juli.logging.Log log =
        org.apache.juli.logging.LogFactory.getLog(JSSESocketFactory.class);
======= b4e9488^:"java/org/apache/tomcat/util/net/jsse/JSSESocketFactory.java"

        if (!allowUnsafeLegacyRenegotiation) {
            // Prevent futher handshakes by removing all cipher suites
      request. If not specified, a default of <code>false</code> is used.</p>

======= d21437e^:"java/org/apache/naming/resources/WARDirContext.java"


======= 20ace41^:"java/org/apache/jasper/runtime/JspRuntimeLibrary.java"

            return Boolean.valueOf(s).booleanValue();
            return Byte.valueOf(s).byteValue();
======= 20ace41^:"java/org/apache/jasper/runtime/JspRuntimeLibrary.java"

            return Double.valueOf(s).doubleValue();
            return Float.valueOf(s).floatValue();
            return Integer.valueOf(s).intValue();
            return Short.valueOf(s).shortValue();
            return Long.valueOf(s).longValue();
======= 20ace41^:"java/org/apache/jasper/runtime/JspRuntimeLibrary.java"

                return new Byte((byte) 0);
                return new Byte(s);
                return new Character((char) 0);
                return new Character(s.charAt(0));
                return new Double(0);
                return new Double(s);
                return new Float(0);
                return new Float(s);
                return new Integer(0);
                return new Integer(s);
                return new Short((short) 0);
                return new Short(s);
                return new Long(0);
                return new Long(s);
======= 20ace41^:"java/org/apache/jasper/runtime/JspRuntimeLibrary.java"

                return new Byte(s);
                return s.length() > 0 ? new Character(s.charAt(0)) : null;
                return new Short(s);
                return new Integer(s);
                return new Float(s);
                return new Long(s);
                return new Double(s);
======= 20ace41^:"java/org/apache/jasper/runtime/JspRuntimeLibrary.java"

        return new Byte(b).toString();
        return Boolean.valueOf(b).toString();
        return new Short(s).toString();
        return new Integer(i).toString();
        return new Float(f).toString();
        return new Long(l).toString();
        return new Double(d).toString();
        return new Character(c).toString();
======= 20ace41^:"java/org/apache/jasper/runtime/JspRuntimeLibrary.java"

                    tmpval[i] = new Character(values[i].charAt(0));
======= 20ace41^:"java/org/apache/jasper/runtime/JspRuntimeLibrary.java"

            method.invoke(bean, new Object[] { new Integer(value) });
======= 20ace41^:"java/org/apache/jasper/runtime/JspRuntimeLibrary.java"

            method.invoke(bean, new Object[] { new Short(value) });
======= 20ace41^:"java/org/apache/jasper/runtime/JspRuntimeLibrary.java"

            method.invoke(bean, new Object[] { new Long(value) });
======= 20ace41^:"java/org/apache/jasper/runtime/JspRuntimeLibrary.java"

            method.invoke(bean, new Object[] { new Double(value) });
======= 20ace41^:"java/org/apache/jasper/runtime/JspRuntimeLibrary.java"

            method.invoke(bean, new Object[] { new Float(value) });
======= 20ace41^:"java/org/apache/jasper/runtime/JspRuntimeLibrary.java"

            method.invoke(bean, new Object[] { new Character(value) });
======= 20ace41^:"java/org/apache/jasper/runtime/JspRuntimeLibrary.java"

            method.invoke(bean, new Object[] { new Byte(value) });

======= af4549f^:"java/org/apache/jasper/compiler/TagFileProcessor.java"

                    // Add TLD
                    pageInfo.addDependant(jarResource.getEntry(location.getName()).toString());
                    // Add Tag
                    pageInfo.addDependant(jarResource.getEntry(tagFilePath.substring(1)).toString());

======= 2377f51^:"java/org/apache/catalina/ha/ClusterDeployer.java"

======= 2377f51^:"java/org/apache/catalina/ha/ClusterDeployer.java"

     * Sets the deployer for this cluster deployer to use.
     * @param deployer Deployer
     */
    // FIXME
    //public void setDeployer(Deployer deployer);
    /**
     * members of the cluster with the specified context path.
     * A context path of "" (the empty string) should be used for the root
     * application for this container.  Otherwise, the context path must
     * start with a slash.
     * @param contextPath The context path to which this application should
     * @param war A URL of type "jar:" that points to a WAR file, or type
     *  "file:" that points to an unpacked directory structure containing
     *  the web application to be installed
     * @exception IllegalArgumentException if the specified context path
     *  is malformed (it must be "" or start with a slash)
     * @exception IllegalStateException if the specified context path
    public void install(String contextPath, URL war) throws IOException;
     * path.  If this application is successfully removed, a
     * @param contextPath The context path of the application to be removed
     * @exception IllegalArgumentException if the specified context path
     *  is malformed (it must be "" or start with a slash)
     * @exception IllegalArgumentException if the specified context path does
    public void remove(String contextPath, boolean undeploy) throws IOException;
======= 2377f51^:"java/org/apache/catalina/ha/deploy/FarmWarDeployer.java"

======= 2377f51^:"java/org/apache/catalina/ha/deploy/FarmWarDeployer.java"

======= 2377f51^:"java/org/apache/catalina/ha/deploy/FarmWarDeployer.java"

 * applications in WAR form within the cluster.
======= 2377f51^:"java/org/apache/catalina/ha/deploy/FarmWarDeployer.java"

                            fmsg.getContextPath(), fmsg.getFileName()));
======= 2377f51^:"java/org/apache/catalina/ha/deploy/FarmWarDeployer.java"

                        String path = fmsg.getContextPath();
                        if (!isServiced(path)) {
                            addServiced(path);
                                remove(path);
                                check(path);
                                removeServiced(path);
                                        "farmWarDeployer.deployEnd", path));
                                    "farmWarDeployer.servicingDeploy", path,
                                    name));
======= 2377f51^:"java/org/apache/catalina/ha/deploy/FarmWarDeployer.java"

                    String path = umsg.getContextPath();
                                path));
                    if (!isServiced(path)) {
                        addServiced(path);
                            remove(path);
                            removeServiced(path);
                                    "farmWarDeployer.undeployEnd", path));
                                "farmWarDeployer.servicingUneploy", path));
======= 2377f51^:"java/org/apache/catalina/ha/deploy/FarmWarDeployer.java"

        File tmpFile = new File(msg.getFileName());
        File writeToFile = new File(getTempDir(), tmpFile.getName());
======= 2377f51^:"java/org/apache/catalina/ha/deploy/FarmWarDeployer.java"

     * cluster with the specified context path. A context path of "" (the empty
     * string) should be used for the root application for this container.
     * Otherwise, the context path must start with a slash.
     * @param contextPath
     *            The context path to which this application should be installed
     * @param war
     *            A URL of type "jar:" that points to a WAR file, or type
     *            "file:" that points to an unpacked directory structure
     *            containing the web application to be installed
     *                if the specified context path is malformed (it must be ""
     *                or start with a slash)
     *                if the specified context path is already attached to an
     *                existing web application
    public void install(String contextPath, URL war) throws IOException {
        FileMessageFactory factory = FileMessageFactory.getInstance(new File(
                war.getFile()), false);
        FileMessage msg = new FileMessage(localMember, war.getFile(),
                contextPath);
            log.debug(sm.getString("farmWarDeployer.sendStart", contextPath,
                    war));
                            contextPath, war, members[i]));
                    "farmWarDeployer.sendEnd", contextPath, war));
     * path. If this application is successfully removed, a ContainerEvent of
     * @param contextPath
     *            The context path of the application to be removed
     *                if the specified context path is malformed (it must be ""
     *                or start with a slash)
     *                if the specified context path does not identify a
    public void remove(String contextPath, boolean undeploy)
            log.info(sm.getString("farmWarDeployer.removeStart", contextPath));
                .currentTimeMillis(), "Undeploy:" + contextPath + ":"
                + System.currentTimeMillis(), contextPath, undeploy);
            log.debug(sm.getString("farmWarDeployer.removeTxMsg", contextPath));
                if (!isServiced(contextPath)) {
                    addServiced(contextPath);
                        remove(contextPath);
                        removeServiced(contextPath);
                            contextPath));
                        contextPath), ex);
======= 2377f51^:"java/org/apache/catalina/ha/deploy/FarmWarDeployer.java"

            String contextName = getContextName(deployWar);
                log.info(sm.getString("farmWarDeployer.modInstall", contextName,
                        deployWar.getAbsolutePath()));
                remove(contextName, false);
            install(contextName, deployWar.toURI().toURL());
======= 2377f51^:"java/org/apache/catalina/ha/deploy/FarmWarDeployer.java"

            String contextName = getContextName(removeWar);
                        contextName));
            remove(contextName, true);
     * Create a context path from war
     * @param war War filename
     * @return '/filename' or if war name is ROOT.war context name is empty
     *         string '' 
     */
    protected String getContextName(File war) {
        String contextName = "/"
        + war.getName().substring(0,
                war.getName().lastIndexOf(".war"));
        if("/ROOT".equals(contextName))
            contextName= "" ;
        return contextName ;
    }
    
    /**
======= 2377f51^:"java/org/apache/catalina/ha/deploy/FarmWarDeployer.java"

    protected void remove(String path) throws Exception {
        Context context = (Context) host.findChild(path);
                log.debug(sm.getString("farmWarDeployer.undeployLocal", path));
======= 2377f51^:"java/org/apache/catalina/ha/deploy/FarmWarDeployer.java"

            check(path);
======= 2377f51^:"java/org/apache/catalina/ha/deploy/FileMessage.java"

    private String contextPath;
                       String contextPath) {
        this.contextPath=contextPath;
======= 2377f51^:"java/org/apache/catalina/ha/deploy/FileMessage.java"

    public String getContextPath() {
        return contextPath;
======= 2377f51^:"java/org/apache/catalina/ha/deploy/FileMessageFactory.java"

            log.warn("Receive Message again -- Sender ActTimeout too short [ path: "
                    + msg.getContextPath()
======= 2377f51^:"java/org/apache/catalina/ha/deploy/FileMessageFactory.java"

            log.warn("Receive Message again -- Sender ActTimeout too short [ path: "
                    + msg.getContextPath()
======= 2377f51^:"java/org/apache/catalina/ha/deploy/UndeployMessage.java"

    private String contextPath;
======= 2377f51^:"java/org/apache/catalina/ha/deploy/UndeployMessage.java"

                           String contextPath,
        this.contextPath = contextPath;
======= 2377f51^:"java/org/apache/catalina/ha/deploy/UndeployMessage.java"

    public String getContextPath() {
        return contextPath;
    public void setContextPath(String contextPath) {
        this.contextPath = contextPath;

======= 5c13d8c^:"java/org/apache/catalina/core/JreMemoryLeakPreventionListener.java"

      * <code>sun.net.www.http.HttpClient</code> is triggered by a web
      * application. This first call will start a KeepAlive thread with the
      * thread's context class loader configured to be the web application class
      * loader. Defaults to <code>true</code>.
      */
     private boolean keepAliveProtection = true;
     public boolean isKeepAliveProtection() { return keepAliveProtection; }
     public void setKeepAliveProtection(boolean keepAliveProtection) {
         this.keepAliveProtection = keepAliveProtection;
     }
    
     /**
      * Protect against the memory leak caused when the first call to
======= 5c13d8c^:"java/org/apache/catalina/core/JreMemoryLeakPreventionListener.java"

                 * When a servlet opens a connection using a URL it will use
                 * sun.net.www.http.HttpClient which keeps a static reference to
                 * a keep-alive cache which is loaded using the web application
                 * class loader.
                 */
                if (keepAliveProtection) {
                    try {
                        Class.forName("sun.net.www.http.HttpClient");
                    } catch (ClassNotFoundException e) {
                        if (System.getProperty("java.vendor").startsWith(
                                "Sun")) {
                            log.error(sm.getString(
                                    "jreLeakListener.keepAliveFail"), e);
                        } else {
                            log.debug(sm.getString(
                                    "jreLeakListener.keepAliveFail"), e);
                        }
                    }
                }
                
                /*
======= 5c13d8c^:"java/org/apache/catalina/core/StandardContext.java"

======= 5c13d8c^:"java/org/apache/catalina/core/StandardContext.java"

======= 5c13d8c^:"java/org/apache/catalina/loader/WebappClassLoader.java"

        JVM_THREAD_GROUP_NAMES.add("system");
======= 5c13d8c^:"java/org/apache/catalina/loader/WebappClassLoader.java"

======= 5c13d8c^:"java/org/apache/catalina/loader/WebappClassLoader.java"

======= 5c13d8c^:"java/org/apache/catalina/loader/WebappClassLoader.java"

                    // Don't warn about JVM controlled threads
======= 5c13d8c^:"java/org/apache/catalina/loader/WebappLoader.java"

      <attribute name="keepAliveProtection" required="false">
        <p>Enables protection so that the KeepAlive thread started by
        <code>sun.net.www.http.HttpClient</code> does not result in a memory
        leak. The thread is started the first time the <code>HttpClient</code>
        class is used. Without this protection, if a web application uses this
        class the KeepAlive thread will be configured with the thread's context
        class loader set to the web application class loader which in turn will
        trigger a memory leak on reload. Defaults to <code>true</code>.</p>
      </attribute>

======= 0119483^:"java/org/apache/catalina/tribes/ByteMessage.java"

        in.read(message,0,length);

======= 3898ed0^:"java/org/apache/catalina/core/StandardContext.java"

    // -------------------------------------------------------- Private Methods
    private ClassLoader bindThread() {
======= 3898ed0^:"java/org/apache/catalina/core/StandardContext.java"

    private void unbindThread(ClassLoader oldContextClassLoader) {

======= fbd0110^:"java/org/apache/catalina/connector/Request.java"

======= fbd0110^:"java/org/apache/catalina/connector/Request.java"

======= fbd0110^:"java/org/apache/catalina/connector/Request.java"

            session.endAccess();

======= c0cd721^:"java/org/apache/catalina/servlets/CGIServlet.java"

======= c0cd721^:"java/org/apache/catalina/servlets/CGIServlet.java"

    
======= c0cd721^:"java/org/apache/catalina/servlets/CGIServlet.java"

======= c0cd721^:"java/org/apache/catalina/servlets/CGIServlet.java"

            String[] cmdAndArgs = new String[params.size() + 2];
            
            cmdAndArgs[0] = cgiExecutable;
            
            cmdAndArgs[1] = command;
            //create query arguments
            for (int i=0; i < params.size(); i++) {
                cmdAndArgs[i + 2] = params.get(i);
                proc = rt.exec(cmdAndArgs, hashToStringArray(env), wd);

======= 5cb0b7a^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java"

            idle.offer(new PooledConnection(poolProperties, this));
======= 5cb0b7a^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java"

        PooledConnection con = create();
======= 5cb0b7a^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java"

    protected PooledConnection create() {
======= 5cb0b7a^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java"


======= d95db3f^:"java/org/apache/catalina/core/ApplicationTaglibDescriptor.java"

        if (obj == null) {
            return false;
        }
======= d95db3f^:"java/org/apache/catalina/deploy/LoginConfig.java"

        if (obj == null)
            return false;
======= d95db3f^:"java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java"

        if ( o == null ) return false;
======= d95db3f^:"java/org/apache/el/parser/SimpleNode.java"

        if (obj == null) {
            return false;
        }
======= d95db3f^:"java/org/apache/naming/NamingEntry.java"

        if ((obj != null) && (obj instanceof NamingEntry)) {
======= d95db3f^:"java/org/apache/tomcat/util/net/URL.java"

        if (obj == null)
            return (false);

======= de188ad^:"java/org/apache/catalina/ant/AbstractCatalinaTask.java"

    protected String url = "http://localhost:8080/manager";
      <code>http://localhost:8080/manager</code> (which corresponds
      to a standard installation of Tomcat 5).
  <property name="url"      value="http://localhost:8080/manager"/>
  <property name="manager.url"   value="http://localhost:8080/manager"/>
                <code>http://localhost:8080/manager</code>.

======= 30468b7^:"java/org/apache/catalina/core/ApplicationFilterConfig.java"

            // Allocate a new filter instance
            getFilter();

======= d269ce3^:"java/org/apache/catalina/ha/deploy/WarWatcher.java"

                currentStatus.remove(info.getWar().getAbsolutePath());

======= 35a84d1^:"java/org/apache/catalina/connector/CoyoteAdapter.java"

======= 35a84d1^:"java/org/apache/catalina/connector/CoyoteAdapter.java"

======= 35a84d1^:"java/org/apache/catalina/connector/CoyoteAdapter.java"

        request.recycle();
        response.recycle();
======= 35a84d1^:"java/org/apache/catalina/valves/AccessLogValve.java"

        if (getState().isAvailable() && getEnabled()) {                
            final String t1Name = AccessLogValve.class.getName()+".t1";
            // Pass this request on to the next valve in our pipeline
            long t1 = System.currentTimeMillis();
            boolean asyncdispatch = request.isAsyncDispatching();
            if (!asyncdispatch) {
                request.setAttribute(t1Name, Long.valueOf(t1));
            }
    
            getNext().invoke(request, response);
    
            //we're not done with the request
            if (request.isAsyncDispatching()) {
                return;
            } else if (asyncdispatch && request.getAttribute(t1Name)!=null) {
                t1 = ((Long)request.getAttribute(t1Name)).longValue();
            }
            
            long t2 = System.currentTimeMillis();
            long time = t2 - t1;
            log(request,response, time);
        } else
            getNext().invoke(request, response);       
        if (logElements == null || condition != null
======= 35a84d1^:"java/org/apache/catalina/valves/AccessLogValve.java"

            long length = response.getBytesWritten(true);
======= 35a84d1^:"java/org/apache/catalina/valves/JDBCAccessLogValve.java"

    public void invoke(Request request, Response response) 
        throws IOException, ServletException {
        
        log (request, response, 0);
======= 35a84d1^:"java/org/apache/coyote/http11/AbstractOutputBuffer.java"

======= 35a84d1^:"java/org/apache/coyote/http11/AbstractOutputBuffer.java"

        byteCount = 0;

======= d8f8be1^:"java/org/apache/catalina/ha/tcp/ReplicationValve.java"

        return filter.matcher(uri).matches();

======= 51650a1^:"java/org/apache/catalina/users/MemoryUserDatabase.java"

======= 51650a1^:"java/org/apache/catalina/users/MemoryUserDatabase.java"

======= 51650a1^:"java/org/apache/catalina/users/MemoryUserDatabase.java"

======= 51650a1^:"java/org/apache/catalina/users/MemoryUserDatabase.java"

                     new MemoryGroupCreationFactory(this));
                     new MemoryRoleCreationFactory(this));
                     new MemoryUserCreationFactory(this));

======= 164fd40^:"java/org/apache/catalina/startup/Catalina.java"

        SystemLogHandler systemlog = new SystemLogHandler(System.out);
        System.setOut(systemlog);
        System.setErr(systemlog);
======= 164fd40^:"java/org/apache/catalina/startup/Embedded.java"

            SystemLogHandler systemlog = new SystemLogHandler(System.out);
            System.setOut(systemlog);
            System.setErr(systemlog);

======= e69347b^:"java/org/apache/jasper/compiler/Generator.java"

                out.printil("public String getServletInfo() {");
======= e69347b^:"java/org/apache/jasper/compiler/Generator.java"

            out.printil("private void _jspInit(ServletConfig config) {");
======= e69347b^:"java/org/apache/jasper/compiler/Generator.java"

        out.printil("private static final JspFactory _jspxFactory = JspFactory.getDefaultFactory();");
        out.printil("private static java.util.List<String> _jspx_dependants;");
            out.printin("_jspx_dependants = new java.util.ArrayList<String>(");
======= e69347b^:"java/org/apache/jasper/compiler/Generator.java"

        out.printil("public java.util.List<String> getDependants() {");
======= e69347b^:"java/org/apache/jasper/compiler/Generator.java"

            out.printin("                 SingleThreadModel");
======= e69347b^:"java/org/apache/jasper/compiler/Generator.java"

        out.println("(final HttpServletRequest request, final HttpServletResponse response)");
        out.println("        throws java.io.IOException, ServletException {");
        out.printil("final PageContext pageContext;");
            out.printil("HttpSession session = null;");
            out.printil("Throwable exception = org.apache.jasper.runtime.JspRuntimeLibrary.getThrowable(request);");
            out.printil("response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);");
        out.printil("final ServletContext application;");
        out.printil("final ServletConfig config;");
        out.printil("JspWriter out = null;");
        out.printil("final Object page = this;");
        out.printil("JspWriter _jspx_out = null;");
        out.printil("PageContext _jspx_page_context = null;");
======= e69347b^:"java/org/apache/jasper/compiler/Generator.java"

                out.printil("throw new SkipPageException();");
======= e69347b^:"java/org/apache/jasper/compiler/Generator.java"

            String scopename = "PageContext.PAGE_SCOPE"; // Default to page
                scopename = "PageContext.REQUEST_SCOPE";
                scopename = "PageContext.SESSION_SCOPE";
                scopename = "PageContext.APPLICATION_SCOPE";
======= e69347b^:"java/org/apache/jasper/compiler/Generator.java"

                    out.printil("} catch (ClassNotFoundException exc) {");
                    out.printil("} catch (Exception exc) {");
                    out.printin("throw new ServletException(");
======= e69347b^:"java/org/apache/jasper/compiler/Generator.java"

                out.print("PageContext _jspx_page_context");
                out.printil("        throws Throwable {");
                    out.printil("PageContext pageContext = _jspx_page_context;");
                out.printil("JspWriter out = _jspx_page_context.getOut();");
======= e69347b^:"java/org/apache/jasper/compiler/Generator.java"

                        nvp = " + (Boolean.valueOf(" + omit + ")?\"\":\" " +
======= e69347b^:"java/org/apache/jasper/compiler/Generator.java"

            out.printil("jspContext.getELContext().putContext(JspContext.class,getJspContext());");
======= e69347b^:"java/org/apache/jasper/compiler/Generator.java"

            out.printil("jspContext.getELContext().putContext(JspContext.class,getJspContext());");
======= e69347b^:"java/org/apache/jasper/compiler/Generator.java"

                out.printil("throw new SkipPageException();");
======= e69347b^:"java/org/apache/jasper/compiler/Generator.java"

                out.printil("} catch (Throwable _jspx_exception) {");
======= e69347b^:"java/org/apache/jasper/compiler/Generator.java"

                    sb.append("new Class[] {");
======= e69347b^:"java/org/apache/jasper/compiler/Generator.java"

            String scopeName = "PageContext.PAGE_SCOPE"; // Default to page
                scopeName = "PageContext.REQUEST_SCOPE";
                scopeName = "PageContext.SESSION_SCOPE";
                scopeName = "PageContext.APPLICATION_SCOPE";
======= e69347b^:"java/org/apache/jasper/compiler/Generator.java"

                        out.printil("String "
======= e69347b^:"java/org/apache/jasper/compiler/Generator.java"

                    out.printil("String " + varName + " = "
                out.printil("String " + varName + " = \"\";");
======= e69347b^:"java/org/apache/jasper/compiler/Generator.java"

            out.printil("HttpSession session = _jspx_page_context.getSession();");
            out.printil("ServletContext application = _jspx_page_context.getServletContext();");
            out.printil("HttpServletRequest request = (HttpServletRequest)_jspx_page_context.getRequest();");
            out.printil("HttpServletResponse response = (HttpServletResponse)_jspx_page_context.getResponse();");
======= e69347b^:"java/org/apache/jasper/compiler/Generator.java"

        out.printil("} catch (Throwable t) {");
        out.printil("if (!(t instanceof SkipPageException)){");
======= e69347b^:"java/org/apache/jasper/compiler/Generator.java"

        out.printil("private JspContext jspContext;");
======= e69347b^:"java/org/apache/jasper/compiler/Generator.java"

        out.printil("public void doTag() throws JspException, java.io.IOException {");
======= e69347b^:"java/org/apache/jasper/compiler/Generator.java"

        out.printil("PageContext _jspx_page_context = (PageContext)jspContext;");
        out.printil("HttpServletRequest request = "
                + "(HttpServletRequest) _jspx_page_context.getRequest();");
        out.printil("HttpServletResponse response = "
                + "(HttpServletResponse) _jspx_page_context.getResponse();");
        out.printil("HttpSession session = _jspx_page_context.getSession();");
        out.printil("ServletContext application = _jspx_page_context.getServletContext();");
        out.printil("ServletConfig config = _jspx_page_context.getServletConfig();");
        out.printil("JspWriter out = jspContext.getOut();");
        out.printil("jspContext.getELContext().putContext(JspContext.class,jspContext);");
======= e69347b^:"java/org/apache/jasper/compiler/Generator.java"

        out.printil("} catch( Throwable t ) {");
        out.printil("if( t instanceof SkipPageException )");
        out.printil("    throw (SkipPageException) t;");
        out.printil("if( t instanceof IllegalStateException )");
        out.printil("    throw (IllegalStateException) t;");
        out.printil("if( t instanceof JspException )");
        out.printil("    throw (JspException) t;");
        out.printil("throw new JspException(t);");
======= e69347b^:"java/org/apache/jasper/compiler/Generator.java"

        out.printil("jspContext.getELContext().putContext(JspContext.class,super.getJspContext());");
======= e69347b^:"java/org/apache/jasper/compiler/Generator.java"

            out.printil("public void setJspContext(JspContext ctx, java.util.Map aliasMap) {");
            out.printil("public void setJspContext(JspContext ctx) {");
======= e69347b^:"java/org/apache/jasper/compiler/Generator.java"

        out.printil("public JspContext getJspContext() {");
======= e69347b^:"java/org/apache/jasper/compiler/Generator.java"

        out.printil("public void setDynamicAttribute(String uri, String localName, Object value) throws JspException {");
======= e69347b^:"java/org/apache/jasper/compiler/Generator.java"

                    + "( int discriminator, JspContext jspContext, "
======= e69347b^:"java/org/apache/jasper/compiler/Generator.java"

            out.println(result.getId() + "( " + "JspWriter out ) ");
            out.printil("throws Throwable");
======= e69347b^:"java/org/apache/jasper/compiler/Generator.java"

            out.printil("throws JspException");
            out.printil("JspWriter out = null;");
======= e69347b^:"java/org/apache/jasper/compiler/Generator.java"

            out.printil("this.jspContext.getELContext().putContext(JspContext.class,this.jspContext);");
======= e69347b^:"java/org/apache/jasper/compiler/Generator.java"

            out.printil("catch( Throwable e ) {");
            out.printil("if (e instanceof SkipPageException)");
            out.printil("    throw (SkipPageException) e;");
            out.printil("throw new JspException( e );");
======= e69347b^:"java/org/apache/jasper/compiler/JspUtil.java"

                        + ".class, " + "(PageContext)" + jspCtxt + ", "
======= e69347b^:"java/org/apache/jasper/compiler/JspUtil.java"

            return "(Boolean) org.apache.jasper.runtime.JspRuntimeLibrary.coerce("
                    + s + ", Boolean.class)";
                return "new Boolean(false)";
                return "new Boolean(" + Boolean.valueOf(s).toString() + ")";
======= e69347b^:"java/org/apache/jasper/compiler/JspUtil.java"

            return "(Byte) org.apache.jasper.runtime.JspRuntimeLibrary.coerce("
                    + s + ", Byte.class)";
                return "new Byte((byte) 0)";
                return "new Byte((byte)" + Byte.valueOf(s).toString() + ")";
======= e69347b^:"java/org/apache/jasper/compiler/JspUtil.java"

            return "(Character) org.apache.jasper.runtime.JspRuntimeLibrary.coerce("
                    + s + ", Character.class)";
                return "new Character((char) 0)";
                return "new Character((char) " + (int) ch + ")";
======= e69347b^:"java/org/apache/jasper/compiler/JspUtil.java"

            return "(Double) org.apache.jasper.runtime.JspRuntimeLibrary.coerce("
                return "new Double(0)";
                return "new Double(" + Double.valueOf(s).toString() + ")";
======= e69347b^:"java/org/apache/jasper/compiler/JspUtil.java"

            return "(Float) org.apache.jasper.runtime.JspRuntimeLibrary.coerce("
                    + s + ", Float.class)";
                return "new Float(0)";
                return "new Float(" + Float.valueOf(s).toString() + "f)";
======= e69347b^:"java/org/apache/jasper/compiler/JspUtil.java"

            return "(Integer) org.apache.jasper.runtime.JspRuntimeLibrary.coerce("
                    + s + ", Integer.class)";
                return "new Integer(0)";
                return "new Integer(" + Integer.valueOf(s).toString() + ")";
======= e69347b^:"java/org/apache/jasper/compiler/JspUtil.java"

            return "(Short) org.apache.jasper.runtime.JspRuntimeLibrary.coerce("
                    + s + ", Short.class)";
                return "new Short((short) 0)";
                return "new Short(\"" + Short.valueOf(s).toString() + "\")";
======= e69347b^:"java/org/apache/jasper/compiler/JspUtil.java"

            return "(Long) org.apache.jasper.runtime.JspRuntimeLibrary.coerce("
                    + s + ", Long.class)";
                return "new Long(0)";
                return "new Long(" + Long.valueOf(s).toString() + "l)";
======= e69347b^:"java/org/apache/jasper/compiler/JspUtil.java"

            return "Void.TYPE";

======= 0ccff07^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java"

======= 0ccff07^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/PoolProperties.java"

======= 0ccff07^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/PoolProperties.java"

    protected int maxActive = 100;

======= fd990a4^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/interceptor/StatementCache.java"

======= fd990a4^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/interceptor/StatementCache.java"

======= fd990a4^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/interceptor/StatementCache.java"

======= fd990a4^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/jmx/ConnectionPool.java"


======= 4ce656a^:"webapps/examples/WEB-INF/classes/CookieExample.java"

======= 4ce656a^:"webapps/examples/WEB-INF/classes/CookieExample.java"

        String cookieName = request.getParameter("cookiename");
        String cookieValue = request.getParameter("cookievalue");
        if (cookieName != null && cookieValue != null) {
            Cookie cookie = new Cookie(cookieName, cookieValue);
            response.addCookie(cookie);

======= a6b37af^:"java/org/apache/catalina/ant/BaseRedirectorHelperTask.java"

            if (redirectOutput) {

======= 06b8609^:"java/org/apache/naming/java/javaURLContextFactory.java"

======= 06b8609^:"java/org/apache/naming/java/javaURLContextFactory.java"

======= 06b8609^:"java/org/apache/naming/java/javaURLContextFactory.java"

            synchronized(getClass()) {

======= 869c6f4^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java"

======= 869c6f4^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java"

            if ((!cancelled.get()) && cancelled.compareAndSet(false, true)) {
======= 869c6f4^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java"

            PooledConnection pc = pcFuture.get(timeout,unit);
======= 869c6f4^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java"

            return pcFuture.isCancelled() || cancelled.get();
            return pcFuture.isDone();
======= 869c6f4^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java"



======= 5c2742c^:"java/org/apache/naming/resources/ProxyDirContext.java"

            return cache.unload(name);

======= ce64f9b^:"java/org/apache/coyote/http11/Http11AprProcessor.java"


======= a0ef3e6^:"java/org/apache/catalina/ha/session/DeltaManager.java"

======= a0ef3e6^:"java/org/apache/catalina/ha/session/DeltaManager.java"


======= 3541fc6^:"java/org/apache/catalina/filters/RemoteIpFilter.java"

            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(request.getHeader(remoteIpHeader));
======= 3541fc6^:"java/org/apache/catalina/filters/RemoteIpFilter.java"

                        + request.getHeader(remoteIpHeader) + ", original[" + protocolHeader + "]='"
                        + xRequest.getHeader(remoteIpHeader) + ", new[" + proxiesHeader + "]='" + xRequest.getHeader(proxiesHeader) + "'");
======= 3541fc6^:"java/org/apache/catalina/valves/RemoteIpValve.java"

======= 3541fc6^:"java/org/apache/catalina/valves/RemoteIpValve.java"

            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(request.getHeader(remoteIpHeader));
======= 3541fc6^:"test/org/apache/catalina/filters/TestRemoteIpFilter.java"

======= 3541fc6^:"test/org/apache/catalina/filters/TestRemoteIpFilter.java"

        request.setHeader("x-forwarded-for", "140.211.11.130, 192.168.0.10, 192.168.0.11");
======= 3541fc6^:"test/org/apache/catalina/filters/TestRemoteIpFilter.java"

        request.setHeader("x-forwarded-for", "140.211.11.130, proxy1, proxy2");
======= 3541fc6^:"test/org/apache/catalina/valves/TestRemoteIpValve.java"

        request.getCoyoteRequest().getMimeHeaders().addValue("x-forwarded-for").setString("140.211.11.130, proxy1, proxy2");

======= 688e61e^:"java/org/apache/tomcat/util/net/NioEndpoint.java"

                        attachment.access();
                        iterator.remove();
                        processKey(sk, attachment);

======= 76b6415^:"java/org/apache/catalina/realm/JNDIRealm.java"

======= 76b6415^:"java/org/apache/catalina/realm/JNDIRealm.java"

======= 76b6415^:"java/org/apache/catalina/realm/JNDIRealm.java"


======= b19fb3b^:"java/org/apache/el/lang/ELArithmetic.java"

        else if (DOUBLE.matches(obj0, obj1))
            delegate = DOUBLE;
        else if (BIGINTEGER.matches(obj0, obj1))
======= b19fb3b^:"java/org/apache/el/lang/ELArithmetic.java"

            delegate = BIGDECIMAL;
======= b19fb3b^:"java/org/apache/el/lang/ELArithmetic.java"

        else if (DOUBLE.matches(obj0, obj1))
            delegate = DOUBLE;
        else if (BIGINTEGER.matches(obj0, obj1))
======= b19fb3b^:"java/org/apache/el/lang/ELArithmetic.java"

        else if (DOUBLE.matches(obj0, obj1))
            delegate = DOUBLE;
        else if (BIGINTEGER.matches(obj0, obj1))
======= b19fb3b^:"java/org/apache/el/lang/ELArithmetic.java"


======= 59b17c1^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java"

        PooledConnection con = borrowConnection(-1);
======= 59b17c1^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java"

                initialPool[i] = this.borrowConnection(0); //don't wait, should be no contention
======= 59b17c1^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java"

    private PooledConnection borrowConnection(int wait) throws SQLException {
======= 59b17c1^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java"

                PooledConnection result = borrowConnection(now, con);
======= 59b17c1^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java"

                    return createConnection(now, con);
======= 59b17c1^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java"

    protected PooledConnection createConnection(long now,
            PooledConnection notUsed) throws SQLException {
======= 59b17c1^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java"

    protected PooledConnection borrowConnection(long now, PooledConnection con) throws SQLException {
======= 59b17c1^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java"

            if ((!con.isDiscarded()) && con.validate(PooledConnection.VALIDATE_BORROW)) {
                //set the timestamp
                con.setTimestamp(now);
                if (getPoolProperties().isLogAbandoned()) {
                    //set the stack trace for this pool
                    con.setStackTrace(getThreadDump());
                }
                if (!busy.offer(con)) {
                    log.debug("Connection doesn't fit into busy array, connection will not be traceable.");
                return con;
            //is either discarded or validation failed.
======= 59b17c1^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java"

                        pc = borrowConnection(System.currentTimeMillis(),pc);
======= 59b17c1^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/DataSourceFactory.java"

======= 59b17c1^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/DataSourceFactory.java"

======= 59b17c1^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/DataSourceFactory.java"

======= 59b17c1^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/DataSourceProxy.java"

        return getConnection();
======= 59b17c1^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/DataSourceProxy.java"

======= 59b17c1^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/PoolConfiguration.java"

======= 59b17c1^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/PoolProperties.java"

======= 59b17c1^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/PoolProperties.java"

======= 59b17c1^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/PooledConnection.java"

======= 59b17c1^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/PooledConnection.java"

======= 59b17c1^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/PooledConnection.java"

======= 59b17c1^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/PooledConnection.java"

            if (poolProperties.getUsername()!=null && poolProperties.getPassword()!=null) {
                xaConnection = xds.getXAConnection(poolProperties.getUsername(), poolProperties.getPassword());
======= 59b17c1^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/PooledConnection.java"

            if (poolProperties.getUsername()!=null && poolProperties.getPassword()!=null) {
                connection = ds.getConnection(poolProperties.getUsername(), poolProperties.getPassword());
            if (poolProperties.getUsername()!=null && poolProperties.getPassword()!=null) {
                connection = ds.getPooledConnection(poolProperties.getUsername(), poolProperties.getPassword()).getConnection();
======= 59b17c1^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/PooledConnection.java"

        String usr = poolProperties.getUsername();
        String pwd = poolProperties.getPassword();
        if (usr != null) {
            poolProperties.getDbProperties().setProperty("user", usr);
        if (pwd != null) {
            poolProperties.getDbProperties().setProperty("password", pwd);
        
            connection = driver.connect(driverURL, poolProperties.getDbProperties());
======= 59b17c1^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/PooledConnection.java"

======= 59b17c1^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/jmx/ConnectionPool.java"

======= 59b17c1^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/jmx/ConnectionPool.java"

======= 59b17c1^:"modules/jdbc-pool/test/org/apache/tomcat/jdbc/test/driver/Connection.java"

======= 59b17c1^:"modules/jdbc-pool/test/org/apache/tomcat/jdbc/test/driver/Driver.java"

        return new org.apache.tomcat.jdbc.test.driver.Connection();

======= 701d5dc^:"java/org/apache/catalina/ha/tcp/SimpleTcpCluster.java"

                if(host != null && host instanceof Host && clusterName!=null && !(clusterName.indexOf("#")>=0))

======= 73531cb^:"java/org/apache/jasper/compiler/Generator.java"

        // Constructor
        // generateConstructor(className);
        out.println("(HttpServletRequest request, HttpServletResponse response)");
        out.printil("PageContext pageContext = null;");
======= 73531cb^:"java/org/apache/jasper/compiler/Generator.java"

        out.printil("ServletContext application = null;");
        out.printil("ServletConfig config = null;");
        out.printil("Object page = this;");
======= 73531cb^:"java/org/apache/jasper/compiler/Generator.java"

        out
                .printil("pageContext = _jspxFactory.getPageContext(this, request, response,");

======= 71ad1bd^:"java/org/apache/catalina/startup/Catalina.java"

======= 71ad1bd^:"java/org/apache/catalina/startup/Catalina.java"

            log.warn("Catalina.start using "
                               + getConfigFile() + ": " , e);
======= 71ad1bd^:"java/org/apache/tomcat/util/digester/Digester.java"

                    locator.getColumnNumber() + ": " + message;
======= 71ad1bd^:"java/org/apache/tomcat/util/digester/ObjectCreateRule.java"


======= ca34a30^:"java/org/apache/catalina/authenticator/AuthenticatorBase.java"

======= ca34a30^:"java/org/apache/catalina/authenticator/AuthenticatorBase.java"

        if (session != null && changeSessionIdOnAuthentication) {
            Manager manager = request.getContext().getManager();
            manager.changeSessionId(session);
            request.changeSessionId(session.getId());

======= 5614817^:"java/org/apache/catalina/ha/deploy/FileMessageFactory.java"

======= 5614817^:"java/org/apache/catalina/ha/deploy/FileMessageFactory.java"

            log.debug("Message " + msg + " data " + msg.getData()
======= 5614817^:"java/org/apache/coyote/ajp/AjpMessage.java"

======= 5614817^:"java/org/apache/coyote/ajp/AjpMessage.java"

            log.debug(msg + ": " + buf + " " + pos +"/" + (len + 4));
======= 5614817^:"java/org/apache/tomcat/util/buf/HexUtils.java"

======= 5614817^:"java/org/apache/tomcat/util/buf/HexUtils.java"


======= 345e6b5^:"java/org/apache/jasper/compiler/JspDocumentParser.java"

    private static final EnableDTDValidationException ENABLE_DTD_VALIDATION_EXCEPTION =
        new EnableDTDValidationException(
            "jsp.error.enable_dtd_validation",
            null);
======= 345e6b5^:"java/org/apache/jasper/compiler/JspDocumentParser.java"

            fatalError(ENABLE_DTD_VALIDATION_EXCEPTION);
======= 345e6b5^:"java/org/apache/jasper/compiler/JspDocumentParser.java"

======= 345e6b5^:"java/org/apache/naming/resources/ImmutableNameNotFoundException.java"


======= 4117b78^:"java/org/apache/catalina/Session.java"

======= 4117b78^:"java/org/apache/catalina/manager/DummyProxySession.java"

======= 4117b78^:"java/org/apache/catalina/session/ManagerBase.java"

            int timeAlive = (int) ((timeNow - session.getCreationTime())/1000);
======= 4117b78^:"java/org/apache/catalina/session/StandardSession.java"


======= 4ed7b7e^:"java/javax/el/CompositeELResolver.java"

======= 4ed7b7e^:"java/javax/el/CompositeELResolver.java"

======= 4ed7b7e^:"java/javax/el/CompositeELResolver.java"

======= 4ed7b7e^:"java/javax/el/CompositeELResolver.java"


======= e34b164^:"java/org/apache/catalina/connector/Connector.java"

======= e34b164^:"java/org/apache/catalina/connector/Connector.java"

 * Implementation of a Coyote connector for Tomcat 5.x.
======= e34b164^:"java/org/apache/catalina/connector/Connector.java"

======= e34b164^:"java/org/apache/catalina/connector/Connector.java"

======= e34b164^:"java/org/apache/catalina/connector/Connector.java"

======= e34b164^:"java/org/apache/catalina/connector/Request.java"

        if (!getMethod().equalsIgnoreCase("POST"))
======= e34b164^:"test/org/apache/catalina/connector/TestRequest.java"

======= e34b164^:"test/org/apache/catalina/connector/TestRequest.java"


======= 07b72f1^:"java/org/apache/catalina/startup/Embedded.java"

        setState(LifecycleState.STARTING);

======= 4cbb52f^:"java/javax/servlet/GenericServlet.java"

======= 4cbb52f^:"java/javax/servlet/ServletContextAttributeEvent.java"

======= 4cbb52f^:"java/javax/servlet/ServletContextEvent.java"

======= 4cbb52f^:"java/javax/servlet/ServletException.java"

======= 4cbb52f^:"java/javax/servlet/ServletRequestAttributeEvent.java"

======= 4cbb52f^:"java/javax/servlet/ServletRequestEvent.java"

======= 4cbb52f^:"java/javax/servlet/UnavailableException.java"

======= 4cbb52f^:"java/javax/servlet/http/HttpServlet.java"

======= 4cbb52f^:"java/javax/servlet/http/HttpSessionBindingEvent.java"

    /* The name to which the object is being bound or unbound */
======= 4cbb52f^:"java/javax/servlet/http/HttpSessionEvent.java"

======= 4cbb52f^:"java/javax/servlet/jsp/JspException.java"

======= 4cbb52f^:"java/javax/servlet/jsp/JspTagException.java"

======= 4cbb52f^:"java/javax/servlet/jsp/SkipPageException.java"

======= 4cbb52f^:"java/javax/servlet/jsp/el/ELException.java"

======= 4cbb52f^:"java/javax/servlet/jsp/el/ELParseException.java"

 //-------------------------------------
======= 4cbb52f^:"java/javax/servlet/jsp/tagext/TagSupport.java"

======= 4cbb52f^:"java/org/apache/catalina/ha/deploy/FileMessage.java"

======= 4cbb52f^:"java/org/apache/catalina/ha/deploy/UndeployMessage.java"

======= 4cbb52f^:"java/org/apache/catalina/manager/StatusManagerServlet.java"

======= 4cbb52f^:"java/org/apache/catalina/session/StandardSession.java"

    implements HttpSession, Session, Serializable {
======= 4cbb52f^:"java/org/apache/catalina/ssi/SSIServlet.java"

======= 4cbb52f^:"java/org/apache/catalina/ssi/SSIStopProcessingException.java"

======= 4cbb52f^:"java/org/apache/catalina/tribes/ChannelException.java"

======= 4cbb52f^:"java/org/apache/catalina/tribes/RemoteProcessException.java"

======= 4cbb52f^:"java/org/apache/catalina/tribes/UniqueId.java"

======= 4cbb52f^:"java/org/apache/catalina/tribes/io/ChannelData.java"

======= 4cbb52f^:"java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java"

======= 4cbb52f^:"java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java"

======= 4cbb52f^:"java/org/apache/catalina/tribes/tipis/LazyReplicatedMap.java"

======= 4cbb52f^:"java/org/apache/catalina/tribes/tipis/ReplicatedMap.java"

======= 4cbb52f^:"java/org/apache/catalina/tribes/util/ExecutorFactory.java"

======= 4cbb52f^:"java/org/apache/catalina/util/ParameterMap.java"

    // ----------------------------------------------------------- Constructors
======= 4cbb52f^:"java/org/apache/catalina/util/ResourceSet.java"

======= 4cbb52f^:"java/org/apache/jasper/JasperException.java"

======= 4cbb52f^:"java/org/apache/jasper/compiler/JspDocumentParser.java"

        extends SAXParseException {
======= 4cbb52f^:"java/org/apache/jasper/runtime/HttpJspBase.java"

======= 4cbb52f^:"java/org/apache/juli/logging/LogConfigurationException.java"

======= 4cbb52f^:"java/org/apache/naming/EjbRef.java"

    extends Reference {
======= 4cbb52f^:"java/org/apache/naming/HandlerRef.java"

    extends Reference {
======= 4cbb52f^:"java/org/apache/naming/JndiPermission.java"

======= 4cbb52f^:"java/org/apache/naming/ResourceEnvRef.java"

    extends Reference {
======= 4cbb52f^:"java/org/apache/naming/ResourceLinkRef.java"

    extends Reference {
======= 4cbb52f^:"java/org/apache/naming/ServiceRef.java"

    extends Reference {
======= 4cbb52f^:"java/org/apache/naming/TransactionRef.java"

    extends Reference {
======= 4cbb52f^:"java/org/apache/tomcat/util/buf/CharChunk.java"

======= 4cbb52f^:"java/org/apache/tomcat/util/buf/MessageBytes.java"

======= 4cbb52f^:"java/org/apache/tomcat/util/modeler/BaseAttributeFilter.java"

======= 4cbb52f^:"java/org/apache/tomcat/util/modeler/FixedNotificationFilter.java"

======= 4cbb52f^:"java/org/apache/tomcat/util/modeler/ManagedBean.java"

======= 4cbb52f^:"java/org/apache/tomcat/util/net/URL.java"

======= 4cbb52f^:"test/org/apache/catalina/tribes/demos/MapDemo.java"

    public static class SimpleTableDemo
        extends JPanel implements ActionListener{
======= 4cbb52f^:"test/org/apache/catalina/tribes/demos/MapDemo.java"

======= 4cbb52f^:"test/org/apache/catalina/tribes/demos/MapDemo.java"

======= 4cbb52f^:"webapps/examples/WEB-INF/jsp/applet/Clock2.java"


======= ddbbfc1^:"java/org/apache/catalina/loader/WebappClassLoader.java"

                if (ccl != null && ccl == this) {
======= ddbbfc1^:"java/org/apache/catalina/loader/WebappClassLoader.java"

                        if (this.equals(key) || (key != null &&
                                this == key.getClass().getClassLoader())) {
======= ddbbfc1^:"java/org/apache/catalina/loader/WebappClassLoader.java"

                        if (this.equals(value) || (value != null &&
                                this == value.getClass().getClassLoader())) {
                                args[1] = key.getClass().getCanonicalName();
======= ddbbfc1^:"java/org/apache/catalina/loader/WebappClassLoader.java"

                                args[3] = value.getClass().getCanonicalName();
======= ddbbfc1^:"java/org/apache/catalina/loader/WebappClassLoader.java"


======= 5a84fdb^:"java/org/apache/coyote/ajp/AbstractAjpProtocol.java"

======= 5a84fdb^:"java/org/apache/coyote/http11/AbstractHttp11Protocol.java"


======= 46e7d1e^:"java/org/apache/coyote/http11/Http11NioProtocol.java"

                    if (state != SocketState.LONG && state != SocketState.ASYNC_END) {
                    } else if (state == SocketState.ASYNC_END) {
                        // No further work required
                        att.setAsync(true); // Re-enable timeouts
                        if (log.isDebugEnabled()) log.debug("Keeping processor["+processor);
                        //add correct poller events here based on Comet stuff
                        socket.getPoller().add(socket,att.getCometOps());
======= 46e7d1e^:"java/org/apache/tomcat/util/net/NioEndpoint.java"

                    }else if ((ka.interestOps()&SelectionKey.OP_READ) == SelectionKey.OP_READ ||
======= 46e7d1e^:"java/org/apache/tomcat/util/net/NioEndpoint.java"

                    }else if (ka.isAsync()) {

======= 278a36a^:"java/org/apache/catalina/manager/JspHelper.java"

======= 278a36a^:"java/org/apache/catalina/manager/StatusTransformer.java"

            return (mbytes + "." + ((rest < 10) ? "0" : "") + rest + " MB");

======= 991702c^:"java/org/apache/coyote/AsyncStateMachine.java"

        } else if (state == AsyncState.STARTED) {
======= 991702c^:"test/org/apache/catalina/core/TestAsyncContextImpl.java"

        doTestTimeout(true);
        doTestTimeout(false);
    private void doTestTimeout(boolean completeOnTimeout) throws Exception {
======= 991702c^:"test/org/apache/catalina/core/TestAsyncContextImpl.java"

        TimeoutServlet timeout = new TimeoutServlet(completeOnTimeout);
======= 991702c^:"test/org/apache/catalina/core/TestAsyncContextImpl.java"

        expected.append("onComplete-");
======= 991702c^:"test/org/apache/catalina/core/TestAsyncContextImpl.java"

        
        public TimeoutServlet(boolean completeOnTimeout) {
======= 991702c^:"test/org/apache/catalina/core/TestAsyncContextImpl.java"

                ac.addListener(new TrackingListener(false, completeOnTimeout));
======= 991702c^:"test/org/apache/catalina/core/TestAsyncContextImpl.java"

                    new TrackingListener(completeOnError, true); 
======= 991702c^:"test/org/apache/catalina/core/TestAsyncContextImpl.java"

        TimeoutServlet timeout = new TimeoutServlet(true);
======= 991702c^:"test/org/apache/catalina/core/TestAsyncContextImpl.java"

            TrackingListener listener = new TrackingListener(false, true); 
======= 991702c^:"test/org/apache/catalina/core/TestAsyncContextImpl.java"

                boolean completeOnTimeout) {
======= 991702c^:"test/org/apache/catalina/core/TestAsyncContextImpl.java"

                event.getAsyncContext().complete();

======= ade20d2^:"java/org/apache/catalina/core/StandardWrapper.java"

        StringBuilder keyProperties = new StringBuilder(",WebModule=");

======= 7b89af8^:"java/javax/el/CompositeELResolver.java"

        this.resolvers = new ELResolver[2];

======= e075c4b^:"java/org/apache/jasper/el/ELContextImpl.java"

======= e075c4b^:"java/org/apache/jasper/el/ELContextImpl.java"

    private FunctionMapper functionMapper;
        if (Constants.IS_SECURITY_ENABLED) {
            functionMapper = new FunctionMapper() {
                @Override
                public Method resolveFunction(String prefix, String localName) {
                    return null;
                }
            };
        } else {
            functionMapper = NullFunctionMapper;
        }
======= e075c4b^:"java/org/apache/jasper/el/ELResolverImpl.java"

    private final static ELResolver DefaultResolver = new CompositeELResolver();
        ((CompositeELResolver) DefaultResolver).add(new MapELResolver());
        ((CompositeELResolver) DefaultResolver).add(new ResourceBundleELResolver());
        ((CompositeELResolver) DefaultResolver).add(new ListELResolver());
        ((CompositeELResolver) DefaultResolver).add(new ArrayELResolver());
        ((CompositeELResolver) DefaultResolver).add(new BeanELResolver());
======= e075c4b^:"java/org/apache/jasper/el/ELResolverImpl.java"

            return getDefaultResolver().getValue(context, base, property);
======= e075c4b^:"java/org/apache/jasper/el/ELResolverImpl.java"

            return getDefaultResolver().getType(context, base, property);
======= e075c4b^:"java/org/apache/jasper/el/ELResolverImpl.java"

            getDefaultResolver().setValue(context, base, property, value);
======= e075c4b^:"java/org/apache/jasper/el/ELResolverImpl.java"

        return getDefaultResolver().isReadOnly(context, base, property);
        return getDefaultResolver().getFeatureDescriptors(context, base);
======= e075c4b^:"java/org/apache/jasper/el/ELResolverImpl.java"

        return getDefaultResolver().getCommonPropertyType(context, base);

======= 96020cb^:"java/org/apache/catalina/ha/session/BackupManager.java"

======= 96020cb^:"java/org/apache/catalina/ha/session/BackupManager.java"

======= 96020cb^:"java/org/apache/catalina/ha/session/BackupManager.java"

    public String listSessionIdsFull() {
        StringBuilder sb=new StringBuilder();
        LazyReplicatedMap map = (LazyReplicatedMap)sessions;
        @SuppressWarnings("unchecked") // sessions is of type Map<String, Session>
        Iterator<String> keys = map.keySetFull().iterator();
        while (keys.hasNext()) {
            sb.append(keys.next()).append(" ");
        }
        return sb.toString();
    }
    
======= 96020cb^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

======= 96020cb^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

                if (manager instanceof BackupManager && showProxySessions) {
                            ((BackupManager)manager).getActiveSessionsFull());
======= 96020cb^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

        if (manager instanceof BackupManager && showProxySessions) {
                ((BackupManager) manager).getSessionIdsFull();

======= 7e7283d^:"java/org/apache/naming/NamingContext.java"

                    boolean singleton = Boolean.parseBoolean(
                            (String) ((ResourceRef) entry.value).get(
                                    "singleton").getContent());
                    if (singleton) {
                        entry.type = NamingEntry.ENTRY;
                        entry.value = obj;

======= 84efb0a^:"java/org/apache/catalina/tribes/transport/bio/BioReceiver.java"

======= 84efb0a^:"java/org/apache/catalina/tribes/transport/bio/BioReplicationTask.java"

            log.error("Unable to service bio socket");
======= 84efb0a^:"java/org/apache/catalina/tribes/transport/bio/BioReplicationTask.java"

        this.notify();      // awaken the thread
        (markt))

======= 476921f^:"java/org/apache/catalina/core/StandardContext.java"

        fireContainerEvent(ADD_WELCOME_FILE_EVENT, name);
======= 476921f^:"java/org/apache/catalina/core/StandardContext.java"

        fireContainerEvent(REMOVE_WELCOME_FILE_EVENT, name);
======= 476921f^:"java/org/apache/catalina/core/StandardWrapper.java"

======= 476921f^:"java/org/apache/catalina/core/StandardWrapper.java"

        fireContainerEvent(ADD_MAPPING_EVENT, mapping);
======= 476921f^:"java/org/apache/catalina/core/StandardWrapper.java"

        fireContainerEvent(REMOVE_MAPPING_EVENT, mapping);

======= 4ca3db3^:"java/org/apache/catalina/core/JreMemoryLeakPreventionListener.java"

            /*
             * Several components end up calling:
             * sun.awt.AppContext.getAppContext()
             * 
             * Those libraries / components known to trigger memory leaks due to
             * eventual calls to getAppContext() are:
             * - Google Web Toolkit via its use of javax.imageio
             * - Tomcat via its use of java.beans.Introspector.flushCaches() in
             *   1.6.0_15 onwards
             * - others TBD
             */
            
            // Trigger a call to sun.awt.AppContext.getAppContext(). This will
            // pin the common class loader in memory but that shouldn't be an
            // issue.
            if (appContextProtection) {
                ImageIO.getCacheDirectory();
            }
            
            /*
             * Several components end up calling:
             * sun.misc.GC.requestLatency(long)
             * 
             * Those libraries / components known to trigger memory leaks due to
             * eventual calls to requestLatency(long) are:
             * - javax.management.remote.rmi.RMIConnectorServer.start()
             */
            if (gcDaemonProtection) {
                try {
                    Class<?> clazz = Class.forName("sun.misc.GC");
                    Method method = clazz.getDeclaredMethod("requestLatency",
                            new Class[] {long.class});
                    method.invoke(null, Long.valueOf(3600000));
                } catch (ClassNotFoundException e) {
                    if (System.getProperty("java.vendor").startsWith("Sun")) {
                        log.error(sm.getString(
                                "jreLeakListener.gcDaemonFail"), e);
                    } else {
                        log.debug(sm.getString(
                                "jreLeakListener.gcDaemonFail"), e);
                } catch (SecurityException e) {
                    log.error(sm.getString("jreLeakListener.gcDaemonFail"), e);
                } catch (NoSuchMethodException e) {
                    log.error(sm.getString("jreLeakListener.gcDaemonFail"), e);
                } catch (IllegalArgumentException e) {
                    log.error(sm.getString("jreLeakListener.gcDaemonFail"), e);
                } catch (IllegalAccessException e) {
                    log.error(sm.getString("jreLeakListener.gcDaemonFail"), e);
                } catch (InvocationTargetException e) {
                    log.error(sm.getString("jreLeakListener.gcDaemonFail"), e);
            }
            /*
             * When a servlet opens a connection using a URL it will use
             * sun.net.www.http.HttpClient which keeps a static reference to a
             * keep-alive cache which is loaded using the web application class
             * loader.
             */
            if (keepAliveProtection) {
                try {
                    Class.forName("sun.net.www.http.HttpClient");
                } catch (ClassNotFoundException e) {
                    if (System.getProperty("java.vendor").startsWith("Sun")) {
                        log.error(sm.getString(
                                "jreLeakListener.keepAliveFail"), e);
                    } else {
                        log.debug(sm.getString(
                                "jreLeakListener.keepAliveFail"), e);
            }
            
            /*
             * Calling getPolicy retains a static reference to the context class
             * loader.
             */
            if (securityPolicyProtection) {
                try {
                    // Policy.getPolicy();
                    Class<?> policyClass = Class
                            .forName("javax.security.auth.Policy");
                    Method method = policyClass.getMethod("getPolicy");
                    method.invoke(null);
                } catch(ClassNotFoundException e) {
                    // Ignore. The class is deprecated.
                } catch(SecurityException e) {
                    // Ignore. Don't need call to getPolicy() to be successful,
                    // just need to trigger static initializer.
                } catch (NoSuchMethodException e) {
                    log.warn(sm.getString("jreLeakListener.authPolicyFail"), e);
                } catch (IllegalArgumentException e) {
                    log.warn(sm.getString("jreLeakListener.authPolicyFail"), e);
                } catch (IllegalAccessException e) {
                    log.warn(sm.getString("jreLeakListener.authPolicyFail"), e);
                } catch (InvocationTargetException e) {
                    log.warn(sm.getString("jreLeakListener.authPolicyFail"), e);
            }
            /*
             * Creating a MessageDigest during web application startup
             * initializes the Java Cryptography Architecture. Under certain
             * conditions this starts a Token poller thread with TCCL equal
             * to the web application class loader.
             * 
             * Instead we initialize JCA right now.
             */
            if (tokenPollerProtection) {
                java.security.Security.getProviders();
            }
            
            /*
             * Several components end up opening JarURLConnections without first
             * disabling caching. This effectively locks the file. Whilst more
             * noticeable and harder to ignore on Windows, it affects all
             * operating systems.
             * 
             * Those libraries/components known to trigger this issue include:
             * - log4j versions 1.2.15 and earlier
             * - javax.xml.bind.JAXBContext.newInstance()
             */
            
            // Set the default URL caching policy to not to cache
            if (urlCacheProtection) {
                try {
                    // Doesn't matter that this JAR doesn't exist - just as long as
                    // the URL is well-formed
                    URL url = new URL("jar:file://dummy.jar!/");
                    URLConnection uConn = url.openConnection();
                    uConn.setDefaultUseCaches(false);
                } catch (MalformedURLException e) {
                    log.error(sm.getString(
                            "jreLeakListener.jarUrlConnCacheFail"), e);
                } catch (IOException e) {
                    log.error(sm.getString(
                            "jreLeakListener.jarUrlConnCacheFail"), e);
            }
            
            /*
             * Haven't got to the root of what is going on with this leak but if
             * a web app is the first to make the calls below the web
             * application class loader will be pinned in memory.
             */
            if (xmlParsingProtection) {
                DocumentBuilderFactory factory =
                    DocumentBuilderFactory.newInstance();
                try {
                    factory.newDocumentBuilder();
                } catch (ParserConfigurationException e) {
                    log.error(sm.getString("jreLeakListener.xmlParseFail"), e);

======= afdc055^:"java/org/apache/catalina/tribes/group/RpcChannel.java"

    
======= afdc055^:"java/org/apache/catalina/tribes/group/RpcChannel.java"

                channel.send(new Member[] {sender}, rmsg,0);
======= afdc055^:"java/org/apache/catalina/tribes/group/RpcChannel.java"


======= b5c24f9^:"java/org/apache/catalina/session/StoreBase.java"

                if ( ( (PersistentManagerBase) manager).isLoaded( keys[i] )) {

======= 6eae969^:"java/org/apache/catalina/Lifecycle.java"

 * |  |       FAILED ---->------ DESTROYED ----<-----------------  |
 * |  |                             ^                              |
 * |  |        destroy()            |                              |
 * |  -------------------------------                              |
======= 6eae969^:"java/org/apache/catalina/Lifecycle.java"

     * The LifecycleEvent type for the "component destroy" event.
    public static final String DESTROY_EVENT = "destroy";
======= 6eae969^:"java/org/apache/catalina/LifecycleState.java"

    DESTROYED(false, Lifecycle.DESTROY_EVENT),
======= 6eae969^:"java/org/apache/catalina/core/AprLifecycleListener.java"

        } else if (Lifecycle.DESTROY_EVENT.equals(event.getType())) {
======= 6eae969^:"java/org/apache/catalina/core/ContainerBase.java"

            child.destroy();
======= 6eae969^:"java/org/apache/catalina/startup/ContextConfig.java"

        } else if (event.getType().equals(Lifecycle.DESTROY_EVENT)) {
======= 6eae969^:"java/org/apache/catalina/util/LifecycleBase.java"

        if (LifecycleState.DESTROYED.equals(state)) {
======= 6eae969^:"java/org/apache/catalina/util/LifecycleBase.java"

            invalidTransition(Lifecycle.DESTROY_EVENT);

======= f77368f^:"java/org/apache/catalina/ha/tcp/SimpleTcpCluster.java"

======= f77368f^:"java/org/apache/catalina/ha/tcp/SimpleTcpCluster.java"

======= f77368f^:"java/org/apache/catalina/ha/tcp/SimpleTcpCluster.java"

======= f77368f^:"java/org/apache/catalina/ha/tcp/SimpleTcpCluster.java"

======= f77368f^:"java/org/apache/catalina/ha/tcp/SimpleTcpCluster.java"

======= f77368f^:"java/org/apache/catalina/ha/tcp/SimpleTcpCluster.java"

======= f77368f^:"java/org/apache/catalina/ha/tcp/SimpleTcpCluster.java"

    public void setManagerClassName(String managerClassName) {
        log.warn("setManagerClassName is deprecated, use nested <Manager> element inside the <Cluster> element instead, this request will be ignored.");
======= f77368f^:"java/org/apache/catalina/ha/tcp/SimpleTcpCluster.java"

======= f77368f^:"java/org/apache/catalina/ha/tcp/SimpleTcpCluster.java"

======= f77368f^:"java/org/apache/catalina/ha/tcp/SimpleTcpCluster.java"

======= f77368f^:"java/org/apache/catalina/ha/tcp/SimpleTcpCluster.java"

======= f77368f^:"java/org/apache/catalina/ha/tcp/SimpleTcpCluster.java"

======= f77368f^:"java/org/apache/catalina/ha/tcp/SimpleTcpCluster.java"

======= f77368f^:"java/org/apache/catalina/ha/tcp/SimpleTcpCluster.java"

======= f77368f^:"java/org/apache/catalina/ha/tcp/SimpleTcpCluster.java"

======= f77368f^:"java/org/apache/catalina/ha/tcp/SimpleTcpCluster.java"

======= f77368f^:"java/org/apache/catalina/ha/tcp/SimpleTcpCluster.java"

======= f77368f^:"java/org/apache/catalina/ha/tcp/SimpleTcpCluster.java"

======= f77368f^:"java/org/apache/catalina/ha/tcp/SimpleTcpCluster.java"

======= f77368f^:"java/org/apache/catalina/ha/tcp/SimpleTcpCluster.java"

======= f77368f^:"java/org/apache/catalina/ha/tcp/SimpleTcpCluster.java"

======= f77368f^:"java/org/apache/catalina/ha/tcp/SimpleTcpCluster.java"

======= f77368f^:"java/org/apache/catalina/ha/tcp/SimpleTcpCluster.java"

======= f77368f^:"java/org/apache/catalina/ha/tcp/SimpleTcpCluster.java"

======= f77368f^:"java/org/apache/catalina/ha/tcp/SimpleTcpCluster.java"

======= f77368f^:"java/org/apache/catalina/ha/tcp/SimpleTcpCluster.java"

======= f77368f^:"java/org/apache/catalina/ha/tcp/SimpleTcpCluster.java"

======= f77368f^:"java/org/apache/catalina/ha/tcp/SimpleTcpCluster.java"

                valve.setCluster(this);
======= f77368f^:"java/org/apache/catalina/ha/tcp/SimpleTcpCluster.java"

                    IntrospectionUtils.callMethodN(getContainer(), "removeValve",
                        new Object[] { valve }, new Class[] { org.apache.catalina.Valve.class });
            valve.setCluster(this);
======= f77368f^:"java/org/apache/catalina/ha/tcp/SimpleTcpCluster.java"

======= f77368f^:"java/org/apache/catalina/ha/tcp/SimpleTcpCluster.java"

======= f77368f^:"java/org/apache/catalina/ha/tcp/SimpleTcpCluster.java"

======= f77368f^:"java/org/apache/catalina/ha/tcp/SimpleTcpCluster.java"

======= f77368f^:"java/org/apache/catalina/ha/tcp/SimpleTcpCluster.java"

======= f77368f^:"java/org/apache/catalina/ha/tcp/SimpleTcpCluster.java"

            for (Iterator<ClusterListener> iter = clusterListeners.iterator(); iter.hasNext();) {
        }
        if (!accepted && log.isDebugEnabled()) {
            if (notifyLifecycleListenerOnFailure) {
            log.debug("Message " + message.toString() + " from type "
                    + message.getClass().getName()
                    + " transfered but no listener registered");
======= f77368f^:"java/org/apache/catalina/ha/tcp/SimpleTcpCluster.java"


======= 7184011^:"java/org/apache/juli/FileHandler.java"

======= 7184011^:"java/org/apache/juli/FileHandler.java"

        if (!date.equals(tsDate)) {
======= 7184011^:"java/org/apache/juli/FileHandler.java"

======= 7184011^:"java/org/apache/juli/FileHandler.java"

                prefix + date + suffix;

======= 53c5d85^:"java/org/apache/catalina/connector/MapperListener.java"

        engine.addContainerListener(this);
                host.addLifecycleListener(this);
======= 53c5d85^:"java/org/apache/catalina/connector/MapperListener.java"

            child.addLifecycleListener(this);
            child.addContainerListener(this);
            if (child instanceof Host) {
                registerHost((Host) child);
            } else if (child instanceof Context) {
                registerContext((Context) child);
            } else if (child instanceof Wrapper) {
                registerWrapper((Wrapper) child);
            if (child instanceof Host) {
                unregisterHost((Host) child);
            } else if (child instanceof Context) {
                unregisterContext((Context) child);
            } else if (child instanceof Wrapper) {
                unregisterWrapper((Wrapper) child);
            }
======= 53c5d85^:"java/org/apache/catalina/connector/MapperListener.java"

                    defaultHost));
======= 53c5d85^:"java/org/apache/catalina/connector/MapperListener.java"

        host.addContainerListener(this);
        
            log.debug(sm.getString
                 ("mapperListener.registerHost", host.getName(), domain));
======= 53c5d85^:"java/org/apache/catalina/connector/MapperListener.java"

                    domain));
======= 53c5d85^:"java/org/apache/catalina/connector/MapperListener.java"

======= 53c5d85^:"java/org/apache/catalina/connector/MapperListener.java"

======= 53c5d85^:"java/org/apache/catalina/connector/MapperListener.java"

        context.addContainerListener(this);
       
            log.debug(sm.getString
                 ("mapperListener.registerContext", contextName));
======= 53c5d85^:"java/org/apache/catalina/connector/MapperListener.java"

            log.debug(sm.getString
                  ("mapperListener.unregisterContext", contextName));
======= 53c5d85^:"java/org/apache/catalina/connector/MapperListener.java"

        wrapper.addContainerListener(this);
                    wrapperName, contextName));
======= 53c5d85^:"java/org/apache/catalina/connector/MapperListener.java"

======= 53c5d85^:"java/org/apache/catalina/mbeans/ContainerMBean.java"

======= 53c5d85^:"java/org/apache/catalina/mbeans/ContainerMBean.java"

======= 53c5d85^:"java/org/apache/catalina/mbeans/ContainerMBean.java"


======= 509ab5d^:"java/org/apache/catalina/startup/ContextConfig.java"

        boolean isWebXMLservletDef = servletDef != null;
        if (!isWebXMLservletDef) {
======= 509ab5d^:"java/org/apache/catalina/startup/ContextConfig.java"

        if (urlPatternsSet) {
======= 509ab5d^:"java/org/apache/catalina/startup/ContextConfig.java"

        boolean isWebXMLfilterDef = filterDef != null;
        if (!isWebXMLfilterDef) {
======= 509ab5d^:"java/org/apache/catalina/startup/ContextConfig.java"

                urlPatternsSet = urlPatterns != null && urlPatterns.length > 0;
======= 509ab5d^:"java/org/apache/catalina/startup/ContextConfig.java"

                dispatchTypesSet = dispatcherTypes != null
                        && dispatcherTypes.length > 0;

======= 9d955f4^:"java/org/apache/catalina/security/SecurityUtil.java"

======= 9d955f4^:"java/org/apache/catalina/security/SecurityUtil.java"

    private static HashMap<Object,Method[]> objectCache =
        new HashMap<Object,Method[]>();
======= 9d955f4^:"java/org/apache/catalina/security/SecurityUtil.java"

        Method[] methodsCache = null;
        if(objectCache.containsKey(targetObject)){
            methodsCache = objectCache.get(targetObject);
            if (method == null){
        } else {
            method = createMethodAndCacheIt(methodsCache,
                                            methodName,
                                            targetObject,
                                            targetType);                     
======= 9d955f4^:"java/org/apache/catalina/security/SecurityUtil.java"

        Method[] methodsCache = null;
        if(objectCache.containsKey(targetObject)){
            methodsCache = objectCache.get(targetObject);
            if (method == null){
        } else {
            method = createMethodAndCacheIt(methodsCache,
                                            methodName,
                                            targetObject,
                                            targetType);                     
======= 9d955f4^:"java/org/apache/catalina/security/SecurityUtil.java"


======= 44f568f^:"java/org/apache/catalina/mbeans/MBeanFactory.java"

            if(host instanceof StandardHost)
                ((StandardHost)host).destroy();
            else
                engine.removeChild(host);
      <bug>50105</bug>: When processing composite EL expressions use
      <code>Enum.name()</code> rather than <code>Enum.toString()</code> as
      required by the EL specification. (markt)

======= e6c1d55^:"java/org/apache/el/parser/AstCompositeExpression.java"

======= e6c1d55^:"java/org/apache/el/parser/AstCompositeExpression.java"

                    sb.append(obj);
======= e6c1d55^:"test/org/apache/el/TestValueExpressionImpl.java"

======= e6c1d55^:"test/org/apache/el/TestValueExpressionImpl.java"


======= 7357867^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

======= 7357867^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

======= 7357867^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

                doSessions(path, request, response);
                message = sm.getString("managerServlet.exception",
======= 7357867^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

                sm.getString("managerServlet.postCommand", command);
                sm.getString("managerServlet.unknownCommand", command);
        list(request, response, message);
======= 7357867^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

======= 7357867^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

            message = upload(request);
            message = deployInternal(deployConfig, deployPath, deployWar);
            message = reload(path);
            message = undeploy(path);
            message = expireSessions(path, request);
            message = start(path);
            message = stop(path);
            message = findleaks();
        list(request, response, message);
======= 7357867^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

    protected String upload(HttpServletRequest request)
======= 7357867^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

                    message =
                        sm.getString("htmlManagerServlet.deployUploadNoFile");
                    message = sm.getString(
======= 7357867^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

                    message = sm.getString(
======= 7357867^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

                    message = sm.getString(
======= 7357867^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

            message = sm.getString
======= 7357867^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

    protected String deployInternal(String config, String path, String war) {
        super.deploy(printWriter, config, path, war, false);
======= 7357867^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

                     String message) throws IOException {
======= 7357867^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

        args[1] = sm.getString("htmlManagerServlet.title");
        args[0] = sm.getString("htmlManagerServlet.messageLabel");
======= 7357867^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

        args[0] = sm.getString("htmlManagerServlet.manager");
        args[2] = sm.getString("htmlManagerServlet.list");
             sm.getString("htmlManagerServlet.helpHtmlManagerFile"));
        args[4] = sm.getString("htmlManagerServlet.helpHtmlManager");
             sm.getString("htmlManagerServlet.helpManagerFile"));
        args[6] = sm.getString("htmlManagerServlet.helpManager");
        args[8] = sm.getString("statusServlet.title");
        args[0] = sm.getString("htmlManagerServlet.appsTitle");
        args[1] = sm.getString("htmlManagerServlet.appsPath");
        args[2] = sm.getString("htmlManagerServlet.appsName");
        args[3] = sm.getString("htmlManagerServlet.appsAvailable");
        args[4] = sm.getString("htmlManagerServlet.appsSessions");
        args[5] = sm.getString("htmlManagerServlet.appsTasks");
======= 7357867^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

        String appsStart = sm.getString("htmlManagerServlet.appsStart");
        String appsStop = sm.getString("htmlManagerServlet.appsStop");
        String appsReload = sm.getString("htmlManagerServlet.appsReload");
        String appsUndeploy = sm.getString("htmlManagerServlet.appsUndeploy");
        String appsExpire = sm.getString("htmlManagerServlet.appsExpire");
======= 7357867^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

                args[10] = sm.getString("htmlManagerServlet.expire.explain");
                    args[11] = sm.getString("htmlManagerServlet.noManager");
                args[12] = sm.getString("htmlManagerServlet.expire.unit");
======= 7357867^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

        args[0] = sm.getString("htmlManagerServlet.deployTitle");
        args[1] = sm.getString("htmlManagerServlet.deployServer");
        args[3] = sm.getString("htmlManagerServlet.deployPath");
        args[4] = sm.getString("htmlManagerServlet.deployConfig");
        args[5] = sm.getString("htmlManagerServlet.deployWar");
        args[6] = sm.getString("htmlManagerServlet.deployButton");
        args[0] = sm.getString("htmlManagerServlet.deployUpload");
        args[2] = sm.getString("htmlManagerServlet.deployUploadFile");
        args[3] = sm.getString("htmlManagerServlet.deployButton");
        args[0] = sm.getString("htmlManagerServlet.diagnosticsTitle");
        args[1] = sm.getString("htmlManagerServlet.diagnosticsLeak");
        args[3] = sm.getString("htmlManagerServlet.diagnosticsLeakWarning");
        args[4] = sm.getString("htmlManagerServlet.diagnosticsLeakButton");
        args[0] = sm.getString("htmlManagerServlet.serverTitle");
        args[1] = sm.getString("htmlManagerServlet.serverVersion");
        args[2] = sm.getString("htmlManagerServlet.serverJVMVersion");
        args[3] = sm.getString("htmlManagerServlet.serverJVMVendor");
        args[4] = sm.getString("htmlManagerServlet.serverOSName");
        args[5] = sm.getString("htmlManagerServlet.serverOSVersion");
        args[6] = sm.getString("htmlManagerServlet.serverOSArch");
======= 7357867^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

    protected String reload(String path) {
        super.reload(printWriter, path);
======= 7357867^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

    protected String undeploy(String path) {
        super.undeploy(printWriter, path);
======= 7357867^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

    public String sessions(String path, int idle) {
        super.sessions(printWriter, path, idle);
======= 7357867^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

    public String sessions(String path) {
        return sessions(path, -1);
======= 7357867^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

    public String start(String path) {
        super.start(printWriter, path);
======= 7357867^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

    protected String stop(String path) {
        super.stop(printWriter, path);
======= 7357867^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

    protected String findleaks() {
        super.findleaks(printWriter);
            msg.append(sm.getString("htmlManagerServlet.findleaksList"));
            msg.append(sm.getString("htmlManagerServlet.findleaksNone"));
======= 7357867^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

    protected String expireSessions(String path, HttpServletRequest req) {
======= 7357867^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

        return sessions(path, idle);
======= 7357867^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

    protected void doSessions(String path, HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
======= 7357867^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

            displaySessionDetailPage(req, resp, path, sessionId);
            int i = invalidateSessions(path, sessionIds);
            boolean removed = removeSessionAttribute(path, sessionId, name);
        displaySessionsListPage(path, req, resp);
    protected List<Session> getSessionsForPath(String path) {
            throw new IllegalArgumentException(sm.getString("managerServlet.invalidPath",
                                        RequestUtil.filter(path)));
            throw new IllegalArgumentException(sm.getString("managerServlet.noContext",
                                        RequestUtil.filter(path)));
======= 7357867^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

    protected Session getSessionForPathAndId(String path, String id) throws IOException {
            throw new IllegalArgumentException(sm.getString("managerServlet.invalidPath",
                                        RequestUtil.filter(path)));
            throw new IllegalArgumentException(sm.getString("managerServlet.noContext",
                                        RequestUtil.filter(path)));
======= 7357867^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

    protected void displaySessionsListPage(String path, HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        List<Session> sessions = getSessionsForPath(path);
======= 7357867^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

    protected void displaySessionDetailPage(HttpServletRequest req, HttpServletResponse resp, String path, String sessionId) throws ServletException, IOException {
        Session session = getSessionForPathAndId(path, sessionId);
======= 7357867^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

    public int invalidateSessions(String path, String[] sessionIds) throws IOException {
            HttpSession session = getSessionForPathAndId(path, sessionId).getSession();
======= 7357867^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

    public boolean removeSessionAttribute(String path, String sessionId, String attributeName) throws IOException {
        HttpSession session = getSessionForPathAndId(path, sessionId).getSession();
======= 7357867^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

    public int setSessionMaxInactiveInterval(String path, String sessionId, int maxInactiveInterval) throws IOException {
        HttpSession session = getSessionForPathAndId(path, sessionId).getSession();
======= 7357867^:"java/org/apache/catalina/manager/ManagerServlet.java"

======= 7357867^:"java/org/apache/catalina/manager/ManagerServlet.java"

======= 7357867^:"java/org/apache/catalina/manager/ManagerServlet.java"

            writer.println(sm.getString("managerServlet.noCommand"));
                deploy(writer, config, path, war, update);
                deploy(writer, path, tag);
            list(writer);
            reload(writer, path);
            resources(writer, type);
            roles(writer);
            save(writer, path);
            serverinfo(writer);
            expireSessions(writer, path, request);
            expireSessions(writer, path, request);
            start(writer, path);
            stop(writer, path);
            undeploy(writer, path);
            findleaks(writer);
            writer.println(sm.getString("managerServlet.unknownCommand",
                                        command));
======= 7357867^:"java/org/apache/catalina/manager/ManagerServlet.java"

======= 7357867^:"java/org/apache/catalina/manager/ManagerServlet.java"

            writer.println(sm.getString("managerServlet.noCommand"));
            deploy(writer, path, tag, update, request);
            writer.println(sm.getString("managerServlet.unknownCommand",
                                        command));
======= 7357867^:"java/org/apache/catalina/manager/ManagerServlet.java"

            throw new UnavailableException
                (sm.getString("managerServlet.noWrapper"));
======= 7357867^:"java/org/apache/catalina/manager/ManagerServlet.java"

    protected void findleaks(PrintWriter writer) {
            writer.println(sm.getString("managerServlet.findleaksFail"));
======= 7357867^:"java/org/apache/catalina/manager/ManagerServlet.java"

    protected synchronized void save(PrintWriter writer, String path) {
            writer.println(sm.getString("managerServlet.saveFail", server));
                writer.println(sm.getString("managerServlet.saved"));
                writer.println(sm.getString("managerServlet.exception",
                                            e.toString()));
======= 7357867^:"java/org/apache/catalina/manager/ManagerServlet.java"

                writer.println(sm.getString("managerServlet.noContext", path));
                writer.println(sm.getString("managerServlet.savedContext", 
                               path));
                writer.println(sm.getString("managerServlet.exception",
                                            e.toString()));
======= 7357867^:"java/org/apache/catalina/manager/ManagerServlet.java"

         String tag, boolean update, HttpServletRequest request) {
======= 7357867^:"java/org/apache/catalina/manager/ManagerServlet.java"

            writer.println(sm.getString("managerServlet.invalidPath", path));
======= 7357867^:"java/org/apache/catalina/manager/ManagerServlet.java"

                undeploy(writer, displayPath);
            writer.println
                (sm.getString("managerServlet.alreadyContext",
                              displayPath));
======= 7357867^:"java/org/apache/catalina/manager/ManagerServlet.java"

            writer.println(sm.getString("managerServlet.exception",
                                        e.toString()));
            writer.println(sm.getString("managerServlet.deployed", displayPath));
            writer.println(sm.getString("managerServlet.deployFailed", displayPath));
======= 7357867^:"java/org/apache/catalina/manager/ManagerServlet.java"

    protected void deploy(PrintWriter writer, String path, String tag) {
            writer.println(sm.getString("managerServlet.invalidPath", path));
======= 7357867^:"java/org/apache/catalina/manager/ManagerServlet.java"

            undeploy(writer, displayPath);
======= 7357867^:"java/org/apache/catalina/manager/ManagerServlet.java"

            writer.println(sm.getString("managerServlet.exception",
                                        e.toString()));
            writer.println(sm.getString("managerServlet.deployed", displayPath));
            writer.println(sm.getString("managerServlet.deployFailed", displayPath));
======= 7357867^:"java/org/apache/catalina/manager/ManagerServlet.java"

            String path, String war, boolean update) {
======= 7357867^:"java/org/apache/catalina/manager/ManagerServlet.java"

            writer.println(sm.getString("managerServlet.invalidPath",
                                        RequestUtil.filter(path)));
======= 7357867^:"java/org/apache/catalina/manager/ManagerServlet.java"

                undeploy(writer, displayPath);
            writer.println
            (sm.getString("managerServlet.alreadyContext",
======= 7357867^:"java/org/apache/catalina/manager/ManagerServlet.java"

                writer.println(sm.getString("managerServlet.deployed", displayPath));
                writer.println(sm.getString("managerServlet.deployedButNotStarted", displayPath));
                writer.println(sm.getString("managerServlet.deployFailed", displayPath));
            writer.println(sm.getString("managerServlet.exception",
======= 7357867^:"java/org/apache/catalina/manager/ManagerServlet.java"

    protected void list(PrintWriter writer) {
        writer.println(sm.getString("managerServlet.listed",
======= 7357867^:"java/org/apache/catalina/manager/ManagerServlet.java"

                    writer.println(sm.getString("managerServlet.listitem",
                                                displayPath,
                                                "running",
                                      "" + context.getManager().findSessions().length,
                                                context.getDocBase()));
                    writer.println(sm.getString("managerServlet.listitem",
                                                displayPath,
                                                "stopped",
                                                "0",
                                                context.getDocBase()));
======= 7357867^:"java/org/apache/catalina/manager/ManagerServlet.java"

    protected void reload(PrintWriter writer, String path) {
            writer.println(sm.getString("managerServlet.invalidPath",
                                        RequestUtil.filter(path)));
======= 7357867^:"java/org/apache/catalina/manager/ManagerServlet.java"

                writer.println(sm.getString
                               ("managerServlet.noContext",
                                   RequestUtil.filter(displayPath)));
                writer.println(sm.getString("managerServlet.noSelf"));
                (sm.getString("managerServlet.reloaded", displayPath));
            writer.println(sm.getString("managerServlet.exception",
                                        t.toString()));
======= 7357867^:"java/org/apache/catalina/manager/ManagerServlet.java"

    protected void resources(PrintWriter writer, String type) {
======= 7357867^:"java/org/apache/catalina/manager/ManagerServlet.java"

            writer.println(sm.getString("managerServlet.noGlobal"));
            writer.println(sm.getString("managerServlet.resourcesType",
                                        type));
            writer.println(sm.getString("managerServlet.resourcesAll"));
======= 7357867^:"java/org/apache/catalina/manager/ManagerServlet.java"

            writer.println(sm.getString("managerServlet.exception",
                                        t.toString()));
        printResources(writer, "", global, type, clazz);
======= 7357867^:"java/org/apache/catalina/manager/ManagerServlet.java"

                                  String type, Class<?> clazz) {
======= 7357867^:"java/org/apache/catalina/manager/ManagerServlet.java"

                         (javax.naming.Context) item.getObject(), type, clazz);
======= 7357867^:"java/org/apache/catalina/manager/ManagerServlet.java"

            writer.println(sm.getString("managerServlet.exception",
                                        t.toString()));
======= 7357867^:"java/org/apache/catalina/manager/ManagerServlet.java"

    protected void roles(PrintWriter writer) {
======= 7357867^:"java/org/apache/catalina/manager/ManagerServlet.java"

            writer.println(sm.getString("managerServlet.userDatabaseError"));
            writer.println(sm.getString("managerServlet.userDatabaseMissing"));
        writer.println(sm.getString("managerServlet.rolesList"));
======= 7357867^:"java/org/apache/catalina/manager/ManagerServlet.java"

    protected void serverinfo(PrintWriter writer) {
======= 7357867^:"java/org/apache/catalina/manager/ManagerServlet.java"

            writer.println(sm.getString("managerServlet.exception",
                                        t.toString()));
======= 7357867^:"java/org/apache/catalina/manager/ManagerServlet.java"

    protected void sessions(PrintWriter writer, String path, int idle) {
======= 7357867^:"java/org/apache/catalina/manager/ManagerServlet.java"

            writer.println(sm.getString("managerServlet.invalidPath",
                                        RequestUtil.filter(path)));
======= 7357867^:"java/org/apache/catalina/manager/ManagerServlet.java"

                writer.println(sm.getString("managerServlet.noContext",
                                            RequestUtil.filter(displayPath)));
                writer.println(sm.getString("managerServlet.noManager",
======= 7357867^:"java/org/apache/catalina/manager/ManagerServlet.java"

            writer.println(sm.getString("managerServlet.sessions", displayPath));
            writer.println(sm.getString("managerServlet.sessiondefaultmax",
                                "" + maxInactiveInterval));
======= 7357867^:"java/org/apache/catalina/manager/ManagerServlet.java"

                writer.println(sm.getString("managerServlet.sessiontimeout",
                                            "<" + histoInterval, "" + timeout[0]));
                    writer.println(sm.getString("managerServlet.sessiontimeout",
                                     "" + (i)*histoInterval + " - <" + (i+1)*histoInterval,
                                                "" + timeout[i]));
                writer.println(sm.getString("managerServlet.sessiontimeout",
                                            ">=" + maxCount*histoInterval,
                                            "" + timeout[maxCount-1]));
                writer.println(sm.getString("managerServlet.sessiontimeout.unlimited",
                                            "" + notimeout));
                writer.println(sm.getString("managerServlet.sessiontimeout.expired",
                                            "" + idle,"" + expired));
            writer.println(sm.getString("managerServlet.exception",
                                        t.toString()));
======= 7357867^:"java/org/apache/catalina/manager/ManagerServlet.java"

    protected void sessions(PrintWriter writer, String path) {
        sessions(writer, path, -1);
======= 7357867^:"java/org/apache/catalina/manager/ManagerServlet.java"

    protected void expireSessions(PrintWriter writer, String path, HttpServletRequest req) {
======= 7357867^:"java/org/apache/catalina/manager/ManagerServlet.java"

        sessions(writer, path, idle);
======= 7357867^:"java/org/apache/catalina/manager/ManagerServlet.java"

    protected void start(PrintWriter writer, String path) {
            writer.println(sm.getString("managerServlet.invalidPath",
                                        RequestUtil.filter(path)));
======= 7357867^:"java/org/apache/catalina/manager/ManagerServlet.java"

                writer.println(sm.getString("managerServlet.noContext", 
                                            RequestUtil.filter(displayPath)));
                writer.println
                    (sm.getString("managerServlet.started", displayPath));
                writer.println
                    (sm.getString("managerServlet.startFailed", displayPath));
            getServletContext().log
                (sm.getString("managerServlet.startFailed", displayPath), t);
            writer.println
                (sm.getString("managerServlet.startFailed", displayPath));
            writer.println(sm.getString("managerServlet.exception",
                                        t.toString()));
======= 7357867^:"java/org/apache/catalina/manager/ManagerServlet.java"

    protected void stop(PrintWriter writer, String path) {
            writer.println(sm.getString("managerServlet.invalidPath",
                                        RequestUtil.filter(path)));
======= 7357867^:"java/org/apache/catalina/manager/ManagerServlet.java"

                writer.println(sm.getString("managerServlet.noContext", 
                                            RequestUtil.filter(displayPath)));
                writer.println(sm.getString("managerServlet.noSelf"));
            writer.println(sm.getString("managerServlet.stopped", displayPath));
            writer.println(sm.getString("managerServlet.exception",
                                        t.toString()));
======= 7357867^:"java/org/apache/catalina/manager/ManagerServlet.java"

    protected void undeploy(PrintWriter writer, String path) {
            writer.println(sm.getString("managerServlet.invalidPath",
                                        RequestUtil.filter(path)));
======= 7357867^:"java/org/apache/catalina/manager/ManagerServlet.java"

                writer.println(sm.getString("managerServlet.noContext",
                                            RequestUtil.filter(displayPath)));
                writer.println(sm.getString("managerServlet.notDeployed",
======= 7357867^:"java/org/apache/catalina/manager/ManagerServlet.java"

            writer.println(sm.getString("managerServlet.undeployed",
                                        displayPath));
            writer.println(sm.getString("managerServlet.exception",
                                        t.toString()));
======= 7357867^:"java/org/apache/catalina/manager/ManagerServlet.java"

======= 7357867^:"java/org/apache/tomcat/util/res/StringManager.java"

======= 7357867^:"java/org/apache/tomcat/util/res/StringManager.java"

    private StringManager(String packageName) {
            bnd = ResourceBundle.getBundle(bundleName, Locale.getDefault());
======= 7357867^:"java/org/apache/tomcat/util/res/StringManager.java"

                    bnd = ResourceBundle.getBundle(
                            bundleName, Locale.getDefault(), cl);
======= 7357867^:"java/org/apache/tomcat/util/res/StringManager.java"

            locale = bundle.getLocale();
            locale = null;
======= 7357867^:"java/org/apache/tomcat/util/res/StringManager.java"

            //   str = "[cannot find message associated with key '" + key + "' due to " + mre + "]";
======= 7357867^:"java/org/apache/tomcat/util/res/StringManager.java"

    private static final Hashtable<String, StringManager> managers =
        new Hashtable<String, StringManager>();
======= 7357867^:"java/org/apache/tomcat/util/res/StringManager.java"

    public synchronized static final StringManager getManager(String packageName) {
        StringManager mgr = managers.get(packageName);
            mgr = new StringManager(packageName);
            managers.put(packageName, mgr);

======= 9e7ce59^:"java/org/apache/catalina/startup/ContextConfig.java"


======= 79cf689^:"java/org/apache/jasper/compiler/TagFileProcessor.java"


======= 4d7f111^:"java/org/apache/catalina/startup/ContextConfig.java"


======= 6ce21f4^:"java/org/apache/catalina/core/StandardContext.java"

        unregister(onameNamingResources);
        onameNamingResources = register(namingResources,
                "type=NamingResources," + getObjectKeyPropertiesNameOnly());

======= da36bd1^:"java/org/apache/catalina/startup/ContextConfig.java"

        if (webXmlVersion >= 3 && !webXml.isMetadataComplete()) {
======= da36bd1^:"java/org/apache/catalina/startup/ContextConfig.java"

            // Step 2. Order the fragments.
            Set<WebXml> orderedFragments =
                WebXml.orderWebFragments(webXml, fragments);
            // Step 3. Look for ServletContainerInitializer implementations
            ok = processServletContainerInitializers(orderedFragments);
            // Step 4. Process /WEB-INF/classes for annotations
            // This will add any matching classes to the typeInitializerMap
            if (ok) {
                URL webinfClasses;
                try {
                    webinfClasses =
                        context.getServletContext().getResource("/WEB-INF/classes");
                    processAnnotationsUrl(webinfClasses, webXml);
                } catch (MalformedURLException e) {
                    log.error(sm.getString("contextConfig.webinfClassesUrl"), e);
            }
            // Step 5. Process JARs for annotations - only need to process those
            // fragments we are going to use
            // This will add any matching classes to the typeInitializerMap
            if (ok) {
                processAnnotations(orderedFragments);
            }
            // Step 6. Merge web-fragment.xml files into the main web.xml file.
            if (ok) {
                ok = webXml.merge(orderedFragments);
            }
            // Step 6.5 Convert explicitly mentioned jsps to servlets
            if (!false) {
                convertJsps(webXml);
            }
            // Step 7. Apply merged web.xml to Context
            if (ok) {
                webXml.configureContext(context);
                // Step 7a. Make the merged web.xml available to other
                // components, specifically Jasper, to save those components
                // from having to re-generate it.
                // TODO Use a ServletContainerInitializer for Jasper
                String mergedWebXml = webXml.toXml();
                context.getServletContext().setAttribute(
                       org.apache.tomcat.util.scan.Constants.MERGED_WEB_XML,
                        mergedWebXml);
                if (context.getLogEffectiveWebXml()) {
                    log.info("web.xml:\n" + mergedWebXml);
                for (WebXml fragment : orderedFragments) {
                    resourceJars.add(fragment);
======= da36bd1^:"java/org/apache/catalina/startup/ContextConfig.java"

            // Step 9. Apply the ServletContainerInitializer config to the
            // context
            if (ok) {
                for (Map.Entry<ServletContainerInitializer,Set<Class<?>>> entry :
                        initializerClassMap.entrySet()) {
                    if (entry.getValue().isEmpty()) {
                        context.addServletContainerInitializer(entry.getKey(),
                                null);
                    } else {
                        context.addServletContainerInitializer(entry.getKey(),
                                entry.getValue());

======= c4a3427^:"java/javax/el/ValueReference.java"

    private Object base;
    private Object property;
======= c4a3427^:"java/javax/servlet/AsyncEvent.java"

    private AsyncContext context;
    private ServletRequest request;
    private ServletResponse response;
    private Throwable throwable;
======= c4a3427^:"java/javax/servlet/AsyncEvent.java"

======= c4a3427^:"java/javax/servlet/HttpConstraintElement.java"

    private EmptyRoleSemantic emptyRoleSemantic = EmptyRoleSemantic.PERMIT;
    private TransportGuarantee transportGuarantee = TransportGuarantee.NONE;
    private String[] rolesAllowed = new String[0];
======= c4a3427^:"java/javax/servlet/HttpConstraintElement.java"

======= c4a3427^:"java/javax/servlet/HttpConstraintElement.java"

======= c4a3427^:"java/javax/servlet/HttpMethodConstraintElement.java"

    private String methodName;
======= c4a3427^:"java/javax/servlet/MultipartConfigElement.java"

    private String location = "";
    private long maxFileSize = -1;
    private long maxRequestSize = -1;
    private int fileSizeThreshold = 0;
======= c4a3427^:"java/javax/servlet/MultipartConfigElement.java"

======= c4a3427^:"java/javax/servlet/ServletContextAttributeEvent.java"

    private String name;
    private Object value;
======= c4a3427^:"java/javax/servlet/ServletRequestAttributeEvent.java"

    private String name;
    private Object value;
======= c4a3427^:"java/javax/servlet/ServletRequestEvent.java"

    private ServletRequest request;
======= c4a3427^:"java/javax/servlet/ServletSecurityElement.java"

    private Map<String,HttpMethodConstraintElement> methodConstraints =
======= c4a3427^:"java/javax/servlet/UnavailableException.java"

    private Servlet servlet; // what's unavailable
    private boolean permanent; // needs admin action?
    private int seconds; // unavailability estimate
======= c4a3427^:"java/javax/servlet/UnavailableException.java"

======= c4a3427^:"java/javax/servlet/UnavailableException.java"

======= c4a3427^:"java/javax/servlet/UnavailableException.java"

======= c4a3427^:"java/javax/servlet/http/HttpSessionBindingEvent.java"

    private String name;
    private Object value;
======= c4a3427^:"java/javax/servlet/http/HttpSessionBindingEvent.java"

======= c4a3427^:"java/javax/servlet/jsp/ErrorData.java"

    private Throwable throwable;
    private int statusCode;
    private String uri;
    private String servletName;
======= c4a3427^:"java/javax/servlet/jsp/tagext/BodyContent.java"

    private JspWriter enclosingWriter;
======= c4a3427^:"java/javax/servlet/jsp/tagext/FunctionInfo.java"

    private String name;
    private String functionClass;
    private String functionSignature;
======= c4a3427^:"java/javax/servlet/jsp/tagext/TagAttributeInfo.java"

        this.name = name;
        this.required = required;
        this.type = type;
        this.reqTime = reqTime;
======= c4a3427^:"java/javax/servlet/jsp/tagext/TagAttributeInfo.java"

        this(name, required, type, reqTime);
        this.fragment = fragment;
======= c4a3427^:"java/javax/servlet/jsp/tagext/TagAttributeInfo.java"

        this(name, required, type, reqTime, fragment);
======= c4a3427^:"java/javax/servlet/jsp/tagext/TagAttributeInfo.java"

    private String name;
    private String type;
    private boolean reqTime;
    private boolean required;
    private boolean fragment;
    private String description;
    private boolean deferredValue;
    private boolean deferredMethod;
    private String expectedTypeName;
    private String methodSignature;
======= c4a3427^:"java/javax/servlet/jsp/tagext/TagData.java"

    private Hashtable<String, Object> attributes;        // the tagname/value map
======= c4a3427^:"java/javax/servlet/jsp/tagext/TagExtraInfo.java"

    private TagInfo tagInfo;
======= c4a3427^:"java/javax/servlet/jsp/tagext/TagFileInfo.java"

    private String name;
    private String path;
    private TagInfo tagInfo;
======= c4a3427^:"java/javax/servlet/jsp/tagext/TagVariableInfo.java"

    private String nameGiven; // <name-given>
    private String nameFromAttribute; // <name-from-attribute>
    private String className; // <class>
    private boolean declare; // <declare>
    private int scope; // <scope>
======= c4a3427^:"java/javax/servlet/jsp/tagext/ValidationMessage.java"

    private String id;
    private String message;
======= c4a3427^:"java/javax/servlet/jsp/tagext/VariableInfo.java"

    private String varName;
    private String className;
    private boolean declare;
    private int scope;

======= 469a916^:"java/org/apache/catalina/Authenticator.java"

======= 469a916^:"java/org/apache/catalina/Authenticator.java"

    /**
     * Register an authenticated Principal and authentication type in our
     * request, in the current session (if there is one), and with our
     * SingleSignOn valve, if there is one.  Set the appropriate cookie
     * to be returned. Passing in a null principal will de-register any
     * SSO sessions.
     *
     * @param request The servlet request we are processing
     * @param response The servlet response we are populating
     * @param principal The authenticated Principal to be registered
     * @param authType The authentication type to be registered
     * @param username Username used to authenticate (if any)
     * @param password Password used to authenticate (if any)
     */
    public void register(Request request, HttpServletResponse response,
            Principal principal, String authType,
            String username, String password);
======= 469a916^:"java/org/apache/catalina/Realm.java"

    public boolean hasRole(Principal principal, String role);
======= 469a916^:"java/org/apache/catalina/authenticator/AuthenticatorBase.java"

======= 469a916^:"java/org/apache/catalina/authenticator/BasicAuthenticator.java"

======= 469a916^:"java/org/apache/catalina/authenticator/DigestAuthenticator.java"

======= 469a916^:"java/org/apache/catalina/authenticator/FormAuthenticator.java"

======= 469a916^:"java/org/apache/catalina/authenticator/NonLoginAuthenticator.java"

======= 469a916^:"java/org/apache/catalina/authenticator/SSLAuthenticator.java"

======= 469a916^:"java/org/apache/catalina/connector/Request.java"

        // Check for a role alias defined in a <security-role-ref> element
        if (wrapper != null) {
            String realRole = wrapper.findSecurityReference(role);
            if ((realRole != null) && realm.hasRole(userPrincipal, realRole))
                return true;
        }
        return (realm.hasRole(userPrincipal, role));
======= 469a916^:"java/org/apache/catalina/connector/Request.java"

        LoginConfig config = context.getLoginConfig();
        if (config == null) {
            throw new ServletException(
                    sm.getString("coyoteRequest.noLoginConfig"));
        String authMethod = config.getAuthMethod();
        if (BASIC_AUTH.equals(authMethod) || FORM_AUTH.equals(authMethod) ||
                DIGEST_AUTH.equals(authMethod)) {
            // Methods support user name and password authentication
            Realm realm = context.getRealm();
            
            Principal principal = realm.authenticate(username, password);
            if (principal == null) {
                throw new ServletException(
                        sm.getString("coyoteRequest.authFail", username));
            }
            // Assume if we have a non-null LoginConfig then we must have an
            // authenticator
            context.getAuthenticator().register(this, getResponse(), principal,
                    authMethod, username, password);
        } else {
            throw new ServletException("coyoteRequest.noPasswordLogin");
        }
======= 469a916^:"java/org/apache/catalina/connector/Request.java"

        context.getAuthenticator().register(this, getResponse(), null,
                null, null, null);
======= 469a916^:"java/org/apache/catalina/realm/RealmBase.java"

======= 469a916^:"java/org/apache/catalina/realm/RealmBase.java"

                    if (hasRole(principal, roles[j])) {
======= 469a916^:"java/org/apache/catalina/realm/RealmBase.java"

    public boolean hasRole(Principal principal, String role) {
======= 469a916^:"java/org/apache/catalina/realm/UserDatabaseRealm.java"

======= 469a916^:"java/org/apache/catalina/realm/UserDatabaseRealm.java"

    public boolean hasRole(Principal principal, String role) {
======= 469a916^:"java/org/apache/catalina/realm/UserDatabaseRealm.java"

            return super.hasRole(principal, role);

======= 2db864e^:"java/org/apache/catalina/core/ApplicationContext.java"

======= 2db864e^:"java/org/apache/catalina/core/ApplicationContext.java"

    private Map<String,String> parameters = null;
======= 2db864e^:"java/org/apache/catalina/core/ApplicationContext.java"

        mergeParameters();
======= 2db864e^:"java/org/apache/catalina/core/ApplicationContext.java"

        mergeParameters();
======= 2db864e^:"java/org/apache/catalina/core/ApplicationContext.java"

        
        mergeParameters();
        
======= 2db864e^:"java/org/apache/catalina/core/ApplicationContext.java"

    // -------------------------------------------------------- Private Methods
    /**
     * Merge the context initialization parameters specified in the application
     * deployment descriptor with the application parameters described in the
     * server configuration, respecting the <code>override</code> property of
     * the application parameters appropriately.
     */
    private void mergeParameters() {
        if (parameters != null)
            return;
        Map<String,String> results = new ConcurrentHashMap<String,String>();
        String names[] = context.findParameters();
        for (int i = 0; i < names.length; i++)
            results.put(names[i], context.findParameter(names[i]));
        ApplicationParameter params[] =
            context.findApplicationParameters();
        for (int i = 0; i < params.length; i++) {
            if (params[i].getOverride()) {
                if (results.get(params[i].getName()) == null)
                    results.put(params[i].getName(), params[i].getValue());
            } else {
                results.put(params[i].getName(), params[i].getValue());
            }
        }
        parameters = results;
    }
======= 2db864e^:"java/org/apache/catalina/core/StandardContext.java"

======= 2db864e^:"java/org/apache/catalina/core/StandardContext.java"


======= 2570d6ff^:"java/org/apache/jasper/servlet/JspServletWrapper.java"

    private boolean reload = true;
    private long servletClassLastModifiedTime;
======= 2570d6ff^:"java/org/apache/jasper/servlet/JspServletWrapper.java"

======= 2570d6ff^:"java/org/apache/jasper/servlet/JspServletWrapper.java"

                    Servlet servlet = null;
======= 2570d6ff^:"java/org/apache/jasper/servlet/JspServletWrapper.java"

======= 2570d6ff^:"java/org/apache/jasper/servlet/JspServletWrapper.java"


======= 0ae33cb^:"java/org/apache/tomcat/util/http/FastHttpDateFormat.java"

    protected static final int CACHE_SIZE = 
    protected static final SimpleDateFormat format = 
    protected static final SimpleDateFormat formats[] = {
    protected final static TimeZone gmtZone = TimeZone.getTimeZone("GMT");
======= 0ae33cb^:"java/org/apache/tomcat/util/http/FastHttpDateFormat.java"

    protected static long currentDateGenerated = 0L;
    protected static String currentDate = null;
    protected static final ConcurrentHashMap<Long, String> formatCache = 
    protected static final ConcurrentHashMap<String, Long> parseCache = 
======= 0ae33cb^:"java/org/apache/tomcat/util/http/FastHttpDateFormat.java"

                    currentDateGenerated = now;

======= 654c964^:"java/org/apache/coyote/ajp/AjpAprProtocol.java"

======= 654c964^:"java/org/apache/coyote/ajp/AjpAprProtocol.java"

======= 654c964^:"java/org/apache/coyote/ajp/AjpAprProtocol.java"

    implements ProtocolHandler, MBeanRegistration {
    /**
     * The string manager for this package.
     */
    protected static final StringManager sm =
        StringManager.getManager(Constants.Package);
======= 654c964^:"java/org/apache/coyote/ajp/AjpAprProtocol.java"

    protected ObjectName tpOname;
    
    
    protected ObjectName rgOname;
    /**
     * Associated APR endpoint.
     */
    protected AprEndpoint endpoint = new AprEndpoint();
    /**
     * Configuration attributes.
     */
    protected Hashtable<String,Object> attributes =
        new Hashtable<String,Object>();
    /**
     * Adapter which will process the requests received by this endpoint.
     */
    private Adapter adapter;
    
    
======= 654c964^:"java/org/apache/coyote/ajp/AjpAprProtocol.java"

    /** 
     * Pass config info
     */
    @Override
    public void setAttribute(String name, Object value) {
        if (log.isTraceEnabled()) {
            log.trace(sm.getString("ajpprotocol.setattribute", name, value));
        }
        attributes.put(name, value);
    }
    @Override
    public Object getAttribute(String key) {
        if (log.isTraceEnabled()) {
            log.trace(sm.getString("ajpprotocol.getattribute", key));
        }
        return attributes.get(key);
    }
    @Override
    public Iterator<String> getAttributeNames() {
        return attributes.keySet().iterator();
    }
    /**
     * The adapter, used to call the connector
     */
    @Override
    public void setAdapter(Adapter adapter) {
        this.adapter = adapter;
    }
    @Override
    public Adapter getAdapter() {
        return adapter;
    }
        endpoint.setHandler(cHandler);
        endpoint.setUseSendfile(false);
======= 654c964^:"java/org/apache/coyote/ajp/AjpAprProtocol.java"

    @Override
    public void pause() throws Exception {
        try {
            endpoint.pause();
        } catch (Exception ex) {
            log.error(sm.getString("ajpprotocol.endpoint.pauseerror"), ex);
            throw ex;
        }
        if (log.isInfoEnabled())
            log.info(sm.getString("ajpprotocol.pause", getName()));
    }
    @Override
    public void resume() throws Exception {
        try {
            endpoint.resume();
        } catch (Exception ex) {
            log.error(sm.getString("ajpprotocol.endpoint.resumeerror"), ex);
            throw ex;
        }
        if (log.isInfoEnabled())
            log.info(sm.getString("ajpprotocol.resume", getName()));
    }
    @Override
    public void stop() throws Exception {
        try {
            endpoint.stop();
        } catch (Exception ex) {
            log.error(sm.getString("ajpprotocol.endpoint.stoperror"), ex);
            throw ex;
        }
        if (log.isInfoEnabled())
            log.info(sm.getString("ajpprotocol.stop", getName()));
    }
    @Override
    public void destroy() throws Exception {
        if (log.isInfoEnabled())
            log.info(sm.getString("ajpprotocol.destroy", getName()));
        endpoint.destroy();
        if (tpOname!=null)
            Registry.getRegistry(null, null).unregisterComponent(tpOname);
        if (rgOname != null)
            Registry.getRegistry(null, null).unregisterComponent(rgOname);
    }
    // *
    public String getName() {
        String encodedAddr = "";
        if (getAddress() != null) {
            encodedAddr = "" + getAddress();
            if (encodedAddr.startsWith("/"))
                encodedAddr = encodedAddr.substring(1);
            encodedAddr = URLEncoder.encode(encodedAddr) + "-";
        }
        return ("ajp-" + encodedAddr + endpoint.getPort());
    }
    /**
     * Processor cache.
     */
    protected int processorCache = -1;
    public int getProcessorCache() { return this.processorCache; }
    public void setProcessorCache(int processorCache) { this.processorCache = processorCache; }
    @Override
    public Executor getExecutor() { return endpoint.getExecutor(); }
    public void setExecutor(Executor executor) { endpoint.setExecutor(executor); }
    
    public int getMaxThreads() { return endpoint.getMaxThreads(); }
    public void setMaxThreads(int maxThreads) { endpoint.setMaxThreads(maxThreads); }
    public int getThreadPriority() { return endpoint.getThreadPriority(); }
    public void setThreadPriority(int threadPriority) { endpoint.setThreadPriority(threadPriority); }
    public int getBacklog() { return endpoint.getBacklog(); }
    public void setBacklog(int backlog) { endpoint.setBacklog(backlog); }
    public int getPort() { return endpoint.getPort(); }
    public void setPort(int port) { endpoint.setPort(port); }
    public InetAddress getAddress() { return endpoint.getAddress(); }
    public void setAddress(InetAddress ia) { endpoint.setAddress(ia); }
    public boolean getTcpNoDelay() { return endpoint.getTcpNoDelay(); }
    public void setTcpNoDelay(boolean tcpNoDelay) { endpoint.setTcpNoDelay(tcpNoDelay); }
    public int getSoLinger() { return endpoint.getSoLinger(); }
    public void setSoLinger(int soLinger) { endpoint.setSoLinger(soLinger); }
    public int getSoTimeout() { return endpoint.getSoTimeout(); }
    public void setSoTimeout(int soTimeout) { endpoint.setSoTimeout(soTimeout); }
    /**
     * Should authentication be done in the native webserver layer, 
     * or in the Servlet container ?
     */
    protected boolean tomcatAuthentication = true;
    public boolean getTomcatAuthentication() { return tomcatAuthentication; }
    public void setTomcatAuthentication(boolean tomcatAuthentication) { this.tomcatAuthentication = tomcatAuthentication; }
    /**
     * Required secret.
     */
    protected String requiredSecret = null;
    public void setRequiredSecret(String requiredSecret) { this.requiredSecret = requiredSecret; }
    
    /**
     * AJP packet size.
     */
    protected int packetSize = Constants.MAX_PACKET_SIZE;
    public int getPacketSize() { return packetSize; }
    public void setPacketSize(int packetSize) {
        if(packetSize < Constants.MAX_PACKET_SIZE) {
            this.packetSize = Constants.MAX_PACKET_SIZE;
        } else {
            this.packetSize = packetSize;
        }
    }
    /**
     * The number of seconds Tomcat will wait for a subsequent request
     * before closing the connection.
     */
    public int getKeepAliveTimeout() { return endpoint.getKeepAliveTimeout(); }
    public void setKeepAliveTimeout(int timeout) { endpoint.setKeepAliveTimeout(timeout); }
    public int getPollTime() { return endpoint.getPollTime(); }
    public void setPollTime(int pollTime) { endpoint.setPollTime(pollTime); }
    public void setPollerSize(int pollerSize) { endpoint.setPollerSize(pollerSize); }
    public int getPollerSize() { return endpoint.getPollerSize(); }
======= 654c964^:"java/org/apache/coyote/ajp/AjpAprProtocol.java"

                            proto.endpoint.getPoller().add(socket.getSocket().longValue());
======= 654c964^:"java/org/apache/coyote/ajp/AjpAprProtocol.java"

            AjpAprProcessor processor = new AjpAprProcessor(proto.packetSize, proto.endpoint);
======= 654c964^:"java/org/apache/coyote/ajp/AjpAprProtocol.java"

    // -------------------- Various implementation classes --------------------
    protected String domain;
    protected ObjectName oname;
    protected MBeanServer mserver;
    public ObjectName getObjectName() {
        return oname;
    }
    public String getDomain() {
        return domain;
    }
    @Override
    public ObjectName preRegister(MBeanServer server,
                                  ObjectName name) throws Exception {
        oname=name;
        mserver=server;
        domain=name.getDomain();
        return name;
    }
    @Override
    public void postRegister(Boolean registrationDone) {
        // NOOP
    }
    @Override
    public void preDeregister() throws Exception {
        // NOOP
    }
    @Override
    public void postDeregister() {
        // NOOP
    }
======= 654c964^:"java/org/apache/coyote/ajp/AjpProtocol.java"

======= 654c964^:"java/org/apache/coyote/ajp/AjpProtocol.java"

    implements ProtocolHandler, MBeanRegistration {
    /**
     * The string manager for this package.
     */
    protected static final StringManager sm =
        StringManager.getManager(Constants.Package);
======= 654c964^:"java/org/apache/coyote/ajp/AjpProtocol.java"

    protected ObjectName tpOname;
    
    
    protected ObjectName rgOname;
    /**
     * Associated java.io endpoint.
     */
    protected JIoEndpoint endpoint = new JIoEndpoint();
    /**
     * Configuration attributes.
     */
    protected Hashtable<String,Object> attributes =
        new Hashtable<String,Object>();
    /**
     * Adapter which will process the requests received by this endpoint.
     */
    private Adapter adapter;
    
======= 654c964^:"java/org/apache/coyote/ajp/AjpProtocol.java"

    /** 
     * Pass config info
     */
    @Override
    public void setAttribute(String name, Object value) {
        if (log.isTraceEnabled()) {
            log.trace(sm.getString("ajpprotocol.setattribute", name, value));
        }
        attributes.put(name, value);
    }
    @Override
    public Object getAttribute(String key) {
        if (log.isTraceEnabled()) {
            log.trace(sm.getString("ajpprotocol.getattribute", key));
        }
        return attributes.get(key);
    }
    @Override
    public Iterator<String> getAttributeNames() {
        return attributes.keySet().iterator();
    }
    /**
     * The adapter, used to call the connector
     */
    @Override
    public void setAdapter(Adapter adapter) {
        this.adapter = adapter;
    }
    @Override
    public Adapter getAdapter() {
        return adapter;
    }
        endpoint.setHandler(cHandler);
======= 654c964^:"java/org/apache/coyote/ajp/AjpProtocol.java"

    @Override
    public void pause() throws Exception {
        try {
            endpoint.pause();
        } catch (Exception ex) {
            log.error(sm.getString("ajpprotocol.endpoint.pauseerror"), ex);
            throw ex;
        }
        if (log.isInfoEnabled())
            log.info(sm.getString("ajpprotocol.pause", getName()));
    }
    @Override
    public void resume() throws Exception {
        try {
            endpoint.resume();
        } catch (Exception ex) {
            log.error(sm.getString("ajpprotocol.endpoint.resumeerror"), ex);
            throw ex;
        }
        if (log.isInfoEnabled())
            log.info(sm.getString("ajpprotocol.resume", getName()));
    }
    @Override
    public void stop() throws Exception {
        try {
            endpoint.stop();
        } catch (Exception ex) {
            log.error(sm.getString("ajpprotocol.endpoint.stoperror"), ex);
            throw ex;
        }
        if (log.isInfoEnabled())
            log.info(sm.getString("ajpprotocol.stop", getName()));
    }
    @Override
    public void destroy() throws Exception {
        if (log.isInfoEnabled())
            log.info(sm.getString("ajpprotocol.destroy", getName()));
        endpoint.destroy();
        if (tpOname!=null)
            Registry.getRegistry(null, null).unregisterComponent(tpOname);
        if (rgOname != null)
            Registry.getRegistry(null, null).unregisterComponent(rgOname);
    }
    // *
    public String getName() {
        String encodedAddr = "";
        if (getAddress() != null) {
            encodedAddr = "" + getAddress();
            if (encodedAddr.startsWith("/"))
                encodedAddr = encodedAddr.substring(1);
            encodedAddr = URLEncoder.encode(encodedAddr) + "-";
        }
        return ("ajp-" + encodedAddr + endpoint.getPort());
    }
    /**
     * Processor cache.
     */
    protected int processorCache = -1;
    public int getProcessorCache() { return this.processorCache; }
    public void setProcessorCache(int processorCache) { this.processorCache = processorCache; }
    @Override
    public Executor getExecutor() { return endpoint.getExecutor(); }
    public void setExecutor(Executor executor) { endpoint.setExecutor(executor); }
    
    public int getMaxThreads() { return endpoint.getMaxThreads(); }
    public void setMaxThreads(int maxThreads) { endpoint.setMaxThreads(maxThreads); }
    public int getThreadPriority() { return endpoint.getThreadPriority(); }
    public void setThreadPriority(int threadPriority) { endpoint.setThreadPriority(threadPriority); }
    public int getBacklog() { return endpoint.getBacklog(); }
    public void setBacklog(int backlog) { endpoint.setBacklog(backlog); }
    public int getPort() { return endpoint.getPort(); }
    public void setPort(int port) { endpoint.setPort(port); }
    public InetAddress getAddress() { return endpoint.getAddress(); }
    public void setAddress(InetAddress ia) { endpoint.setAddress(ia); }
    public boolean getTcpNoDelay() { return endpoint.getTcpNoDelay(); }
    public void setTcpNoDelay(boolean tcpNoDelay) { endpoint.setTcpNoDelay(tcpNoDelay); }
    public int getSoLinger() { return endpoint.getSoLinger(); }
    public void setSoLinger(int soLinger) { endpoint.setSoLinger(soLinger); }
    public int getSoTimeout() { return endpoint.getSoTimeout(); }
    public void setSoTimeout(int soTimeout) { endpoint.setSoTimeout(soTimeout); }
    /**
     * Should authentication be done in the native webserver layer, 
     * or in the Servlet container ?
     */
    protected boolean tomcatAuthentication = true;
    public boolean getTomcatAuthentication() { return tomcatAuthentication; }
    public void setTomcatAuthentication(boolean tomcatAuthentication) { this.tomcatAuthentication = tomcatAuthentication; }
    /**
     * Required secret.
     */
    protected String requiredSecret = null;
    public void setRequiredSecret(String requiredSecret) { this.requiredSecret = requiredSecret; }
    
    /**
     * AJP packet size.
     */
    protected int packetSize = Constants.MAX_PACKET_SIZE;
    public int getPacketSize() { return packetSize; }
    public void setPacketSize(int packetSize) {
        if(packetSize < Constants.MAX_PACKET_SIZE) {
            this.packetSize = Constants.MAX_PACKET_SIZE;
        } else {
            this.packetSize = packetSize;
        }
    }
    
    /**
     * The number of seconds Tomcat will wait for a subsequent request
     * before closing the connection.
     */
    protected int keepAliveTimeout = -1;
    public int getKeepAliveTimeout() { return keepAliveTimeout; }
    public void setKeepAliveTimeout(int timeout) { keepAliveTimeout = timeout; }
======= 654c964^:"java/org/apache/coyote/ajp/AjpProtocol.java"

            AjpProcessor processor = new AjpProcessor(proto.packetSize, proto.endpoint);
======= 654c964^:"java/org/apache/coyote/ajp/AjpProtocol.java"

    // -------------------- Various implementation classes --------------------
    protected String domain;
    protected ObjectName oname;
    protected MBeanServer mserver;
    public ObjectName getObjectName() {
        return oname;
    }
    public String getDomain() {
        return domain;
    }
    @Override
    public ObjectName preRegister(MBeanServer server,
                                  ObjectName name) throws Exception {
        oname=name;
        mserver=server;
        domain=name.getDomain();
        return name;
    }
    @Override
    public void postRegister(Boolean registrationDone) {
        // NOOP
    }
    @Override
    public void preDeregister() throws Exception {
        // NOOP
    }
    @Override
    public void postDeregister() {
        // NOOP
    }

======= 0e71157^:"java/org/apache/catalina/core/DefaultInstanceManager.java"

        if ((name != null) &&
                (name.length() > 0)) {
            lookedupResource = context.lookup(name);
======= 0e71157^:"java/org/apache/catalina/core/DefaultInstanceManager.java"

        if ((name != null) &&
                (name.length() > 0)) {
            lookedupResource = context.lookup(name);
======= 0e71157^:"java/org/apache/catalina/core/DefaultInstanceManager.java"


======= 937227a^:"java/org/apache/catalina/core/StandardContext.java"

======= 937227a^:"java/org/apache/catalina/core/StandardContext.java"


======= cf4e575^:"java/org/apache/catalina/core/AsyncContextImpl.java"

======= cf4e575^:"java/org/apache/catalina/core/AsyncContextImpl.java"

======= cf4e575^:"java/org/apache/catalina/core/AsyncContextImpl.java"

    
======= cf4e575^:"java/org/apache/catalina/core/AsyncContextImpl.java"

             listener = clazz.newInstance();
======= cf4e575^:"java/org/apache/catalina/core/AsyncContextImpl.java"

        filter matches more than one URL pattern and/or Servlet name.

======= b893eee^:"java/org/apache/el/parser/AstFloatingPoint.java"

    private Number number;
======= b893eee^:"java/org/apache/el/parser/AstInteger.java"

    private Number number;
======= b893eee^:"java/org/apache/el/parser/AstString.java"

    private String string;

======= 5eb3851^:"java/org/apache/catalina/core/StandardServer.java"

     * @exception javax.management.InstanceNotFoundException if the managed resource object
     *  cannot be found
     * @exception javax.management.MBeanException if the initializer of the object throws
     *  an exception, or persistence is not supported
     * @exception javax.management.RuntimeOperationsException if an exception is reported
     *  by the persistence mechanism
        ObjectName sname = null;    
        try {
           sname = new ObjectName("Catalina:type=StoreConfig");
           if(mserver.isRegistered(sname)) {
               mserver.invoke(sname, "storeConfig", null, null);            
           } else
               log.error("StoreConfig mbean not registered" + sname);
        } catch (Throwable t) {
            ExceptionUtils.handleThrowable(t);
            log.error(t);
        }

======= 2c858be^:"java/org/apache/catalina/tribes/group/interceptors/MessageDispatch15Interceptor.java"

======= 2c858be^:"java/org/apache/catalina/tribes/group/interceptors/MessageDispatch15Interceptor.java"

        executor = new ThreadPoolExecutor(maxSpareThreads,maxThreads,keepAliveTime,TimeUnit.MILLISECONDS,runnablequeue);
======= 2c858be^:"java/org/apache/catalina/tribes/group/interceptors/MessageDispatch15Interceptor.java"


======= f4de5ab^:"java/org/apache/tomcat/util/net/NioEndpoint.java"

======= f4de5ab^:"java/org/apache/tomcat/util/net/NioEndpoint.java"

        Sylvain Laurent.

======= 00cc8c6^:"java/org/apache/catalina/mbeans/JmxRemoteLifecycleListener.java"

                    Integer.valueOf(theRmiRegistryPort),
                    Integer.valueOf(theRmiServerPort), serverName));

======= dc754cc^:"java/org/apache/catalina/loader/JdbcLeakPrevention.java"

======= dc754cc^:"java/org/apache/catalina/loader/JdbcLeakPrevention.java"

        // This will list all drivers visible to this class loader
            driverNames.add(driver.getClass().getCanonicalName());

======= 167829c^:"java/org/apache/catalina/connector/Connector.java"


======= 2bfc300^:"java/org/apache/tomcat/util/threads/TaskQueue.java"

======= 2bfc300^:"java/org/apache/tomcat/util/threads/TaskQueue.java"

        if (parent.getActiveCount()<(parent.getPoolSize())) return super.offer(o);
======= 2bfc300^:"java/org/apache/tomcat/util/threads/ThreadPoolExecutor.java"

 * getActiveCount method, to be used to properly handle the work queue
======= 2bfc300^:"java/org/apache/tomcat/util/threads/ThreadPoolExecutor.java"

    private final AtomicInteger activeCount = new AtomicInteger(0);
======= 2bfc300^:"java/org/apache/tomcat/util/threads/ThreadPoolExecutor.java"

        activeCount.decrementAndGet();
    }
    @Override
    protected void beforeExecute(Thread t, Runnable r) {
        activeCount.incrementAndGet();
    @Override
    public int getActiveCount() {
        return activeCount.get();
======= 2bfc300^:"java/org/apache/tomcat/util/threads/ThreadPoolExecutor.java"

======= 2bfc300^:"java/org/apache/tomcat/util/threads/ThreadPoolExecutor.java"


======= 6c22816^:"java/org/apache/catalina/startup/Bootstrap.java"

======= 6c22816^:"java/org/apache/catalina/startup/Bootstrap.java"

            ExceptionUtils.handleThrowable(t);
======= 6c22816^:"java/org/apache/catalina/startup/Bootstrap.java"

                ExceptionUtils.handleThrowable(t);
======= 6c22816^:"java/org/apache/catalina/startup/Bootstrap.java"

            ExceptionUtils.handleThrowable(t);
======= 6c22816^:"java/org/apache/catalina/startup/Bootstrap.java"


======= 2f8a27c^:"java/org/apache/jasper/compiler/ParserController.java"

     * @param jarFileUrl The JAR file from which to read the included resource,
======= 2f8a27c^:"java/org/apache/jasper/compiler/ParserController.java"

     * @param tagFileJarUrl The location of the tag file.
======= 2f8a27c^:"java/org/apache/jasper/compiler/ParserController.java"

     * @param jarFile The JAR file from which to read the JSP page or tag file,
======= 2f8a27c^:"java/org/apache/jasper/compiler/TagFileProcessor.java"

     * @param tagFileJarUrl
     *            the url for the Jar containing the tag file 

======= 7c6b1a5^:"java/org/apache/catalina/startup/Catalina.java"


======= 7b24ed5^:"java/org/apache/jasper/compiler/Generator.java"

                StringBuilder msg =
                    new StringBuilder("jsp:getProperty for bean with name '");
======= 7b24ed5^:"java/org/apache/jasper/compiler/JspDocumentParser.java"

                            err);
======= 7b24ed5^:"java/org/apache/jasper/compiler/Parser.java"

                                pageInfo, prefix, uri, location, err);
======= 7b24ed5^:"java/org/apache/jasper/compiler/TagLibraryInfoImpl.java"

    public TagLibraryInfoImpl(JspCompilationContext ctxt, ParserController pc, PageInfo pi,
            String prefix, String uriIn, TldLocation location, ErrorDispatcher err)
======= 7b24ed5^:"java/org/apache/jasper/compiler/TagLibraryInfoImpl.java"

                    err.jspError("jsp.error.file.not.found", tldName);
======= 7b24ed5^:"java/org/apache/jasper/compiler/TagLibraryInfoImpl.java"

                    err.jspError("jsp.error.tld.unable_to_read", jarResource.getUrl(),

======= 7435fa9^:"java/org/apache/coyote/http11/AbstractHttp11Processor.java"

     * Check for compression
    protected boolean isCompressable() {
        // Nope Compression could works in HTTP 1.0 also
        // cf: mod_deflate
        // Compression only since HTTP 1.1
        // if (! http11)
        //    return false;
======= 7435fa9^:"java/org/apache/coyote/http11/AbstractHttp11Processor.java"

        // Check if content is not already gzipped
        MessageBytes contentEncodingMB =
            response.getMimeHeaders().getValue("Content-Encoding");
        if ((contentEncodingMB != null)
            && (contentEncodingMB.indexOf("gzip") != -1))
            return false;
======= 7435fa9^:"java/org/apache/coyote/http11/AbstractHttp11Processor.java"

        // Check if sufficient length to trigger the compression
        long contentLength = response.getContentLengthLong();
        if ((contentLength == -1)
            || (contentLength > compressionMinSize)) {
            // Check for compatible MIME-TYPE
            if (compressableMimeTypes != null) {
                return (startsWithStringArray(compressableMimeTypes,
                                              response.getContentType()));
            }
        }
        return false;
======= 7435fa9^:"java/org/apache/coyote/http11/AbstractHttp11Processor.java"

            useCompression = isCompressable();
======= 7435fa9^:"java/org/apache/coyote/http11/AbstractHttp11Processor.java"


======= d0d4c75^:"java/org/apache/catalina/loader/WebappClassLoader.java"

                    classBytes, 0, offset);

======= fb5a3e7^:"java/org/apache/coyote/ajp/AjpAprProcessor.java"

            String methodName = Constants.methodTransArray[methodCode - 1];
======= fb5a3e7^:"java/org/apache/coyote/ajp/AjpAprProcessor.java"

                hName = Constants.headerTransArray[hId - 1];
======= fb5a3e7^:"java/org/apache/coyote/ajp/AjpProcessor.java"

            String methodName = Constants.methodTransArray[methodCode - 1];
======= fb5a3e7^:"java/org/apache/coyote/ajp/AjpProcessor.java"

                hName = Constants.headerTransArray[hId - 1];
======= fb5a3e7^:"java/org/apache/coyote/ajp/Constants.java"

    public static final String []methodTransArray = {
======= fb5a3e7^:"java/org/apache/coyote/ajp/Constants.java"

======= fb5a3e7^:"java/org/apache/coyote/ajp/Constants.java"

    public static final String []headerTransArray = {
======= fb5a3e7^:"java/org/apache/coyote/ajp/Constants.java"

    public static final String []responseTransArray = {
======= fb5a3e7^:"java/org/apache/coyote/ajp/Constants.java"

======= fb5a3e7^:"java/org/apache/coyote/ajp/Constants.java"

                responseTransHash.put(responseTransArray[i],

======= 8dc0306^:"java/org/apache/catalina/loader/WebappClassLoader.java"

     * classes from J2SE (java.*) and classes of the servlet API 
======= 8dc0306^:"java/org/apache/catalina/loader/WebappClassLoader.java"

        if (name == null)
        if (name.startsWith("java."))
        if (name.startsWith("javax.servlet."))
      

======= b255697^:"java/org/apache/catalina/ha/session/BackupManager.java"

======= b255697^:"java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java"

======= b255697^:"java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java"

        if ( entry.getValue() != null && entry.getValue() instanceof ReplicatedMapEntry ) {
            ReplicatedMapEntry val = (ReplicatedMapEntry)entry.getValue();
            //hack, somehow this is not being set above
            val.setOwner(getMapOwner());
            
        }

======= e0182ef^:"java/org/apache/catalina/Server.java"

======= e0182ef^:"java/org/apache/catalina/Server.java"

======= e0182ef^:"java/org/apache/catalina/Service.java"

======= e0182ef^:"java/org/apache/catalina/core/StandardEngine.java"

======= e0182ef^:"java/org/apache/catalina/core/StandardEngine.java"

======= e0182ef^:"java/org/apache/catalina/core/StandardServer.java"

======= e0182ef^:"java/org/apache/catalina/core/StandardServer.java"

======= e0182ef^:"java/org/apache/catalina/core/StandardServer.java"

======= e0182ef^:"java/org/apache/catalina/core/StandardServer.java"

======= e0182ef^:"java/org/apache/catalina/core/StandardService.java"

         type="org.apache.catalina.core.StandardContext">
      <parameter name="valve"
                 description="New valve to be added"
                 type="org.apache.catalina.Valve"/>
    <operation name="removeValve"
               description="Remove a valve from this Context"
      <parameter name="valve"
                 description="New valve to be removed"
                 type="org.apache.catalina.Valve"/>
    <operation name="addLifecycleListener"
               description="Add a lifecycle listener to this Context"
                 description="New lifecycle listener to be added"
                 type="org.apache.catalina.LifecycleListener"/>
    <operation name="removeLifecycleListener"
               description="Remove a lifecycle listener from this Context"
                 description="New lifecycle listener to be removed"
                 type="org.apache.catalina.LifecycleListener"/>
    <operation name="reload"
               description="Reload the webapplication"
    <operation name="destroy"
               description="Destroy the context"
    <operation name="findMappingObject"
               description="Return an object which may be utilized for mapping to this component"
               impact="INFO"
               returnType="org.apache.catalina.Context">    
    </operation>    
    <operation name="findStaticResources"
               description="Return the naming resources associated with this web application"
               impact="INFO"
               returnType="javax.naming.directory.DirContext">    
         group="Engine">
               writeable="false"/>           
      <parameter name="child"
                 description="Host object"
                 type="org.apache.catalina.Container"/>
    <operation name="start" description="Start" impact="ACTION" returnType="void" />
    <operation name="stop" description="Stop" impact="ACTION" returnType="void" />
         type="org.apache.catalina.core.StandardHost">
               type="boolean"/>   
      
    <operation name="addChild"
               description="Add a context"
               impact="ACTION">
      <parameter name="child"
                 description="Context to be added"
                 type="org.apache.catalina.Container"/>
    </operation>
      
    <operation name="start" description="Start" impact="ACTION" returnType="void" />
    <operation name="stop" description="Stop" impact="ACTION" returnType="void" />
    <operation name="init" description="Init" impact="ACTION" returnType="void" />
    <operation name="destroy" description="Destroy" impact="ACTION" returnType="void" />
    <operation name="findReloadedContextMemoryLeaks"
               description="Provide a list of contexts that have leaked memory on reload. This will attempt to force a full garbage collection. Use with extreme caution on production systems."
               returnType="[Ljava.lang.String;" />
         type="org.apache.catalina.core.StandardService">
    <attribute name="managedResource"
               description="The managed resource this MBean is associated with"
               type="java.lang.Object"/>
      
    <attribute name="name"
               description="Unique name of this Service"
               type="java.lang.String"/>
      
    <attribute name="container"
               description="Servlet engine that will process the requests"
               type="org.apache.catalina.Container" />
      <parameter name="connector"
                 description="Connector object"
                 type="org.apache.catalina.connector.Connector"/>
    <operation name="start" description="Start" impact="ACTION" returnType="void" />
    <operation name="stop" description="Stop" impact="ACTION" returnType="void" />
         type="org.apache.catalina.core.StandardWrapper">
        <operation name="addLifecycleListener"
               description="Add a lifecycle listener to this Context"
      <parameter name="listener"
                 description="New lifecycle listener to be added"
                 type="org.apache.catalina.LifecycleListener"/>
    <operation name="removeLifecycleListener"
               description="Remove a lifecycle listener from this Context"
                 description="New lifecycle listener to be removed"
                 type="org.apache.catalina.LifecycleListener"/>
======= e0182ef^:"java/org/apache/catalina/startup/Catalina.java"

======= e0182ef^:"java/org/apache/catalina/startup/Catalina.java"


======= 94147b2^:"java/org/apache/catalina/core/DefaultInstanceManager.java"

======= 94147b2^:"java/org/apache/catalina/core/DefaultInstanceManager.java"

                    clazz.getName() + "/" + method.getName().substring(3));
======= 94147b2^:"java/org/apache/catalina/core/DefaultInstanceManager.java"


======= 64a8346^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/PooledConnection.java"

                connection.close();

======= a9f0fd5^:"java/org/apache/catalina/realm/CombinedRealm.java"

======= a9f0fd5^:"java/org/apache/catalina/realm/CombinedRealm.java"

        // This method should never be called
        // Stack trace will show where this was called from
        UnsupportedOperationException uoe =
            new UnsupportedOperationException(
                    sm.getString("combinedRealm.getName"));
        log.error(sm.getString("combinedRealm.unexpectedMethod"), uoe);
        throw uoe;

======= cd7263e^:"java/org/apache/catalina/connector/Connector.java"

======= cd7263e^:"java/org/apache/catalina/core/StandardService.java"

     * @param name String
    public Executor getExecutor(String name) {
                if (name.equals(executor.getName()))
======= cd7263e^:"java/org/apache/catalina/core/StandardService.java"

        // Stop our defined Connectors first
======= cd7263e^:"java/org/apache/catalina/core/StandardService.java"

        // Heuristic: Sleep for a while to ensure pause of the connector
        try {
            Thread.sleep(1000);
        } catch (InterruptedException e) {
            // Ignore
        }
======= cd7263e^:"java/org/apache/catalina/core/StandardService.java"

        // FIXME pero -- Why container stop first? KeepAlive connections can send request! 
        // Stop our defined Connectors first
                if (LifecycleState.INITIALIZED.equals(
                    // If Service fails to start, connectors may not have been
                    // started
======= cd7263e^:"java/org/apache/coyote/ProtocolHandler.java"

======= cd7263e^:"java/org/apache/coyote/ajp/AjpAprProcessor.java"

        while (started && !error) {
======= cd7263e^:"java/org/apache/coyote/ajp/AjpAprProcessor.java"

        if (!error) {
        if (!async || error)
======= cd7263e^:"java/org/apache/coyote/ajp/AjpAprProtocol.java"

    public void destroy() throws Exception {
======= cd7263e^:"java/org/apache/coyote/ajp/AjpProcessor.java"

        while (started && !error) {
======= cd7263e^:"java/org/apache/coyote/ajp/AjpProcessor.java"

        if (async && !error) {
======= cd7263e^:"java/org/apache/coyote/ajp/AjpProtocol.java"

    public void destroy() throws Exception {
======= cd7263e^:"java/org/apache/coyote/http11/AbstractHttp11Protocol.java"

    public void destroy() throws Exception {
======= cd7263e^:"java/org/apache/coyote/http11/Http11AprProcessor.java"

        while (!error && keepAlive && !comet && !async) {
======= cd7263e^:"java/org/apache/coyote/http11/Http11AprProcessor.java"

        if (comet  || async) {
            if (error) {
                inputBuffer.nextRequest();
                outputBuffer.nextRequest();
                recycle();
                return SocketState.CLOSED;
            } else {
                return SocketState.LONG;
            }
======= cd7263e^:"java/org/apache/coyote/http11/Http11NioProcessor.java"

        while (!error && keepAlive && !comet && !async) {
======= cd7263e^:"java/org/apache/coyote/http11/Http11NioProcessor.java"

        if (comet || async) {
            if (error) {
                recycle();
                return SocketState.CLOSED;
            } else {
                return SocketState.LONG;
            }
            if ( recycle ) {
======= cd7263e^:"java/org/apache/coyote/http11/Http11Processor.java"

        while (started && !error && keepAlive) {
======= cd7263e^:"java/org/apache/coyote/http11/Http11Processor.java"

        if (error) {
======= cd7263e^:"java/org/apache/tomcat/util/net/AbstractEndpoint.java"

    public abstract void pause();
    public abstract void resume();
    public abstract void init() throws Exception;
======= cd7263e^:"java/org/apache/tomcat/util/net/AprEndpoint.java"

     * Pause the endpoint, which will make it stop accepting new sockets.
     */
    @Override
    public void pause() {
        if (running && !paused) {
            paused = true;
            unlockAccept();
        }
    }
    /**
     * Resume the endpoint, which will make it start accepting new sockets
     * again.
     */
    @Override
    public void resume() {
        if (running) {
            paused = false;
        }
    }
    /**
======= cd7263e^:"java/org/apache/tomcat/util/net/AprEndpoint.java"

            getExecutor().execute(new SocketWithOptionsProcessor(socket));
======= cd7263e^:"java/org/apache/tomcat/util/net/JIoEndpoint.java"

    public void pause() {
        if (running && !paused) {
            paused = true;
            unlockAccept();
        }
    }
    @Override
    public void resume() {
        if (running) {
            paused = false;
        }
    }
======= cd7263e^:"java/org/apache/tomcat/util/net/JIoEndpoint.java"

            getExecutor().execute(new SocketProcessor(wrapper));
======= cd7263e^:"java/org/apache/tomcat/util/net/NioEndpoint.java"

    /**
     * Return the state of the endpoint.
     *
     * @return true if the endpoint is running, false otherwise
     */
    @Override
    public boolean isRunning() {
        return running;
    }
    /**
     * Return the state of the endpoint.
     *
     * @return true if the endpoint is paused, false otherwise
     */
    @Override
    public boolean isPaused() {
        return paused;
    }
======= cd7263e^:"java/org/apache/tomcat/util/net/NioEndpoint.java"

     * Pause the endpoint, which will make it stop accepting new sockets.
     */
    @Override
    public void pause() {
        if (running && !paused) {
            paused = true;
            unlockAccept();
        }
    }
    /**
     * Resume the endpoint, which will make it start accepting new sockets
     * again.
     */
    @Override
    public void resume() {
        if (running) {
            paused = false;
        }
    }
    /**

======= 6155a8b^:"java/org/apache/tomcat/util/bcel/classfile/AnnotationEntry.java"

    private List element_value_pairs;
======= 6155a8b^:"java/org/apache/tomcat/util/bcel/classfile/AnnotationEntry.java"

        annotationEntry.element_value_pairs = new ArrayList();
======= 6155a8b^:"java/org/apache/tomcat/util/bcel/classfile/AnnotationEntry.java"

        return (ElementValuePair[]) element_value_pairs.toArray(new ElementValuePair[element_value_pairs.size()]);
======= 6155a8b^:"java/org/apache/tomcat/util/bcel/classfile/AnnotationEntry.java"

            ElementValuePair envp = (ElementValuePair) element_value_pairs.get(i);
======= 6155a8b^:"java/org/apache/tomcat/util/bcel/classfile/Attribute.java"

    private static final Map readers = new HashMap();
======= 6155a8b^:"java/org/apache/tomcat/util/bcel/classfile/Attribute.java"

            AttributeReader r = (AttributeReader) readers.get(name);
======= 6155a8b^:"java/org/apache/tomcat/util/bcel/classfile/JavaClass.java"

======= 6155a8b^:"java/org/apache/tomcat/util/bcel/classfile/JavaClass.java"

            List accumulatedAnnotations = new ArrayList();
======= 6155a8b^:"java/org/apache/tomcat/util/bcel/classfile/JavaClass.java"

            annotations = (AnnotationEntry[])accumulatedAnnotations.toArray(new AnnotationEntry[accumulatedAnnotations.size()]);
======= 6155a8b^:"java/org/apache/tomcat/util/bcel/classfile/JavaClass.java"

    public int compareTo( Object obj ) {
        return getClassName().compareTo(((JavaClass) obj).getClassName());
======= 6155a8b^:"java/org/apache/tomcat/util/bcel/classfile/Unknown.java"

    private static final Map unknown_attributes = new HashMap();
======= 6155a8b^:"java/org/apache/tomcat/util/bcel/classfile/Utility.java"

    private static int unwrap( ThreadLocal tl ) {
        return ((Integer) tl.get()).intValue();
    private static void wrap( ThreadLocal tl, int value ) {
    private static ThreadLocal consumed_chars = new ThreadLocal() {
        protected Object initialValue() {

======= a6620cb^:"java/org/apache/catalina/loader/WebappClassLoader.java"

     * Construct a new ClassLoader with no defined repositories and no

======= bcb994c^:"java/org/apache/catalina/Globals.java"

======= bcb994c^:"java/org/apache/catalina/connector/Connector.java"

======= bcb994c^:"java/org/apache/catalina/connector/Connector.java"

                                       System.getProperty("catalina.base"));
======= bcb994c^:"java/org/apache/catalina/core/StandardContext.java"

        String base=System.getProperty("catalina.base");
======= bcb994c^:"java/org/apache/catalina/core/StandardContext.java"

            new File(System.getProperty("catalina.base"), "conf");
======= bcb994c^:"java/org/apache/catalina/ha/deploy/FarmWarDeployer.java"

======= bcb994c^:"java/org/apache/catalina/ha/deploy/FarmWarDeployer.java"

        configBase = new File(System.getProperty("catalina.base"), "conf");
======= bcb994c^:"java/org/apache/catalina/ha/deploy/FarmWarDeployer.java"

            file = new File(System.getProperty("catalina.base"), host
======= bcb994c^:"java/org/apache/catalina/manager/ManagerServlet.java"

======= bcb994c^:"java/org/apache/catalina/manager/ManagerServlet.java"

            deployed = new File(System.getProperty("catalina.base"),
        configBase = new File(System.getProperty("catalina.base"), "conf");
======= bcb994c^:"java/org/apache/catalina/manager/ManagerServlet.java"

            file = new File(System.getProperty("catalina.base"),
======= bcb994c^:"java/org/apache/catalina/manager/host/HostManagerServlet.java"

======= bcb994c^:"java/org/apache/catalina/manager/host/HostManagerServlet.java"

            file = new File(System.getProperty("catalina.base"), file.getPath());
======= bcb994c^:"java/org/apache/catalina/manager/host/HostManagerServlet.java"

            new File(System.getProperty("catalina.base"), "conf");
======= bcb994c^:"java/org/apache/catalina/realm/JAASMemoryLoginModule.java"

======= bcb994c^:"java/org/apache/catalina/realm/JAASMemoryLoginModule.java"

            file = new File(System.getProperty("catalina.base"), pathname);
======= bcb994c^:"java/org/apache/catalina/realm/MemoryRealm.java"

======= bcb994c^:"java/org/apache/catalina/realm/MemoryRealm.java"

            file = new File(System.getProperty("catalina.base"), pathname);
======= bcb994c^:"java/org/apache/catalina/startup/Bootstrap.java"

======= bcb994c^:"java/org/apache/catalina/startup/Bootstrap.java"

    protected static final String CATALINA_HOME_TOKEN = "${catalina.home}";
    protected static final String CATALINA_BASE_TOKEN = "${catalina.base}";
======= bcb994c^:"java/org/apache/catalina/startup/Bootstrap.java"

        System.setProperty( "catalina.home", s );
        System.setProperty( "catalina.base", s );
======= bcb994c^:"java/org/apache/catalina/startup/Bootstrap.java"

        if (System.getProperty("catalina.base") != null)
        if (System.getProperty("catalina.home") != null)
            System.setProperty("catalina.base",
                               System.getProperty("catalina.home"));
            System.setProperty("catalina.base",
======= bcb994c^:"java/org/apache/catalina/startup/Bootstrap.java"

        if (System.getProperty("catalina.home") != null)
                    ("catalina.home", 
                System.setProperty("catalina.home",
            System.setProperty("catalina.home",
======= bcb994c^:"java/org/apache/catalina/startup/Bootstrap.java"

        return System.getProperty("catalina.home",
======= bcb994c^:"java/org/apache/catalina/startup/Bootstrap.java"

        return System.getProperty("catalina.base", getCatalinaHome());
======= bcb994c^:"java/org/apache/catalina/startup/Catalina.java"

======= bcb994c^:"java/org/apache/catalina/startup/Catalina.java"

            file = new File(System.getProperty("catalina.base"), configFile);
======= bcb994c^:"java/org/apache/catalina/startup/Catalina.java"

        String catalinaHome = System.getProperty("catalina.home");
            } else if (System.getProperty("catalina.base") != null) {
                catalinaHome = System.getProperty("catalina.base");
                    ("catalina.home", "catalina.base", "catalina.jar");
                        ("tomcat.install", "catalina.home", "tomcat.jar");
======= bcb994c^:"java/org/apache/catalina/startup/Catalina.java"

            System.setProperty("catalina.home", catalinaHome);
        if (System.getProperty("catalina.base") == null) {
            System.setProperty("catalina.base",
            String catalinaBase = System.getProperty("catalina.base");
======= bcb994c^:"java/org/apache/catalina/startup/Catalina.java"

            System.setProperty("catalina.base", catalinaBase);
======= bcb994c^:"java/org/apache/catalina/startup/CatalinaProperties.java"

======= bcb994c^:"java/org/apache/catalina/startup/CatalinaProperties.java"

======= bcb994c^:"java/org/apache/catalina/startup/CatalinaProperties.java"

        return System.getProperty("catalina.home",
======= bcb994c^:"java/org/apache/catalina/startup/CatalinaProperties.java"

        return System.getProperty("catalina.base", getCatalinaHome());
======= bcb994c^:"java/org/apache/catalina/startup/Embedded.java"

======= bcb994c^:"java/org/apache/catalina/startup/Embedded.java"

    public void setCatalinaHome( String s ) {
        System.setProperty( "catalina.home", s);
    public void setCatalinaBase( String s ) {
        System.setProperty( "catalina.base", s);
        return System.getProperty("catalina.home");
        return System.getProperty("catalina.base");
======= bcb994c^:"java/org/apache/catalina/startup/Embedded.java"

        String catalinaHome = System.getProperty("catalina.home");
            } else if (System.getProperty("catalina.base") != null) {
                catalinaHome = System.getProperty("catalina.base");
                    ("catalina.home", "catalina.base", "catalina.jar");
                        ("tomcat.install", "catalina.home", "tomcat.jar");
======= bcb994c^:"java/org/apache/catalina/startup/Embedded.java"

            System.setProperty("catalina.home", catalinaHome);
        if (System.getProperty("catalina.base") == null) {
            System.setProperty("catalina.base",
            String catalinaBase = System.getProperty("catalina.base");
======= bcb994c^:"java/org/apache/catalina/startup/Embedded.java"

            System.setProperty("catalina.base", catalinaBase);
======= bcb994c^:"java/org/apache/catalina/startup/ExpandWar.java"

======= bcb994c^:"java/org/apache/catalina/startup/ExpandWar.java"

            appBase = new File(System.getProperty("catalina.base"),
======= bcb994c^:"java/org/apache/catalina/startup/ExpandWar.java"

            appBase = new File(System.getProperty("catalina.base"),
======= bcb994c^:"java/org/apache/catalina/startup/HostConfig.java"

======= bcb994c^:"java/org/apache/catalina/startup/HostConfig.java"

        File base = new File(System.getProperty("catalina.base"));
======= bcb994c^:"java/org/apache/catalina/startup/Tomcat.java"

======= bcb994c^:"java/org/apache/catalina/startup/Tomcat.java"

            basedir = System.getProperty("catalina.base");
            basedir = System.getProperty("catalina.home");
======= bcb994c^:"java/org/apache/catalina/startup/Tomcat.java"

        System.setProperty("catalina.home", basedir);
        System.setProperty("catalina.base", basedir);
======= bcb994c^:"java/org/apache/catalina/startup/Tool.java"

======= bcb994c^:"java/org/apache/catalina/startup/Tool.java"

    private static String catalinaHome = System.getProperty("catalina.home");
======= bcb994c^:"java/org/apache/catalina/startup/Tool.java"

            log.error("Must set 'catalina.home' system property");
======= bcb994c^:"java/org/apache/catalina/users/MemoryUserDatabase.java"

======= bcb994c^:"java/org/apache/catalina/users/MemoryUserDatabase.java"

                    file = new File(System.getProperty("catalina.base"),
======= bcb994c^:"java/org/apache/catalina/users/MemoryUserDatabase.java"

            file = new File(System.getProperty("catalina.base"),
======= bcb994c^:"java/org/apache/catalina/users/MemoryUserDatabase.java"

                new File(System.getProperty("catalina.base"), pathnameNew);
======= bcb994c^:"java/org/apache/catalina/users/MemoryUserDatabase.java"

                new File(System.getProperty("catalina.base"), pathnameOld);
                new File(System.getProperty("catalina.base"), pathname);
======= bcb994c^:"java/org/apache/catalina/valves/AccessLogValve.java"

======= bcb994c^:"java/org/apache/catalina/valves/AccessLogValve.java"

            dir = new File(System.getProperty("catalina.base"), directory);
======= bcb994c^:"java/org/apache/jasper/compiler/AntCompiler.java"

======= bcb994c^:"java/org/apache/jasper/compiler/AntCompiler.java"

        if (System.getProperty("catalina.home") != null) {
            project.setBasedir( System.getProperty("catalina.home"));
======= bcb994c^:"java/org/apache/tomcat/util/net/AbstractEndpoint.java"

======= bcb994c^:"java/org/apache/tomcat/util/net/AbstractEndpoint.java"

        String file = adjustRelativePath(s,System.getProperty("catalina.base"));
======= bcb994c^:"java/org/apache/tomcat/util/net/AbstractEndpoint.java"

        String file = adjustRelativePath(s,System.getProperty("catalina.base"));
======= bcb994c^:"java/org/apache/tomcat/util/net/jsse/JSSESocketFactory.java"

======= bcb994c^:"java/org/apache/tomcat/util/net/jsse/JSSESocketFactory.java"

                    keyStoreFile = new File(System.getProperty("catalina.base"),
======= bcb994c^:"java/org/apache/tomcat/util/net/jsse/JSSESocketFactory.java"

            crlFile = new File(System.getProperty("catalina.base"), crlf);

======= e641f20^:"java/org/apache/catalina/authenticator/AuthenticatorBase.java"

        <bug>47950</bug>: Align <code>WebappClassLoader.validate()</code>

======= 526f4ac^:"java/org/apache/coyote/http11/AbstractOutputBuffer.java"

======= 526f4ac^:"java/org/apache/coyote/http11/AbstractOutputBuffer.java"

======= 526f4ac^:"java/org/apache/coyote/http11/AbstractOutputBuffer.java"

======= 526f4ac^:"java/org/apache/coyote/http11/AbstractOutputBuffer.java"

======= 526f4ac^:"java/org/apache/coyote/http11/filters/GzipOutputFilter.java"

======= 526f4ac^:"java/org/apache/coyote/http11/filters/GzipOutputFilter.java"

            compressionStream = new GZIPOutputStream(fakeOutputStream);
======= 526f4ac^:"java/org/apache/coyote/http11/filters/GzipOutputFilter.java"

======= 526f4ac^:"java/org/apache/coyote/http11/filters/GzipOutputFilter.java"

            compressionStream = new GZIPOutputStream(fakeOutputStream);
======= 526f4ac^:"java/org/apache/coyote/http11/filters/GzipOutputFilter.java"


======= e2f0b9b^:"java/org/apache/catalina/authenticator/AuthenticatorBase.java"

======= e2f0b9b^:"java/org/apache/catalina/authenticator/AuthenticatorBase.java"

            if (!(parent instanceof Pipeline)) {
                parent = parent.getParent();
                continue;
            }
            Valve valves[] = ((Pipeline) parent).getValves();

======= 187eed8^:"java/org/apache/catalina/startup/ContextConfig.java"

======= 187eed8^:"java/org/apache/catalina/startup/ContextConfig.java"

                processResourceJARs(orderedFragments);

======= 42c226f^:"java/org/apache/jasper/compiler/Compiler.java"

        if (jspProperty.getDefaultContentType() != null) {
            pageInfo.setContentType(jspProperty.getDefaultContentType());
        }
======= 42c226f^:"java/org/apache/jasper/compiler/Compiler.java"

======= 42c226f^:"java/org/apache/jasper/compiler/Compiler.java"


======= 6fce7d7^:"java/org/apache/catalina/loader/WebappClassLoader.java"


======= c05cb94^:"java/javax/annotation/Resource.java"

    @SuppressWarnings("unchecked") // Can't use Class<?> because API needs to match specification
======= c05cb94^:"java/javax/ejb/EJB.java"

   @SuppressWarnings("unchecked") // Can't use Class<?> because API needs to match specification
======= c05cb94^:"java/javax/el/BeanELResolver.java"

        public @SuppressWarnings("unchecked") Class getPropertyType() {
======= c05cb94^:"java/javax/el/ELContext.java"

    public Object getContext(@SuppressWarnings("unchecked") Class key) {
======= c05cb94^:"java/javax/el/ELContext.java"

    public void putContext(@SuppressWarnings("unchecked") Class key,
======= c05cb94^:"java/javax/el/ResourceBundleELResolver.java"

    public @SuppressWarnings("unchecked") Iterator getFeatureDescriptors(
======= c05cb94^:"java/javax/servlet/ServletRequestWrapper.java"

    public boolean isWrapperFor(Class wrappedType) {
======= c05cb94^:"java/javax/servlet/ServletResponseWrapper.java"

    public boolean isWrapperFor(Class wrappedType) {
======= c05cb94^:"java/javax/servlet/annotation/HandlesTypes.java"

======= c05cb94^:"java/javax/servlet/jsp/el/ExpressionEvaluator.java"

            @SuppressWarnings("unchecked")// TCK signature fails with generics
======= c05cb94^:"java/javax/servlet/jsp/el/ExpressionEvaluator.java"

            @SuppressWarnings("unchecked")// TCK signature fails with generics
======= c05cb94^:"java/javax/servlet/jsp/el/ImplicitObjectELResolver.java"

    @SuppressWarnings("unchecked") // TCK signature test fails with generics
======= c05cb94^:"java/javax/servlet/jsp/tagext/TagSupport.java"

            @SuppressWarnings("unchecked")
======= c05cb94^:"java/javax/xml/ws/WebServiceRef.java"

    @SuppressWarnings("unchecked") // Can't use Class<?> because API needs to match specification
    @SuppressWarnings("unchecked") // Can't use Class<?> because API needs to match specification
======= c05cb94^:"java/org/apache/el/lang/EvaluationContext.java"

    public Object getContext(@SuppressWarnings("unchecked") Class key) {
======= c05cb94^:"java/org/apache/el/lang/EvaluationContext.java"

    public void putContext(@SuppressWarnings("unchecked") Class key,
======= c05cb94^:"java/org/apache/el/parser/AstValue.java"

            @SuppressWarnings("unchecked") Class[] paramTypes)
======= c05cb94^:"java/org/apache/el/parser/AstValue.java"

            @SuppressWarnings("unchecked") Class[] paramTypes,
======= c05cb94^:"java/org/apache/jasper/el/ELContextWrapper.java"

    @SuppressWarnings("unchecked") // Can't use Class<?> because API needs to match super-class specification
======= c05cb94^:"java/org/apache/jasper/el/ELContextWrapper.java"

    @SuppressWarnings("unchecked") // Can't use Class<?> because API needs to match super-class specification
======= c05cb94^:"java/org/apache/jasper/el/ExpressionEvaluatorImpl.java"

            @SuppressWarnings("unchecked") // API does not use generics
======= c05cb94^:"java/org/apache/jasper/el/ExpressionEvaluatorImpl.java"

            @SuppressWarnings("unchecked") // API does not use generics
======= c05cb94^:"java/org/apache/naming/resources/DirContextURLConnection.java"

    @SuppressWarnings("unchecked") // overridden method uses raw type Class[]

======= d446678^:"java/org/apache/catalina/manager/JMXProxyServlet.java"

    // ----------------------------------------------------- Instance Variables
    // --------------------------------------------------------- Public Methods
======= d446678^:"java/org/apache/catalina/manager/JMXProxyServlet.java"

                        Class c = value.getClass();
======= d446678^:"java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java"

======= d446678^:"java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java"

======= d446678^:"java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java"

======= d446678^:"java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java"

======= d446678^:"java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java"

======= d446678^:"java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java"

======= d446678^:"java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java"

    public static class MapEntry implements Map.Entry {
======= d446678^:"java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java"


======= f4a10ec^:"java/org/apache/catalina/startup/ContextConfig.java"


======= 96a99ce^:"test/org/apache/el/TestMethodExpressionImpl.java"


======= d21b105^:"java/org/apache/catalina/session/ManagerBase.java"

        int size = sessions.size();
======= d21b105^:"java/org/apache/catalina/session/ManagerBase.java"

                (sessions.size() >= maxActiveSessions)) {
======= d21b105^:"java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java"

                    if (entry!=null && entry.isPrimary() && value.equals(entry.getValue())) return true;
======= d21b105^:"java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java"

                if ( entry != null && entry.isPrimary() ) {
======= d21b105^:"java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java"

                if ( entry!=null && entry.isPrimary() ) set.add(key);
======= d21b105^:"java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java"

                    if (entry!=null && entry.isPrimary() && entry.getValue() != null) counter++;
======= d21b105^:"java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java"

                if (entry!=null && entry.isPrimary() && entry.getValue()!=null) values.add(entry.getValue());
======= d21b105^:"java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java"

            return ( (!proxy) && (!backup));

======= 5f1ad13^:"java/org/apache/catalina/connector/Request.java"

======= 5f1ad13^:"java/org/apache/catalina/connector/Request.java"

======= 5f1ad13^:"java/org/apache/catalina/connector/Request.java"

======= 5f1ad13^:"java/org/apache/catalina/connector/Request.java"

        if (isSecure()) {

======= 2357fb5^:"java/org/apache/catalina/connector/CoyoteAdapter.java"

            if (status==SocketStatus.ERROR || status==SocketStatus.STOP || status==SocketStatus.DISCONNECT) {
======= 2357fb5^:"java/org/apache/catalina/connector/Request.java"

                asyncContext.getState()==AsyncContextImpl.AsyncState.DISPATCHING_RUNNABLE  ||
======= 2357fb5^:"java/org/apache/catalina/core/AsyncContextImpl.java"

        NOT_STARTED, STARTED, DISPATCHING, DISPATCHING_RUNNABLE, DISPATCHED,
        COMPLETING, COMPLETING_RUNNABLE, TIMING_OUT, ERROR_DISPATCHING
======= 2357fb5^:"java/org/apache/catalina/core/AsyncContextImpl.java"

        } else if (state.compareAndSet(AsyncState.DISPATCHING_RUNNABLE,
                AsyncState.COMPLETING_RUNNABLE)) {
            // do nothing
======= 2357fb5^:"java/org/apache/catalina/core/AsyncContextImpl.java"

        if (state.compareAndSet(AsyncState.STARTED, AsyncState.DISPATCHING_RUNNABLE) ||
            state.compareAndSet(AsyncState.DISPATCHED, AsyncState.DISPATCHING_RUNNABLE)) {
            // TODO SERVLET3 - async
            final ServletContext sctx = getServletRequest().getServletContext();
            Runnable r = new Runnable() {
                public void run() {
                    //TODO SERVLET3 - async - set context class loader when running the task.
                    try {
                        
                        run.run();
                    }catch (Exception x) {
                        log.error("Unable to run async task.",x);
                    }
                }
            };
            this.dispatch = r;
            AtomicBoolean dispatched = new AtomicBoolean(false);
            request.getCoyoteRequest().action(ActionCode.ACTION_ASYNC_DISPATCH, dispatched );
            if (!dispatched.get()) {
                try {
                    doInternalDispatch();
                }catch (ServletException sx) {
                    throw new RuntimeException(sx);
                }catch (IOException ix) {
                    throw new RuntimeException(ix);
                }
            }
======= 2357fb5^:"java/org/apache/catalina/core/AsyncContextImpl.java"

                state.get() == AsyncState.DISPATCHING ||
                state.get() == AsyncState.DISPATCHING_RUNNABLE);
======= 2357fb5^:"java/org/apache/catalina/core/AsyncContextImpl.java"

            if (!listenerInvoked) {
                ((HttpServletResponse)servletResponse).setStatus(500);
            doInternalComplete(true);
======= 2357fb5^:"java/org/apache/catalina/core/AsyncContextImpl.java"

        } else if (this.state.get() == AsyncState.DISPATCHING_RUNNABLE) {
            if (this.dispatch!=null) {
                try {
                    dispatch.run();
                } catch (RuntimeException x) {
                    doInternalComplete(true);
                    if (x.getCause() instanceof ServletException) throw (ServletException)x.getCause();
                    if (x.getCause() instanceof IOException) throw (IOException)x.getCause();
                    else throw new ServletException(x);
                } finally {
                    dispatch = null;
                }
                if (this.state.compareAndSet(AsyncState.COMPLETING_RUNNABLE,
                        AsyncState.COMPLETING)) {
                    doInternalComplete(false);
                } else if (this.state.get() == AsyncState.DISPATCHING_RUNNABLE) {
                    doInternalComplete(true);
                    throw new IllegalStateException(
                            "Failed to call dispatch() or complete() after start()");
                }
            }
======= 2357fb5^:"java/org/apache/coyote/http11/Http11Processor.java"

                recycle();
======= 2357fb5^:"test/org/apache/catalina/core/TestAsyncContextImpl.java"

======= 2357fb5^:"test/org/apache/catalina/core/TestAsyncContextImpl.java"

======= 2357fb5^:"test/org/apache/catalina/core/TestAsyncContextImpl.java"

        getUrl("http://localhost:" + getPort() + "/");
======= 2357fb5^:"test/org/apache/catalina/core/TestAsyncContextImpl.java"

                        // TODO Auto-generated catch block
                        e.printStackTrace();
======= 2357fb5^:"test/org/apache/catalina/core/TestAsyncContextImpl.java"

        <bug>49528</bug>: Ensure AsyncContext.isAsyncStarted() returns the
        correct value after AsyncContext.start(). Tomcat implements this
        using an internal dispatch that requires slightly different treatment
        from a standard dispatch to ensure the correct value is returned.
        (markt)

======= dfbd8aa^:"java/org/apache/catalina/filters/ExpiresFilter.java"

 * <h2>Configuration Parameters</h2><h3>
 * <tt>ExpiresActive</tt></h3>
 * <p>
 * This directive enables or disables the generation of the <tt>Expires</tt> and
 * <tt>Cache-Control</tt> headers by this <tt>ExpiresFilter</tt>. If set to
 * <tt>Off</tt>, the headers will not be generated for any HTTP response. If set
 * to <tt>On</tt> or <tt>true</tt>, the headers will be added to served HTTP
 * responses according to the criteria defined by the
 * <tt>ExpiresByType &lt;content-type&gt;</tt> and <tt>ExpiresDefault</tt>
 * directives. Note that this directive does not guarantee that an
 * <tt>Expires</tt> or <tt>Cache-Control</tt> header will be generated. If the
 * criteria aren&#x27;t met, no header will be sent, and the effect will be as
 * though this directive wasn&#x27;t even specified.
 * </p>
 * <p>
 * This parameter is optional, default value is <tt>true</tt>.
 * </p>
 * <p>
 * <i>Enable filter</i>
 * </p>
 * 
 * <code><pre>
 * &lt;init-param&gt;
 *    &lt;!-- supports case insensitive &#x27;On&#x27; or &#x27;true&#x27; --&gt;
 *    &lt;param-name&gt;ExpiresActive&lt;/param-name&gt;&lt;param-value&gt;On&lt;/param-value&gt;
 * &lt;/init-param&gt;
 * </pre></code>
 * <p>
 * <i>Disable filter</i>
 * </p>
 * 
 * <code><pre>
 * &lt;init-param&gt;
 *    &lt;!-- supports anything different from case insensitive &#x27;On&#x27; and &#x27;true&#x27; --&gt;
 *    &lt;param-name&gt;ExpiresActive&lt;/param-name&gt;&lt;param-value&gt;Off&lt;/param-value&gt;
 * &lt;/init-param&gt;
 * </pre></code>
======= dfbd8aa^:"java/org/apache/catalina/filters/ExpiresFilter.java"

 * <li>The <tt>Content-Type</tt> of the response matches one of the types
======= dfbd8aa^:"java/org/apache/catalina/filters/ExpiresFilter.java"

 *    active=true, 
======= dfbd8aa^:"test/org/apache/catalina/filters/TestExpiresFilter.java"

        filterDef.addInitParameter("ExpiresActive", "Off");
        <bug>48998</bug>: Add the ExpiresFilter, a port of the httpd mod_expires
        module. Patch provided by Cyrille Le Clerc. (markt)
    <li>The <tt>Content-Type</tt> of the response matches one of the types
         Note that this directive only has effect if <tt>ExpiresActive On</tt> has
         been specified. It overrides, for the specified MIME type <i>only</i>, any
    Sample of initialization log message :
 active=true, 
    expiration date
    an expiration date


======= eca4ed9^:"java/org/apache/catalina/ha/session/SimpleTcpReplicationManager.java"

                    }catch ( Exception sleep) {}

======= e8245ef^:"java/org/apache/catalina/loader/WebappClassLoader.java"

        } catch (Exception e) {

======= a36b0c0^:"java/org/apache/catalina/ssi/SSIFilter.java"

======= a36b0c0^:"java/org/apache/catalina/ssi/SSIFilter.java"

======= a36b0c0^:"java/org/apache/catalina/ssi/SSIFilter.java"

                    debug);
======= a36b0c0^:"java/org/apache/catalina/ssi/SSIProcessor.java"

    public SSIProcessor(SSIExternalResolver ssiExternalResolver, int debug) {
======= a36b0c0^:"java/org/apache/catalina/ssi/SSIProcessor.java"

        addCommand("exec", new SSIExec());
======= a36b0c0^:"java/org/apache/catalina/ssi/SSIServlet.java"

======= a36b0c0^:"java/org/apache/catalina/ssi/SSIServlet.java"

======= a36b0c0^:"java/org/apache/catalina/ssi/SSIServlet.java"

                debug);

======= 4159093^:"java/org/apache/tomcat/util/res/StringManager.java"

    private ResourceBundle bundle;
    private Locale locale;
======= 4159093^:"java/org/apache/tomcat/util/res/StringManager.java"

            bundle = ResourceBundle.getBundle(bundleName, Locale.getDefault());
======= 4159093^:"java/org/apache/tomcat/util/res/StringManager.java"

                    bundle = ResourceBundle.getBundle(
======= 4159093^:"java/org/apache/tomcat/util/res/StringManager.java"

    private static Hashtable<String, StringManager> managers =

======= d6766f1^:"java/org/apache/catalina/filters/AddDefaultCharsetFilter.java"

======= d6766f1^:"java/org/apache/catalina/filters/AddDefaultCharsetFilter.java"

 * the "text" type to ISO-8859-1. RFC2616 explicitly states that browsers must
 * use ISO-8859-1 in these circumstances. However, browsers may attempt to
 * browsers have an option to enable it.
    public void destroy() {
        // NOOP
======= d6766f1^:"java/org/apache/catalina/filters/AddDefaultCharsetFilter.java"

                new ResponseWrapper((HttpServletResponse)response);
    public void init(FilterConfig filterConfig) throws ServletException {
        // NOOP
    }
     * Wrapper that adds the default character set for text media types if no
     * character set is specified.
    public class ResponseWrapper extends HttpServletResponseWrapper {
            if (ct != null && ct.startsWith("text/") &&
                    ct.indexOf("charset=") < 0) {
                // Use getCharacterEncoding() in case the charset has already
                // been set by a separate call.
                super.setContentType(ct + ";charset=" + getCharacterEncoding());
        public ResponseWrapper(HttpServletResponse response) {
            super(response);
        
    <p>The Add Default Character Set Filter does not support any initialization
    parameters.</p>

======= c191152^:"webapps/examples/WEB-INF/classes/compressionFilters/CompressionResponseStream.java"


======= a90b576^:"java/org/apache/catalina/connector/Connector.java"

======= a90b576^:"java/org/apache/catalina/connector/Connector.java"

        // Protocol handlers do not follow Lifecycle conventions.
        // protocolHandler.init() needs to wait until the connector.start()
        try {
            protocolHandler.init();
        } catch (Exception e) {
            throw new LifecycleException
                (sm.getString
                 ("coyoteConnector.protocolHandlerInitializationFailed", e));
        }
======= a90b576^:"java/org/apache/catalina/connector/Connector.java"

        // MapperListener doesn't follow Lifecycle conventions either
======= a90b576^:"java/org/apache/catalina/connector/Connector.java"

        // Protocol handlers do not follow Lifecycle conventions.
        // protocolHandler.destroy() needs to be called in connector.stop()
        try {
            protocolHandler.destroy();
        } catch (Exception e) {
            throw new LifecycleException
                (sm.getString
                 ("coyoteConnector.protocolHandlerDestroyFailed", e));
        }
        // MapperListener doesn't follow Lifecycle conventions either
======= a90b576^:"java/org/apache/catalina/connector/Connector.java"


======= dca6dd1^:"java/org/apache/catalina/startup/ContextConfig.java"

        // Open the default web.xml file, if it exists
======= dca6dd1^:"java/org/apache/catalina/startup/ContextConfig.java"

            File defaultContextFile = new File(getBaseDir(), defaultContextXml);

======= 7b9630b^:"java/org/apache/catalina/connector/Response.java"

======= 7b9630b^:"java/org/apache/catalina/connector/Response.java"


======= 3bd4bcb^:"java/org/apache/catalina/core/ContainerBase.java"

        if (getState().isAvailable()) {
            try {
                if (child.getState().isAvailable()) {
                    child.stop();
                }
            } catch (LifecycleException e) {
                log.error("ContainerBase.removeChild: stop: ", e);

======= 4e34898^:"java/org/apache/catalina/connector/CoyoteAdapter.java"

======= 4e34898^:"java/org/apache/catalina/connector/MapperListener.java"

        mapper.addHost(host.getName(), aliases, host.getObjectName());
======= 4e34898^:"java/org/apache/catalina/connector/MapperListener.java"

        String hostName = context.getParent().getName();
        mapper.addContext(hostName, contextName, context, welcomeFiles,
                resources);
======= 4e34898^:"java/org/apache/catalina/connector/Request.java"

        if (getContext() == null)
            return null;
        return (Host) getContext().getParent();
        //return ((Host) mappingData.host);
======= 4e34898^:"java/org/apache/tomcat/util/http/mapper/Mapper.java"

        (String hostName, String path, Object context,
            addHost(hostName, new String[0], "");
        Host host = hosts[pos];
        if (host.name.equals(hostName)) {
            synchronized (host) {
                Context[] contexts = host.contextList.contexts;
                if (slashCount > host.contextList.nesting) {
                    host.contextList.nesting = slashCount;
======= 4e34898^:"java/org/apache/tomcat/util/http/mapper/Mapper.java"

                    host.contextList.contexts = newContexts;

======= 0b8a9a8^:"java/org/apache/catalina/core/ApplicationSessionCookieConfig.java"


======= 3c88f07^:"java/org/apache/catalina/core/StandardContext.java"

                "type=NamingResources," + getObjectNameKeyProperties());
======= 3c88f07^:"java/org/apache/catalina/core/StandardContext.java"

            new StringBuilder("j2eeType=WebModule,name=");
        
        String hostName = getParent().getName();
        if (hostName == null) {
            keyProperties.append("DEFAULT");
            keyProperties.append(hostName);
            keyProperties.append('/');
            keyProperties.append(pathName);
        keyProperties.append(",J2EEApplication=");
        keyProperties.append(getJ2EEApplication());
        keyProperties.append(",J2EEServer=");
        keyProperties.append(getJ2EEServer());
        return keyProperties.toString();
    

======= a0159a3^:"java/org/apache/catalina/filters/CsrfPreventionFilter.java"

======= a0159a3^:"java/org/apache/catalina/filters/CsrfPreventionFilter.java"

======= a0159a3^:"java/org/apache/catalina/filters/CsrfPreventionFilter.java"

                String expectedNonce =
                    (String) req.getSession(true).getAttribute(
                        Constants.CSRF_NONCE_SESSION_ATTR_NAME);
                
                if (expectedNonce != null &&
                        !expectedNonce.equals(previousNonce)) {
            req.getSession(true).setAttribute(
                    Constants.CSRF_NONCE_SESSION_ATTR_NAME, newNonce);
======= a0159a3^:"java/org/apache/catalina/filters/CsrfPreventionFilter.java"

======= a0159a3^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

    protected static final String NONCE_SESSION =
        "org.apache.catalina.manager.NONCE";
    protected static final String NONCE_REQUEST = "nonce";
        
======= a0159a3^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

        String requestNonce = request.getParameter(NONCE_REQUEST);
        // Check nonce
        // There *must* be a nonce in the session before any POST is processed
        HttpSession session = request.getSession();
        String sessionNonce = (String) session.getAttribute(NONCE_SESSION);
        if (sessionNonce == null) {
            message = sm.getString("htmlManagerServlet.noNonce", command);
            // Reset the command
            command = null;
        } else {
            if (!sessionNonce.equals(requestNonce)) {
                // Nonce mis-match.
                message =
                    sm.getString("htmlManagerServlet.nonceMismatch", command);
                // Reset the command
                command = null;
            }
        }
        
======= a0159a3^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

        String newNonce = generateNonce();
        request.getSession().setAttribute(NONCE_SESSION, newNonce);
        
======= a0159a3^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

            Context context = (Context) host.findChild(contextPath);
            if (context != null ) {
======= a0159a3^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

                args[2] = context.getDisplayName();
                args[3] = new Boolean(context.getAvailable());
                if (context.getManager() != null) {
                        (context.getManager().getActiveSessions());
======= a0159a3^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

                args = new Object[15];
======= a0159a3^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

                Manager manager = context.getManager();
                            context.getManager().getMaxInactiveInterval()/60);
                args[14] = newNonce;
                if (context.getPath().equals(this.context.getPath())) {
                } else if (context.getAvailable() && isDeployed) {
                } else if (context.getAvailable() && !isDeployed) {
                } else if (!context.getAvailable() && isDeployed) {
======= a0159a3^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

        args = new Object[8];
======= a0159a3^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

        args[7] = newNonce;
        args = new Object[5];
        args[4] = newNonce;
        args = new Object[6];
        args[3] = newNonce;
        args[4] = sm.getString("htmlManagerServlet.diagnosticsLeakWarning");
        args[5] = sm.getString("htmlManagerServlet.diagnosticsLeakButton");
======= a0159a3^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

        Context context = (Context) host.findChild(searchPath);
        if (null == context) {
        Session[] sessions = context.getManager().findSessions();
======= a0159a3^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

        Context context = (Context) host.findChild(searchPath);
        if (null == context) {
        Session session = context.getManager().findSession(id);
======= a0159a3^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

        getServletContext().getRequestDispatcher(sessionDetailJspPath).include(req, resp);
======= a0159a3^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

        "<small><a href=\"{4}\" target=\"_blank\">{5}</a></small></td>\n";
======= a0159a3^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

        "  <input type=\"hidden\" name=\"" + NONCE_REQUEST + "\" value=\"{14}\">" +
======= a0159a3^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

        "  <input type=\"hidden\" name=\"" + NONCE_REQUEST + "\" value=\"{14}\">" +
        "  <input type=\"hidden\" name=\"" + NONCE_REQUEST + "\" value=\"{14}\">" +
        "  <input type=\"hidden\" name=\"" + NONCE_REQUEST + "\" value=\"{14}\"" +
======= a0159a3^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

        "  <input type=\"hidden\" name=\"" + NONCE_REQUEST + "\" value=\"{14}\">" +
======= a0159a3^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

        "  <input type=\"hidden\" name=\"" + NONCE_REQUEST + "\" value=\"{14}\">" +
        "  <input type=\"hidden\" name=\"" + NONCE_REQUEST + "\" value=\"{14}\">" +
======= a0159a3^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

        "  <input type=\"hidden\" name=\"" + NONCE_REQUEST + "\" value=\"{14}\">" +
        "  <input type=\"hidden\" name=\"" + NONCE_REQUEST + "\" value=\"{14}\">" +
======= a0159a3^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

        "  <input type=\"hidden\" name=\"" + NONCE_REQUEST + "\" value=\"{14}\">" +
======= a0159a3^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

        "<input type=\"hidden\" name=\"" + NONCE_REQUEST + "\" value=\"{7}\" >" +
======= a0159a3^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

        "<input type=\"hidden\" name=\"" + NONCE_REQUEST + "\" value=\"{4}\" >" +
======= a0159a3^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

        "<input type=\"hidden\" name=\"" + NONCE_REQUEST + "\" value=\"{3}\" >" +
        "  <input type=\"submit\" value=\"{5}\">\n" +
        "  <small>{4}</small>\n" +
    You are not authorized to view this page. If you have not changed
   String submitUrl = ((HttpServletRequest)pageContext.getRequest()).getRequestURL().toString();
   	String attributeName = (String) attributeNamesEnumeration.nextElement();
   String submitUrl = ((HttpServletRequest)pageContext.getRequest()).getRequestURI() + "?path=" + path;

======= 27091e7^:"java/org/apache/catalina/filters/RemoteIpFilter.java"

 * header named <code>$remoteIPHeader</code> (default value <code>x-forwarded-for</code>). Values are processed in right-to-left order.</li>
======= 27091e7^:"java/org/apache/catalina/filters/RemoteIpFilter.java"

 * <td>remoteIPHeader</td>
======= 27091e7^:"java/org/apache/catalina/filters/RemoteIpFilter.java"

 * <code>remoteIPHeader</code></td>
======= 27091e7^:"java/org/apache/catalina/filters/RemoteIpFilter.java"

 *       &lt;param-name&gt;remoteIPHeader&lt;/param-name&gt;&lt;param-value&gt;x-forwarded-for&lt;/param-value&gt;
 *       &lt;param-name&gt;remoteIPProxiesHeader&lt;/param-name&gt;&lt;param-value&gt;x-forwarded-by&lt;/param-value&gt;
======= 27091e7^:"java/org/apache/catalina/filters/RemoteIpFilter.java"

 *       &lt;param-name&gt;remoteIPHeader&lt;/param-name&gt;&lt;param-value&gt;x-forwarded-for&lt;/param-value&gt;
 *       &lt;param-name&gt;remoteIPProxiesHeader&lt;/param-name&gt;&lt;param-value&gt;x-forwarded-by&lt;/param-value&gt;
======= 27091e7^:"java/org/apache/catalina/filters/RemoteIpFilter.java"

 *       &lt;param-name&gt;remoteIPHeader&lt;/param-name&gt;&lt;param-value&gt;x-forwarded-for&lt;/param-value&gt;
 *       &lt;param-name&gt;remoteIPProxiesHeader&lt;/param-name&gt;&lt;param-value&gt;x-forwarded-by&lt;/param-value&gt;
======= 27091e7^:"java/org/apache/catalina/filters/RemoteIpFilter.java"

 *       &lt;param-name&gt;remoteIPHeader&lt;/param-name&gt;&lt;param-value&gt;x-forwarded-for&lt;/param-value&gt;
 *       &lt;param-name&gt;remoteIPProxiesHeader&lt;/param-name&gt;&lt;param-value&gt;x-forwarded-by&lt;/param-value&gt;
======= 27091e7^:"java/org/apache/catalina/filters/RemoteIpFilter.java"

    protected static final String REMOTE_IP_HEADER_PARAMETER = "remoteIPHeader";
======= 27091e7^:"java/org/apache/catalina/filters/RemoteIpFilter.java"

     * @see #setRemoteIPHeader(String)
    private String remoteIPHeader = "X-Forwarded-For";
======= 27091e7^:"java/org/apache/catalina/filters/RemoteIpFilter.java"

            String[] remoteIPHeaderValue = commaDelimitedListToStringArray(request.getHeader(remoteIPHeader));
            // loop on remoteIPHeaderValue to find the first trusted remote ip and to build the proxies chain
            for (idx = remoteIPHeaderValue.length - 1; idx >= 0; idx--) {
                String currentRemoteIp = remoteIPHeaderValue[idx];
======= 27091e7^:"java/org/apache/catalina/filters/RemoteIpFilter.java"

            // continue to loop on remoteIPHeaderValue to build the new value of the remoteIPHeader
                String currentRemoteIp = remoteIPHeaderValue[idx];
======= 27091e7^:"java/org/apache/catalina/filters/RemoteIpFilter.java"

                    xRequest.removeHeader(remoteIPHeader);
                    xRequest.setHeader(remoteIPHeader, commaDelimitedRemoteIpHeaderValue);
======= 27091e7^:"java/org/apache/catalina/filters/RemoteIpFilter.java"

                        + "', originalScheme='" + request.getScheme() + "', original[" + remoteIPHeader + "]='"
                        + request.getHeader(remoteIPHeader) + ", original[" + protocolHeader + "]='"
                        + xRequest.getScheme() + "', newSecure='" + xRequest.isSecure() + "', new[" + remoteIPHeader + "]='"
                        + xRequest.getHeader(remoteIPHeader) + ", new[" + proxiesHeader + "]='" + xRequest.getHeader(proxiesHeader) + "'");
======= 27091e7^:"java/org/apache/catalina/filters/RemoteIpFilter.java"

    public String getRemoteIPHeader() {
        return remoteIPHeader;
======= 27091e7^:"java/org/apache/catalina/filters/RemoteIpFilter.java"

            setRemoteIPHeader(filterConfig.getInitParameter(REMOTE_IP_HEADER_PARAMETER));
======= 27091e7^:"java/org/apache/catalina/filters/RemoteIpFilter.java"

    public void setRemoteIPHeader(String remoteIPHeader) {
        this.remoteIPHeader = remoteIPHeader;
     * Comma delimited list of proxies that are trusted when they appear in the {@link #remoteIPHeader} header. Can be expressed as a
======= 27091e7^:"java/org/apache/catalina/valves/RemoteIpValve.java"

 * header named <code>$remoteIPHeader</code> (default value <code>x-forwarded-for</code>). Values are processed in right-to-left order.</li>
======= 27091e7^:"java/org/apache/catalina/valves/RemoteIpValve.java"

 * <td>remoteIPHeader</td>
======= 27091e7^:"java/org/apache/catalina/valves/RemoteIpValve.java"

 * <code>remoteIPHeader</code></td>
======= 27091e7^:"java/org/apache/catalina/valves/RemoteIpValve.java"

 *   remoteIPHeader="x-forwarded-for"
 *   remoteIPProxiesHeader="x-forwarded-by"
======= 27091e7^:"java/org/apache/catalina/valves/RemoteIpValve.java"

 *   remoteIPHeader="x-forwarded-for"
 *   remoteIPProxiesHeader="x-forwarded-by"
======= 27091e7^:"java/org/apache/catalina/valves/RemoteIpValve.java"

 *   remoteIPHeader="x-forwarded-for"
 *   remoteIPProxiesHeader="x-forwarded-by"
======= 27091e7^:"java/org/apache/catalina/valves/RemoteIpValve.java"

 *   remoteIPHeader="x-forwarded-for"
 *   remoteIPProxiesHeader="x-forwarded-by"
======= 27091e7^:"java/org/apache/catalina/valves/RemoteIpValve.java"

            String[] remoteIPHeaderValue = commaDelimitedListToStringArray(request.getHeader(remoteIpHeader));
            // loop on remoteIPHeaderValue to find the first trusted remote ip and to build the proxies chain
            for (idx = remoteIPHeaderValue.length - 1; idx >= 0; idx--) {
                String currentRemoteIp = remoteIPHeaderValue[idx];
======= 27091e7^:"java/org/apache/catalina/valves/RemoteIpValve.java"

            // continue to loop on remoteIPHeaderValue to build the new value of the remoteIPHeader
                String currentRemoteIp = remoteIPHeaderValue[idx];
         &lt;param-name&gt;remoteIPHeader&lt;/param-name&gt;
         &lt;param-name&gt;remoteIPProxiesHeader&lt;/param-name&gt;
         &lt;param-name&gt;remoteIPHeader&lt;/param-name&gt;
         &lt;param-name&gt;remoteIPProxiesHeader&lt;/param-name&gt;
         &lt;param-name&gt;remoteIPHeader&lt;/param-name&gt;
         &lt;param-name&gt;remoteIPProxiesHeader&lt;/param-name&gt;
         &lt;param-name&gt;remoteIPHeader&lt;/param-name&gt;
         &lt;param-name&gt;remoteIPProxiesHeader&lt;/param-name&gt;
      <attribute name="remoteIPHeader" required="false">
      <attribute name="remoteIPHeader" required="false">

======= 4f990f1^:"java/org/apache/catalina/ha/session/DeltaManager.java"

    private long counterSend_EVT_ALL_SESSION_DATA = 0 ;
    private int counterReceive_EVT_ALL_SESSION_TRANSFERCOMPLETE = 0 ;
======= 4f990f1^:"java/org/apache/catalina/ha/session/DeltaManager.java"

 
======= 4f990f1^:"java/org/apache/catalina/ha/session/DeltaManager.java"

======= 4f990f1^:"java/org/apache/catalina/ha/session/DeltaManager.java"

======= 4f990f1^:"java/org/apache/catalina/ha/session/DeltaManager.java"

                case SessionMessage.EVT_SESSION_DELTA: {
======= 4f990f1^:"java/org/apache/catalina/ha/session/DeltaManager.java"

======= 4f990f1^:"java/org/apache/catalina/ha/session/DeltaManager.java"

======= 4f990f1^:"java/org/apache/catalina/ha/session/DeltaManager.java"

======= 4f990f1^:"java/org/apache/catalina/ha/session/DeltaManager.java"

======= 4f990f1^:"java/org/apache/catalina/ha/session/SessionMessage.java"

 *   <li><pre>public static final int EVT_ATTRIBUTE_ADDED</pre><li>
 *   <li><pre>public static final int EVT_ATTRIBUTE_REMOVED</pre><li>
 *   <li><pre>public static final int EVT_SESSION_EXPIRED_WONOTIFY</pre><li>
 *   <li><pre>public static final int EVT_SESSION_EXPIRED_WNOTIFY</pre><li>
 *   <li><pre>public static final int EVT_SET_USER_PRINCIPAL</pre><li>
 *   <li><pre>public static final int EVT_SET_SESSION_NOTE</pre><li>
 *   <li><pre>public static final int EVT_REMOVE_SESSION_NOTE</pre><li>
======= 4f990f1^:"java/org/apache/catalina/ha/session/SessionMessage.java"

    
======= 4f990f1^:"java/org/apache/catalina/ha/session/SessionMessageImpl.java"

     * <B>EVT_SESSION_EXPIRED_XXXX</B><BR>
     *    The parameters: sessionID must be set.<BR>
======= 4f990f1^:"java/org/apache/catalina/ha/session/SessionMessageImpl.java"

======= 4f990f1^:"java/org/apache/catalina/ha/session/SessionMessageImpl.java"


======= e119b5b^:"java/org/apache/catalina/ha/authenticator/ClusterSingleSignOn.java"

        "org.apache.catalina.cluster.authenticator.ClusterSingleSignOn";
======= e119b5b^:"java/org/apache/catalina/ha/authenticator/ClusterSingleSignOnListener.java"

    protected static final String info = "org.apache.catalina.session.ClusterSingleSignOnListener/1.0";
======= e119b5b^:"java/org/apache/catalina/ha/session/ClusterSessionListener.java"

    protected static final String info = "org.apache.catalina.session.ClusterSessionListener/1.1";

======= ac8a5ba^:"java/org/apache/catalina/core/StandardContext.java"

     * <code>false</code> will be used. 
======= ac8a5ba^:"java/org/apache/catalina/core/StandardContext.java"

======= ac8a5ba^:"java/org/apache/catalina/loader/WebappClassLoader.java"

     * <code>false</code> will be used. Note that instances of
     * java.util.TimerThread will always be terminate since a safe method exists
     * to do so.
======= ac8a5ba^:"java/org/apache/catalina/loader/WebappClassLoader.java"

======= ac8a5ba^:"java/org/apache/catalina/loader/WebappClassLoader.java"

======= ac8a5ba^:"java/org/apache/catalina/loader/WebappClassLoader.java"

     /**
      * Set the clearReferencesLogFactoryRelease feature for this Context.
      *
      * @param clearReferencesLogFactoryRelease The new flag value
      */
     public void setClearReferencesLogFactoryRelease(
             boolean clearReferencesLogFactoryRelease) {
         this.clearReferencesLogFactoryRelease =
             clearReferencesLogFactoryRelease;
     }
======= ac8a5ba^:"java/org/apache/catalina/loader/WebappClassLoader.java"

                    // TimerThread is not normally visible
                            "java.util.TimerThread")) {
======= ac8a5ba^:"java/org/apache/catalina/loader/WebappLoader.java"


======= ac22dd8^:"java/org/apache/catalina/ha/session/BackupManager.java"

        setState(LifecycleState.MUST_DESTROY);
======= ac22dd8^:"java/org/apache/catalina/ha/session/DeltaManager.java"

        
        setState(LifecycleState.MUST_DESTROY);
======= ac22dd8^:"java/org/apache/catalina/session/PersistentManagerBase.java"

        setState(LifecycleState.MUST_DESTROY);

======= 0f669e3^:"java/org/apache/catalina/connector/MapperListener.java"

======= 0f669e3^:"java/org/apache/catalina/connector/MapperListener.java"

            child.removeLifecycleListener(this);
======= 0f669e3^:"java/org/apache/catalina/connector/MapperListener.java"

        removeListeners(host);
        
======= 0f669e3^:"java/org/apache/catalina/connector/MapperListener.java"

        removeListeners(wrapper);
        
======= 0f669e3^:"java/org/apache/catalina/connector/MapperListener.java"

        removeListeners(context);
        

======= 9369636^:"java/org/apache/catalina/Globals.java"

     * The name of the cookie used to pass the session identifier back
     * and forth with the client.
     */
    public static final String SESSION_COOKIE_NAME = "JSESSIONID";
    /**
     * The name of the path parameter used to pass the session identifier
     * back and forth with the client.
     */
    public static final String SESSION_PARAMETER_NAME =
        System.getProperty("org.apache.catalina.SESSION_PARAMETER_NAME",
                "jsessionid");
    /**
======= 9369636^:"java/org/apache/catalina/connector/CoyoteAdapter.java"

     * The match string for identifying a session ID parameter.
     */
    private static final String match =
        ";" + Globals.SESSION_PARAMETER_NAME + "=";
    /**
======= 9369636^:"java/org/apache/catalina/connector/CoyoteAdapter.java"

        // Parse session Id before decoding / removal of path params
        parseSessionId(req, request);
        // URI decoding
        if (decodedURI.getType() == MessageBytes.T_BYTES) {
            // Remove any path parameters
            ByteChunk uriBB = decodedURI.getByteChunk();
            int semicolon = uriBB.indexOf(';', 0);
            if (semicolon > 0) {
                decodedURI.setBytes
                    (uriBB.getBuffer(), uriBB.getStart(), semicolon);
            }
            // %xx decoding of the URL
            try {
                req.getURLDecoder().convert(decodedURI, false);
            } catch (IOException ioe) {
                res.setStatus(400);
                res.setMessage("Invalid URI: " + ioe.getMessage());
                return false;
            }
            // Normalization
            if (!normalize(req.decodedURI())) {
                res.setStatus(400);
                res.setMessage("Invalid URI");
                return false;
            }
            // Character decoding
            convertURI(decodedURI, request);
            // Check that the URI is still normalized
            if (!checkNormalize(req.decodedURI())) {
                res.setStatus(400);
                res.setMessage("Invalid URI character encoding");
                return false;
            }
        } else {
            // The URL is chars or String, and has been sent using an in-memory
            // protocol handler, we have to assume the URL has been properly
            // decoded already
            decodedURI.toChars();
            // Remove any path parameters
            CharChunk uriCC = decodedURI.getCharChunk();
            int semicolon = uriCC.indexOf(';');
            if (semicolon > 0) {
                decodedURI.setChars
                    (uriCC.getBuffer(), uriCC.getStart(), semicolon);
            }
======= 9369636^:"java/org/apache/catalina/connector/CoyoteAdapter.java"

                redirectPath = redirectPath + ";" + Globals.SESSION_PARAMETER_NAME + "=" 
                    + request.getRequestedSessionId();
======= 9369636^:"java/org/apache/catalina/connector/CoyoteAdapter.java"

        if (!request.getServletContext().getEffectiveSessionTrackingModes()
            /* 
             * If we saw an ID in the URL but this is disabled - remove it
             * Can't handle it when we parse the URL as we don't have the
             * context at that point
             */
            request.setRequestedSessionId(null);
            request.setRequestedSessionURL(false);
======= 9369636^:"java/org/apache/catalina/connector/CoyoteAdapter.java"

======= 9369636^:"java/org/apache/catalina/connector/CoyoteAdapter.java"

    protected void parseSessionId(org.apache.coyote.Request req, Request request) {
        ByteChunk uriBC = req.requestURI().getByteChunk();
        int semicolon = uriBC.indexOf(match, 0, match.length(), 0);
        if (semicolon > 0) {
            // What encoding to use? Some platforms, eg z/os, use a default
            // encoding that doesn't give the expected result so be explicit 
            String enc = connector.getURIEncoding();
            if (enc == null) {
                enc = "ISO-8859-1";
            }
            // Parse session ID, and extract it from the decoded request URI
            int start = uriBC.getStart();
            int end = uriBC.getEnd();
            int sessionIdStart = semicolon + match.length();
            int semicolon2 = uriBC.indexOf(';', sessionIdStart);
            try {
                if (semicolon2 >= 0) {
                    request.setRequestedSessionId
                        (new String(uriBC.getBuffer(), start + sessionIdStart,
                                semicolon2 - sessionIdStart, enc));
                    // Extract session ID from request URI
                    byte[] buf = uriBC.getBuffer();
                    for (int i = 0; i < end - start - semicolon2; i++) {
                        buf[start + semicolon + i] 
                            = buf[start + i + semicolon2];
                    }
                    uriBC.setBytes(buf, start,
                            end - start - semicolon2 + semicolon);
                } else {
                    request.setRequestedSessionId
                        (new String(uriBC.getBuffer(), start + sessionIdStart, 
                                (end - start) - sessionIdStart, enc));
                    uriBC.setEnd(start + semicolon);
                }
                request.setRequestedSessionURL(true);
            } catch (UnsupportedEncodingException uee) {
                // Make sure no session ID is returned
                request.setRequestedSessionId(null);
                request.setRequestedSessionURL(false);
                log.warn(sm.getString("coyoteAdapter.parseSession", enc), uee);
            }
        } else {
            request.setRequestedSessionId(null);
            request.setRequestedSessionURL(false);
        }
    }
    /**
     * Parse session id in URL.
     */
======= 9369636^:"java/org/apache/catalina/connector/Request.java"

======= 9369636^:"java/org/apache/catalina/connector/Request.java"

======= 9369636^:"java/org/apache/catalina/connector/Response.java"

======= 9369636^:"java/org/apache/catalina/connector/Response.java"

            String tok = ";" + Globals.SESSION_PARAMETER_NAME + "=" + session.getIdInternal();
======= 9369636^:"java/org/apache/catalina/connector/Response.java"

            sb.append(Globals.SESSION_PARAMETER_NAME);
======= 9369636^:"java/org/apache/catalina/core/ApplicationSessionCookieConfig.java"

======= 9369636^:"java/org/apache/catalina/core/ApplicationSessionCookieConfig.java"

    /**
     * Determine the name to use for the session cookie for the provided
     * context.
     * @param context
     */
    public static String getSessionCookieName(Context context) {
======= 9369636^:"java/org/apache/catalina/core/ApplicationSessionCookieConfig.java"

        return Globals.SESSION_COOKIE_NAME;
======= 9369636^:"java/org/apache/catalina/realm/RealmBase.java"

======= 9369636^:"java/org/apache/catalina/realm/RealmBase.java"

======= 9369636^:"java/org/apache/catalina/realm/RealmBase.java"

        if (serverDigest.equals(clientDigest))
        else
            return null;
======= 9369636^:"java/org/apache/catalina/realm/RealmBase.java"

                } else {
                    if(log.isDebugEnabled())
                        log.debug("Passing all access");
                    status = true;
======= 9369636^:"java/org/apache/catalina/realm/RealmBase.java"

            file.append(Globals.SESSION_PARAMETER_NAME);
======= 9369636^:"java/org/apache/catalina/realm/RealmBase.java"

    <property name="org.apache.catalina.SESSION_PARAMETER_NAME">
      <p>An alternative name for the session path parameter. Defaults to
      <code>jsessionid</code>. Note that the Servlet specification requires
      this to be <code>jsessionid</code>. You should not rely on being able to
      change this.</p>
    </property>

======= a7b96d0^:"java/org/apache/catalina/startup/ContextConfig.java"

======= a7b96d0^:"java/org/apache/catalina/startup/ContextConfig.java"

            URL jarUrl = fragment.getURL();
                JarURLConnection conn =
                    (JarURLConnection) jarUrl.openConnection();
                jarFile = conn.getJarFile();   
                ZipEntry entry = jarFile.getEntry(
                        "META-INF/services/javax.servlet.ServletContainerInitializer");
                if (entry != null) {
                    is = jarFile.getInputStream(entry);
                        "contextConfig.servletContainerInitializerFail", jarUrl,
======= a7b96d0^:"java/org/apache/catalina/startup/ContextConfig.java"

            URL jarUrl = fragment.getURL();
                JarURLConnection conn =
                    (JarURLConnection) jarUrl.openConnection();
                jarFile = conn.getJarFile();   
                ZipEntry entry = jarFile.getEntry("META-INF/resources/");
                if (entry != null) {
                    context.addResourceJarUrl(jarUrl);
                log.error(sm.getString("contextConfig.resourceJarFail", jarUrl,

======= 05810ee^:"java/javax/servlet/http/Cookie.java"

======= 05810ee^:"java/javax/servlet/http/Cookie.java"


======= 4fff6c0^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/PooledConnection.java"

        poolProperties.getDbProperties().setProperty("user", usr);
        poolProperties.getDbProperties().setProperty("password", pwd);

======= 5ad9ecd^:"java/org/apache/catalina/core/ApplicationPart.java"

======= 5ad9ecd^:"java/org/apache/catalina/core/ApplicationPart.java"

            String cdl = cd.toLowerCase();
======= 5ad9ecd^:"java/org/apache/catalina/core/StandardEngine.java"

======= 5ad9ecd^:"java/org/apache/catalina/core/StandardEngine.java"

            this.defaultHost = host.toLowerCase();
======= 5ad9ecd^:"java/org/apache/catalina/core/StandardHost.java"

======= 5ad9ecd^:"java/org/apache/catalina/core/StandardHost.java"

        name = name.toLowerCase();      // Internally all names are lower case
======= 5ad9ecd^:"java/org/apache/catalina/core/StandardHost.java"

        alias = alias.toLowerCase();
======= 5ad9ecd^:"java/org/apache/catalina/core/StandardHost.java"

        alias = alias.toLowerCase();
======= 5ad9ecd^:"java/org/apache/catalina/deploy/FilterMap.java"

======= 5ad9ecd^:"java/org/apache/catalina/deploy/FilterMap.java"

        String dispatcher = dispatcherString.toUpperCase();
======= 5ad9ecd^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

======= 5ad9ecd^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

                if (!filename.toLowerCase().endsWith(".war")) {
======= 5ad9ecd^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

                        filename.toLowerCase().indexOf(".war"));
======= 5ad9ecd^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

            String cdl = cd.toLowerCase();
======= 5ad9ecd^:"java/org/apache/catalina/manager/util/SessionUtils.java"

                obj = in_session.getAttribute(LOCALE_TEST_ATTRIBUTES[i].toLowerCase());
                obj = in_session.getAttribute(LOCALE_TEST_ATTRIBUTES[i].toUpperCase());
======= 5ad9ecd^:"java/org/apache/catalina/manager/util/SessionUtils.java"

                obj = httpSession.getAttribute(USER_TEST_ATTRIBUTES[i].toLowerCase());
                obj = httpSession.getAttribute(USER_TEST_ATTRIBUTES[i].toUpperCase());
======= 5ad9ecd^:"java/org/apache/catalina/servlets/CGIServlet.java"

                header = headers.nextElement().toUpperCase();
======= 5ad9ecd^:"java/org/apache/catalina/servlets/WebdavServlet.java"

======= 5ad9ecd^:"java/org/apache/catalina/servlets/WebdavServlet.java"

        if ((path.toUpperCase().startsWith("/WEB-INF")) ||
            (path.toUpperCase().startsWith("/META-INF"))) {
======= 5ad9ecd^:"java/org/apache/catalina/servlets/WebdavServlet.java"

        if ((path.toUpperCase().startsWith("/WEB-INF")) ||
            (path.toUpperCase().startsWith("/META-INF"))) {
======= 5ad9ecd^:"java/org/apache/catalina/servlets/WebdavServlet.java"

        if ((destinationPath.toUpperCase().startsWith("/WEB-INF")) ||
            (destinationPath.toUpperCase().startsWith("/META-INF"))) {
        if ((path.toUpperCase().startsWith("/WEB-INF")) ||
            (path.toUpperCase().startsWith("/META-INF"))) {
======= 5ad9ecd^:"java/org/apache/catalina/servlets/WebdavServlet.java"

        if ((path.toUpperCase().startsWith("/WEB-INF")) ||
            (path.toUpperCase().startsWith("/META-INF"))) {
======= 5ad9ecd^:"java/org/apache/catalina/servlets/WebdavServlet.java"

        if ((path.toUpperCase().startsWith("/WEB-INF")) ||
            (path.toUpperCase().startsWith("/META-INF"))) {
======= 5ad9ecd^:"java/org/apache/catalina/servlets/WebdavServlet.java"

        if (path.toUpperCase().startsWith("/WEB-INF") ||
            path.toUpperCase().startsWith("/META-INF"))
======= 5ad9ecd^:"java/org/apache/catalina/servlets/WebdavServlet.java"

        if (path.toUpperCase().startsWith("/WEB-INF") ||
            path.toUpperCase().startsWith("/META-INF"))
======= 5ad9ecd^:"java/org/apache/catalina/ssi/ResponseIncludeWrapper.java"

        String lname = name.toLowerCase();
======= 5ad9ecd^:"java/org/apache/catalina/ssi/ResponseIncludeWrapper.java"

        String lname = name.toLowerCase();
======= 5ad9ecd^:"java/org/apache/catalina/ssi/ResponseIncludeWrapper.java"

        String lname = name.toLowerCase();
======= 5ad9ecd^:"java/org/apache/catalina/ssi/ResponseIncludeWrapper.java"

        String lname = name.toLowerCase();
======= 5ad9ecd^:"java/org/apache/catalina/ssi/SSIMediator.java"

======= 5ad9ecd^:"java/org/apache/catalina/ssi/SSIMediator.java"

        String lowerCaseVariableName = variableName.toLowerCase();
======= 5ad9ecd^:"java/org/apache/catalina/ssi/SSIMediator.java"

                variableName = variableName.toUpperCase();
======= 5ad9ecd^:"java/org/apache/catalina/ssi/SSIProcessor.java"

======= 5ad9ecd^:"java/org/apache/catalina/ssi/SSIProcessor.java"

                            commands.get(strCmd.toLowerCase());
======= 5ad9ecd^:"java/org/apache/catalina/ssi/SSIServlet.java"

======= 5ad9ecd^:"java/org/apache/catalina/ssi/SSIServlet.java"

        if (path == null || path.toUpperCase().startsWith("/WEB-INF")
                || path.toUpperCase().startsWith("/META-INF")) {
======= 5ad9ecd^:"java/org/apache/catalina/ssi/SSIServletExternalResolver.java"

======= 5ad9ecd^:"java/org/apache/catalina/ssi/SSIServletExternalResolver.java"

        String[] nameParts = name.toUpperCase().split("_");
======= 5ad9ecd^:"java/org/apache/catalina/startup/ClassLoaderFactory.java"

======= 5ad9ecd^:"java/org/apache/catalina/startup/ClassLoaderFactory.java"

                    String filename = filenames[j].toLowerCase();
======= 5ad9ecd^:"java/org/apache/catalina/startup/ClassLoaderFactory.java"

                        String filename = filenames[j].toLowerCase();
======= 5ad9ecd^:"java/org/apache/catalina/startup/ContextConfig.java"

======= 5ad9ecd^:"java/org/apache/catalina/startup/ContextConfig.java"

        if (docBase.toLowerCase().endsWith(".war") && !file.isDirectory() && unpackWARs) {
======= 5ad9ecd^:"java/org/apache/catalina/startup/ContextConfig.java"

        } else if (docBase.toLowerCase().endsWith(".war") &&
======= 5ad9ecd^:"java/org/apache/catalina/startup/ContextConfig.java"

            if (docBase.toLowerCase().endsWith(".war")) {
======= 5ad9ecd^:"java/org/apache/catalina/startup/HostConfig.java"

======= 5ad9ecd^:"java/org/apache/catalina/startup/HostConfig.java"

            if (files[i].toLowerCase().endsWith(".xml")) {
======= 5ad9ecd^:"java/org/apache/catalina/startup/HostConfig.java"

                    if (docBase.getAbsolutePath().toLowerCase().endsWith(".war")) {
======= 5ad9ecd^:"java/org/apache/catalina/startup/HostConfig.java"

            if (files[i].toLowerCase().endsWith(".war") && dir.isFile()
======= 5ad9ecd^:"java/org/apache/catalina/startup/HostConfig.java"

            if (docBase.getAbsolutePath().toLowerCase().endsWith(".war")) {
======= 5ad9ecd^:"java/org/apache/catalina/util/ExtensionValidator.java"

======= 5ad9ecd^:"java/org/apache/catalina/util/ExtensionValidator.java"

            if (classpathItem.toLowerCase().endsWith(".jar")) {
======= 5ad9ecd^:"java/org/apache/catalina/util/ExtensionValidator.java"

            if (binding.getName().toUpperCase().equals("MANIFEST.MF")) {
======= 5ad9ecd^:"java/org/apache/catalina/util/ExtensionValidator.java"

                if (!binding.getName().toLowerCase().endsWith(".jar")) {
======= 5ad9ecd^:"java/org/apache/catalina/util/ExtensionValidator.java"

                    if (files[i].getName().toLowerCase().endsWith(".jar") &&
======= 5ad9ecd^:"java/org/apache/catalina/util/MIME2Java.java"

        return s_enchash.get(mimeCharsetName.toUpperCase());
======= 5ad9ecd^:"java/org/apache/catalina/util/MIME2Java.java"

        return s_revhash.get(encoding.toUpperCase());
======= 5ad9ecd^:"java/org/apache/tomcat/util/buf/MessageBytes.java"

======= 5ad9ecd^:"java/org/apache/tomcat/util/buf/MessageBytes.java"

======= 5ad9ecd^:"java/org/apache/tomcat/util/http/AcceptLanguage.java"

                qValueStr = qValueStr.trim().toLowerCase();
======= 5ad9ecd^:"java/org/apache/tomcat/util/http/fileupload/FileItemHeadersImpl.java"

======= 5ad9ecd^:"java/org/apache/tomcat/util/http/fileupload/FileItemHeadersImpl.java"

        String nameLower = name.toLowerCase();
======= 5ad9ecd^:"java/org/apache/tomcat/util/http/fileupload/FileItemHeadersImpl.java"

        String nameLower = name.toLowerCase();
======= 5ad9ecd^:"java/org/apache/tomcat/util/http/fileupload/FileUploadBase.java"

======= 5ad9ecd^:"java/org/apache/tomcat/util/http/fileupload/FileUploadBase.java"

        if (contentType.toLowerCase().startsWith(MULTIPART)) {
======= 5ad9ecd^:"java/org/apache/tomcat/util/http/fileupload/FileUploadBase.java"

            String cdl = pContentDisposition.toLowerCase();
======= 5ad9ecd^:"java/org/apache/tomcat/util/http/fileupload/FileUploadBase.java"

                && pContentDisposition.toLowerCase().startsWith(FORM_DATA)) {
======= 5ad9ecd^:"java/org/apache/tomcat/util/http/fileupload/FileUploadBase.java"

                    || (!contentType.toLowerCase().startsWith(MULTIPART))) {
======= 5ad9ecd^:"java/org/apache/tomcat/util/http/fileupload/FileUploadBase.java"

                                &&  subContentType.toLowerCase()
======= 5ad9ecd^:"java/org/apache/tomcat/util/http/fileupload/ParameterParser.java"

======= 5ad9ecd^:"java/org/apache/tomcat/util/http/fileupload/ParameterParser.java"

                    paramName = paramName.toLowerCase();
======= 5ad9ecd^:"java/org/apache/tomcat/util/http/fileupload/ServletFileUpload.java"

======= 5ad9ecd^:"java/org/apache/tomcat/util/http/fileupload/ServletFileUpload.java"

        if (!"post".equals(request.getMethod().toLowerCase())) {
        if (contentType.toLowerCase().startsWith(MULTIPART)) {
======= 5ad9ecd^:"java/org/apache/tomcat/util/modeler/OperationInfo.java"

======= 5ad9ecd^:"java/org/apache/tomcat/util/modeler/OperationInfo.java"

            this.impact = impact.toUpperCase();
======= 5ad9ecd^:"java/org/apache/tomcat/util/net/URL.java"

======= 5ad9ecd^:"java/org/apache/tomcat/util/net/URL.java"

                    String s = spec.substring(start, i).toLowerCase();
======= 5ad9ecd^:"java/org/apache/tomcat/util/net/jsse/JSSESocketFactory.java"

======= 5ad9ecd^:"java/org/apache/tomcat/util/net/jsse/JSSESocketFactory.java"

                alias = alias.toLowerCase();
======= 5ad9ecd^:"webapps/examples/WEB-INF/classes/examples/ShowSource.java"

======= 5ad9ecd^:"webapps/examples/WEB-INF/classes/examples/ShowSource.java"

            (jspFile.toUpperCase().indexOf("/WEB-INF/") != 0) ||
            (jspFile.toUpperCase().indexOf("/META-INF/") != 0))
======= 5ad9ecd^:"webapps/examples/WEB-INF/classes/jsp2/examples/el/Functions.java"

======= 5ad9ecd^:"webapps/examples/WEB-INF/classes/jsp2/examples/el/Functions.java"

        return text.toUpperCase();

======= 09abffb^:"java/org/apache/coyote/http11/Http11AprProcessor.java"

======= 09abffb^:"java/org/apache/coyote/http11/Http11AprProcessor.java"

                    (startPos, commaPos).toLowerCase().trim();
======= 09abffb^:"java/org/apache/coyote/http11/Http11AprProcessor.java"

                .toLowerCase().trim();
======= 09abffb^:"java/org/apache/coyote/http11/Http11NioProcessor.java"

======= 09abffb^:"java/org/apache/coyote/http11/Http11NioProcessor.java"

                    (startPos, commaPos).toLowerCase().trim();
======= 09abffb^:"java/org/apache/coyote/http11/Http11NioProcessor.java"

                .toLowerCase().trim();
======= 09abffb^:"java/org/apache/coyote/http11/Http11Processor.java"

======= 09abffb^:"java/org/apache/coyote/http11/Http11Processor.java"

                    (startPos, commaPos).toLowerCase().trim();
======= 09abffb^:"java/org/apache/coyote/http11/Http11Processor.java"

                .toLowerCase().trim();

======= a954806^:"java/org/apache/jasper/compiler/Validator.java"

======= a954806^:"java/org/apache/jasper/compiler/Validator.java"

            String pageDirEnc = thePageDirEnc.toUpperCase();
======= a954806^:"java/org/apache/jasper/compiler/Validator.java"

                configEnc = configEnc.toUpperCase();
======= a954806^:"java/org/apache/jasper/compiler/Validator.java"

                String pageEnc = root.getPageEncoding().toUpperCase();
======= a954806^:"java/org/apache/jasper/compiler/Validator.java"

            String pageDirEnc = thePageDirEnc.toUpperCase();
======= a954806^:"java/org/apache/jasper/compiler/Validator.java"

                String pageEnc = root.getPageEncoding().toUpperCase();
======= a954806^:"java/org/apache/jasper/tagplugins/jstl/Util.java"

        int index = input.toUpperCase().indexOf(name.toUpperCase());

======= 4a581aa^:"java/org/apache/catalina/startup/ContextConfig.java"

======= 4a581aa^:"java/org/apache/catalina/startup/ContextConfig.java"

     * super class needs to be checked for a match with {@Link HandlesTypes}.
======= 4a581aa^:"java/org/apache/catalina/startup/ContextConfig.java"

            if (entry.getKey().isAssignableFrom(clazz)) {
======= 4a581aa^:"java/org/apache/catalina/startup/ContextConfig.java"


======= f24ed2d^:"java/org/apache/catalina/startup/ContextConfig.java"

            clazz = Class.forName(className, true,
                    context.getLoader().getClassLoader());

======= 27a3909^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/PoolProperties.java"

    protected int maxIdle = Integer.MAX_VALUE;

======= b75b021^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/DataSourceFactory.java"

======= b75b021^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/DataSourceFactory.java"


======= 616bd68^:"test/org/apache/catalina/tribes/demos/IntrospectionUtils.java"

    public static String PATH_SEPARATOR = System.getProperty("path.separator");

======= 3396917^:"java/org/apache/catalina/core/ApplicationFilterRegistration.java"

        

======= 3f4a241^:"java/org/apache/catalina/core/StandardContext.java"

                    filterMaps.length - filterMapInsertPoint + 1,

======= efd418b^:"java/org/apache/jasper/JspCompilationContext.java"

======= efd418b^:"java/org/apache/jasper/JspCompilationContext.java"

    protected Map<String, URL> tagFileJarUrls;
======= efd418b^:"java/org/apache/jasper/JspCompilationContext.java"

    protected URL tagFileJarUrl;
======= efd418b^:"java/org/apache/jasper/JspCompilationContext.java"

        this.tagFileJarUrls = new HashMap<String, URL>();
======= efd418b^:"java/org/apache/jasper/JspCompilationContext.java"

                                 URL tagFileJarUrl) {
        this.tagFileJarUrl = tagFileJarUrl;
        if (tagFileJarUrl != null) {
======= efd418b^:"java/org/apache/jasper/JspCompilationContext.java"

            URL jarUrl = tagFileJarUrls.get(res);
            if (jarUrl == null) {
                jarUrl = tagFileJarUrl;
            if (jarUrl != null) {
                result = new URL(jarUrl.toExternalForm() + res.substring(1));
======= efd418b^:"java/org/apache/jasper/JspCompilationContext.java"

    public URL getTagFileJarUrl(String tagFile) {
    public void setTagFileJarUrl(String tagFile, URL tagFileURL) {
        this.tagFileJarUrls.put(tagFile, tagFileURL);
======= efd418b^:"java/org/apache/jasper/JspCompilationContext.java"

    public URL getTagFileJarUrl() {
        return this.tagFileJarUrl;
======= efd418b^:"java/org/apache/jasper/JspCompilationContext.java"

    public String[] getTldLocation(String uri) throws JasperException {
        String[] location = 
======= efd418b^:"java/org/apache/jasper/compiler/ImplicitTagLibraryInfo.java"

                        pc.getJspCompilationContext().getTagFileJarUrl(path),
======= efd418b^:"java/org/apache/jasper/compiler/ImplicitTagLibraryInfo.java"

======= efd418b^:"java/org/apache/jasper/compiler/ImplicitTagLibraryInfo.java"

======= efd418b^:"java/org/apache/jasper/compiler/JspDocumentParser.java"

            String[] location = ctxt.getTldLocation(uri);
======= efd418b^:"java/org/apache/jasper/compiler/Parser.java"

    private URL jarFileUrl;
======= efd418b^:"java/org/apache/jasper/compiler/Parser.java"

            boolean directivesOnly, URL jarFileUrl) {
======= efd418b^:"java/org/apache/jasper/compiler/Parser.java"

        this.jarFileUrl = jarFileUrl;
======= efd418b^:"java/org/apache/jasper/compiler/Parser.java"

            URL jarFileUrl, String pageEnc, String jspConfigPageEnc,
                jarFileUrl);
======= efd418b^:"java/org/apache/jasper/compiler/Parser.java"

            parserController.parse(file, parent, jarFileUrl);
======= efd418b^:"java/org/apache/jasper/compiler/Parser.java"

                        String[] location = ctxt.getTldLocation(uri);
======= efd418b^:"java/org/apache/jasper/compiler/Parser.java"

                            ctxt.setTagFileJarUrl(info.getPath(),
                                    ctxt.getTagFileJarUrl());
======= efd418b^:"java/org/apache/jasper/compiler/ParserController.java"

        return doParse(inFileName, null, ctxt.getTagFileJarUrl());
======= efd418b^:"java/org/apache/jasper/compiler/ParserController.java"

        return doParse(inFileName, null, ctxt.getTagFileJarUrl());
======= efd418b^:"java/org/apache/jasper/compiler/ParserController.java"

            URL jarFileUrl)
        return doParse(inFileName, parent, jarFileUrl);
======= efd418b^:"java/org/apache/jasper/compiler/ParserController.java"

            URL tagFileJarUrl)
        Node.Nodes page = doParse(inFileName, null, tagFileJarUrl);
======= efd418b^:"java/org/apache/jasper/compiler/ParserController.java"

            URL jarFileUrl)
======= efd418b^:"java/org/apache/jasper/compiler/ParserController.java"

        JarFile jarFile = getJarFile(jarFileUrl);
======= efd418b^:"java/org/apache/jasper/compiler/ParserController.java"

                        jarFileUrl.toExternalForm() + absFileName.substring(1));
======= efd418b^:"java/org/apache/jasper/compiler/ParserController.java"

                        directiveOnly, jarFileUrl,
======= efd418b^:"java/org/apache/jasper/compiler/TagFileProcessor.java"

            String name, String path, URL tagFileJarUrl, TagLibraryInfo tagLibInfo)
======= efd418b^:"java/org/apache/jasper/compiler/TagFileProcessor.java"

            page = pc.parseTagFileDirectives(path, tagFileJarUrl);
======= efd418b^:"java/org/apache/jasper/compiler/TagFileProcessor.java"

        URL tagFileJarUrl = null;
            try { 
                tagFileJarUrl = new URL("jar:" +
                        compiler.getCompilationContext().getTldLocation(
                        tagInfo.getTagLibrary().getURI())[0] + "!/");
            } catch (MalformedURLException e) {
                // Ignore - tagFileJarUrl will be null
            }
        String tagFileJarPath;
        if (tagFileJarUrl == null) {
            tagFileJarPath = "";
            tagFileJarPath = tagFileJarUrl.toString();
        String wrapperUri = tagFileJarPath + tagFilePath;
                        .getRuntimeContext(), tagFileJarUrl);
======= efd418b^:"java/org/apache/jasper/compiler/TagFileProcessor.java"

                            ctxt.getTagFileJarUrl(tagFilePath));
======= efd418b^:"java/org/apache/jasper/compiler/TagFileProcessor.java"

                    String[] location =
                    pageInfo.addDependant("jar:" + location[0] + "!/" +
                            location[1]);
                    pageInfo.addDependant("jar:" + location[0] + "!" +
                            tagFilePath);
======= efd418b^:"java/org/apache/jasper/compiler/TagLibraryInfoImpl.java"

            String prefix, String uriIn, String[] location, ErrorDispatcher err)
======= efd418b^:"java/org/apache/jasper/compiler/TagLibraryInfoImpl.java"

        JarFile jarFile = null;
======= efd418b^:"java/org/apache/jasper/compiler/TagLibraryInfoImpl.java"

            if (location[1] == null) {
                    in = getResourceAsStream(location[0]);
                        throw new FileNotFoundException(location[0]);
                    err.jspError("jsp.error.file.not.found", location[0]);
                parseTLD(location[0], in, null);
                    pageInfo.addDependant(location[0]);
                    URL jarFileUrl = new URL("jar:" + location[0] + "!/");
                    JarURLConnection conn = (JarURLConnection) jarFileUrl
                            .openConnection();
                    conn.setUseCaches(false);
                    conn.connect();
                    jarFile = conn.getJarFile();
                    ZipEntry jarEntry = jarFile.getEntry(location[1]);
                    in = jarFile.getInputStream(jarEntry);
                    parseTLD(location[0], in, jarFileUrl);
                    err.jspError("jsp.error.tld.unable_to_read", location[0],
                            location[1], ex.toString());
======= efd418b^:"java/org/apache/jasper/compiler/TagLibraryInfoImpl.java"

            if (jarFile != null) {
                try {
                    jarFile.close();
                } catch (Throwable t) {
                }
            }
======= efd418b^:"java/org/apache/jasper/compiler/TagLibraryInfoImpl.java"

    private void parseTLD(String uri, InputStream in, URL jarFileUrl)
======= efd418b^:"java/org/apache/jasper/compiler/TagLibraryInfoImpl.java"

                        jarFileUrl);
======= efd418b^:"java/org/apache/jasper/compiler/TagLibraryInfoImpl.java"

    private String[] generateTLDLocation(String uri, JspCompilationContext ctxt)
======= efd418b^:"java/org/apache/jasper/compiler/TagLibraryInfoImpl.java"

        String[] location = new String[2];
        location[0] = uri;
        if (location[0].endsWith(".jar")) {
                url = ctxt.getResource(location[0]);
                err.jspError("jsp.error.tld.unable_to_get_jar", location[0], ex
                err.jspError("jsp.error.tld.missing_jar", location[0]);
            location[0] = url.toString();
            location[1] = "META-INF/taglib.tld";
        return location;
======= efd418b^:"java/org/apache/jasper/compiler/TagLibraryInfoImpl.java"

    private TagFileInfo createTagFileInfo(TreeNode elem, URL jarFileUrl)
======= efd418b^:"java/org/apache/jasper/compiler/TagLibraryInfoImpl.java"

            ctxt.setTagFileJarUrl(path, jarFileUrl);
                parserController, name, path, jarFileUrl, this);
======= efd418b^:"java/org/apache/jasper/compiler/TagLibraryInfoImpl.java"

======= efd418b^:"java/org/apache/jasper/compiler/TldLocationsCache.java"

    private Hashtable<String, String[]> mappings;
======= efd418b^:"java/org/apache/jasper/compiler/TldLocationsCache.java"

        mappings = new Hashtable<String, String[]>();
======= efd418b^:"java/org/apache/jasper/compiler/TldLocationsCache.java"

    public String[] getLocation(String uri) throws JasperException {
======= efd418b^:"java/org/apache/jasper/compiler/TldLocationsCache.java"

                String tagLoc2 = null;
                    tagLoc = ctxt.getResource(tagLoc).toString();
                    tagLoc2 = "META-INF/taglib.tld";
                mappings.put(tagUri, new String[] { tagLoc, tagLoc2 });
======= efd418b^:"java/org/apache/jasper/compiler/TldLocationsCache.java"

                mappings.put(uri, new String[]{ resourcePath, entryName });
======= efd418b^:"java/org/apache/jasper/servlet/JspServletWrapper.java"

======= efd418b^:"java/org/apache/jasper/servlet/JspServletWrapper.java"

                             URL tagFileJarUrl) {
======= efd418b^:"java/org/apache/jasper/servlet/JspServletWrapper.java"

                                         tagFileJarUrl);

======= b30fc95^:"java/org/apache/catalina/connector/Request.java"

        Iterator<Double> keys = locales.keySet().iterator();
        while (keys.hasNext()) {
            Double key = keys.next();
            ArrayList<Locale> list = locales.get(key);
            Iterator<Locale> values = list.iterator();
            while (values.hasNext()) {
                Locale locale = values.next();
======= b30fc95^:"java/org/apache/catalina/core/ApplicationHttpRequest.java"

        Iterator<String> keys = orig.keySet().iterator();
        while (keys.hasNext()) {
            String key = keys.next();
            dest.put(key, orig.get(key));
======= b30fc95^:"java/org/apache/catalina/core/StandardContext.java"

======= b30fc95^:"java/org/apache/catalina/core/StandardContext.java"

        Iterator<Integer> keys = map.keySet().iterator();
        while (keys.hasNext()) {
            Integer key = keys.next();
            ArrayList<Wrapper> list = map.get(key);
            Iterator<Wrapper> wrappers = list.iterator();
            while (wrappers.hasNext()) {
                Wrapper wrapper = wrappers.next();
======= b30fc95^:"java/org/apache/catalina/ha/authenticator/ClusterSingleSignOnListener.java"

            java.util.Iterator<String> i = managers.keySet().iterator();
            while (i.hasNext()) {
                String key = i.next();
                ClusterManager mgr = managers.get(key);
                if (mgr != null) {
                        session = mgr.findSession(sessionId);
======= b30fc95^:"java/org/apache/catalina/ha/authenticator/ClusterSingleSignOnListener.java"

                                  + key);
======= b30fc95^:"java/org/apache/catalina/ha/session/ClusterSessionListener.java"

======= b30fc95^:"java/org/apache/catalina/ha/session/ClusterSessionListener.java"

                Iterator<String> i = managers.keySet().iterator();
                while (i.hasNext()) {
                    String key = i.next();
                    ClusterManager mgr = managers.get(key);
                    if (mgr != null)
                        mgr.messageDataReceived(msg);
                                    + key);
======= b30fc95^:"java/org/apache/catalina/startup/ContextConfig.java"

                for (String paramName : initParams.keySet()) {
                    servletDef.addInitParameter(paramName,
                            initParams.get(paramName));
======= b30fc95^:"java/org/apache/catalina/startup/ContextConfig.java"

                for (String paramName : initParams.keySet()) {
                    filterDef.addInitParameter(paramName,
                            initParams.get(paramName));

======= a6092d7^:"java/org/apache/catalina/realm/RealmBase.java"

    protected static MessageDigest md5Helper;
======= a6092d7^:"java/org/apache/catalina/session/StandardSession.java"

    protected static HttpSessionContext sessionContext = null;
======= a6092d7^:"java/org/apache/catalina/session/StandardSession.java"

        stream.writeObject(new Long(creationTime));
        stream.writeObject(new Long(lastAccessedTime));
        stream.writeObject(new Integer(maxInactiveInterval));
        stream.writeObject(new Boolean(isNew));
        stream.writeObject(new Boolean(isValid));
        stream.writeObject(new Long(thisAccessedTime));
======= a6092d7^:"java/org/apache/catalina/session/StandardSession.java"

        stream.writeObject(new Integer(n));
======= a6092d7^:"java/org/apache/catalina/startup/TldConfig.java"

    private static Set<String> noTldJars = null;
======= a6092d7^:"java/org/apache/catalina/util/ExtensionValidator.java"

    private static ArrayList<Extension> containerAvailableExtensions = null;
======= a6092d7^:"java/org/apache/tomcat/util/modeler/modules/MbeansDescriptorsDigesterSource.java"

    protected static Digester digester = null;

======= fd7ed83^:"java/org/apache/catalina/startup/Bootstrap.java"

        paramValues[0] = new Boolean(await);
======= fd7ed83^:"java/org/apache/catalina/startup/Bootstrap.java"

            daemon = new Bootstrap();
                daemon.init();

======= aa758d8^:"test/org/apache/catalina/tribes/test/interceptors/TestOrderInterceptor.java"

======= aa758d8^:"test/org/apache/catalina/tribes/test/interceptors/TestOrderInterceptor.java"

======= aa758d8^:"test/org/apache/catalina/tribes/test/interceptors/TestOrderInterceptor.java"

                        x.printStackTrace();
                        assertEquals(true,false);
======= aa758d8^:"test/org/apache/catalina/tribes/test/interceptors/TestOrderInterceptor.java"


======= 8bd4d7a^:"java/javax/servlet/jsp/tagext/TagSupport.java"

                klass.isAssignableFrom(tag.getClass())) {

======= f61100d^:"java/org/apache/catalina/ha/session/DeltaManager.java"

            int len = currentSessions.length < getSendAllSessionsSize() ? currentSessions.length : getSendAllSessionsSize();
            Session[] sendSessions = new Session[len];
                len = i + getSendAllSessionsSize() > currentSessions.length ? currentSessions.length - i : getSendAllSessionsSize();

======= e7fb8fa^:"java/org/apache/catalina/core/StandardThreadExecutor.java"

======= e7fb8fa^:"java/org/apache/catalina/core/StandardThreadExecutor.java"

======= e7fb8fa^:"java/org/apache/catalina/core/StandardThreadExecutor.java"

======= e7fb8fa^:"java/org/apache/catalina/core/StandardThreadExecutor.java"


======= 7205c74^:"java/javax/mail/internet/MimeMessage.java"


======= fcb9861^:"java/org/apache/catalina/ha/session/BackupManager.java"

        LazyReplicatedMap map = (LazyReplicatedMap)sessions;
        if ( map!=null ) {
            map.breakdown();

======= 09f4e25^:"java/org/apache/catalina/ha/session/BackupManager.java"

======= 09f4e25^:"java/org/apache/catalina/ha/session/BackupManager.java"

======= 09f4e25^:"java/org/apache/catalina/ha/session/BackupManager.java"

        super.startInternal();
======= 09f4e25^:"java/org/apache/catalina/ha/session/BackupManager.java"

        super.stopInternal();
        

======= 867605f^:"java/org/apache/catalina/authenticator/DigestAuthenticator.java"

    protected static MessageDigest md5Helper;

======= 95a2eb8^:"java/javax/servlet/http/HttpServlet.java"

        String responseString = "TRACE "+ req.getRequestURI()+
            " " + req.getProtocol();
            responseString += CRLF + headerName + ": " +
                req.getHeader(headerName); 
        responseString += CRLF;
        responseLength = responseString.length();
        out.print(responseString);        

======= b027259^:"java/org/apache/jasper/runtime/JspFactoryImpl.java"

    protected final class PageContextPool  {

======= bcf0a01^:"java/org/apache/catalina/Realm.java"

     * Return the Principal associated with the specified username and
     * credentials, if there is one; otherwise return <code>null</code>.
     *
     * @param username Username of the Principal to look up
     * @param credentials Password or other credentials to use in
     *  authenticating this username
     */
    public Principal authenticate(String username, byte[] credentials);
    /**
======= bcf0a01^:"java/org/apache/catalina/realm/CombinedRealm.java"

     * Return the Principal associated with the specified username and
     * credentials, if there is one; otherwise return <code>null</code>.
     *
     * @param username Username of the Principal to look up
     * @param credentials Password or other credentials to use in
     *  authenticating this username
     */
    @Override
    public Principal authenticate(String username, byte[] credentials) {
        Principal authenticatedUser = null;
        
        for (Realm realm : realms) {
            if (log.isDebugEnabled()) {
                log.debug(sm.getString("combinedRealm.authStart", username, realm.getInfo()));
            }
            
            authenticatedUser = realm.authenticate(username, credentials);
            
            if (authenticatedUser == null) {
                if (log.isDebugEnabled()) {
                    log.debug(sm.getString("combinedRealm.authFail", username, realm.getInfo()));
                }
            } else {
                if (log.isDebugEnabled()) {
                    log.debug(sm.getString("combinedRealm.authSucess", username, realm.getInfo()));
                }
                break;
            }
        }
        return authenticatedUser;
    }
    /**
======= bcf0a01^:"java/org/apache/catalina/realm/LockOutRealm.java"

     * Return the Principal associated with the specified username and
     * credentials, if there is one; otherwise return <code>null</code>.
     *
     * @param username Username of the Principal to look up
     * @param credentials Password or other credentials to use in
     *  authenticating this username
     */
    @Override
    public Principal authenticate(String username, byte[] credentials) {
        if (isLocked(username)) {
            // Trying to authenticate a locked user is an automatic failure
            registerAuthFailure(username);
            
            log.warn(sm.getString("lockOutRealm.authLockedUser", username));
            return null;
        }
        Principal authenticatedUser = super.authenticate(username, credentials);
        
        if (authenticatedUser == null) {
            registerAuthFailure(username);
        } else {
            registerAuthSuccess(username);
        }
        return authenticatedUser;
    }
    /**
======= bcf0a01^:"java/org/apache/catalina/realm/RealmBase.java"

     * Return the Principal associated with the specified username and
     * credentials, if there is one; otherwise return <code>null</code>.
     *
     * @param username Username of the Principal to look up
     * @param credentials Password or other credentials to use in
     *  authenticating this username
     */
    public Principal authenticate(String username, byte[] credentials) {
        return (authenticate(username, credentials.toString()));
    }
    /**

======= f8d3565^:"java/org/apache/catalina/realm/JNDIRealm.java"


======= ead3997^:"java/javax/el/ExpressionFactory.java"

     * @return
======= ead3997^:"java/javax/el/ExpressionFactory.java"

     * @param properties
     * @return
======= ead3997^:"java/javax/servlet/HttpConstraintElement.java"

     * Convenience constructor for {@link EmptyRoleSemantic.DENY}.
======= ead3997^:"java/javax/servlet/ServletContext.java"

     *                                  {@link SessionTrackingMode.SSL} in
======= ead3997^:"java/org/apache/catalina/Context.java"

     * @param jspWildCard true if name identifies the JspServlet
======= ead3997^:"java/org/apache/catalina/Host.java"

     * @return
======= ead3997^:"java/org/apache/catalina/Lifecycle.java"

 * the component as soon as {@link start()} exits.
======= ead3997^:"java/org/apache/catalina/Session.java"

     * @see #getThisAccessedTime().
======= ead3997^:"java/org/apache/catalina/Session.java"

     * @see #getLastAccessedTime().
======= ead3997^:"java/org/apache/catalina/authenticator/FormAuthenticator.java"

     *                      to {@link HttpServletResponse#sendError(int, String)
======= ead3997^:"java/org/apache/catalina/authenticator/FormAuthenticator.java"

     *                      to {@link HttpServletResponse#sendError(int, String)
======= ead3997^:"java/org/apache/catalina/connector/Request.java"

     * @param session   The session to change the session ID for
======= ead3997^:"java/org/apache/catalina/core/ApplicationSessionCookieConfig.java"

     * @param conetxt     The Context for the web application
======= ead3997^:"java/org/apache/catalina/core/ContainerBase.java"

     * the digester should use {@link #getPipeline()#addValve(Valve)} in case a
======= ead3997^:"java/org/apache/catalina/core/StandardContext.java"

     * Set the clearReferencesStopThreads feature for this Context.
     * @param clearReferencesStopThreads The new flag value
======= ead3997^:"java/org/apache/catalina/session/StandardSession.java"

     * @see #getThisAccessedTime().
======= ead3997^:"java/org/apache/catalina/session/StandardSession.java"

     * @see #getLastAccessedTime().
======= ead3997^:"java/org/apache/catalina/tribes/ChannelListener.java"

     * @see Object#hashCode(int)
======= ead3997^:"java/org/apache/catalina/tribes/group/RpcChannel.java"

     * @param options int - FIRST_REPLY, MAJORITY_REPLY or ALL_REPLY
======= ead3997^:"java/org/apache/el/parser/AstValue.java"

     * @ since EL 2.2
======= ead3997^:"java/org/apache/jasper/compiler/Node.java"

         * @return false for string literals or rtexprvalues that should not be
======= ead3997^:"webapps/examples/WEB-INF/classes/chat/ChatServlet.java"

        /**
         * Add specified socket and associated pool to the poller. The socket will
         * be added to a temporary array, and polled first after a maximum amount
         * of time equal to pollTime (in most cases, latency will be much lower,
         * however).
         *
         * @param socket to add to the poller
         */
======= ead3997^:"webapps/examples/WEB-INF/classes/filters/ExampleFilter.java"

     * @param result The servlet response we are creating
======= ead3997^:"webapps/examples/WEB-INF/classes/filters/SetCharacterEncodingFilter.java"

     * @param result The servlet response we are creating

======= 5be4f29^:"java/org/apache/coyote/ajp/AjpProtocol.java"

        protected ConcurrentHashMap<SocketWrapper, AjpProcessor> connections =
            new ConcurrentHashMap<SocketWrapper, AjpProcessor>();
======= 5be4f29^:"java/org/apache/coyote/http11/Http11Protocol.java"

======= 5be4f29^:"java/org/apache/coyote/http11/Http11Protocol.java"

        protected ConcurrentHashMap<SocketWrapper, Http11Processor> connections =
            new ConcurrentHashMap<SocketWrapper, Http11Processor>();
======= 5be4f29^:"java/org/apache/tomcat/util/net/JIoEndpoint.java"

                Iterator<SocketWrapper> sockets = waitingRequests.iterator();
                    SocketWrapper socket = sockets.next();
======= 5be4f29^:"java/org/apache/tomcat/util/net/JIoEndpoint.java"

    protected ConcurrentLinkedQueue<SocketWrapper> waitingRequests = new ConcurrentLinkedQueue<SocketWrapper>();

======= 1018cd7^:"java/org/apache/coyote/http11/Http11NioProtocol.java"

======= 1018cd7^:"java/org/apache/coyote/http11/Http11Protocol.java"

======= 1018cd7^:"java/org/apache/tomcat/util/net/AprEndpoint.java"

======= 1018cd7^:"java/org/apache/tomcat/util/net/AprEndpoint.java"

======= 1018cd7^:"java/org/apache/tomcat/util/net/AprEndpoint.java"

======= 1018cd7^:"java/org/apache/tomcat/util/net/AprEndpoint.java"

======= 1018cd7^:"java/org/apache/tomcat/util/net/AprEndpoint.java"

======= 1018cd7^:"java/org/apache/tomcat/util/net/NioEndpoint.java"

======= 1018cd7^:"java/org/apache/tomcat/util/net/NioEndpoint.java"

======= 1018cd7^:"java/org/apache/tomcat/util/net/NioEndpoint.java"

======= 1018cd7^:"java/org/apache/tomcat/util/net/NioEndpoint.java"

======= 1018cd7^:"java/org/apache/tomcat/util/net/NioEndpoint.java"

======= 1018cd7^:"java/org/apache/tomcat/util/net/jsse/JSSEImplementation.java"


======= 32046eb^:"java/org/apache/catalina/mbeans/MBeanFactory.java"

======= 32046eb^:"java/org/apache/catalina/mbeans/MBeanFactory.java"

======= 32046eb^:"java/org/apache/catalina/mbeans/MBeanFactory.java"

        // XXX for backward compatibility. Remove it once supported by the admin
        return 
            createStandardContext(parent,path,docBase,false,false,false,false);                                  
======= 32046eb^:"java/org/apache/catalina/mbeans/MBeanFactory.java"

======= 32046eb^:"java/org/apache/catalina/mbeans/MBeanFactory.java"

            className="org.apache.catalina.mbeans.MBeanFactory"
    <operation   name="createFileLogger"
          description="Create a new FileLogger"
               impact="ACTION"
           returnType="java.lang.String">
      <parameter name="parent"
          description="MBean Name of the associated parent component"
                 type="java.lang.String"/>
    </operation>
    <operation   name="createStandardEngine"
          description="Create a new StandardEngine"
      <parameter name="parent"
          description="MBean Name of the associated parent component"
                 type="java.lang.String"/>
      <parameter name="name"
          description="Unique name of this Engine"
                 type="java.lang.String"/>
      <parameter name="defaultHost"
          description="Default host name for this Engine"
                 type="java.lang.String"/>
    </operation>
    <operation   name="createStandardEngineService"
          description="Create a new StandardEngine and StandardService"
               impact="ACTION"
           returnType="java.lang.String">
      <parameter name="parent"
          description="MBean Name of the associated parent Service"
                 type="java.lang.String"/>
      <parameter name="engineName"
          description="Unique name of this Engine"
          description="Default host name for this Engine"
      <parameter name="serviceName"
          description="Unique name of this Service"
    <operation   name="createStandardService"
          description="Create a new StandardService"
               impact="ACTION"
           returnType="java.lang.String">
      <parameter name="parent"
          description="MBean Name of the associated parent component"
                 type="java.lang.String"/>
      <parameter name="name"
          description="Unique name of this Service"
                 type="java.lang.String"/>
      <parameter name="domain"
          description="The domain of this Service"
                 type="java.lang.String"/>
    </operation>
    <operation   name="createSystemErrLogger"
          description="Create a new System Error Logger"
               impact="ACTION"
           returnType="java.lang.String">
      <parameter name="parent"
          description="MBean Name of the associated parent component"
                 type="java.lang.String"/>
    </operation>
    <operation   name="createSystemOutLogger"
          description="Create a new System Output Logger"
               impact="ACTION"
           returnType="java.lang.String">
      <parameter name="parent"
          description="MBean Name of the associated parent component"
                 type="java.lang.String"/>
    </operation>
    <operation   name="removeLogger"
          description="Remove an existing Logger"
               impact="ACTION"
           returnType="void">
      <parameter name="name"
          description="MBean Name of the component to be removed"
                 type="java.lang.String"/>
    </operation>

======= cb0b029^:"java/org/apache/catalina/tribes/io/ChannelData.java"

    public static final boolean USE_SECURE_RANDOM_FOR_UUID = false;

======= bddfc0a^:"java/org/apache/catalina/session/StandardManager.java"


======= 6fc4360^:"java/javax/servlet/annotation/HandlesTypes.java"

 * TODO SERVLET3 - Add comments
======= 6fc4360^:"java/javax/servlet/annotation/HttpConstraint.java"

 * TODO SERVLET3 - Add comments
======= 6fc4360^:"java/javax/servlet/annotation/HttpMethodConstraint.java"

 * TODO SERVLET3 - Add comments
======= 6fc4360^:"java/javax/servlet/annotation/MultipartConfig.java"

 * TODO SERVLET3 - Add comments
======= 6fc4360^:"java/javax/servlet/annotation/ServletSecurity.java"

 * TODO SERVLET3 - Add comments
======= 6fc4360^:"java/javax/servlet/annotation/WebFilter.java"

 * @since Servlet 3.0
 * TODO SERVLET3 - Add comments
======= 6fc4360^:"java/javax/servlet/annotation/WebInitParam.java"

 * TODO SERVLET3 - Add comments
======= 6fc4360^:"java/javax/servlet/annotation/WebListener.java"

 * TODO SERVLET3 - Add comments
======= 6fc4360^:"java/javax/servlet/annotation/WebServlet.java"

 * @since Servlet 3.0
 * TODO SERVLET3 - Add comments

======= 1ecfaa9^:"java/org/apache/jasper/tagplugins/jstl/Util.java"

    public static char[][] specialCharactersRepresentation = new char[HIGHEST_SPECIAL + 1][];

======= e59ba8f^:"java/org/apache/catalina/realm/JNDIRealm.java"

         final private List<String> roles;
             this.roles = Collections.unmodifiableList(roles);

======= 155e3f8^:"java/org/apache/catalina/manager/ManagerServlet.java"

                    idle++;
======= 155e3f8^:"java/org/apache/catalina/manager/ManagerServlet.java"

                writer.println(sm.getString("managerServlet.sessiontimeout",
                                            "unlimited","" + notimeout));
                writer.println(sm.getString("managerServlet.sessiontimeout",
                                            "" + idle,"expired " + expired));

======= 216352a^:"java/org/apache/tomcat/util/net/AprEndpoint.java"

            if (timeout < 0) {


======= 9a42719^:"java/org/apache/catalina/filters/RemoteIpFilter.java"

======= 9a42719^:"java/org/apache/catalina/valves/RemoteIpValve.java"


======= ae6fcf5^:"java/org/apache/catalina/core/StandardContext.java"

======= ae6fcf5^:"java/org/apache/catalina/core/StandardContext.java"

======= ae6fcf5^:"java/org/apache/catalina/loader/WebappClassLoader.java"

======= ae6fcf5^:"java/org/apache/catalina/loader/WebappClassLoader.java"

======= ae6fcf5^:"java/org/apache/catalina/loader/WebappClassLoader.java"

                            if (key == null) {
                              staleEntriesCount++;
                            } else {
                              mapRemove.invoke(map, key);
======= ae6fcf5^:"java/org/apache/catalina/loader/WebappLoader.java"


======= 39d3082^:"java/org/apache/catalina/ha/session/DeltaManager.java"


======= 83226d9^:"java/org/apache/catalina/Context.java"

======= 83226d9^:"java/org/apache/catalina/Context.java"

     * Return the path to a file to save this Context information.
    public String getConfigFile();
     * Set the path to a file to save this Context information.
     * @param configFile The path to a file to save this Context information.
    public void setConfigFile(String configFile);
======= 83226d9^:"java/org/apache/catalina/core/StandardContext.java"

======= 83226d9^:"java/org/apache/catalina/core/StandardContext.java"

     * The path to a file to save this Context information.
    private String configFile = null;
======= 83226d9^:"java/org/apache/catalina/core/StandardContext.java"

     * Return the path to a file to save this Context information.
    public String getConfigFile() {
======= 83226d9^:"java/org/apache/catalina/core/StandardContext.java"

     * Set the path to a file to save this Context information.
     * @param configFile The path to a file to save this Context information.
    public void setConfigFile(String configFile) {
======= 83226d9^:"java/org/apache/catalina/core/StandardHost.java"

======= 83226d9^:"java/org/apache/catalina/core/StandardHost.java"

======= 83226d9^:"java/org/apache/catalina/mbeans/MBeanFactory.java"

            context.setConfigFile(configFile.getAbsolutePath());
======= 83226d9^:"java/org/apache/catalina/startup/ContextConfig.java"

            processContextConfig(new File(getBaseDir()), defaultContextXml);
            processContextConfig(getConfigBase(), getHostConfigPath(Constants.HostContextXml));
            processContextConfig(new File(context.getConfigFile()), null);
======= 83226d9^:"java/org/apache/catalina/startup/ContextConfig.java"

    protected void processContextConfig(File baseDir, String resourceName) {
                    + "] configuration file " + baseDir + " " + resourceName);
        File file = baseDir;
        if (resourceName != null) {
            file = new File(baseDir, resourceName);
        }
        
            if ( !file.exists() ) {
                if (resourceName != null) {
                    // Use getResource and getResourceAsStream
                    stream = getClass().getClassLoader()
                        .getResourceAsStream(resourceName);
                    if( stream != null ) {
                        source = new InputSource
                            (getClass().getClassLoader()
                            .getResource(resourceName).toString());
                    }
                }
            } else {
                source =
                    new InputSource("file://" + file.getAbsolutePath());
                stream = new FileInputStream(file);
                // Add as watched resource so that cascade reload occurs if a default
                // config file is modified/added/removed
                context.addWatchedResource(file.getAbsolutePath());
                      resourceName + " " + file) , e);
======= 83226d9^:"java/org/apache/catalina/startup/ContextConfig.java"

                            + "] configuration file " + baseDir + " " + resourceName);
======= 83226d9^:"java/org/apache/catalina/startup/HostConfig.java"

======= 83226d9^:"java/org/apache/catalina/startup/HostConfig.java"

======= 83226d9^:"java/org/apache/catalina/startup/HostConfig.java"

======= 83226d9^:"java/org/apache/catalina/startup/HostConfig.java"

======= 83226d9^:"java/org/apache/catalina/startup/HostConfig.java"

            context.setConfigFile(contextXml.getAbsolutePath());
======= 83226d9^:"java/org/apache/catalina/startup/HostConfig.java"

======= 83226d9^:"java/org/apache/catalina/startup/HostConfig.java"

                context.setConfigFile(xml.getAbsolutePath());
======= 83226d9^:"java/org/apache/catalina/startup/HostConfig.java"

                // Will only do this on initial deployment. On subsequent
                // deployments the copied xml file means we'll use
                // deployDescriptor() instead
======= 83226d9^:"java/org/apache/catalina/startup/HostConfig.java"

                xmlCopy = new File(configBase(), file + ".xml");
                InputStream is = null;
                OutputStream os = null;
                try {
                    is = new FileInputStream(xml);
                    os = new FileOutputStream(xmlCopy);
                    IOTools.flow(is, os);
                    // Don't catch IOE - let the outer try/catch handle it
                } finally {
                        if (is != null) is.close();
                    } catch (IOException e){
                        // Ignore
                    }
                    try {
                        if (os != null) os.close();
                    } catch (IOException e){
                        // Ignore
                context.setConfigFile(xmlCopy.getAbsolutePath());
        absolute pathname for this directory, or a pathname that is relative
        to the <code>$CATALINA_BASE</code> directory.  See
        deployment of web applications to be deployed automatically. If not
        specified, the default of <code>webapps</code> will be used.</p>
        This is the pathname of a directory that may contain context XML descriptors
        to be deployed on this virtual host.  You may specify an
        deployment of web applications to be deployed automatically.</p>
        <p>If set to true, Tomcat will attempt to create the directories defined by the 
        attributes <code>appBase</code> and <code>xmlBase</code> during the startup phase.
        The default value is <code>true</code>.
        If set to true, and directory creation fails, an error message will be printed out but will not halt 
        the startup sequence.</p>
        <p>This flag value indicates if new web applications, dropped in to
        the <code>appBase</code> directory while Tomcat is running, should
        be automatically deployed.  The flag's value defaults to true.  See
        be automatically deployed by the host configurator.
        The flag's value defaults to true.  See
        <p>Set to <code>false</code> if you want to disable parsing the context.xml
        file embedded inside the application (located at <code>/META-INF/context.xml</code>). 
        Security conscious environments should set this to <code>false</code> to prevent
        applications from interacting with the container's configuration. The 
        administrator will then be responsible for providing an external context 
        configuration file, and put it in 
        <code>$CATALINA_BASE/conf/[enginename]/[hostname]/</code> unless the attribute <code>xmlBase</code> is specified.
        The flag's value defaults to <code>true</code>.</p>
        from a WAR file.  See
       <code>org.apache.catalina.core.ContainerBase.[enginename].[hostname]</code>
    <li>Any XML file in the 
        <code>$CATALINA_BASE/conf/[engine_name]/[host_name]</code> directory is
        assumed to contain a
        subelements) for a single web application.  The <code>docBase</code>
        attribute of this <code>&lt;Context&gt;</code> element will typically
        be the absolute pathname to a web application directory, or the
        absolute pathname of a web application archive (WAR) file (which
        will not be expanded). The path attribute will be automatically set
        as defined in the <a href="context.html">Context</a> documentation.</li>
    <li>Any web application archive file within the application base (appBase)
        directory that does not have a corresponding
        directory of the same name (without the ".war" extension) will be
        automatically expanded, unless the <code>unpackWARs</code> property
        is set to <code>false</code>.  If you redeploy an updated WAR file,
        be sure to delete the expanded directory when restarting Tomcat, so
        that the updated WAR file will be re-expanded (note that the auto
        deployer, if enabled, will automatically expand the updated WAR file
        once the previously expanded directory is removed). Multi-level contexts
        may be defined by using #, e.g. use a WAR named <code>foo#bar.war</code>
        for a context path of <code>/foo/bar</code>.</li>
    <li>Any subdirectory within the <em>application base directory</em>
        will receive an automatically generated <a href="context.html">
        Context</a> element, even if this directory is not mentioned in the
        <code>conf/server.xml</code> file. The context path for this
        deployed Context will be a slash character ("/") followed by the
        directory name, unless the directory name is ROOT, in which case
        the context path will be an empty string (""). Multi-level contexts
        may be defined by using #, e.g. use a directory named <code>foo#bar</code>
        for a context path of <code>/foo/bar</code>.</li>
    subdirectories that are dropped in to the <code>appBase</code> (or 
    <code>$CATALINA_BASE/conf/[engine_name]/[host_name]</code> in the case of
    an XML configuration file) directory while Tomcat is running will be
    automatically deployed, according to the rules described above. The 
    auto deployer will also track web applications for the following changes:
    <p>Finally, note that if you are defining contexts explicitly, you should
    probably turn off automatic application deployment.  Otherwise, your context
    will be deployed twice each, and that may cause problems for your app.

======= fc66705^:"java/org/apache/catalina/tribes/transport/ReplicationTransmitter.java"

        try {
            sender.sendMessage(destination,message);
        }catch (ChannelException x) {
            sender.disconnect();
            throw x;
        }
======= fc66705^:"java/org/apache/catalina/tribes/transport/nio/PooledParallelSender.java"

                if (!connected) disconnect();

======= 9113574^:"java/org/apache/jasper/runtime/JspWriterImpl.java"

    private int min(int a, int b) {

======= f1760d8^:"java/org/apache/naming/resources/FileDirContext.java"

     * This specialized resource implementation avoids opening the IputStream
======= f1760d8^:"java/org/apache/naming/resources/FileDirContext.java"

                inputStream = new FileInputStream(file);
======= f1760d8^:"java/org/apache/naming/resources/WARDirContext.java"

                    inputStream = base.getInputStream(entry);

======= 6ac5036^:"java/org/apache/jasper/JspCompilationContext.java"


======= 4cf35b8^:"java/org/apache/catalina/realm/JNDIRealm.java"

        return new ArrayList<String>(groupMap.values());

======= 1ec5ca7^:"java/org/apache/catalina/core/StandardHostValve.java"

            // Reset the response (keeping the real error code and message)
            response.resetBuffer(true);
            rd.forward(request.getRequest(), response.getResponse());
            // If we forward, the response is suspended again
            response.setSuspended(false);

======= 7301a10^:"java/org/apache/jasper/servlet/JspServletWrapper.java"

        return config.getServletContext();

======= 9e55819^:"java/org/apache/jasper/security/SecurityClassLoad.java"


======= 789ac1e^:"java/org/apache/jasper/compiler/JavacErrorDetail.java"


  <!--                        globalXsltFile[null]                          -->
======= 0e595cf^:"java/org/apache/catalina/servlets/DefaultServlet.java"

    protected String  localXsltFile = null;
    protected String  globalXsltFile = null;
======= 0e595cf^:"java/org/apache/catalina/servlets/DefaultServlet.java"

======= 0e595cf^:"java/org/apache/catalina/servlets/DefaultServlet.java"

======= 0e595cf^:"java/org/apache/catalina/servlets/DefaultServlet.java"

                return null;
        This can be disabled by per webapp by also declaring the
        default servlet in your local webapp's web.xml. The format
        of the xml is shown below.
        This overrides <code>globalXsltFile</code>. If this value
        is present but a file does not exist, then

======= 563e315^:"java/org/apache/jasper/JspC.java"

======= 563e315^:"java/org/apache/jasper/JspC.java"

    protected static final String[] insertBefore =
    { "</web-app>", "<servlet-mapping>", "<session-config>",
      "<mime-mapping>", "<welcome-file-list>", "<error-page>", "<taglib>",
      "<resource-env-ref>", "<resource-ref>", "<security-constraint>",
      "<login-config>", "<security-role>", "<env-entry>", "<ejb-ref>",
      "<ejb-local-ref>" };
======= 563e315^:"java/org/apache/jasper/JspC.java"

        int pos = -1;
        String line = null;
        while (true) {
            line = reader.readLine();
            if (line == null) {
                break;
            }
            // Skip anything previously generated by JSPC
            if (line.indexOf(insertStartMarker) >= 0) {
                while (true) {
                    line = reader.readLine();
                    if (line == null) {
                        return;
                    }
                    if (line.indexOf(insertEndMarker) >= 0) {
                        line = reader.readLine();
                        line = reader.readLine();
                            return;
                        break;
            }
            for (int i = 0; i < insertBefore.length; i++) {
                pos = line.indexOf(insertBefore[i]);
                if (pos >= 0)
                    break;
            }
            if (pos >= 0) {
                writer.print(line.substring(0, pos));
                break;
                writer.println(line);
            }
        }
        writer.println(insertStartMarker);
        while (true) {
            String line2 = fragmentReader.readLine();
            if (line2 == null) {
                writer.println();
                break;
            writer.println(line2);
        }
        writer.println(insertEndMarker);
        writer.println();
        for (int i = 0; i < pos; i++) {
            writer.print(" ");
        }
        writer.println(line.substring(pos));
        while (true) {
            line = reader.readLine();
            if (line == null) {
                break;
            }
            writer.println(line);
======= 563e315^:"java/org/apache/jasper/JspC.java"


======= da42e44^:"java/org/apache/catalina/servlets/WebdavServlet.java"


======= 53e0674^:"java/org/apache/catalina/ant/AbstractCatalinaTask.java"

======= 53e0674^:"java/org/apache/catalina/ant/DeployTask.java"

                    stream = new BufferedInputStream
                        (new FileInputStream(war), 1024);

======= c09753b^:"java/javax/servlet/jsp/JspFactory.java"

    private static JspFactory deflt = null;
======= c09753b^:"java/javax/servlet/jsp/JspFactory.java"

    public static synchronized void setDefaultFactory(JspFactory deflt) {
======= c09753b^:"java/javax/servlet/jsp/JspFactory.java"

    public static synchronized JspFactory getDefaultFactory() {

======= dda2cbc^:"java/org/apache/catalina/loader/WebappClassLoader.java"

            if (!openJARs()) {
                return null;
            }
            for (i = 0; (entry == null) && (i < jarFilesLength); i++) {
                jarEntry = jarFiles[i].getJarEntry(path);
                if (jarEntry != null) {
                    entry = new ResourceEntry();
                    try {
                        entry.codeBase = getURL(jarRealFiles[i], false);
                        String jarFakeUrl = getURI(jarRealFiles[i]).toString();
                        jarFakeUrl = "jar:" + jarFakeUrl + "!/" + path;
                        entry.source = new URL(jarFakeUrl);
                        entry.lastModified = jarRealFiles[i].lastModified();
                    } catch (MalformedURLException e) {
                        return null;
                    }
                    contentLength = (int) jarEntry.getSize();
                    try {
                        entry.manifest = jarFiles[i].getManifest();
                        binaryStream = jarFiles[i].getInputStream(jarEntry);
                    } catch (IOException e) {
                        return null;
                    }
                    // Extract resources contained in JAR to the workdir
                    if (antiJARLocking && !(path.endsWith(".class"))) {
                        byte[] buf = new byte[1024];
                        File resourceFile = new File
                            (loaderDir, jarEntry.getName());
                        if (!resourceFile.exists()) {
                            Enumeration<JarEntry> entries =
                                jarFiles[i].entries();
                            while (entries.hasMoreElements()) {
                                JarEntry jarEntry2 =  entries.nextElement();
                                if (!(jarEntry2.isDirectory()) 
                                    && (!jarEntry2.getName().endsWith
                                        (".class"))) {
                                    resourceFile = new File
                                        (loaderDir, jarEntry2.getName());
                                    try {
                                        if (!resourceFile.getCanonicalPath().startsWith(
                                                canonicalLoaderDir)) {
                                            throw new IllegalArgumentException(
                                                    sm.getString("webappClassLoader.illegalJarPath",
                                                jarEntry2.getName()));
                                        }
                                    } catch (IOException ioe) {
                                        throw new IllegalArgumentException(
                                                sm.getString("webappClassLoader.validationErrorJarPath",
                                                        jarEntry2.getName()), ioe);
                                    }                                 
                                    resourceFile.getParentFile().mkdirs();
                                    FileOutputStream os = null;
                                    InputStream is = null;
                                    try {
                                        is = jarFiles[i].getInputStream
                                            (jarEntry2);
                                        os = new FileOutputStream
                                            (resourceFile);
                                        while (true) {
                                            int n = is.read(buf);
                                            if (n <= 0) {
                                                break;
                                            }
                                            os.write(buf, 0, n);
                                        }
                                    } catch (IOException e) {
                                        // Ignore
                                    } finally {
                                            if (is != null) {
                                                is.close();
                                        } catch (IOException e) {
                                        }
                                            if (os != null) {
                                                os.close();
                }
            }
            if (entry == null) {
                synchronized (notFoundResources) {
                    notFoundResources.put(name, name);
                return null;
            }
            if (binaryStream != null) {
                byte[] binaryContent = new byte[contentLength];
                int pos = 0;
                try {
                    while (true) {
                        int n = binaryStream.read(binaryContent, pos,
                                                  binaryContent.length - pos);
                        if (n <= 0)
                            break;
                        pos += n;
                } catch (IOException e) {
                    log.error(sm.getString("webappClassLoader.readError", name), e);
                } finally {
                    try {
                        binaryStream.close();
                    } catch (IOException e) {}
                if (fileNeedConvert) {
                    // Workaround for certain files on platforms that use
                    // EBCDIC encoding, when they are read through FileInputStream.
                    // See commit message of rev.303915 for details
                    // http://svn.apache.org/viewvc?view=revision&revision=303915
                    String str = new String(binaryContent,0,pos);
                        binaryContent = str.getBytes("UTF-8");
                    } catch (Exception e) {
                entry.binaryContent = binaryContent;
                // The certificates are only available after the JarEntry 
                // associated input stream has been fully read
                if (jarEntry != null) {
                    entry.certificates = jarEntry.getCertificates();

======= 9905155^:"java/org/apache/catalina/valves/RemoteIpValve.java"

 *   className="org.apache.catalina.connector.RemoteIpValve"
======= 9905155^:"java/org/apache/catalina/valves/RemoteIpValve.java"

 *   className="org.apache.catalina.connector.RemoteIpValve"
======= 9905155^:"java/org/apache/catalina/valves/RemoteIpValve.java"

 *   className="org.apache.catalina.connector.RemoteIpValve"
======= 9905155^:"java/org/apache/catalina/valves/RemoteIpValve.java"

 *   className="org.apache.catalina.connector.RemoteIpValve"
======= 9905155^:"java/org/apache/catalina/valves/RemoteIpValve.java"

    private static final String info = "org.apache.catalina.connector.RemoteIpValve/1.0";

======= 6f48cde^:"java/org/apache/catalina/session/FileStore.java"

            BufferedInputStream bis = new BufferedInputStream(fis);
======= 6f48cde^:"java/org/apache/catalina/session/FileStore.java"

            if (ois != null) {
                    ois.close();
                ois = null;
======= 6f48cde^:"java/org/apache/catalina/session/FileStore.java"

            if (ois != null) {
                try {
                    ois.close();
                } catch (IOException f) {
                    // Ignore
                }
======= 6f48cde^:"java/org/apache/catalina/session/FileStore.java"

            if (oos != null) {
                    oos.close();
======= 6f48cde^:"java/org/apache/catalina/session/StandardManager.java"

            BufferedInputStream bis = new BufferedInputStream(fis);
======= 6f48cde^:"java/org/apache/catalina/session/StandardManager.java"

            if (ois != null) {
                    ois.close();
                ois = null;
======= 6f48cde^:"java/org/apache/catalina/session/StandardManager.java"

                if (ois != null) {
                    try {
                        ois.close();
                    } catch (IOException f) {
                        // Ignore
                    }
                    ois = null;
                if (ois != null) {
                    try {
                        ois.close();
                    } catch (IOException f) {
                        // Ignore
                    }
                    ois = null;
                    if (ois != null)
                        ois.close();
======= 6f48cde^:"java/org/apache/catalina/session/StandardManager.java"

            if (oos != null) {
                    oos.close();
                oos = null;
======= 6f48cde^:"java/org/apache/catalina/session/StandardManager.java"

                if (oos != null) {
                    try {
                        oos.close();
                    } catch (IOException f) {
                        // Ignore
                    }
                    oos = null;
======= 6f48cde^:"java/org/apache/catalina/session/StandardManager.java"

            oos.close();
            oos = null;
        } catch (IOException e) {
            if (oos != null) {
                try {
                    oos.close();
                } catch (IOException f) {
                    // Ignore
                }
                oos = null;
            throw e;

======= 067e0ba^:"java/org/apache/catalina/startup/Catalina.java"

======= 067e0ba^:"java/org/apache/catalina/startup/Catalina.java"

     * The server component we are starting or stopping
     */
    protected Server server = null;
    /**
======= 067e0ba^:"java/org/apache/catalina/startup/Catalina.java"

    /**
     * Set the server instance we are configuring.
     *
     * @param server The new server
     */
    @Override
    public void setServer(Server server) {
        this.server = server;
    }
======= 067e0ba^:"java/org/apache/catalina/startup/Catalina.java"

        if( server == null ) {
======= 067e0ba^:"java/org/apache/catalina/startup/Catalina.java"

            if (server.getPort()>0) { 
                Socket socket = new Socket(server.getAddress(), server.getPort());
                String shutdown = server.getShutdown();
======= 067e0ba^:"java/org/apache/catalina/startup/Catalina.java"

        if (server instanceof Lifecycle) {
                server.initialize();
======= 067e0ba^:"java/org/apache/catalina/startup/Catalina.java"

        if (server == null) {
        if (server == null) {
======= 067e0ba^:"java/org/apache/catalina/startup/Catalina.java"

        if (server instanceof Lifecycle) {
                ((Lifecycle) server).start();
======= 067e0ba^:"java/org/apache/catalina/startup/Catalina.java"

        if (server instanceof Lifecycle) {
                ((Lifecycle) server).stop();
======= 067e0ba^:"java/org/apache/catalina/startup/Catalina.java"

        server.await();
======= 067e0ba^:"java/org/apache/catalina/startup/Catalina.java"

            if (server != null) {

======= c85e791^:"java/org/apache/catalina/deploy/WebXml.java"

======= c85e791^:"java/org/apache/catalina/deploy/WebXml.java"

        for (String contextParam : contextParams.keySet()) {
            context.addParameter(contextParam, contextParams.get(contextParam));
======= c85e791^:"java/org/apache/catalina/deploy/WebXml.java"

        for (String locale : localeEncodingMappings.keySet()) {
            context.addLocaleEncodingMappingParameter(locale,
                    localeEncodingMappings.get(locale));
======= c85e791^:"java/org/apache/catalina/deploy/WebXml.java"

        for (String extension : mimeMappings.keySet()) {
            context.addMimeMapping(extension, mimeMappings.get(extension));
======= c85e791^:"java/org/apache/catalina/deploy/WebXml.java"

            for (String param : params.keySet()) {
                wrapper.addInitParameter(param, params.get(param));
======= c85e791^:"java/org/apache/catalina/deploy/WebXml.java"

        for (String pattern : servletMappings.keySet()) {
            context.addServletMapping(pattern, servletMappings.get(pattern));
======= c85e791^:"java/org/apache/catalina/deploy/WebXml.java"

        for (String uri : taglibs.keySet()) {
            context.addTaglib(uri, taglibs.get(uri));
======= c85e791^:"java/org/apache/catalina/deploy/WebXml.java"

        for (String key : fragmentMap.keySet()) {
                T value = fragmentMap.get(key);
======= c85e791^:"java/org/apache/catalina/deploy/WebXml.java"

                    for (String name : fragments.keySet()) {
                        if (!requestedOrder.contains(name)) {
                            WebXml fragment = fragments.get(name);
======= c85e791^:"java/org/apache/tomcat/util/buf/StringCache.java"

======= c85e791^:"java/org/apache/tomcat/util/buf/StringCache.java"

                        Iterator<ByteEntry> entries =
                            bcStats.keySet().iterator();
                        while (entries.hasNext()) {
                            ByteEntry entry = entries.next();
                            int[] countA = bcStats.get(entry);
======= c85e791^:"java/org/apache/tomcat/util/buf/StringCache.java"

                        Iterator<CharEntry> entries = ccStats.keySet().iterator();
                        while (entries.hasNext()) {
                            CharEntry entry = entries.next();
                            int[] countA = ccStats.get(entry);

======= 1789bd8^:"java/org/apache/catalina/valves/RemoteIpValve.java"

======= 1789bd8^:"java/org/apache/catalina/valves/RemoteIpValve.java"

======= 1789bd8^:"java/org/apache/catalina/valves/RemoteIpValve.java"

======= 1789bd8^:"java/org/apache/catalina/valves/RemoteIpValve.java"

======= 1789bd8^:"java/org/apache/catalina/valves/RemoteIpValve.java"

    
======= 1789bd8^:"java/org/apache/catalina/valves/RemoteIpValve.java"

                if (protocolHeaderValue != null && protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {
======= 1789bd8^:"java/org/apache/catalina/valves/RemoteIpValve.java"

               
    <attribute name="remoteIpHedaer"
======= 1789bd8^:"test/org/apache/catalina/valves/TestRemoteIpValve.java"

======= 1789bd8^:"test/org/apache/catalina/valves/TestRemoteIpValve.java"

======= 1789bd8^:"test/org/apache/catalina/valves/TestRemoteIpValve.java"

    (http/https) and server port with the scheme presented by a proxy or a load
    balancer via a request header (e.g. &quot;X-Forwarded-Proto&quot;).</p>
 

======= 7aa1206^:"java/org/apache/catalina/filters/RemoteIpFilter.java"

======= 7aa1206^:"java/org/apache/catalina/filters/RemoteIpFilter.java"

======= 7aa1206^:"java/org/apache/catalina/filters/RemoteIpFilter.java"

    
======= 7aa1206^:"java/org/apache/catalina/filters/RemoteIpFilter.java"

                if (protocolHeaderValue != null && protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {
======= 7aa1206^:"java/org/apache/catalina/filters/RemoteIpFilter.java"

                throw new NumberFormatException("Illegal serverPort : " + e.getMessage());
    (http/https) and server port with the scheme presented by a proxy or a load
    balancer via a request header (e.g. &quot;X-Forwarded-Proto&quot;).</p>

======= d0f9da2^:"java/org/apache/catalina/util/RequestUtil.java"

        return URLDecode(bytes, null, false);

======= 62d29b6^:"java/org/apache/catalina/realm/JNDIRealm.java"

        return new GenericPrincipal(user.username, user.password ,
                getRoles(context, user));

======= 13daf69^:"java/org/apache/coyote/http11/Http11AprProcessor.java"

        } else {
======= 13daf69^:"java/org/apache/coyote/http11/Http11NioProcessor.java"

        } else {
======= 13daf69^:"java/org/apache/coyote/http11/Http11Processor.java"

        } else {
      <p>The Server header for the http response.
         Unless you are paranoid, you won't need this feature.

======= eeb017a^:"java/org/apache/juli/ClassLoaderLogManager.java"

======= eeb017a^:"java/org/apache/juli/ClassLoaderLogManager.java"

    /**
     * Need to override reset so the loggers loaded by the web applications can
     * be shutdown.
     */
    @Override
    public void reset() {
        super.reset();
        for (ClassLoaderLogInfo classLoaderLogInfo : classLoaderLoggers.values()) {
            for (Logger logger : classLoaderLogInfo.loggers.values()) {
                resetLogger(logger);
            }
        }
    }
    
    private void resetLogger(Logger logger) {
        
        Handler[] handlers = logger.getHandlers();
        for (Handler handler : handlers) {
            logger.removeHandler(handler);
            try {
                handler.close();
            } catch (Exception e) {
                // Ignore
            }
        }
    }
======= eeb017a^:"java/org/apache/juli/logging/LogFactory.java"

======= eeb017a^:"java/org/apache/juli/logging/LogFactory.java"

    public static void release(ClassLoader classLoader) {
        // nothing - we don't use any class loaders

======= f2eea0c^:"java/org/apache/catalina/startup/ContextConfig.java"

                sm.getString("contextConfig.jndiUrl", url);

======= 4df1957^:"java/javax/el/BeanELResolver.java"

======= 4df1957^:"java/javax/el/BeanELResolver.java"

        public Class getPropertyType() {
======= 4df1957^:"java/javax/el/ELContext.java"

    @SuppressWarnings("unchecked") // Can't use Class<?> because API needs to match specification
    public Object getContext(Class key) {
    @SuppressWarnings("unchecked") // Can't use Class<?> because API needs to match specification
    public void putContext(Class key, Object contextObject) throws NullPointerException {
======= 4df1957^:"java/javax/el/ResourceBundleELResolver.java"

    @SuppressWarnings("unchecked") // Can't use Iterator<FeatureDescriptor> because API needs to match specification
    public Iterator getFeatureDescriptors(ELContext context, Object base) {
======= 4df1957^:"java/org/apache/catalina/loader/WebappClassLoader.java"

            @SuppressWarnings("unchecked")
======= 4df1957^:"java/org/apache/catalina/loader/WebappClassLoader.java"

        @SuppressWarnings("unchecked")
======= 4df1957^:"java/org/apache/catalina/loader/WebappClassLoader.java"

    @SuppressWarnings("deprecation")
======= 4df1957^:"java/org/apache/el/lang/ELSupport.java"

            @SuppressWarnings("unchecked")
            @SuppressWarnings("unchecked")
======= 4df1957^:"java/org/apache/el/lang/EvaluationContext.java"

    @SuppressWarnings("unchecked") // Can't use Class<?> because API needs to match specification in super-class
    public Object getContext(Class key) {
======= 4df1957^:"java/org/apache/el/lang/EvaluationContext.java"

    @SuppressWarnings("unchecked") // Can't use Class<?> because API needs to match specification in super-class
    public void putContext(Class key, Object contextObject) {
======= 4df1957^:"java/org/apache/el/parser/AstIdentifier.java"

    @SuppressWarnings("unchecked")
    public Object invoke(EvaluationContext ctx, Class[] paramTypes,
    @SuppressWarnings("unchecked")
    public MethodInfo getMethodInfo(EvaluationContext ctx, Class[] paramTypes)
======= 4df1957^:"java/org/apache/el/parser/AstValue.java"

    @SuppressWarnings("unchecked")
    public MethodInfo getMethodInfo(EvaluationContext ctx, Class[] paramTypes)
======= 4df1957^:"java/org/apache/el/parser/AstValue.java"

    @SuppressWarnings("unchecked")
    public Object invoke(EvaluationContext ctx, Class[] paramTypes,
======= 4df1957^:"java/org/apache/el/parser/SimpleNode.java"

    @SuppressWarnings("unchecked")
    public Object invoke(EvaluationContext ctx, Class[] paramTypes,
    @SuppressWarnings("unchecked")
            Class[] paramTypes) throws ELException {
======= 4df1957^:"java/org/apache/naming/resources/VirtualDirContext.java"

    @SuppressWarnings("unchecked")
    protected ArrayList list(File file) {
        ArrayList entries = super.list(file);

======= 11810fb^:"test/org/apache/el/TestELEvaluation.java"

======= 11810fb^:"test/org/apache/el/TestELEvaluation.java"

======= 11810fb^:"test/org/apache/el/TestELEvaluation.java"


======= da5f249^:"java/org/apache/catalina/connector/Connector.java"

        String encodedAddr = null;
        if (getProperty("address") != null) {
            encodedAddr = URLEncoder.encode(getProperty("address").toString());
        String addSuffix = (getProperty("address") == null) ? "" : ",address="
                + encodedAddr;
        ObjectName _oname = new ObjectName(domain + ":type=" + type + ",port="
                + getPort() + addSuffix);
======= da5f249^:"java/org/apache/catalina/mbeans/MBeanUtils.java"

            String address = (String)
                IntrospectionUtils.getProperty(connector, "address");
            sb.append(",port=" + port);
            if ((address != null) && (address.length()>0)) {
                sb.append(",address=" + address);

======= 3d309a5^:"java/org/apache/catalina/connector/CoyoteAdapter.java"

======= 3d309a5^:"java/org/apache/catalina/connector/CoyoteAdapter.java"

    implements Adapter 
 {
======= 3d309a5^:"java/org/apache/catalina/connector/CoyoteAdapter.java"

            response.addHeader("X-Powered-By", "Servlet/2.5");

======= 9a2ae02^:"java/javax/el/ExpressionFactory.java"

======= 9a2ae02^:"java/javax/el/ExpressionFactory.java"

======= 9a2ae02^:"java/javax/el/ExpressionFactory.java"

    
        // TODO
======= 9a2ae02^:"java/org/apache/jasper/compiler/JspUtil.java"

    // private static ExpressionEvaluatorImpl expressionEvaluator
    // = new ExpressionEvaluatorImpl();
======= 9a2ae02^:"java/org/apache/jasper/compiler/PageInfo.java"

======= 9a2ae02^:"java/org/apache/jasper/compiler/PageInfo.java"

    private ExpressionFactory expressionFactory = new ExpressionFactoryImpl();
======= 9a2ae02^:"java/org/apache/jasper/compiler/Validator.java"

======= 9a2ae02^:"java/org/apache/jasper/compiler/Validator.java"

======= 9a2ae02^:"java/org/apache/jasper/compiler/Validator.java"

                                        ELSupport.checkType(attrs.getValue(i), expectedClass);
======= 9a2ae02^:"java/org/apache/jasper/runtime/JspApplicationContextImpl.java"

======= 9a2ae02^:"java/org/apache/jasper/runtime/JspApplicationContextImpl.java"


======= d939925^:"java/org/apache/catalina/session/StoreBase.java"

    
                if (session.isValid()) {
======= d939925^:"java/org/apache/catalina/session/StoreBase.java"

                remove(session.getIdInternal());

======= ae6c3c4^:"java/org/apache/catalina/servlets/CGIServlet.java"

    private String parameterEncoding = System.getProperty("file.encoding",
                                                          "UTF-8");
======= ae6c3c4^:"java/org/apache/catalina/servlets/CGIServlet.java"

======= ae6c3c4^:"java/org/apache/catalina/servlets/CGIServlet.java"

======= ae6c3c4^:"java/org/apache/catalina/servlets/CGIServlet.java"

                new Thread() {
                }.start() ;
======= ae6c3c4^:"java/org/apache/catalina/servlets/CGIServlet.java"


======= ff22e4a^:"java/org/apache/naming/resources/DirContextURLConnection.java"

                // This will be of the form /<hostname>/<contextpath/file name
                int start = file.indexOf('/', file.indexOf('/', 1) + 1);

======= e1d1476^:"java/org/apache/catalina/ha/session/DeltaSession.java"

    protected Lock diffLock = new ReentrantReadWriteLock().writeLock();
======= e1d1476^:"java/org/apache/catalina/tribes/group/interceptors/OrderInterceptor.java"

    ReentrantReadWriteLock inLock = new ReentrantReadWriteLock(true);
    ReentrantReadWriteLock outLock= new ReentrantReadWriteLock(true);
======= e1d1476^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/MultiLockFairBlockingQueue.java"

    final ReentrantLock[] locks = new ReentrantLock[LOCK_COUNT];

======= d9f2c99^:"java/org/apache/catalina/session/PersistentManagerBase.java"

======= d9f2c99^:"java/org/apache/catalina/session/PersistentManagerBase.java"

======= d9f2c99^:"java/org/apache/catalina/session/PersistentManagerBase.java"

        Session session = null;
        try {
            if (SecurityUtil.isPackageProtectionEnabled()){
                try{
                    session = AccessController.doPrivileged(
                            new PrivilegedStoreLoad(id));
                }catch(PrivilegedActionException ex){
                    Exception exception = ex.getException();
                    log.error("Exception in the Store during swapIn: "
                              + exception);
                    if (exception instanceof IOException){
                        throw (IOException)exception;
                    } else if (exception instanceof ClassNotFoundException) {
                        throw (ClassNotFoundException)exception;
                    }
                }
            } else {
                 session = store.load(id);
            }   
        } catch (ClassNotFoundException e) {
            log.error(sm.getString("persistentManager.deserializeError", id, e));
            throw new IllegalStateException
                (sm.getString("persistentManager.deserializeError", id, e));
        }
        if (session == null)
            return (null);
        if (!session.isValid()) {
            log.error("session swapped in is invalid or expired");
            session.expire();
            removeSession(id);
            return (null);
        if(log.isDebugEnabled())
            log.debug(sm.getString("persistentManager.swapIn", id));
        session.setManager(this);
        // make sure the listeners know about it.
        ((StandardSession)session).tellNew();
        add(session);
        ((StandardSession)session).activate();
        // endAccess() to ensure timeouts happen correctly.
        // access() to keep access count correct or it will end up negative
        session.access();
        session.endAccess();

======= 803d64d^:"java/org/apache/catalina/filters/RemoteIpFilter.java"

 * <code>192.168/16</code>) to configure <code>RemoteIPInternalProxy</code> and <code>RemoteIPTrustedProxy</code> ; as the JVM doesnt have a
 * href="http://apr.apache.org/docs/apr/1.3/group__apr__network__io.html#gb74d21b8898b7c40bf7fd07ad3eb993d">apr_ipsubnet_test</a>.
======= 803d64d^:"java/org/apache/catalina/filters/RemoteIpFilter.java"

    protected static final String PROTOCOL_HEADER_SSL_VALUE_PARAMETER = "protocolHeaderSslValue";
======= 803d64d^:"java/org/apache/catalina/filters/RemoteIpFilter.java"

    private String protocolHeaderSslValue = "https";
======= 803d64d^:"java/org/apache/catalina/filters/RemoteIpFilter.java"

                if (protocolHeaderValue != null && protocolHeaderSslValue.equalsIgnoreCase(protocolHeaderValue)) {
======= 803d64d^:"java/org/apache/catalina/filters/RemoteIpFilter.java"

    public String getProtocolHeaderSslValue() {
        return protocolHeaderSslValue;
======= 803d64d^:"java/org/apache/catalina/filters/RemoteIpFilter.java"

        if (filterConfig.getInitParameter(PROTOCOL_HEADER_SSL_VALUE_PARAMETER) != null) {
            setProtocolHeaderSslValue(filterConfig.getInitParameter(PROTOCOL_HEADER_SSL_VALUE_PARAMETER));
======= 803d64d^:"java/org/apache/catalina/filters/RemoteIpFilter.java"

     * Case insensitive value of the protocol header to indicate that the incoming http request uses SSL.
     * Default value : <code>HTTPS</code>
    public void setProtocolHeaderSslValue(String protocolHeaderSslValue) {
        this.protocolHeaderSslValue = protocolHeaderSslValue;

======= 51d5511^:"java/org/apache/tomcat/util/net/jsse/JSSESupport.java"

======= 51d5511^:"java/org/apache/tomcat/util/net/jsse/JSSESupport.java"

======= 51d5511^:"java/org/apache/tomcat/util/net/jsse/JSSESupport.java"

        Integer keySize = (Integer) session.getValue(KEY_SIZE_KEY);
======= 51d5511^:"java/org/apache/tomcat/util/net/jsse/JSSESupport.java"

            session.putValue(KEY_SIZE_KEY, keySize);

======= 88b5d4b^:"java/org/apache/catalina/authenticator/FormAuthenticator.java"

======= 88b5d4b^:"java/org/apache/catalina/authenticator/FormAuthenticator.java"

            HttpServletResponse response, LoginConfig config) {
            log.warn("Unexpected error forwarding to login page", t);
======= 88b5d4b^:"java/org/apache/catalina/authenticator/FormAuthenticator.java"

            HttpServletResponse response, LoginConfig config) {
            log.warn("Unexpected error forwarding to error page", t);

======= b09d817^:"modules/bayeux/java/org/apache/tomcat/bayeux/TomcatBayeux.java"

        return java.util.Arrays.asList(clients.entrySet().toArray(new Client[0]));

======= 9be399f^:"modules/bayeux/java/org/apache/tomcat/bayeux/request/PublishRequest.java"

======= 9be399f^:"modules/bayeux/java/org/apache/tomcat/bayeux/request/PublishRequest.java"

    JSONObject msgData = null;
======= 9be399f^:"modules/bayeux/java/org/apache/tomcat/bayeux/request/PublishRequest.java"

======= 9be399f^:"modules/bayeux/java/org/apache/tomcat/bayeux/request/PublishRequest.java"

======= 9be399f^:"modules/bayeux/java/org/apache/tomcat/bayeux/request/PublishRequest.java"


======= 549a5d5^:"java/org/apache/catalina/connector/Request.java"

     * names return will only be those for the attributes set via
     * <li>{@link Globals.DISPATCHER_TYPE_ATTR}</li>
     * <li>{@link Globals.DISPATCHER_REQUEST_PATH_ATTR}</li>
     * <li>{@link Globals.ASYNC_SUPPORTED_ATTR}</li>
     * <li>{@link Globals.CERTIFICATES_ATTR} (SSL connections only)</li>
     * <li>{@link Globals.CIPHER_SUITE_ATTR} (SSL connections only)</li>
     * <li>{@link Globals.KEY_SIZE_ATTR} (SSL connections only)</li>
     * <li>{@link Globals.SSL_SESSION_ID_ATTR} (SSL connections only)</li>
     * <li>{@link Globals.SSL_SESSION_MGR_ATTR} (SSL connections only)</li>
======= 549a5d5^:"java/org/apache/catalina/connector/Request.java"

     * @return
======= 549a5d5^:"java/org/apache/catalina/connector/Request.java"

     * @return

======= 806200c^:"java/org/apache/catalina/ha/session/DeltaSession.java"

            if (value == null)

======= ed40c2c^:"java/org/apache/catalina/ant/jmx/JMXAccessorTask.java"

                for (Iterator<Object> iter1 = ((List<Object>) key).iterator(); iter1.hasNext();) {
======= ed40c2c^:"java/org/apache/catalina/tribes/membership/Membership.java"

            clone.map = (HashMap<MemberImpl, MbrEntry>) map.clone();
======= ed40c2c^:"java/org/apache/catalina/tribes/membership/Membership.java"

     * @return - true if this member is new to the cluster, false otherwise.
     * @return - false if this member is the local member or updated.
======= ed40c2c^:"java/org/apache/naming/resources/DirContextURLConnection.java"

          return (Collections.EMPTY_MAP);
======= ed40c2c^:"java/org/apache/naming/resources/DirContextURLConnection.java"


======= 9afe6ce^:"java/org/apache/catalina/ha/context/ReplicatedContext.java"


======= b8599a3^:"java/org/apache/el/lang/ELSupport.java"

     * @param obj0
     * @param obj1
     * @return
     * @throws EvaluationException
======= b8599a3^:"java/org/apache/el/lang/ELSupport.java"

        if (obj0 instanceof Comparable) {
            return (obj1 != null) ? ((Comparable) obj0).compareTo(obj1) : 1;
        if (obj1 instanceof Comparable) {
            return (obj0 != null) ? -((Comparable) obj1).compareTo(obj0) : -1;
     * @param obj0
     * @param obj1
     * @return
     * @throws EvaluationException
======= b8599a3^:"java/org/apache/el/lang/ELSupport.java"

            return (Enum) obj;
     * @param obj
     * @return
======= b8599a3^:"java/org/apache/el/lang/ELSupport.java"

     * @return
        } else if (obj instanceof Enum) {
            return ((Enum) obj).name();
======= b8599a3^:"java/org/apache/el/lang/ELSupport.java"

     * @param obj
     * @return
======= b8599a3^:"test/org/apache/el/TestELEvaluation.java"

======= b8599a3^:"test/org/apache/el/TestELEvaluation.java"


======= 2ac1900^:"java/org/apache/el/lang/EvaluationContext.java"

======= 2ac1900^:"java/org/apache/el/lang/EvaluationContext.java"

======= 2ac1900^:"java/org/apache/jasper/el/ELContextWrapper.java"

======= 2ac1900^:"java/org/apache/jasper/el/ELContextWrapper.java"


======= ce8d1c5^:"java/org/apache/catalina/core/ApplicationContextFacade.java"

======= ce8d1c5^:"java/org/apache/catalina/core/ApplicationContextFacade.java"

======= ce8d1c5^:"java/org/apache/catalina/core/ApplicationContextFacade.java"

======= ce8d1c5^:"java/org/apache/catalina/core/ApplicationContextFacade.java"

======= ce8d1c5^:"java/org/apache/catalina/core/ApplicationContextFacade.java"

======= ce8d1c5^:"java/org/apache/catalina/core/ApplicationContextFacade.java"

======= ce8d1c5^:"java/org/apache/catalina/core/ApplicationContextFacade.java"

======= ce8d1c5^:"java/org/apache/catalina/core/ApplicationContextFacade.java"

======= ce8d1c5^:"java/org/apache/catalina/core/ApplicationContextFacade.java"

======= ce8d1c5^:"java/org/apache/catalina/core/ApplicationContextFacade.java"

======= ce8d1c5^:"java/org/apache/catalina/core/ApplicationContextFacade.java"

======= ce8d1c5^:"java/org/apache/catalina/core/ApplicationContextFacade.java"


======= f0a0aec^:"java/org/apache/catalina/core/ApplicationFilterFactory.java"

======= f0a0aec^:"java/org/apache/catalina/deploy/FilterMap.java"

======= f0a0aec^:"java/org/apache/catalina/deploy/FilterMap.java"

     * representing the state of when filters should be applied:
     *
     *        ERROR
     *        FORWARD
     *        FORWARD_ERROR
     *        INCLUDE
     *        INCLUDE_ERROR
     *        INCLUDE_ERROR_FORWARD
     *        REQUEST
     *        REQUEST_ERROR
     *        REQUEST_ERROR_INCLUDE
     *        REQUEST_ERROR_FORWARD_INCLUDE
     *        REQUEST_INCLUDE
     *        REQUEST_FORWARD,
     *        REQUEST_FORWARD_INCLUDE
     *
======= f0a0aec^:"java/org/apache/catalina/deploy/FilterMap.java"


======= 56897be^:"java/org/apache/tomcat/util/modeler/Registry.java"

            if ((group == null) && (item.getGroup() == null)) {
                results.add(item.getName());
======= 56897be^:"java/org/apache/tomcat/util/modeler/Registry.java"

        } else if( source instanceof Class ) {

======= 632e68c^:"java/javax/annotation/Resource.java"

======= 632e68c^:"java/javax/ejb/EJB.java"

======= 632e68c^:"java/javax/el/BeanELResolver.java"

======= 632e68c^:"java/javax/el/BeanELResolver.java"

======= 632e68c^:"java/javax/el/ELContext.java"

======= 632e68c^:"java/javax/el/ELContext.java"

======= 632e68c^:"java/javax/el/ListELResolver.java"

======= 632e68c^:"java/javax/el/ListELResolver.java"

======= 632e68c^:"java/javax/el/ListELResolver.java"

======= 632e68c^:"java/javax/el/ListELResolver.java"

======= 632e68c^:"java/javax/el/ListELResolver.java"

======= 632e68c^:"java/javax/el/ListELResolver.java"

======= 632e68c^:"java/javax/el/ListELResolver.java"

======= 632e68c^:"java/javax/el/MapELResolver.java"

======= 632e68c^:"java/javax/el/MapELResolver.java"

======= 632e68c^:"java/javax/el/MapELResolver.java"

======= 632e68c^:"java/javax/el/MapELResolver.java"

======= 632e68c^:"java/javax/el/MapELResolver.java"

======= 632e68c^:"java/javax/el/MapELResolver.java"

======= 632e68c^:"java/javax/el/MapELResolver.java"

======= 632e68c^:"java/javax/el/MapELResolver.java"

======= 632e68c^:"java/javax/el/ResourceBundleELResolver.java"

======= 632e68c^:"java/javax/xml/ws/WebServiceRef.java"


======= 21cd308^:"java/org/apache/catalina/ant/jmx/JMXAccessorTask.java"

                if (type instanceof SimpleType) {
======= 21cd308^:"java/org/apache/catalina/ant/jmx/JMXAccessorTask.java"

                    if (type instanceof SimpleType) {
======= 21cd308^:"java/org/apache/catalina/connector/Request.java"

======= 21cd308^:"java/org/apache/catalina/connector/Request.java"

======= 21cd308^:"java/org/apache/catalina/core/StandardPart.java"

======= 21cd308^:"java/org/apache/catalina/ha/backend/CollectedInfo.java"

        Set set = mBeanServer.queryMBeans(objectName, null);
======= 21cd308^:"java/org/apache/catalina/ha/session/BackupManager.java"

======= 21cd308^:"java/org/apache/catalina/ha/tcp/ReplicationValve.java"

        Object sessions = crossContextSessions.get();
        if(sessions != null && sessions instanceof List
                && ((List<Session>)sessions).size() >0) {
            for(Iterator<Session> iter = ((List<Session>)sessions).iterator(); iter.hasNext() ;) {          
======= 21cd308^:"java/org/apache/catalina/ha/tcp/ReplicationValve.java"

            Object sessions = crossContextSessions.get();
            if(sessions != null && sessions instanceof List
               && ((List<Session>)sessions).size() >0) {
                Iterator<Session> iter = ((List<Session>)sessions).iterator();
======= 21cd308^:"java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java"

======= 21cd308^:"java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java"

        Iterator i = super.entrySet().iterator();
            Map.Entry e = (Map.Entry) i.next();
======= 21cd308^:"java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java"

                        ArrayList list = (ArrayList) msg.getValue();
======= 21cd308^:"java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java"

                Iterator i = super.entrySet().iterator();
                    Map.Entry e = (Map.Entry) i.next();
======= 21cd308^:"java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java"

                Iterator i = super.entrySet().iterator();
                    Map.Entry e = (Map.Entry) i.next();
======= 21cd308^:"java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java"

        Iterator i = super.entrySet().iterator();
            Map.Entry e = (Map.Entry) i.next();
======= 21cd308^:"java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java"

            Iterator i = super.entrySet().iterator();
                Map.Entry e = (Map.Entry) i.next();
======= 21cd308^:"java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java"

            Iterator i = m.entrySet().iterator();
                Map.Entry entry = (Map.Entry)i.next();
======= 21cd308^:"java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java"

                Iterator i = super.entrySet().iterator();
                    Map.Entry e = (Map.Entry) i.next();
======= 21cd308^:"java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java"

            Iterator i = super.entrySet().iterator();
                Map.Entry e = (Map.Entry)i.next();
======= 21cd308^:"java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java"

            Iterator i = super.entrySet().iterator();
                Map.Entry e = (Map.Entry)i.next();
======= 21cd308^:"java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java"

            Iterator it = super.entrySet().iterator();
                Map.Entry e = (Map.Entry) it.next();
======= 21cd308^:"java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java"

            Iterator i = super.entrySet().iterator();
                Map.Entry e = (Map.Entry)i.next();
======= 21cd308^:"java/org/apache/catalina/tribes/transport/bio/MultipointBioSender.java"


======= 92e53f3^:"java/org/apache/catalina/core/StandardContext.java"

======= 92e53f3^:"java/org/apache/catalina/startup/TldConfig.java"

        } // Ignore the other event types - nothing to do 

======= 55e5052^:"java/org/apache/coyote/ajp/AjpAprProcessor.java"

                int charValue = HexUtils.DEC[valueB[i + valueS]];
======= 55e5052^:"java/org/apache/coyote/ajp/AjpProcessor.java"

                int charValue = HexUtils.DEC[valueB[i + valueS]];
======= 55e5052^:"java/org/apache/coyote/http11/Http11AprProcessor.java"

                int charValue = HexUtils.DEC[valueB[i + valueS]];
======= 55e5052^:"java/org/apache/coyote/http11/Http11NioProcessor.java"

                int charValue = HexUtils.DEC[valueB[i + valueS]];
======= 55e5052^:"java/org/apache/coyote/http11/Http11Processor.java"

                int charValue = HexUtils.DEC[valueB[i + valueS]];
======= 55e5052^:"java/org/apache/coyote/http11/filters/ChunkedInputFilter.java"

                if (HexUtils.DEC[buf[pos]] != -1) {
                    result += HexUtils.DEC[buf[pos]];
======= 55e5052^:"java/org/apache/coyote/http11/filters/ChunkedOutputFilter.java"

            chunkLength[pos--] = HexUtils.HEX[digit];
======= 55e5052^:"java/org/apache/tomcat/util/buf/HexUtils.java"

    public static final int[] DEC = {
======= 55e5052^:"java/org/apache/tomcat/util/buf/HexUtils.java"

    public static final byte[] HEX = 
======= 55e5052^:"java/org/apache/tomcat/util/buf/HexUtils.java"

======= 55e5052^:"java/org/apache/tomcat/util/buf/MessageBytes.java"

            buf[end++] = HexUtils.HEX[digit];
======= 55e5052^:"java/org/apache/tomcat/util/buf/MessageBytes.java"

            buf[end++] = HexUtils.HEX[digit];

======= a524187^:"java/org/apache/catalina/tribes/group/GroupChannel.java"

        protected boolean doRun = true;
======= a524187^:"java/org/apache/catalina/tribes/group/interceptors/MessageDispatchInterceptor.java"

    protected boolean run = false;
======= a524187^:"java/org/apache/catalina/tribes/group/interceptors/TcpPingInterceptor.java"

    protected boolean running = true;
======= a524187^:"java/org/apache/catalina/tribes/membership/McastServiceImpl.java"

    protected boolean doRunSender = false;
    protected boolean doRunReceiver = false;
======= a524187^:"java/org/apache/catalina/tribes/membership/McastServiceImpl.java"

        static boolean running = false;

======= c7d7ba2^:"java/org/apache/tomcat/util/net/NioBlockingSelector.java"

        protected boolean run = true;

======= af8a612^:"java/org/apache/naming/NamingContext.java"

                ((Context) entry.value).unbind(name.getSuffix(1));

======= 94c643b^:"java/org/apache/catalina/tribes/group/interceptors/DomainFilterInterceptor.java"

======= 94c643b^:"java/org/apache/catalina/tribes/membership/McastService.java"

======= 94c643b^:"java/org/apache/catalina/tribes/membership/McastService.java"


======= 04b0838^:"java/org/apache/catalina/startup/WebRuleSet.java"


======= 58162ed^:"java/org/apache/catalina/core/NamingContextListener.java"

======= 58162ed^:"java/org/apache/catalina/core/NamingContextListener.java"

                namingResources.addPropertyChangeListener(this);
======= 58162ed^:"java/org/apache/catalina/core/NamingContextListener.java"

     * Process property change events.  Currently, only listens to such events
     * on the <code>NamingResources</code> instance for the global naming
     * resources.
======= 58162ed^:"java/org/apache/catalina/core/NamingContextListener.java"

     * Process a property change on the global naming resources, by making the
======= 58162ed^:"java/org/apache/catalina/core/NamingContextListener.java"

        // NOTE - It seems that the Context for global JNDI resources
        // is left in read-write mode, so we do not have to change it here

======= ae5c640^:"java/org/apache/catalina/session/ManagerBase.java"


======= c0cb61b^:"java/org/apache/tomcat/util/IntrospectionUtils.java"

======= c0cb61b^:"java/org/apache/tomcat/util/net/AbstractEndpoint.java"

                return IntrospectionUtils.setProperty(this,name,value);

======= c53173b^:"java/org/apache/catalina/core/ContainerBase.java"

     * Return the Logger with which this Container is associated.  If there is
     * no associated Logger, return the Logger associated with our parent
     * Container (if any); otherwise return <code>null</code>.

======= 242b6a3^:"java/org/apache/jasper/compiler/JspRuntimeContext.java"

======= 242b6a3^:"java/org/apache/jasper/compiler/JspRuntimeContext.java"

    private int jspReloadCount;
======= 242b6a3^:"java/org/apache/jasper/compiler/JspRuntimeContext.java"

        parentClassLoader = Thread.currentThread().getContextClassLoader();
        if (parentClassLoader == null) {
            parentClassLoader = this.getClass().getClassLoader();
            if (parentClassLoader != null) {
                                               parentClassLoader.toString()));
        initClassPath();
            initSecurity();
======= 242b6a3^:"java/org/apache/jasper/compiler/JspRuntimeContext.java"

    private ServletContext context;
    private Options options;
    private ClassLoader parentClassLoader;
    private PermissionCollection permissionCollection;
    private CodeSource codeSource;                    
    private String classpath;
    private long lastCheck = -1L;
======= 242b6a3^:"java/org/apache/jasper/compiler/JspRuntimeContext.java"

    public synchronized void incrementJspReloadCount() {
        jspReloadCount++;
======= 242b6a3^:"java/org/apache/jasper/compiler/JspRuntimeContext.java"

    public synchronized void setJspReloadCount(int count) {
        this.jspReloadCount = count;
======= 242b6a3^:"java/org/apache/jasper/compiler/JspRuntimeContext.java"

        return jspReloadCount;
======= 242b6a3^:"java/org/apache/jasper/compiler/JspRuntimeContext.java"

    private void initClassPath() {
======= 242b6a3^:"java/org/apache/jasper/compiler/JspRuntimeContext.java"

        classpath = cpath.toString() + cp;
            log.debug("Compilation classpath initialized: " + getClassPath());
    private void initSecurity() {
======= 242b6a3^:"java/org/apache/jasper/compiler/JspRuntimeContext.java"

                codeSource = new CodeSource(url,(Certificate[])null);
                permissionCollection = policy.getPermissions(codeSource);
                    permissionCollection.add
                    permissionCollection.add
                permissionCollection.add(new FilePermission(docBase,"read"));
======= 242b6a3^:"java/org/apache/jasper/compiler/JspRuntimeContext.java"

                    permissionCollection.add
                permissionCollection.add(new FilePermission(
                permissionCollection.add( new RuntimePermission(
======= 242b6a3^:"java/org/apache/jasper/compiler/JspRuntimeContext.java"

                        permissionCollection.add(
                        permissionCollection.add(
                        permissionCollection.add(

======= a1cb0c3^:"java/org/apache/catalina/tribes/io/XByteBuffer.java"

    public static final org.apache.juli.logging.Log log =
    public static final byte[] START_DATA = {70,76,84,50,48,48,50};
    public static final byte[] END_DATA = {84,76,70,50,48,48,51};
======= a1cb0c3^:"java/org/apache/catalina/tribes/io/XByteBuffer.java"

     * 
======= a1cb0c3^:"java/org/apache/catalina/tribes/io/XByteBuffer.java"

======= a1cb0c3^:"java/org/apache/catalina/tribes/io/XByteBuffer.java"

    public static AtomicInteger invokecount = new AtomicInteger(0);

======= 84d49a0^:"java/org/apache/catalina/Authenticator.java"

======= 84d49a0^:"java/org/apache/catalina/authenticator/FormAuthenticator.java"

======= 84d49a0^:"java/org/apache/tomcat/util/net/NioEndpoint.java"

======= 84d49a0^:"modules/jdbc-pool/test/org/apache/tomcat/jdbc/test/TestSuspectTimeout.java"


======= 0d7263a^:"java/org/apache/coyote/http11/AbstractHttp11Protocol.java"

    protected static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(AbstractHttp11Protocol.class);
======= 0d7263a^:"java/org/apache/coyote/http11/Http11NioProtocol.java"

======= 0d7263a^:"java/org/apache/coyote/http11/Http11NioProtocol.java"

======= 0d7263a^:"java/org/apache/coyote/http11/Http11NioProtocol.java"

    protected static final org.apache.juli.logging.Log log
======= 0d7263a^:"java/org/apache/coyote/http11/Http11Protocol.java"

    protected static final org.apache.juli.logging.Log log
======= 0d7263a^:"java/org/apache/coyote/http11/Http11Protocol.java"

======= 0d7263a^:"java/org/apache/coyote/http11/Http11Protocol.java"


======= 38f52b5^:"java/org/apache/catalina/startup/Tomcat.java"

    public static final String[] DEFAULT_MIME_MAPPINGS = {
======= 38f52b5^:"java/org/apache/catalina/tribes/group/interceptors/TwoPhaseCommitInterceptor.java"

    public static final byte[] START_DATA = new byte[] {113, 1, -58, 2, -34, -60, 75, -78, -101, -12, 32, -29, 32, 111, -40, 4};
    public static final byte[] END_DATA = new byte[] {54, -13, 90, 110, 47, -31, 75, -24, -81, -29, 36, 52, -58, 77, -110, 56};
======= 38f52b5^:"java/org/apache/catalina/util/HexUtils.java"

    public static final int[] DEC = {

======= 16c4534^:"java/org/apache/catalina/tribes/io/BufferPool.java"

    public static int DEFAULT_POOL_SIZE = 100*1024*1024; //100MB
======= 16c4534^:"java/org/apache/jasper/compiler/ServletWriter.java"

    public static int TAB_WIDTH = 2;
    public static String SPACES = "                              ";
======= 16c4534^:"modules/tomcat-lite/java/org/apache/tomcat/util/http/MimeMap.java"

    public static Hashtable<String,String> defaultMap =

======= 799b934^:"java/org/apache/catalina/core/ApplicationFilterConfig.java"

    private static org.apache.juli.logging.Log log =
======= 799b934^:"java/org/apache/catalina/core/ContainerBase.java"

    private static org.apache.juli.logging.Log log=
======= 799b934^:"java/org/apache/catalina/core/StandardHost.java"

    private static org.apache.juli.logging.Log log=
======= 799b934^:"java/org/apache/catalina/core/StandardWrapper.java"

    protected static org.apache.juli.logging.Log log=
======= 799b934^:"java/org/apache/catalina/ha/ClusterListener.java"

    public static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(ClusterListener.class);
======= 799b934^:"java/org/apache/catalina/ha/context/ReplicatedContext.java"

    public static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog( ReplicatedContext.class );
======= 799b934^:"java/org/apache/catalina/ha/deploy/FarmWarDeployer.java"

    public static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory
======= 799b934^:"java/org/apache/catalina/ha/deploy/FileMessageFactory.java"

    public static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory
======= 799b934^:"java/org/apache/catalina/ha/deploy/WarWatcher.java"

    public static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory
======= 799b934^:"java/org/apache/catalina/ha/session/BackupManager.java"

    public static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog( BackupManager.class );
======= 799b934^:"java/org/apache/catalina/ha/session/DeltaManager.java"

    public static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(DeltaManager.class);
======= 799b934^:"java/org/apache/catalina/ha/session/DeltaRequest.java"

    public static org.apache.juli.logging.Log log =
======= 799b934^:"java/org/apache/catalina/ha/session/DeltaSession.java"

    public static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(DeltaSession.class);
======= 799b934^:"java/org/apache/catalina/ha/session/JvmRouteBinderValve.java"

    public static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory
======= 799b934^:"java/org/apache/catalina/ha/session/SerializablePrincipal.java"

    protected static org.apache.juli.logging.Log log =
======= 799b934^:"java/org/apache/catalina/ha/session/SimpleTcpReplicationManager.java"

    public static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog( SimpleTcpReplicationManager.class );
======= 799b934^:"java/org/apache/catalina/ha/tcp/ReplicationValve.java"

    private static org.apache.juli.logging.Log log =
======= 799b934^:"java/org/apache/catalina/loader/WebappClassLoader.java"

    protected static org.apache.juli.logging.Log log=
======= 799b934^:"java/org/apache/catalina/loader/WebappLoader.java"

    private static org.apache.juli.logging.Log log=
======= 799b934^:"java/org/apache/catalina/mbeans/MBeanFactory.java"

    private static org.apache.juli.logging.Log log = 
======= 799b934^:"java/org/apache/catalina/security/SecurityConfig.java"

    private static org.apache.juli.logging.Log log=
======= 799b934^:"java/org/apache/catalina/security/SecurityUtil.java"

    private static org.apache.juli.logging.Log log=
======= 799b934^:"java/org/apache/catalina/startup/Catalina.java"

    private static org.apache.juli.logging.Log log=
======= 799b934^:"java/org/apache/catalina/startup/CatalinaProperties.java"

    private static org.apache.juli.logging.Log log=
======= 799b934^:"java/org/apache/catalina/startup/ContextConfig.java"

    protected static org.apache.juli.logging.Log log=
======= 799b934^:"java/org/apache/catalina/startup/DefaultJarScanner.java"

    private static org.apache.juli.logging.Log log=
======= 799b934^:"java/org/apache/catalina/startup/DigesterFactory.java"

   protected static org.apache.juli.logging.Log log = 
======= 799b934^:"java/org/apache/catalina/startup/EngineConfig.java"

    protected static org.apache.juli.logging.Log log=
======= 799b934^:"java/org/apache/catalina/startup/HostConfig.java"

    protected static org.apache.juli.logging.Log log=
======= 799b934^:"java/org/apache/catalina/startup/TldConfig.java"

    private static org.apache.juli.logging.Log log=
======= 799b934^:"java/org/apache/catalina/startup/UserConfig.java"

    private static org.apache.juli.logging.Log log=
======= 799b934^:"java/org/apache/catalina/startup/WebXml.java"

    private static org.apache.juli.logging.Log log=
======= 799b934^:"java/org/apache/catalina/tribes/group/ChannelInterceptorBase.java"

    protected static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(
======= 799b934^:"java/org/apache/catalina/tribes/group/GroupChannel.java"

        protected static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(HeartbeatThread.class);
======= 799b934^:"java/org/apache/catalina/tribes/group/RpcChannel.java"

    protected static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(RpcChannel.class);
======= 799b934^:"java/org/apache/catalina/tribes/group/interceptors/FragmentationInterceptor.java"

    private static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog( FragmentationInterceptor.class );
======= 799b934^:"java/org/apache/catalina/tribes/group/interceptors/MessageDispatchInterceptor.java"

    protected static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(MessageDispatchInterceptor.class);
======= 799b934^:"java/org/apache/catalina/tribes/group/interceptors/TcpFailureDetector.java"

    private static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog( TcpFailureDetector.class );
======= 799b934^:"java/org/apache/catalina/tribes/group/interceptors/TcpPingInterceptor.java"

    protected static org.apache.juli.logging.Log log = 
======= 799b934^:"java/org/apache/catalina/tribes/group/interceptors/ThroughputInterceptor.java"

    protected static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(ThroughputInterceptor.class);
======= 799b934^:"java/org/apache/catalina/tribes/group/interceptors/TwoPhaseCommitInterceptor.java"

    private static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(TwoPhaseCommitInterceptor.class);
======= 799b934^:"java/org/apache/catalina/tribes/io/ObjectReader.java"

    protected static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(ObjectReader.class);
======= 799b934^:"java/org/apache/catalina/tribes/io/XByteBuffer.java"

    public static org.apache.juli.logging.Log log =
======= 799b934^:"java/org/apache/catalina/tribes/membership/McastService.java"

    private static org.apache.juli.logging.Log log =
======= 799b934^:"java/org/apache/catalina/tribes/membership/McastServiceImpl.java"

    private static org.apache.juli.logging.Log log =
======= 799b934^:"java/org/apache/catalina/tribes/tipis/LazyReplicatedMap.java"

    protected static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(LazyReplicatedMap.class);
======= 799b934^:"java/org/apache/catalina/tribes/tipis/ReplicatedMap.java"

    protected static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(ReplicatedMap.class);
======= 799b934^:"java/org/apache/catalina/tribes/transport/bio/BioReceiver.java"

    protected static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(BioReceiver.class);
======= 799b934^:"java/org/apache/catalina/tribes/transport/bio/BioReplicationTask.java"

    protected static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog( BioReplicationTask.class );
======= 799b934^:"java/org/apache/catalina/tribes/transport/bio/BioSender.java"

    private static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(BioSender.class);
======= 799b934^:"java/org/apache/catalina/tribes/transport/bio/util/FastQueue.java"

    private static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(FastQueue.class);
======= 799b934^:"java/org/apache/catalina/tribes/transport/nio/NioReceiver.java"

    protected static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(NioReceiver.class);
======= 799b934^:"java/org/apache/catalina/tribes/transport/nio/NioReplicationTask.java"

    private static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog( NioReplicationTask.class );
======= 799b934^:"java/org/apache/catalina/tribes/transport/nio/NioSender.java"

    protected static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(NioSender.class);
======= 799b934^:"java/org/apache/catalina/tribes/transport/nio/ParallelNioSender.java"

    protected static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(ParallelNioSender.class);
======= 799b934^:"java/org/apache/catalina/tribes/util/Logs.java"

    public static Log MESSAGES = LogFactory.getLog( "org.apache.catalina.tribes.MESSAGES" );
======= 799b934^:"java/org/apache/catalina/util/ExtensionValidator.java"

    private static org.apache.juli.logging.Log log=
======= 799b934^:"java/org/apache/coyote/ajp/AjpAprProcessor.java"

    protected static org.apache.juli.logging.Log log
======= 799b934^:"java/org/apache/coyote/ajp/AjpAprProtocol.java"

    protected static org.apache.juli.logging.Log log =
======= 799b934^:"java/org/apache/coyote/ajp/AjpMessage.java"

    protected static org.apache.juli.logging.Log log =
======= 799b934^:"java/org/apache/coyote/ajp/AjpProcessor.java"

    protected static org.apache.juli.logging.Log log
======= 799b934^:"java/org/apache/coyote/ajp/AjpProtocol.java"

    protected static org.apache.juli.logging.Log log =
======= 799b934^:"java/org/apache/coyote/http11/AbstractHttp11Processor.java"

    protected static org.apache.juli.logging.Log log
======= 799b934^:"java/org/apache/coyote/http11/Http11AprProcessor.java"

    protected static org.apache.juli.logging.Log log
======= 799b934^:"java/org/apache/coyote/http11/Http11AprProtocol.java"

    protected static org.apache.juli.logging.Log log = 
======= 799b934^:"java/org/apache/coyote/http11/Http11NioProtocol.java"

    protected static org.apache.juli.logging.Log log
======= 799b934^:"java/org/apache/coyote/http11/Http11Protocol.java"

    protected static org.apache.juli.logging.Log log
======= 799b934^:"java/org/apache/jasper/JspCompilationContext.java"

    protected org.apache.juli.logging.Log log =
======= 799b934^:"java/org/apache/jasper/compiler/SmapUtil.java"

        private org.apache.juli.logging.Log log=
======= 799b934^:"java/org/apache/jasper/security/SecurityClassLoad.java"

    private static org.apache.juli.logging.Log log=
======= 799b934^:"java/org/apache/jasper/xmlparser/UCSReader.java"

    private org.apache.juli.logging.Log log=
======= 799b934^:"java/org/apache/jasper/xmlparser/UTF8Reader.java"

    private org.apache.juli.logging.Log log=
======= 799b934^:"java/org/apache/naming/NamingContext.java"

    private static org.apache.juli.logging.Log log =
======= 799b934^:"java/org/apache/naming/SelectorContext.java"

    private static org.apache.juli.logging.Log log =
======= 799b934^:"java/org/apache/naming/resources/FileDirContext.java"

    private static org.apache.juli.logging.Log log=
======= 799b934^:"java/org/apache/naming/resources/WARDirContext.java"

    private static org.apache.juli.logging.Log log=
======= 799b934^:"java/org/apache/tomcat/util/DomUtil.java"

    private static org.apache.juli.logging.Log log=
======= 799b934^:"java/org/apache/tomcat/util/IntrospectionUtils.java"

    private static org.apache.juli.logging.Log log=
======= 799b934^:"java/org/apache/tomcat/util/buf/B2CConverter.java"

    private static org.apache.juli.logging.Log log=
======= 799b934^:"java/org/apache/tomcat/util/buf/C2BConverter.java"

    private static org.apache.juli.logging.Log log=
======= 799b934^:"java/org/apache/tomcat/util/buf/StringCache.java"

    private static org.apache.juli.logging.Log log=
======= 799b934^:"java/org/apache/tomcat/util/buf/UEncoder.java"

    private static org.apache.juli.logging.Log log=
======= 799b934^:"java/org/apache/tomcat/util/http/Cookies.java"

    private static org.apache.juli.logging.Log log=
======= 799b934^:"java/org/apache/tomcat/util/http/Parameters.java"

    private static org.apache.juli.logging.Log log=
======= 799b934^:"java/org/apache/tomcat/util/http/mapper/Mapper.java"

    private static org.apache.juli.logging.Log logger =
======= 799b934^:"java/org/apache/tomcat/util/net/SSLImplementation.java"

    private static org.apache.juli.logging.Log logger =
======= 799b934^:"java/org/apache/tomcat/util/net/jsse/JSSEImplementation.java"

    static org.apache.juli.logging.Log logger = 
======= 799b934^:"java/org/apache/tomcat/util/net/jsse/JSSESocketFactory.java"

    static org.apache.juli.logging.Log log =
======= 799b934^:"java/org/apache/tomcat/util/net/jsse/JSSESupport.java"

    private static org.apache.juli.logging.Log log =
======= 799b934^:"modules/tomcat-lite/java/org/apache/tomcat/util/http/mapper/BaseMapper.java"

    private static org.apache.juli.logging.Log logger =
======= 799b934^:"test/org/apache/catalina/tribes/demos/IntrospectionUtils.java"

    private static org.apache.juli.logging.Log log=

======= 57571a7^:"java/org/apache/tomcat/jni/Address.java"

    static public String APR_ANYADDR = "0.0.0.0";

======= e5ae1bc^:"java/org/apache/catalina/tribes/io/ChannelData.java"

    public static ChannelData[] EMPTY_DATA_ARRAY = new ChannelData[0];

======= 5447621^:"java/org/apache/catalina/startup/DefaultJarScanner.java"

======= 5447621^:"java/org/apache/tomcat/JarScannerCallback.java"

======= 5447621^:"modules/jdbc-pool/test/org/apache/tomcat/jdbc/test/TestConcurrency.java"

======= 5447621^:"modules/jdbc-pool/test/org/apache/tomcat/jdbc/test/TestException.java"

======= 5447621^:"modules/jdbc-pool/test/org/apache/tomcat/jdbc/test/driver/ResultSet.java"

======= 5447621^:"modules/tomcat-lite/examples/spring/TomcatSpring.java"

======= 5447621^:"modules/tomcat-lite/java/org/apache/tomcat/addons/Filesystem.java"

======= 5447621^:"modules/tomcat-lite/java/org/apache/tomcat/addons/UserAuthentication.java"

======= 5447621^:"modules/tomcat-lite/java/org/apache/tomcat/addons/UserSessionManager.java"

======= 5447621^:"modules/tomcat-lite/java/org/apache/tomcat/addons/UserTemplateClassMapper.java"

======= 5447621^:"modules/tomcat-lite/java/org/apache/tomcat/integration/ObjectManager.java"

======= 5447621^:"modules/tomcat-lite/java/org/apache/tomcat/integration/jmx/JmxObjectManagerSpi.java"

======= 5447621^:"modules/tomcat-lite/java/org/apache/tomcat/integration/simple/LocalFilesystem.java"

======= 5447621^:"modules/tomcat-lite/java/org/apache/tomcat/integration/simple/Main.java"

======= 5447621^:"modules/tomcat-lite/java/org/apache/tomcat/integration/simple/ServletHelper.java"

======= 5447621^:"modules/tomcat-lite/java/org/apache/tomcat/integration/simple/SimpleObjectManager.java"

======= 5447621^:"modules/tomcat-lite/java/org/apache/tomcat/lite/BodyWriter.java"

======= 5447621^:"modules/tomcat-lite/java/org/apache/tomcat/lite/Connector.java"

======= 5447621^:"modules/tomcat-lite/java/org/apache/tomcat/lite/ContextPreinitListener.java"

======= 5447621^:"modules/tomcat-lite/java/org/apache/tomcat/lite/WebappContextMapper.java"

======= 5447621^:"modules/tomcat-lite/java/org/apache/tomcat/lite/coyote/CoyoteConnector.java"

======= 5447621^:"modules/tomcat-lite/java/org/apache/tomcat/lite/webxml/ServletContextConfig.java"

 * 
======= 5447621^:"modules/tomcat-lite/java/org/apache/tomcat/lite/webxml/TomcatLiteWebXmlConfig.java"

======= 5447621^:"modules/tomcat-lite/java/org/apache/tomcat/lite/webxml/WebXml.java"

======= 5447621^:"modules/tomcat-lite/java/org/apache/tomcat/servlets/file/CopyUtils.java"

======= 5447621^:"modules/tomcat-lite/java/org/apache/tomcat/servlets/file/FileCopyUtils.java"

======= 5447621^:"modules/tomcat-lite/java/org/apache/tomcat/servlets/jsp/PreCompileFilter.java"

======= 5447621^:"modules/tomcat-lite/java/org/apache/tomcat/servlets/jsp/SingleThreadedProxyServlet.java"

======= 5447621^:"modules/tomcat-lite/java/org/apache/tomcat/servlets/sec/UserDB.java"

======= 5447621^:"modules/tomcat-lite/java/org/apache/tomcat/servlets/session/RandomGenerator.java"

======= 5447621^:"modules/tomcat-lite/java/org/apache/tomcat/servlets/util/Range.java"

 * 
======= 5447621^:"modules/tomcat-lite/java/org/apache/tomcat/servlets/util/UrlUtils.java"

======= 5447621^:"modules/tomcat-lite/java/org/apache/tomcat/util/http/HttpRequest.java"

======= 5447621^:"modules/tomcat-lite/java/org/apache/tomcat/util/http/HttpResponse.java"

======= 5447621^:"modules/tomcat-lite/test/org/apache/tomcat/lite/LiteTestHelper.java"

======= 5447621^:"modules/tomcat-lite/test/org/apache/tomcat/lite/PropertiesSpiTest.java"

======= 5447621^:"modules/tomcat-lite/test/org/apache/tomcat/lite/SimpleServlet.java"

======= 5447621^:"modules/tomcat-lite/test/org/apache/tomcat/test/watchdog/WatchdogTest.java"

======= 5447621^:"modules/tomcat-lite/test/org/apache/tomcat/util/buf/UEncoderTest.java"

======= 5447621^:"test/org/apache/TestAll.java"

======= 5447621^:"test/org/apache/catalina/startup/SimpleHttpClient.java"

======= 5447621^:"test/org/apache/catalina/startup/TestWebXml.java"


======= 7849435^:"java/javax/servlet/GenericServlet.java"

     *					that contains configutation
======= 7849435^:"java/javax/servlet/http/HttpServlet.java"

     *                  uses to return the headers to the clien
======= 7849435^:"java/javax/servlet/jsp/JspWriter.java"

     * @throws	   java.io.IOException If an error occured while writing
======= 7849435^:"java/javax/servlet/jsp/JspWriter.java"

     * @throws	   java.io.IOException If an error occured while writing
======= 7849435^:"java/javax/servlet/jsp/JspWriter.java"

     * @throws	   java.io.IOException If an error occured while writing
======= 7849435^:"java/javax/servlet/jsp/JspWriter.java"

     * @throws	   java.io.IOException If an error occured while writing
======= 7849435^:"java/javax/servlet/jsp/JspWriter.java"

     * @throws	   java.io.IOException If an error occured while writing
======= 7849435^:"java/javax/servlet/jsp/JspWriter.java"

     * @throws	   java.io.IOException If an error occured while writing
======= 7849435^:"java/javax/servlet/jsp/JspWriter.java"

     * @throws	   java.io.IOException If an error occured while writing
======= 7849435^:"java/javax/servlet/jsp/JspWriter.java"

     * @throws	   java.io.IOException If an error occured while writing
======= 7849435^:"java/javax/servlet/jsp/JspWriter.java"

     * @throws	   java.io.IOException If an error occured while writing
======= 7849435^:"java/javax/servlet/jsp/JspWriter.java"

     * @throws	   java.io.IOException If an error occured while writing
======= 7849435^:"java/javax/servlet/jsp/JspWriter.java"

     * @throws	   java.io.IOException If an error occured while writing
======= 7849435^:"java/javax/servlet/jsp/JspWriter.java"

     * @throws	   java.io.IOException If an error occured while writing
======= 7849435^:"java/javax/servlet/jsp/JspWriter.java"

     * @throws	   java.io.IOException If an error occured while writing
======= 7849435^:"java/javax/servlet/jsp/JspWriter.java"

     * @throws	   java.io.IOException If an error occured while writing
======= 7849435^:"java/javax/servlet/jsp/JspWriter.java"

     * @throws	   java.io.IOException If an error occured while writing
======= 7849435^:"java/javax/servlet/jsp/JspWriter.java"

     * @throws	   java.io.IOException If an error occured while writing
======= 7849435^:"java/javax/servlet/jsp/JspWriter.java"

     * @throws	   java.io.IOException If an error occured while writing
======= 7849435^:"java/javax/servlet/jsp/JspWriter.java"

     * @throws	   java.io.IOException If an error occured while writing
======= 7849435^:"java/javax/servlet/jsp/JspWriter.java"

     * @throws	   java.io.IOException If an error occured while writing
======= 7849435^:"java/javax/servlet/jsp/PageContext.java"

     * This method is kept for backwards compatiblity reasons.  Newly
======= 7849435^:"java/javax/servlet/jsp/SkipPageException.java"

 * the pagein the case where one tag invokes another (as can be
======= 7849435^:"java/javax/servlet/jsp/tagext/JspFragment.java"

     * @throws javax.servlet.jsp.JspException Thrown if an error occured
======= 7849435^:"java/javax/servlet/jsp/tagext/PageData.java"

 * when being pased to a TagLibraryValidator instance.
======= 7849435^:"java/javax/servlet/jsp/tagext/PageData.java"

     * The stream is encoded in UTF-8.  Recall tht the XML view of a 
======= 7849435^:"java/javax/servlet/jsp/tagext/SimpleTagSupport.java"

     * This addititional constraint can be exploited by a
======= 7849435^:"java/javax/servlet/jsp/tagext/TagLibraryInfo.java"

     * If a tag library is imported more than once and bound to different prefices, 
======= 7849435^:"java/javax/servlet/jsp/tagext/TagLibraryValidator.java"

 * The JSP container is reponsible for locating an appropriate
======= 7849435^:"java/javax/servlet/jsp/tagext/TagSupport.java"

     * This addititional constraint can be exploited by a

======= 39a78f4^:"java/org/apache/coyote/ActionCode.java"

    /** Action id, useable in switches and table indexes
======= 39a78f4^:"java/org/apache/coyote/ProtocolHandler.java"

 * This is the main interface to be implemented by a coyoute connector.
 * Adapter is the main interface to be impleneted by a coyote servlet container.
======= 39a78f4^:"java/org/apache/coyote/Request.java"

    // Time of the request - usefull to avoid repeated calls to System.currentTime
======= 39a78f4^:"java/org/apache/coyote/Request.java"

     * Get the instance id (or JVM route). Curently Ajp is sending it with each
     * 'negociated' at config time so both tomcat and apache share the same name.
======= 39a78f4^:"java/org/apache/coyote/RequestGroupInfo.java"

 *  It is currently used only as a JMX artifact, to agregate the data
======= 39a78f4^:"java/org/apache/coyote/RequestInfo.java"

 * about the requests beeing processed.
======= 39a78f4^:"java/org/apache/coyote/RequestInfo.java"

    // This is usefull for long-running requests only
======= 39a78f4^:"java/org/apache/coyote/Response.java"

     * Called explicitely by user to set the Content-Language and
======= 39a78f4^:"java/org/apache/coyote/Response.java"

     * @param charset String containing the name of the chararacter encoding.
======= 39a78f4^:"java/org/apache/coyote/ajp/AjpAprProcessor.java"

            // 4 - hardcoded, byte[] marshalling overhead
======= 39a78f4^:"java/org/apache/coyote/ajp/AjpAprProtocol.java"

     * Adapter which will process the requests recieved by this endpoint.
======= 39a78f4^:"java/org/apache/coyote/ajp/AjpProcessor.java"

            // 4 - hardcoded, byte[] marshalling overhead
======= 39a78f4^:"java/org/apache/coyote/ajp/AjpProtocol.java"

     * Adapter which will process the requests recieved by this endpoint.
======= 39a78f4^:"java/org/apache/coyote/http11/AbstractHttp11Processor.java"

     * Content delimitator for the request (if false, the connection will
======= 39a78f4^:"java/org/apache/coyote/http11/AbstractHttp11Processor.java"

     * Minimum contentsize to make compression.
======= 39a78f4^:"java/org/apache/coyote/http11/AbstractHttp11Processor.java"

     * Add a mime-type which will be compressable
======= 39a78f4^:"java/org/apache/coyote/http11/AbstractHttp11Processor.java"

     * Set compressable mime-type list (this method is best when used with
======= 39a78f4^:"java/org/apache/coyote/http11/AbstractHttp11Processor.java"

        // Check if content is not allready gzipped
======= 39a78f4^:"java/org/apache/coyote/http11/AbstractHttp11Processor.java"

        // If force mode, allways compress (test purposes only)
======= 39a78f4^:"java/org/apache/coyote/http11/AbstractHttp11Processor.java"

        // Check if suffisant len to trig the compression
======= 39a78f4^:"java/org/apache/coyote/http11/AbstractInputBuffer.java"

     * @throws IOException an undelying I/O error occured
======= 39a78f4^:"java/org/apache/coyote/http11/AbstractOutputBuffer.java"

     * @throws IOException an undelying I/O error occured
======= 39a78f4^:"java/org/apache/coyote/http11/AbstractOutputBuffer.java"

     * @throws IOException an undelying I/O error occured
======= 39a78f4^:"java/org/apache/coyote/http11/AbstractOutputBuffer.java"

     * @throws IOException an undelying I/O error occured
======= 39a78f4^:"java/org/apache/coyote/http11/AbstractOutputBuffer.java"

     * This method will write the contents of the specyfied message bytes 
======= 39a78f4^:"java/org/apache/coyote/http11/AbstractOutputBuffer.java"

     * This method will write the contents of the specyfied message bytes 
======= 39a78f4^:"java/org/apache/coyote/http11/AbstractOutputBuffer.java"

     * This method will write the contents of the specyfied char 
======= 39a78f4^:"java/org/apache/coyote/http11/AbstractOutputBuffer.java"

     * This method will write the contents of the specyfied byte 
======= 39a78f4^:"java/org/apache/coyote/http11/AbstractOutputBuffer.java"

     * This method will write the contents of the specyfied String to the 
======= 39a78f4^:"java/org/apache/coyote/http11/Http11AprProcessor.java"

     * Content delimitator for the request (if false, the connection will
======= 39a78f4^:"java/org/apache/coyote/http11/Http11AprProcessor.java"

     * Minimum contentsize to make compression.
======= 39a78f4^:"java/org/apache/coyote/http11/Http11AprProcessor.java"

     * Add a mime-type which will be compressable
======= 39a78f4^:"java/org/apache/coyote/http11/Http11AprProcessor.java"

     * Set compressable mime-type list (this method is best when used with
======= 39a78f4^:"java/org/apache/coyote/http11/Http11AprProcessor.java"

     * Set compressable mime-type list
======= 39a78f4^:"java/org/apache/coyote/http11/Http11AprProcessor.java"

            // Acknowlege request
======= 39a78f4^:"java/org/apache/coyote/http11/Http11AprProcessor.java"

            // Default is what the socket tells us. Overriden if a host is
======= 39a78f4^:"java/org/apache/coyote/http11/Http11AprProcessor.java"

        // Check if content is not allready gzipped
======= 39a78f4^:"java/org/apache/coyote/http11/Http11AprProcessor.java"

        // If force mode, allways compress (test purposes only)
======= 39a78f4^:"java/org/apache/coyote/http11/Http11AprProcessor.java"

        // Check if suffisant len to trig the compression
======= 39a78f4^:"java/org/apache/coyote/http11/Http11NioProcessor.java"

            // Acknowlege request
======= 39a78f4^:"java/org/apache/coyote/http11/Http11NioProcessor.java"

            // Default is what the socket tells us. Overriden if a host is
======= 39a78f4^:"java/org/apache/coyote/http11/Http11Processor.java"

            // Acknowlege request
======= 39a78f4^:"java/org/apache/coyote/http11/Http11Processor.java"

            // Default is what the socket tells us. Overriden if a host is
======= 39a78f4^:"java/org/apache/coyote/http11/InternalAprInputBuffer.java"

     * @throws IOException an undelying I/O error occured
======= 39a78f4^:"java/org/apache/coyote/http11/InternalAprInputBuffer.java"

     * read operations, or if the given buffer is not big enough to accomodate
======= 39a78f4^:"java/org/apache/coyote/http11/InternalAprInputBuffer.java"

     * Fill the internal buffer using data from the undelying input stream.
======= 39a78f4^:"java/org/apache/coyote/http11/InternalAprOutputBuffer.java"

     * @throws IOException an undelying I/O error occured
======= 39a78f4^:"java/org/apache/coyote/http11/InternalAprOutputBuffer.java"

     * @throws IOException an undelying I/O error occured
======= 39a78f4^:"java/org/apache/coyote/http11/InternalAprOutputBuffer.java"

     * Send an acknoledgement.
======= 39a78f4^:"java/org/apache/coyote/http11/InternalAprOutputBuffer.java"

     * @throws IOException an undelying I/O error occured
======= 39a78f4^:"java/org/apache/coyote/http11/InternalAprOutputBuffer.java"

     * @throws IOException an undelying I/O error occured
======= 39a78f4^:"java/org/apache/coyote/http11/InternalAprOutputBuffer.java"

     * This method will write the contents of the specyfied message bytes 
======= 39a78f4^:"java/org/apache/coyote/http11/InternalAprOutputBuffer.java"

     * This method will write the contents of the specyfied message bytes 
======= 39a78f4^:"java/org/apache/coyote/http11/InternalAprOutputBuffer.java"

     * This method will write the contents of the specyfied char 
======= 39a78f4^:"java/org/apache/coyote/http11/InternalAprOutputBuffer.java"

     * This method will write the contents of the specyfied byte 
======= 39a78f4^:"java/org/apache/coyote/http11/InternalAprOutputBuffer.java"

     * This method will write the contents of the specyfied String to the 
======= 39a78f4^:"java/org/apache/coyote/http11/InternalInputBuffer.java"

     * read operations, or if the given buffer is not big enough to accomodate
======= 39a78f4^:"java/org/apache/coyote/http11/InternalNioInputBuffer.java"

     * read operations, or if the given buffer is not big enough to accomodate
======= 39a78f4^:"java/org/apache/coyote/http11/InternalNioInputBuffer.java"

                    if (!fill(true, false)) //reques line parsing
======= 39a78f4^:"java/org/apache/coyote/http11/InternalNioOutputBuffer.java"

     * @throws IOException an undelying I/O error occured
======= 39a78f4^:"java/org/apache/coyote/http11/InternalNioOutputBuffer.java"

     * @throws IOException an undelying I/O error occured
======= 39a78f4^:"java/org/apache/coyote/http11/InternalNioOutputBuffer.java"

     * Send an acknoledgement.
======= 39a78f4^:"java/org/apache/coyote/http11/InternalNioOutputBuffer.java"

     * @throws IOException an undelying I/O error occured
======= 39a78f4^:"java/org/apache/coyote/http11/InternalOutputBuffer.java"

     * Send an acknoledgement.
======= 39a78f4^:"java/org/apache/coyote/http11/InternalOutputBuffer.java"

     * @throws IOException an undelying I/O error occured
======= 39a78f4^:"java/org/apache/coyote/http11/filters/VoidInputFilter.java"

     * Set the associated reauest.
======= 39a78f4^:"java/org/apache/el/parser/AstValue.java"

        // if our base is null (we know there are more properites to evaluate)
======= 39a78f4^:"java/org/apache/el/parser/ParseException.java"

   * followng this token will (therefore) be the first error token.

======= 6ce7032^:"java/org/apache/jasper/Constants.java"

     * Default URLs to download the pluging for Netscape and IE.
======= 6ce7032^:"java/org/apache/jasper/EmbeddedServletOptions.java"

     * Is the generation of SMAP info for JSR45 debuggin suppressed?
======= 6ce7032^:"java/org/apache/jasper/EmbeddedServletOptions.java"

     * Background JSP compile thread check intervall
======= 6ce7032^:"java/org/apache/jasper/EmbeddedServletOptions.java"

     * Is the generation of SMAP info for JSR45 debuggin suppressed?
======= 6ce7032^:"java/org/apache/jasper/JasperException.java"

 * convienient to catch just this at the top-level. 
======= 6ce7032^:"java/org/apache/jasper/JspC.java"

     * Is the generation of SMAP info for JSR45 debuggin suppressed?
======= 6ce7032^:"java/org/apache/jasper/JspC.java"

     * Obtain JSP configuration informantion specified in web.xml.
======= 6ce7032^:"java/org/apache/jasper/JspC.java"

                    // If there is no acceptible candidate, uriRoot will
======= 6ce7032^:"java/org/apache/jasper/JspCompilationContext.java"

            // strip the basde slash since it will be combined with the
======= 6ce7032^:"java/org/apache/jasper/JspCompilationContext.java"

        // a root directory deperator char
======= 6ce7032^:"java/org/apache/jasper/JspCompilationContext.java"

     * derived package name directly mirrors the file heirachy of the JSP page.
======= 6ce7032^:"java/org/apache/jasper/Options.java"

     * A tag library is 'exposed' either explicitely in 
     * web.xml or implicitely via the uri tag in the TLD 
======= 6ce7032^:"java/org/apache/jasper/Options.java"

     * Obtain JSP configuration informantion specified in web.xml.  
======= 6ce7032^:"java/org/apache/jasper/compiler/Collector.java"

 * Collect info about the page and nodes, and make them availabe through
======= 6ce7032^:"java/org/apache/jasper/compiler/Compiler.java"

     * has dependencies, the check is also extended to its dependeants, and so
     * on. This method can by overidden by a subclasses of Compiler.
======= 6ce7032^:"java/org/apache/jasper/compiler/ELFunctionMapper.java"

 * Instead of a global mapper, a mapper is used for ecah call to EL
======= 6ce7032^:"java/org/apache/jasper/compiler/Generator.java"

     * Generation of static initializers in preamble. For example, dependant
======= 6ce7032^:"java/org/apache/jasper/compiler/Generator.java"

             * Check if bean is alredy there
======= 6ce7032^:"java/org/apache/jasper/compiler/Generator.java"

                // Initilaize local variables used in this method.
======= 6ce7032^:"java/org/apache/jasper/compiler/Generator.java"

            int srcLine = 0; // relative to starting srouce line
======= 6ce7032^:"java/org/apache/jasper/compiler/Generator.java"

         * shortName and endcoded to make the resultant string a valid Java
======= 6ce7032^:"java/org/apache/jasper/compiler/JarScannerFactory.java"

 * impementation.
======= 6ce7032^:"java/org/apache/jasper/compiler/JarScannerFactory.java"

     * Obtain the {@link JarScanner} associated with the specificed {@link
======= 6ce7032^:"java/org/apache/jasper/compiler/JspConfig.java"

                        // The url patterns are reconstructed as the follwoing:
======= 6ce7032^:"java/org/apache/jasper/compiler/JspDocumentParser.java"

    // Flag set to delay incrmenting tagDependentNesting until jsp:body
======= 6ce7032^:"java/org/apache/jasper/compiler/JspReader.java"

     * gets a uniq identifier (which is the index in the array of source
======= 6ce7032^:"java/org/apache/jasper/compiler/JspReader.java"

        // is not set to null just for convience, for it maybe used to
======= 6ce7032^:"java/org/apache/jasper/compiler/JspRuntimeContext.java"

 * is dependent upon.  If a dpendent file changes the JSP page
======= 6ce7032^:"java/org/apache/jasper/compiler/JspRuntimeContext.java"

     * applicaiton context.
======= 6ce7032^:"java/org/apache/jasper/compiler/JspRuntimeContext.java"

     * Process a "destory" event for this web application context.
======= 6ce7032^:"java/org/apache/jasper/compiler/JspUtil.java"

     * replacment of '$' with '.' of a binary name would not work, as '$' is a
======= 6ce7032^:"java/org/apache/jasper/compiler/Node.java"

 * An internal data representation of a JSP page or a JSP docuement (XML). Also
 * included here is a visitor class for tranversing nodes.
======= 6ce7032^:"java/org/apache/jasper/compiler/Node.java"

         * page's bom.
======= 6ce7032^:"java/org/apache/jasper/compiler/Node.java"

                // Mandatary attribute "name" will be checked in Validator
======= 6ce7032^:"java/org/apache/jasper/compiler/Node.java"

         *            The postion of the source line, relative to the line at
======= 6ce7032^:"java/org/apache/jasper/compiler/Node.java"

     * Auxillary classes used in Node
======= 6ce7032^:"java/org/apache/jasper/compiler/TagFileProcessor.java"

         * Perform miscellean checks after the nodes are visited.
======= 6ce7032^:"java/org/apache/jasper/compiler/TagFileProcessor.java"

     *            the url for the Jar containign the tag file 
======= 6ce7032^:"java/org/apache/jasper/compiler/TagFileProcessor.java"

                    // dependency exists. The circularily dependant tag
======= 6ce7032^:"java/org/apache/jasper/compiler/TagFileProcessor.java"

            // Add the dependants for this tag file to its parent's
            // dependant list. The only reliable dependency information
======= 6ce7032^:"java/org/apache/jasper/compiler/TagFileProcessor.java"

     * assumed to have been proccessed and encapsulated as TagFileInfo in the
======= 6ce7032^:"java/org/apache/jasper/compiler/TagLibraryInfoImpl.java"

     * @return TagInfo correspoding to tag file directives
======= 6ce7032^:"java/org/apache/jasper/compiler/TextOptimizer.java"

         * The following directis are ignored in text concatenation
======= 6ce7032^:"java/org/apache/jasper/compiler/TldLocationsCache.java"

    // Constructor and Initilizations
======= 6ce7032^:"java/org/apache/jasper/compiler/Validator.java"

 * some page global value (such as those from page direcitves) are stored, for
======= 6ce7032^:"java/org/apache/jasper/compiler/Validator.java"

             * The bodyconet of a SimpleTag cannot be JSP.
======= 6ce7032^:"java/org/apache/jasper/compiler/Validator.java"

                                    // The String litteral must be castable to what is declared as type
======= 6ce7032^:"java/org/apache/jasper/compiler/tagplugin/TagPluginContext.java"

 * This interface allows the plugin author to make inqueries about the
======= 6ce7032^:"java/org/apache/jasper/compiler/tagplugin/TagPluginContext.java"

     * used to declare an innter class, a method, or a class variable.
======= 6ce7032^:"java/org/apache/jasper/compiler/tagplugin/TagPluginContext.java"

     * Generate codesto evaluate value of a attribute in the custom tag
======= 6ce7032^:"java/org/apache/jasper/compiler/tagplugin/TagPluginContext.java"

     * is deemed too compilicated for optimization.
======= 6ce7032^:"java/org/apache/jasper/runtime/BodyContentImpl.java"

     * mehtod will not throw an IOException if the buffer has already been
======= 6ce7032^:"java/org/apache/jasper/runtime/JspContextWrapper.java"

======= 6ce7032^:"java/org/apache/jasper/servlet/JspServlet.java"

     * @param request The servlet requset we are processing
======= 6ce7032^:"java/org/apache/jasper/servlet/JspServletWrapper.java"

     * when compiling tag files with circular dependencies.  A prototpe
======= 6ce7032^:"java/org/apache/jasper/tagplugins/jstl/core/Import.java"

            //assign appropriate value tp the charset
======= 6ce7032^:"java/org/apache/jasper/util/Enumerator.java"

 * Constructors are provided to easliy create such wrappers.
======= 6ce7032^:"java/org/apache/jasper/xmlparser/UTF8Reader.java"

        //       error. By signalling the error on the next block read we
======= 6ce7032^:"java/org/apache/jasper/xmlparser/XMLEncodingDetector.java"

     * invocation when it's read() method is inovked, but uses the
======= 6ce7032^:"java/org/apache/juli/ClassLoaderLogManager.java"

     * @throws IOException Errot
======= 6ce7032^:"java/org/apache/juli/OneLineFormatter.java"

 * it easier to grep the logs. The only excpetion is stacktraces which are
 * always preceeded by whitespace to make it simple to skip them.
======= 6ce7032^:"java/org/apache/juli/logging/DirectJDKLog.java"

                // it is also possible that the user modifed jre/lib/logging.properties - 
======= 6ce7032^:"java/org/apache/juli/logging/DirectJDKLog.java"

    // is bad - design by comitee can be really bad ! The impact on performance of 
======= 6ce7032^:"java/org/apache/juli/logging/Log.java"

 * The implemention should ensure, though, that this ordering behaves
======= 6ce7032^:"java/org/apache/juli/logging/LogFactory.java"

 * Note that this implementation is not just a wrapper arround JDK logging ( like
======= 6ce7032^:"java/org/apache/juli/logging/LogFactory.java"

     * For example, running the following ant scriplet:
======= 6ce7032^:"java/org/apache/juli/logging/LogFactory.java"

     * the specified object's class has overidden the toString method.

======= 21e86e6^:"java/org/apache/naming/NamingEntry.java"

     * The type instance variable is used to avoid unsing RTTI when doing
======= 21e86e6^:"java/org/apache/naming/NamingService.java"

     * Retruns the Catalina component name.
======= 21e86e6^:"java/org/apache/naming/NamingServiceMBean.java"

     * Retruns the JNDI component name.
======= 21e86e6^:"java/org/apache/naming/ResourceRef.java"

     * @param auth Resource authetication
======= 21e86e6^:"java/org/apache/naming/ResourceRef.java"

     * @param auth Resource authetication
======= 21e86e6^:"java/org/apache/naming/factory/EjbFactory.java"

     * Crete a new EJB instance.
======= 21e86e6^:"java/org/apache/naming/factory/OpenEjbFactory.java"

     * Crete a new EJB instance using OpenEJB.
======= 21e86e6^:"java/org/apache/naming/factory/ResourceEnvFactory.java"

     * Crete a new Resource env instance.
======= 21e86e6^:"java/org/apache/naming/factory/TransactionFactory.java"

 * Object factory for User trasactions.
======= 21e86e6^:"java/org/apache/naming/factory/TransactionFactory.java"

     * Crete a new User transaction instance.
======= 21e86e6^:"java/org/apache/naming/resources/BaseDirContext.java"

     * @return an enumeration of SearchResults of the objects that satisy the 
======= 21e86e6^:"java/org/apache/naming/resources/DirContextURLConnection.java"

     * Connect to the DirContext, and retrive the bound object, as well as
======= 21e86e6^:"java/org/apache/naming/resources/FileDirContext.java"

     * @return an enumeration of SearchResults of the objects that satisy the
======= 21e86e6^:"java/org/apache/naming/resources/FileDirContext.java"

     * @return Vector containg NamingEntry objects
======= 21e86e6^:"java/org/apache/naming/resources/ProxyDirContext.java"

        // Retriving object
======= 21e86e6^:"java/org/apache/naming/resources/Resource.java"

 * Encapsultes the contents of a resource.
======= 21e86e6^:"java/org/apache/naming/resources/ResourceCache.java"

     * Find a map elemnt given its name in a sorted array of map elements.
======= 21e86e6^:"java/org/apache/naming/resources/WARDirContext.java"

     * @return an enumeration of SearchResults of the objects that satisy the 

======= ed97da7^:"java/org/apache/tomcat/jni/BIOCallback.java"

     * @param buf containg the bytes to write.
======= ed97da7^:"java/org/apache/tomcat/jni/BIOCallback.java"

     * @return String with up to len bytes readed
======= ed97da7^:"java/org/apache/tomcat/jni/Directory.java"

     * @param perm Permissions for the new direcoty.
======= ed97da7^:"java/org/apache/tomcat/jni/Directory.java"

     * @param perm Permissions for the new direcoty.
======= ed97da7^:"java/org/apache/tomcat/jni/File.java"

     * Write data from aray of byte arrays to the specified file.
======= ed97da7^:"java/org/apache/tomcat/jni/File.java"

     * Write data from aray of byte arrays to the specified file,
======= ed97da7^:"java/org/apache/tomcat/jni/File.java"

     * @return The readed character
======= ed97da7^:"java/org/apache/tomcat/jni/File.java"

     * This function should be used in preference to explict manipulation
======= ed97da7^:"java/org/apache/tomcat/jni/File.java"

     * @param file The file to retrive flags.
======= ed97da7^:"java/org/apache/tomcat/jni/Local.java"

     *                the number of instances is unlimite.
======= ed97da7^:"java/org/apache/tomcat/jni/OS.java"

     * Get the name of the system default characer set.
======= ed97da7^:"java/org/apache/tomcat/jni/OS.java"

     * data can't be retreved on this system.
======= ed97da7^:"java/org/apache/tomcat/jni/Poll.java"

    public static final int APR_POLLNVAL = 0x040; /** Descriptior invalid */
======= ed97da7^:"java/org/apache/tomcat/jni/Poll.java"

     * descriptor is signalled in apr_pollset_poll().
======= ed97da7^:"java/org/apache/tomcat/jni/Poll.java"

     * @param descriptors Array of signalled descriptors (output parameter)
     *        The desctiptor array must be two times the size of pollset.
     * @return Number of signalled descriptors (output parameter)
======= ed97da7^:"java/org/apache/tomcat/jni/Poll.java"

     * @param descriptors Array of signalled descriptors (output parameter)
     *        The desctiptor array must be the size of pollset.
     * @return Number of signalled descriptors (output parameter)
======= ed97da7^:"java/org/apache/tomcat/jni/Poll.java"

     *        The desctiptor array must be two times the size of pollset.
======= ed97da7^:"java/org/apache/tomcat/jni/Pool.java"

     * Object attached to the pool will be globaly referenced
     * untill the pool is cleared or dataSet is called with the null data.
======= ed97da7^:"java/org/apache/tomcat/jni/Proc.java"

    /** a restart is occuring, perform any necessary cleanup (including
======= ed97da7^:"java/org/apache/tomcat/jni/Proc.java"

    /** a health check is occuring, for most maintainence functions
======= ed97da7^:"java/org/apache/tomcat/jni/Proc.java"

     * Allocate apr_proc_t stucture from pool
======= ed97da7^:"java/org/apache/tomcat/jni/SSL.java"

     * a hardware accellerator card for crypto operations.
======= ed97da7^:"java/org/apache/tomcat/jni/SSL.java"

     * Close BIO and derefrence callback object
======= ed97da7^:"java/org/apache/tomcat/jni/SSL.java"

     * @param file File contatining DH params.
======= ed97da7^:"java/org/apache/tomcat/jni/SSLContext.java"

     * Asssociate BIOCallback for input or output data capture.
     * [WARN]   -- Varning messages
======= ed97da7^:"java/org/apache/tomcat/jni/SSLContext.java"

     * renegotation with the reconfigured Cipher Suite after the HTTP request
======= ed97da7^:"java/org/apache/tomcat/jni/SSLContext.java"

     *                 is encrypted, password prompt will be dispayed.
======= ed97da7^:"java/org/apache/tomcat/jni/SSLContext.java"

     * is established. In per-directory context it forces a SSL renegotation with
======= ed97da7^:"java/org/apache/tomcat/jni/Shm.java"

     * Create and make accessable a shared memory segment.
     *         Not all plaforms support anonymous shared memory segments, but in
     *         some cases it is prefered over other types of shared memory
======= ed97da7^:"java/org/apache/tomcat/jni/Socket.java"

     *           elapsess with no data read or written
======= ed97da7^:"java/org/apache/tomcat/jni/Socket.java"

     * Private method for geting the socket struct members
     * @param socket The soocket to use
======= ed97da7^:"java/org/apache/tomcat/jni/Socket.java"

     * @return The stucture member address
======= ed97da7^:"java/org/apache/tomcat/jni/Time.java"

    /** number of miliseconds per microsecond */
======= ed97da7^:"java/org/apache/tomcat/jni/Time.java"

     * number of microseconds since 00:00:00 january 1, 1970 UTC
======= ed97da7^:"java/org/apache/tomcat/jni/User.java"

     * @return APR_SUCCESS if the apr_uid_t strutures identify the same user,
======= ed97da7^:"java/org/apache/tomcat/jni/User.java"

     * @return APR_SUCCESS if the apr_gid_t strutures identify the same group,
======= ed97da7^:"java/org/apache/tomcat/util/DomUtil.java"

    /** Get the trimed text content of a node or null if there is no text
======= ed97da7^:"java/org/apache/tomcat/util/DomUtil.java"

     * @param parent lookup direct childs
======= ed97da7^:"java/org/apache/tomcat/util/IntrospectionUtils.java"

                    // check if it's overriden
======= ed97da7^:"java/org/apache/tomcat/util/buf/B2CConverter.java"

 *  This uses the standard JDK mechansim - a reader - but provides mechanisms
======= ed97da7^:"java/org/apache/tomcat/util/buf/B2CConverter.java"

    /** Overriden - will do nothing but reset internal state.
======= ed97da7^:"java/org/apache/tomcat/util/buf/B2CConverter.java"

======= ed97da7^:"java/org/apache/tomcat/util/buf/ByteChunk.java"

    /** Input interface, used when the buffer is emptiy
======= ed97da7^:"java/org/apache/tomcat/util/buf/ByteChunk.java"

     *  If -1 or not set, the buffer will grow undefinitely.
======= ed97da7^:"java/org/apache/tomcat/util/buf/ByteChunk.java"

     *  You can also call it explicitely to force the data to be written.
======= ed97da7^:"java/org/apache/tomcat/util/buf/ByteChunk.java"

             it's safer to use the "clasical" new String().
======= ed97da7^:"java/org/apache/tomcat/util/buf/C2BConverter.java"

 *  This uses the standard JDK mechansim - a writer - but provides mechanisms
======= ed97da7^:"java/org/apache/tomcat/util/buf/C2BConverter.java"

 *  Special writer class, where close() is overritten. The default implementation
 *  would set byteOutputter to null, and the writter can't be recycled. 
======= ed97da7^:"java/org/apache/tomcat/util/buf/C2BConverter.java"

    // stream with flush() and close(). overriden.
======= ed97da7^:"java/org/apache/tomcat/util/buf/C2BConverter.java"

    /** Overriden - will do nothing but reset internal state.
======= ed97da7^:"java/org/apache/tomcat/util/buf/C2BConverter.java"

======= ed97da7^:"java/org/apache/tomcat/util/buf/CharChunk.java"

 * Utilities to manipluate char chunks. While String is
 * designed as imutable and secure objects.
======= ed97da7^:"java/org/apache/tomcat/util/buf/CharChunk.java"

    // -1: grow undefinitely
======= ed97da7^:"java/org/apache/tomcat/util/buf/CharChunk.java"

     *  If -1 or not set, the buffer will grow undefinitely.
======= ed97da7^:"java/org/apache/tomcat/util/buf/MessageBytes.java"

======= ed97da7^:"java/org/apache/tomcat/util/buf/MessageBytes.java"

======= ed97da7^:"java/org/apache/tomcat/util/buf/MessageBytes.java"

======= ed97da7^:"java/org/apache/tomcat/util/buf/StringCache.java"

                    // while waiting fot the lock, just return the toString value
======= ed97da7^:"java/org/apache/tomcat/util/buf/UDecoder.java"

======= ed97da7^:"java/org/apache/tomcat/util/buf/UEncoder.java"

     * Utility funtion to re-encode the URL.
======= ed97da7^:"java/org/apache/tomcat/util/collections/MultiMap.java"

    /** Create a new, unitialized entry. 
======= ed97da7^:"java/org/apache/tomcat/util/collections/MultiMapNamesEnumeration.java"

    Each nextElement() is O(n) ( a comparation is
    This is less frequesnt than add() -
======= ed97da7^:"java/org/apache/tomcat/util/collections/MultiMapNamesEnumeration.java"

    // we allways to toString and unique.
======= ed97da7^:"java/org/apache/tomcat/util/digester/AbstractRulesImpl.java"

    /** Namespace uri to assoicate with subsequent <code>Rule</code>'s */
======= ed97da7^:"java/org/apache/tomcat/util/digester/CallMethodRule.java"

     *  zero for a single argument from the body of ths element
     *  (if you wish to use a primitive type, specify the corresonding
======= ed97da7^:"java/org/apache/tomcat/util/digester/CallMethodRule.java"

     *  zero for a single argument from the body of ths element
     *  (if you wish to use a primitive type, specify the corresonding
======= ed97da7^:"java/org/apache/tomcat/util/digester/CallMethodRule.java"

     *  zero for a single argument from the body of ths element
     *  (if you wish to use a primitive type, specify the corresonding
======= ed97da7^:"java/org/apache/tomcat/util/digester/CallMethodRule.java"

     *  zero for a single argument from the body of ths element
     *  (if you wish to use a primitive type, specify the corresonding
======= ed97da7^:"java/org/apache/tomcat/util/digester/Digester.java"

     * properties only affect the SAXParser and emtpy constructor.
======= ed97da7^:"java/org/apache/tomcat/util/digester/Digester.java"

     * Set the publid id of the current file being parse.
======= ed97da7^:"java/org/apache/tomcat/util/digester/Digester.java"

     *  (if you wish to use a primitive type, specify the corresonding
======= ed97da7^:"java/org/apache/tomcat/util/digester/Digester.java"

     *  (if you wish to use a primitive type, specify the corresonding
======= ed97da7^:"java/org/apache/tomcat/util/digester/Digester.java"

     *  (if you wish to use a primitive type, specify the corresonding
======= ed97da7^:"java/org/apache/tomcat/util/digester/Digester.java"

     *  (if you wish to use a primitive type, specify the corresonding
======= ed97da7^:"java/org/apache/tomcat/util/digester/FactoryCreateRule.java"

 * needed before the object can be created.  A common senario is for the
======= ed97da7^:"java/org/apache/tomcat/util/digester/GenericParser.java"

     * Create a <code>SAXParser</code> configured to support XML Scheman and DTD
======= ed97da7^:"java/org/apache/tomcat/util/digester/NodeCreateRule.java"

 *   only the XML content under the element the rule was trigged on.</li>
======= ed97da7^:"java/org/apache/tomcat/util/digester/RuleSet.java"

 * class that imlements this interface:</p>
======= ed97da7^:"java/org/apache/tomcat/util/digester/RulesBase.java"

     * order that they were orginally registered.
======= ed97da7^:"java/org/apache/tomcat/util/digester/SetNextRule.java"

     *  (if you wish to use a primitive type, specify the corresonding
======= ed97da7^:"java/org/apache/tomcat/util/digester/SetNextRule.java"

     *  (if you wish to use a primitive type, specify the corresonding
======= ed97da7^:"java/org/apache/tomcat/util/digester/SetNextRule.java"

     * to introspect the relevent objects so that the right method can be called.
======= ed97da7^:"java/org/apache/tomcat/util/digester/SetPropertiesRule.java"

     * <p>Constructor allows attribute->property mapping to be overriden.</p>
======= ed97da7^:"java/org/apache/tomcat/util/digester/SetPropertiesRule.java"

     * property name, then this indicates that the attibute should be ignored.</p>
======= ed97da7^:"java/org/apache/tomcat/util/digester/SetPropertyRule.java"

     *  have a writeable property of the specified name
======= ed97da7^:"java/org/apache/tomcat/util/digester/SetRootRule.java"

     *  (if you wish to use a primitive type, specify the corresonding
======= ed97da7^:"java/org/apache/tomcat/util/digester/SetRootRule.java"

     *  (if you wish to use a primitive type, specify the corresonding
======= ed97da7^:"java/org/apache/tomcat/util/digester/SetRootRule.java"

     * to introspect the relevent objects so that the right method can be called.
======= ed97da7^:"java/org/apache/tomcat/util/digester/SetTopRule.java"

     *  (if you wish to use a primitive type, specify the corresonding
======= ed97da7^:"java/org/apache/tomcat/util/digester/SetTopRule.java"

     *  (if you wish to use a primitive type, specify the corresonding
======= ed97da7^:"java/org/apache/tomcat/util/digester/SetTopRule.java"

     * to introspect the relevent objects so that the right method can be called.
======= ed97da7^:"java/org/apache/tomcat/util/digester/WithDefaultsRulesWrapper.java"

    /** Sets digeseter using these Rules */
======= ed97da7^:"java/org/apache/tomcat/util/http/ContentType.java"

 * Usefull methods for Content-Type processing
======= ed97da7^:"java/org/apache/tomcat/util/http/Cookies.java"

    /** Register a new, unitialized cookie. Cookies are recycled, and
======= ed97da7^:"java/org/apache/tomcat/util/http/Cookies.java"

                    // at the last qoute. This must be dealt with
======= ed97da7^:"java/org/apache/tomcat/util/http/Cookies.java"

                        // getToken returns the position at the delimeter
======= ed97da7^:"java/org/apache/tomcat/util/http/Cookies.java"

     * Given a starting position after an initial quote chracter, this gets
======= ed97da7^:"java/org/apache/tomcat/util/http/MimeHeaders.java"

 *  For input headers it is possible to use the MessageByte for Fileds - so no GC
======= ed97da7^:"java/org/apache/tomcat/util/http/MimeHeaders.java"

    Each nextElement() is O(n) ( a comparation is
    This is less frequesnt than add() -
======= ed97da7^:"java/org/apache/tomcat/util/http/fileupload/FileItem.java"

     *         for storing the contensts of the file.
======= ed97da7^:"java/org/apache/tomcat/util/http/fileupload/MultipartStream.java"

 *   close-delimiter := "--" boudary "--"<br>
======= ed97da7^:"java/org/apache/tomcat/util/http/fileupload/MultipartStream.java"

     * The index of last valid characer in the buffer + 1.
======= ed97da7^:"java/org/apache/tomcat/util/http/fileupload/MultipartStream.java"

        // We prepend CR/LF to the boundary to chop trailng CR/LF from
======= ed97da7^:"java/org/apache/tomcat/util/http/fileupload/MultipartStream.java"

            // Read boundary - if succeded, the stream contains an
======= ed97da7^:"java/org/apache/tomcat/util/http/mapper/Mapper.java"

     * Find a map elemnt given its name in a sorted array of map elements.
======= ed97da7^:"java/org/apache/tomcat/util/http/mapper/Mapper.java"

     * Find a map elemnt given its name in a sorted array of map elements.
======= ed97da7^:"java/org/apache/tomcat/util/http/mapper/Mapper.java"

     * Find a map elemnt given its name in a sorted array of map elements.
======= ed97da7^:"java/org/apache/tomcat/util/http/mapper/Mapper.java"

     * Find a map elemnt given its name in a sorted array of map elements.
======= ed97da7^:"java/org/apache/tomcat/util/modeler/AttributeInfo.java"

     * Is this attribute writeable by management applications?
======= ed97da7^:"java/org/apache/tomcat/util/modeler/BaseModelMBean.java"

 *  - some of the gratuituous flexibility removed - instead this is more predictive and
======= ed97da7^:"java/org/apache/tomcat/util/modeler/BaseModelMBean.java"

 *     supportd.</li>
======= ed97da7^:"java/org/apache/tomcat/util/modeler/BaseModelMBean.java"

======= ed97da7^:"java/org/apache/tomcat/util/modeler/Registry.java"

    /** List of managed byeans, keyed by class name
======= ed97da7^:"java/org/apache/tomcat/util/modeler/Registry.java"

     * This method should be used to explicitely load metadata - but this is not
     * in the same pacakge.
======= ed97da7^:"java/org/apache/tomcat/util/modeler/modules/MbeansDescriptorsIntrospectionSource.java"

     * @param getAttMap The readable attributess map
======= ed97da7^:"java/org/apache/tomcat/util/net/AprEndpoint.java"

     * Use endfile for sending static files.
======= ed97da7^:"java/org/apache/tomcat/util/net/AprEndpoint.java"

            // exit, otherwise parallel descturction of sockets which are still
======= ed97da7^:"java/org/apache/tomcat/util/net/AprEndpoint.java"

         * be 62 (reocmpiling APR is necessary to remove this limitation).
======= ed97da7^:"java/org/apache/tomcat/util/net/AprEndpoint.java"

            // exit, otherwise parallel descturction of sockets which are still
======= ed97da7^:"java/org/apache/tomcat/util/net/AprEndpoint.java"

         * @param data containing the reference to the data which should be snet
======= ed97da7^:"java/org/apache/tomcat/util/net/AprEndpoint.java"

                                // Close the socket, as the reponse would be incomplete
======= ed97da7^:"java/org/apache/tomcat/util/net/AprEndpoint.java"

                                // Close the socket, as the reponse would be incomplete
======= ed97da7^:"java/org/apache/tomcat/util/net/DefaultServerSocketFactory.java"

 * plain ol' server sockets.
======= ed97da7^:"java/org/apache/tomcat/util/net/NioEndpoint.java"

                                //invokations for both read and write on separate threads
======= ed97da7^:"java/org/apache/tomcat/util/net/NioEndpoint.java"

                        reg(key,ka,0);//avoid multiple calls, this gets reregistered after invokation
======= ed97da7^:"java/org/apache/tomcat/util/net/ServerSocketFactory.java"

     *  Note that the "prefered" mechanism is to
======= ed97da7^:"java/org/apache/tomcat/util/net/jsse/JSSESocketFactory.java"

     * Gets the intialized trust managers.

======= c52b1ba^:"java/javax/servlet/SessionCookieConfig.java"

     * @param maxAge
======= c52b1ba^:"java/org/apache/catalina/ant/jmx/JMXAccessorCreateTask.java"

     * @param classLoader The classLoader to set.
======= c52b1ba^:"java/org/apache/catalina/core/ApplicationFilterChain.java"

     * Invoke the next filter in this chain, passing the specified request
     * and response.  If there are no more filters in this chain, invoke
     * the <code>service()</code> method of the servlet itself.
     *
     * @param request The servlet request we are processing
     * @param response The servlet response we are creating
     *
======= c52b1ba^:"java/org/apache/catalina/core/StandardContextValve.java"

     * @param valveContext Valve context used to forward to the next Valve
======= c52b1ba^:"java/org/apache/catalina/core/StandardContextValve.java"

     * @param valveContext Valve context used to forward to the next Valve
======= c52b1ba^:"java/org/apache/catalina/core/StandardEngineValve.java"

     * @param valveContext Valve context used to forward to the next Valve
======= c52b1ba^:"java/org/apache/catalina/core/StandardEngineValve.java"

     * @param valveContext Valve context used to forward to the next Valve
======= c52b1ba^:"java/org/apache/catalina/core/StandardHostValve.java"

     * @param valveContext Valve context used to forward to the next Valve
======= c52b1ba^:"java/org/apache/catalina/core/StandardHostValve.java"

     * @param valveContext Valve context used to forward to the next Valve
======= c52b1ba^:"java/org/apache/catalina/core/StandardWrapperValve.java"

     * @param valveContext Valve context used to forward to the next Valve
======= c52b1ba^:"java/org/apache/catalina/ha/ClusterManager.java"

    * @param sendClusterDomainOnly Flag value.
======= c52b1ba^:"java/org/apache/catalina/ha/session/DeltaSession.java"

    public DeltaSession() {
        this(null);
    }
======= c52b1ba^:"java/org/apache/catalina/ha/tcp/SimpleTcpCluster.java"

     * @param message
======= c52b1ba^:"java/org/apache/catalina/manager/StatusTransformer.java"

======= c52b1ba^:"java/org/apache/catalina/manager/StatusTransformer.java"

======= c52b1ba^:"java/org/apache/catalina/manager/StatusTransformer.java"

     * Process a GET request for the specified resource.
     * @param request The servlet request we are processing
     * @param response The servlet response we are creating
     * @exception IOException if an input/output error occurs
     * @exception ServletException if a servlet-specified error occurs
======= c52b1ba^:"java/org/apache/catalina/realm/CombinedRealm.java"

     * @param nOnce Unique (or supposedly unique) token which has been used
     * @param realm Realm name
            String once, String nc, String cnonce, String qop,
======= c52b1ba^:"java/org/apache/catalina/realm/CombinedRealm.java"

            authenticatedUser = realm.authenticate(username, clientDigest, once,
======= c52b1ba^:"java/org/apache/catalina/realm/LockOutRealm.java"

     * @param nOnce Unique (or supposedly unique) token which has been used
     * @param realm Realm name
            String once, String nc, String cnonce, String qop,
======= c52b1ba^:"java/org/apache/catalina/realm/LockOutRealm.java"

                once, nc, cnonce, qop, realmName, md5a2);
======= c52b1ba^:"java/org/apache/catalina/startup/Embedded.java"

     * Enables or disables naming support.
     * @param useNaming The new use naming value
======= c52b1ba^:"java/org/apache/catalina/startup/WebRuleSet.java"

     * @param bodyText The body text of this element
======= c52b1ba^:"java/org/apache/catalina/startup/WebRuleSet.java"

     * @param bodyText The body text of this element
======= c52b1ba^:"java/org/apache/catalina/tribes/group/ChannelCoordinator.java"

     * @param options int - sender options, see class documentation
     * @return ClusterMessage[] - the replies from the members, if any.
======= c52b1ba^:"java/org/apache/catalina/tribes/io/ChannelData.java"

     * @param sets the message options
======= c52b1ba^:"java/org/apache/catalina/tribes/io/ChannelData.java"

     * @param b byte[]
======= c52b1ba^:"java/org/apache/catalina/tribes/io/ObjectReader.java"

     * @param off offset
     * @return number of messages that was sent to callback
======= c52b1ba^:"java/org/apache/catalina/tribes/io/ReplicationStream.java"

     * @param classLoader The class loader used to instantiate objects
======= c52b1ba^:"java/org/apache/catalina/tribes/io/XByteBuffer.java"

     * @param off - the offset to extract data from
======= c52b1ba^:"java/org/apache/catalina/tribes/io/XByteBuffer.java"

     * @param indata - the message data to be contained within the package
     * @param compressed - compression flag for the indata buffer
======= c52b1ba^:"java/org/apache/catalina/tribes/io/XByteBuffer.java"

     * Converts an integer to four bytes
     * @param n - the integer
     * @return - four bytes in an array
======= c52b1ba^:"java/org/apache/catalina/tribes/io/XByteBuffer.java"

    /**
     * 
     * @param <any> long
     * @return use
     */
======= c52b1ba^:"java/org/apache/catalina/tribes/io/XByteBuffer.java"

     * @param compress boolean
     * @return 
======= c52b1ba^:"java/org/apache/catalina/tribes/membership/McastServiceImpl.java"

     * @param disableLoopbackMode - disable loopbackMode
======= c52b1ba^:"java/org/apache/catalina/tribes/membership/McastServiceImpl.java"

     * @throws Exception
======= c52b1ba^:"java/org/apache/catalina/tribes/membership/MemberImpl.java"

     * The number of milliseconds since this members was
======= c52b1ba^:"java/org/apache/catalina/tribes/membership/MemberImpl.java"

     * @param name - the name of this member, cluster unique
     * @param domain - the cluster domain name of this member
======= c52b1ba^:"java/org/apache/catalina/tribes/membership/MemberImpl.java"

     * @throws Exception
======= c52b1ba^:"java/org/apache/catalina/tribes/membership/Membership.java"

     * @param name - has to be the name of the local member. Used to filter the local member from the cluster membership
======= c52b1ba^:"java/org/apache/catalina/tribes/transport/bio/util/LinkObject.java"

     * @param key The key
======= c52b1ba^:"java/org/apache/catalina/tribes/transport/nio/NioReceiver.java"

     * @throws Exception
======= c52b1ba^:"java/org/apache/catalina/users/MemoryUserDatabase.java"

     * @param pathname The new pathname
======= c52b1ba^:"java/org/apache/catalina/valves/RemoteIpValve.java"

     * @param remoteIPHeader
======= c52b1ba^:"java/org/apache/catalina/valves/RemoteIpValve.java"

     * Comma delimited list of proxies that are trusted when they appear in the {@link #remoteIPHeader} header. Can be expressed as a
======= c52b1ba^:"java/org/apache/coyote/http11/Http11Processor.java"

     * @param socket Socket from which the HTTP requests will be read
======= c52b1ba^:"java/org/apache/jasper/compiler/ParserController.java"

     * @param jarFile The JAR file from which to read the included resource,
======= c52b1ba^:"java/org/apache/jasper/compiler/TagFileProcessor.java"

     * @param tagfile
======= c52b1ba^:"java/org/apache/jasper/compiler/TldLocationsCache.java"

     * @param redeployMode if true, then the compiler will allow redeploying 
     * a tag library from the same jar, at the expense of slowing down the
     * server a bit. Note that this may only work on JDK 1.3.1_01a and later,
     * because of JDK bug 4211817 fixed in this release.
     * If redeployMode is false, a faster but less capable mode will be used.
======= c52b1ba^:"java/org/apache/naming/HandlerRef.java"

    /**
     * Service Reference.
     * 
     * @param serviceClass Service class
     */
    /**
     * Service Reference.
     * 
     * @param serviceClass Service class
     */
======= c52b1ba^:"java/org/apache/naming/ServiceRef.java"

    /**
     * Service Reference.
     * 
     * @param serviceClass Service class
     */
    /**
     * Service Reference.
     * 
     * @param serviceClass Service class
     */
======= c52b1ba^:"java/org/apache/naming/resources/BaseDirContext.java"

     * @param path The path to the desired resource
======= c52b1ba^:"java/org/apache/tomcat/buildutil/Txt2Html.java"

     * @param fileset The fileset to be converted.
======= c52b1ba^:"java/org/apache/tomcat/buildutil/Txt2Html.java"

     * @param BuildException Thrown if an error occurs during execution of
======= c52b1ba^:"java/org/apache/tomcat/util/digester/SetPropertiesRule.java"

     * @param name the local name if the parser is namespace aware, or just 
======= c52b1ba^:"java/org/apache/tomcat/util/digester/SetPropertyRule.java"

     * @param name the local name if the parser is namespace aware, or just 
======= c52b1ba^:"java/org/apache/tomcat/util/modeler/BaseModelMBean.java"

    /**
     * Instantiates this MBean instance from data found in the persistent
     * store.  The data loaded could include attribute and operation values.
     * This method should be called during construction or initialization
     * of the instance, and before the MBean is registered with the
     * <code>MBeanServer</code>.
     *
     * <p><strong>IMPLEMENTATION NOTE</strong> - This implementation does
     * not support persistence.</p>
     *
     * @exception InstanceNotFoundException if the managed resource object
     *  cannot be found
     * @exception MBeanException if the initializer of the object throws
     *  an exception
     * @exception RuntimeOperationsException if an exception is reported
     *  by the persistence mechanism
     */
======= c52b1ba^:"java/org/apache/tomcat/util/modeler/BaseModelMBean.java"

    /**
     * Capture the current state of this MBean instance and write it out
     * to the persistent store.  The state stored could include attribute
     * and operation values.  If one of these methods of persistence is not
     * supported, a "service not found" exception will be thrown.
     *
     * <p><strong>IMPLEMENTATION NOTE</strong> - This implementation does
     * not support persistence.</p>
     *
     * @exception InstanceNotFoundException if the managed resource object
     *  cannot be found
     * @exception MBeanException if the initializer of the object throws
     *  an exception, or persistence is not supported
     * @exception RuntimeOperationsException if an exception is reported
     *  by the persistence mechanism
     */
======= c52b1ba^:"java/org/apache/tomcat/util/modeler/BaseModelMBean.java"

    /** Set the type of the mbean. This is used as a key to locate
     * the description in the Registry.
     *
     * @param type the type of classname of the modeled object
     */
    /** Set the type of the mbean. This is used as a key to locate
     * the description in the Registry.
     *
     * @param type the type of classname of the modeled object
     */
======= c52b1ba^:"java/org/apache/tomcat/util/modeler/BaseModelMBean.java"

    /** Set the type of the mbean. This is used as a key to locate
     * the description in the Registry.
     */
======= c52b1ba^:"java/org/apache/tomcat/util/modeler/BaseModelMBean.java"

    /**
     * Create and return a default <code>ModelMBeanInfo</code> object.
     */
======= c52b1ba^:"java/org/apache/tomcat/util/modeler/BaseModelMBean.java"

    /**
     * Is the specified <code>ModelMBeanInfo</code> instance valid?
     *
     * <p><strong>IMPLEMENTATION NOTE</strong> - This implementation
     * does not check anything, but this method can be overridden
     * as required.</p>
     *
     * @param info The <code>ModelMBeanInfo object to check
     */
======= c52b1ba^:"java/org/apache/tomcat/util/net/NioBlockingSelector.java"

     * @param selector Selector - the selector to use for blocking, if null then a busy read will be initiated
======= c52b1ba^:"java/org/apache/tomcat/util/net/SSLSessionManager.java"

     * Invalidate the specified SSL session
     * @param   sessionId   The ID of the session to invalidate.

======= ab3620c^:"java/org/apache/catalina/startup/Tomcat.java"

======= ab3620c^:"java/org/apache/catalina/startup/Tomcat.java"

     * @return
======= ab3620c^:"java/org/apache/catalina/startup/Tomcat.java"

     *  @param host NULL for the 'default' host
     *  @param dir base dir for the context, for static files. Must exist, 
======= ab3620c^:"java/org/apache/catalina/startup/Tomcat.java"

     * Static version of {@link #addServlet(String, String, String)
======= ab3620c^:"java/org/apache/catalina/startup/Tomcat.java"

     * Static version of {@link #addServlet(String, String, Servlet).
======= ab3620c^:"java/org/apache/catalina/startup/Tomcat.java"

     * @see addUser 
======= ab3620c^:"java/org/apache/catalina/startup/Tomcat.java"

            host = getHost();
        host.addChild(ctx);
                                     String url, String path) 
           throws ServletException {
======= ab3620c^:"java/org/apache/catalina/startup/Tomcat.java"

            host = getHost();
        host.addChild(ctx);
======= ab3620c^:"java/org/apache/catalina/startup/Tomcat.java"

     * Static version of {@link #initWebappDefaults(String)

======= 18c0edc^:"java/org/apache/catalina/Cluster.java"

     * cluster that this mananger is participating in the cluster.
======= 18c0edc^:"java/org/apache/catalina/CometEvent.java"

     *  Note that the response object and depedent OutputStream and Writer are still 
======= 18c0edc^:"java/org/apache/catalina/CometEvent.java"

     * request. The servlet should perform any needed cleanup as if it had recieved
======= 18c0edc^:"java/org/apache/catalina/CometProcessor.java"

 * asynchronous IO, recieving events when data is available for reading, and
======= 18c0edc^:"java/org/apache/catalina/Context.java"

     * Remove the tag library location forthe specified tag library URI.
======= 18c0edc^:"java/org/apache/catalina/Context.java"

     * @return true if namespace awarenes is enabled.
======= 18c0edc^:"java/org/apache/catalina/Context.java"

     * @return true if namespace awarenes is enabled.
======= 18c0edc^:"java/org/apache/catalina/Host.java"

     * this host's child webapps should be discovred and automatically 
======= 18c0edc^:"java/org/apache/catalina/Host.java"

     * that this host's child webapps should be discovred and automatically 
======= 18c0edc^:"java/org/apache/catalina/Host.java"

     * @return true if namespace awarenes is enabled.
======= 18c0edc^:"java/org/apache/catalina/Pipeline.java"

     * Valve for this Pipeline (if any).  Prioer to setting the basic Valve,
======= 18c0edc^:"java/org/apache/catalina/Pipeline.java"

     * @exception IllegalArgumentException if the specifie Valve refuses to be
======= 18c0edc^:"java/org/apache/catalina/ant/BaseRedirectorHelperTask.java"

     * always sent to the log. Default is that otput is sent only to
======= 18c0edc^:"java/org/apache/catalina/ant/BaseRedirectorHelperTask.java"

         * this is to prevent that we attempt to reuse the previuosly 
======= 18c0edc^:"java/org/apache/catalina/ant/BaseRedirectorHelperTask.java"

     * pritorities to output stream.
======= 18c0edc^:"java/org/apache/catalina/ant/BaseRedirectorHelperTask.java"

     * pritorities to output stream, then flushes the stream.
======= 18c0edc^:"java/org/apache/catalina/ant/JKStatusUpdateTask.java"

     * check correct lb and worker pararmeter
======= 18c0edc^:"java/org/apache/catalina/ant/jmx/JMXAccessorQueryTask.java"

 * The poperty manager.lenght show the size of the result 
 * and with manager.[0..lenght].name the 
======= 18c0edc^:"java/org/apache/catalina/ant/jmx/JMXAccessorQueryTask.java"

     *  with <em>attributebindung=true</em> you can save all attributes from all found objects
======= 18c0edc^:"java/org/apache/catalina/ant/jmx/JMXAccessorSetTask.java"

     * Get MBean Attriute from Mbean Server
======= 18c0edc^:"java/org/apache/catalina/ant/jmx/JMXAccessorTask.java"

     * option is that you delemit your result with a delimiter
======= 18c0edc^:"java/org/apache/catalina/authenticator/AuthenticatorBase.java"

 * so that it can be ommitted in environments that do not require these
======= 18c0edc^:"java/org/apache/catalina/authenticator/FormAuthenticator.java"

     * we signalled after successful authentication?
======= 18c0edc^:"java/org/apache/catalina/authenticator/FormAuthenticator.java"

            // The browser isn't expecting this conditional reposponse now.
======= 18c0edc^:"java/org/apache/catalina/authenticator/SingleSignOn.java"

 * web application is propogated to other web applications in the same
======= 18c0edc^:"java/org/apache/catalina/connector/Connector.java"

     * The server port to which we should pretent requests to this Connector
======= 18c0edc^:"java/org/apache/catalina/connector/CoyoteAdapter.java"

     * Look for SSL sesison ID if required. Only look for SSL Session ID if it
======= 18c0edc^:"java/org/apache/catalina/connector/CoyoteInputStream.java"

     * which would permantely disable us.
======= 18c0edc^:"java/org/apache/catalina/connector/CoyoteReader.java"

 * Coyote implementation of the buffred reader.
======= 18c0edc^:"java/org/apache/catalina/connector/OutputBuffer.java"

 * Coyote is mostly the Processor's responsability).
======= 18c0edc^:"java/org/apache/catalina/connector/Request.java"

     * The preferred Locales assocaited with this Request.
======= 18c0edc^:"java/org/apache/catalina/connector/Request.java"

     * @param URIConverter the new URI connverter
======= 18c0edc^:"java/org/apache/catalina/connector/Request.java"

                // Error valve will pick this execption up and display it to user
======= 18c0edc^:"java/org/apache/catalina/connector/Request.java"

                // Error valve will pick this execption up and display it to user
======= 18c0edc^:"java/org/apache/catalina/connector/Request.java"

     * Set the set of cookies recieved with this Request.
======= 18c0edc^:"java/org/apache/catalina/connector/Request.java"

        // Identify the Realm we will use for checking role assignmenets
======= 18c0edc^:"java/org/apache/catalina/connector/RequestFacade.java"

         * in place, so that performance won't suffer in the nonsecure case
======= 18c0edc^:"java/org/apache/catalina/connector/RequestFacade.java"

         * in place, so that performance won't suffer in the nonsecure case
======= 18c0edc^:"java/org/apache/catalina/connector/Response.java"

     * @param charset String containing the name of the chararacter encoding.
======= 18c0edc^:"java/org/apache/catalina/connector/Response.java"

        //from the appendCookieValue invokation
======= 18c0edc^:"java/org/apache/catalina/deploy/ContextService.java"

     * The instanciation of the handler have to be done.
======= 18c0edc^:"java/org/apache/catalina/filters/WebdavFixFilter.java"

 *   <li>Cancelling the first authentication dialog box and then trying to
======= 18c0edc^:"java/org/apache/catalina/ha/authenticator/ClusterSingleSignOn.java"

 * authenticates to one web application is propogated to other web applications and
======= 18c0edc^:"java/org/apache/catalina/ha/backend/CollectedInfo.java"

 * send the muticast merssage using the format...
======= 18c0edc^:"java/org/apache/catalina/ha/backend/HeartbeatListener.java"

 * send the muticast merssage using the format...
======= 18c0edc^:"java/org/apache/catalina/ha/deploy/FarmWarDeployer.java"

     * Modifcation from watchDir war detected!
======= 18c0edc^:"java/org/apache/catalina/ha/deploy/FarmWarDeployer.java"

     * War remvoe from watchDir
======= 18c0edc^:"java/org/apache/catalina/ha/deploy/FileMessageFactory.java"

     * The number of the last message procssed. Message IDs are 1 based.
======= 18c0edc^:"java/org/apache/catalina/ha/deploy/WarWatcher.java"

     * check for modification and send notifcation to listener
======= 18c0edc^:"java/org/apache/catalina/ha/session/DeltaManager.java"

     * Set the maximum number of actives Sessions allowed, or -1 for no limit.
======= 18c0edc^:"java/org/apache/catalina/ha/session/DeltaManager.java"

     * FIXME replace currently sessions with same id without notifcation.
======= 18c0edc^:"java/org/apache/catalina/ha/session/DeltaManager.java"

     * Exipre all find sessions.
======= 18c0edc^:"java/org/apache/catalina/ha/session/DeltaRequest.java"

 * a request is executed. These actions will then translate into invokations of methods 
======= 18c0edc^:"java/org/apache/catalina/ha/session/DeltaSession.java"

     * Last time the session was replicatd, used for distributed expiring of
======= 18c0edc^:"java/org/apache/catalina/ha/session/JvmRouteBinderValve.java"

 * nodes. After all that, the session stickyness will work directly to the
======= 18c0edc^:"java/org/apache/catalina/ha/session/JvmRouteBinderValve.java"

     * get name of failed reqeust session attribute
======= 18c0edc^:"java/org/apache/catalina/ha/session/JvmRouteBinderValve.java"

     * Handle jvmRoute stickyness after tomcat instance failed. After this
     * SessionID change propage to the other cluster nodes.
======= 18c0edc^:"java/org/apache/catalina/ha/session/JvmRouteBinderValve.java"

        // FIXME: setId trigger session Listener, but only chance to registiert manager with correct id!
======= 18c0edc^:"java/org/apache/catalina/ha/session/JvmRouteBinderValve.java"

            // now sending the change to all other clusternode!
======= 18c0edc^:"java/org/apache/catalina/ha/session/JvmRouteBinderValve.java"

        // set orginal sessionid at request, to allow application detect the
======= 18c0edc^:"java/org/apache/catalina/ha/session/SessionMessageImpl.java"

     * @return the event type in a string representating, useful for debugging
======= 18c0edc^:"java/org/apache/catalina/ha/tcp/ReplicationValve.java"

     * reset the active statitics 
======= 18c0edc^:"java/org/apache/catalina/ha/tcp/ReplicationValve.java"

     * @param request current request after responce is generated
======= 18c0edc^:"java/org/apache/catalina/ha/tcp/SimpleTcpCluster.java"

     * emitt Failure Event to LifecylceListener
     *            receveived Message
======= 18c0edc^:"java/org/apache/catalina/loader/WebappClassLoader.java"

     * <code>URL</code> refering to it, or <code>null</code> if this resource
======= 18c0edc^:"java/org/apache/catalina/loader/WebappClassLoader.java"

     * Validate a classname. As per SRV.9.7.2, we must restict loading of 
======= 18c0edc^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

     * @param path Context path of the application to be undeployd
======= 18c0edc^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

    // limited number of subsitutions MessageFormat can process
    // (maximium of 10).
======= 18c0edc^:"java/org/apache/catalina/manager/JMXProxyServlet.java"

                // can't be null - I thinl
======= 18c0edc^:"java/org/apache/catalina/manager/ManagerServlet.java"

     * @param idle Expire all sessions with idle time &ge; idle for this context
======= 18c0edc^:"java/org/apache/catalina/manager/host/HTMLHostManagerServlet.java"

    // limited number of subsitutions MessageFormat can process
    // (maximium of 10).
======= 18c0edc^:"java/org/apache/catalina/manager/util/SessionUtils.java"

     * JSF check the browser meta tag "accept languages" to choose what langage to display.
======= 18c0edc^:"java/org/apache/catalina/mbeans/ContextEnvironmentMBean.java"

        // cannot use side-efects.  It's removed and added back each time 
======= 18c0edc^:"java/org/apache/catalina/mbeans/ContextResourceLinkMBean.java"

        // cannot use side-efects.  It's removed and added back each time 
======= 18c0edc^:"java/org/apache/catalina/mbeans/ContextResourceMBean.java"

        // cannot use side-efects.  It's removed and added back each time 
======= 18c0edc^:"java/org/apache/catalina/mbeans/MBeanFactory.java"

     * @param contextName MBean Name of the comonent to remove
======= 18c0edc^:"java/org/apache/catalina/mbeans/MBeanFactory.java"

     * @param name MBean Name of the comonent to remove
======= 18c0edc^:"java/org/apache/catalina/mbeans/MBeanFactory.java"

     * @param name MBean Name of the comonent to remove
======= 18c0edc^:"java/org/apache/catalina/mbeans/MBeanFactory.java"

     * @param name MBean Name of the comonent to remove
======= 18c0edc^:"java/org/apache/catalina/mbeans/MBeanFactory.java"

     * @param name MBean Name of the comonent to remove
======= 18c0edc^:"java/org/apache/catalina/mbeans/MBeanFactory.java"

     * @param name MBean Name of the comonent to remove
======= 18c0edc^:"java/org/apache/catalina/mbeans/ServerLifecycleListener.java"

     * Semicolon separated list of paths containing MBean desciptor resources.
======= 18c0edc^:"java/org/apache/catalina/mbeans/ServerLifecycleListener.java"

        // Create the MBean for the Connnector itself
======= 18c0edc^:"java/org/apache/catalina/realm/DataSourceRealm.java"

======= 18c0edc^:"java/org/apache/catalina/realm/DataSourceRealm.java"

     * The column in the user table that holds the user's credintials
======= 18c0edc^:"java/org/apache/catalina/realm/JAASCallbackHandler.java"

     * @param qop           Quality of protection aplied to the message
======= 18c0edc^:"java/org/apache/catalina/realm/JAASCallbackHandler.java"

     * Quality of protection aplied to the message.
======= 18c0edc^:"java/org/apache/catalina/realm/JAASCallbackHandler.java"

     * {@link TextInputCallback} is ued to pass the various additional
======= 18c0edc^:"java/org/apache/catalina/realm/JAASMemoryLoginModule.java"

 *     "catalina.base" system property) or absolute pahtname to the
======= 18c0edc^:"java/org/apache/catalina/realm/JAASMemoryLoginModule.java"

     * <code>null</code> if validation falied.
======= 18c0edc^:"java/org/apache/catalina/realm/JAASMemoryLoginModule.java"

     * @return <code>true</code> in all cases because thie
======= 18c0edc^:"java/org/apache/catalina/realm/JAASRealm.java"

 * <p>Implmentation of <b>Realm</b> that authenticates users via the <em>Java
======= 18c0edc^:"java/org/apache/catalina/realm/JAASRealm.java"

 * <li>As this Realm iterates over the <code>Princpals</code> returned by
======= 18c0edc^:"java/org/apache/catalina/realm/JAASRealm.java"

     * @param qop           Quality of protection aplied to the message
======= 18c0edc^:"java/org/apache/catalina/realm/JDBCRealm.java"

======= 18c0edc^:"java/org/apache/catalina/realm/JDBCRealm.java"

     * The column in the user table that holds the user's credintials
======= 18c0edc^:"java/org/apache/catalina/realm/JDBCRealm.java"

        // Number of tries is the numebr of attempts to connect to the database
        // This needs rewritten wuth better pooling support, the existing code
======= 18c0edc^:"java/org/apache/catalina/realm/JDBCRealm.java"

        // Number of tries is the numebr of attempts to connect to the database
        // This needs rewritten wuth better pooling support, the existing code
======= 18c0edc^:"java/org/apache/catalina/realm/JDBCRealm.java"

        // Number of tries is the numebr of attempts to connect to the database
======= 18c0edc^:"java/org/apache/catalina/realm/JNDIRealm.java"

            // Occassionally the directory context will timeout.  Try one more
======= 18c0edc^:"java/org/apache/catalina/realm/LockOutRealm.java"

 * associated user storage mecahisms. It achieves this by recording all failed
======= 18c0edc^:"java/org/apache/catalina/realm/RealmBase.java"

        // Should be overriten in JAASRealm - to avoid pretty inefficient conversions
======= 18c0edc^:"java/org/apache/catalina/security/SecurityUtil.java"

     * @param targetType <code>Class</code> array used to instanciate a i
======= 18c0edc^:"java/org/apache/catalina/security/SecurityUtil.java"

     * @param targetType <code>Class</code> array used to instanciate a 
======= 18c0edc^:"java/org/apache/catalina/security/SecurityUtil.java"

     * @param targetType <code>Class</code> array used to instanciate a
======= 18c0edc^:"java/org/apache/catalina/security/SecurityUtil.java"

     * @param targetType <code>Class</code> array used to instanciate a
======= 18c0edc^:"java/org/apache/catalina/security/SecurityUtil.java"

     * @param targetType <code>Class</code> array used to instanciate a 
======= 18c0edc^:"java/org/apache/catalina/servlets/CGIServlet.java"

 * <b>Metavariable Values</b>: According to the CGI specificion,
======= 18c0edc^:"java/org/apache/catalina/servlets/CGIServlet.java"

 * supplied to the script are preceisely as supplied by the client and
======= 18c0edc^:"java/org/apache/catalina/servlets/CGIServlet.java"

         * script; relies heavliy on Servlet API methods and findCGI
         *           invokation
======= 18c0edc^:"java/org/apache/catalina/servlets/CGIServlet.java"

     * passed to the constuctor.
======= 18c0edc^:"java/org/apache/catalina/servlets/CGIServlet.java"

         *                  paramters as strings
======= 18c0edc^:"java/org/apache/catalina/servlets/DefaultServlet.java"

     * @param path Path which has to be rewiten
======= 18c0edc^:"java/org/apache/catalina/servlets/WebdavServlet.java"

     * Propfind helper method. Dispays the properties of a lock-null resource.
======= 18c0edc^:"java/org/apache/catalina/servlets/WebdavServlet.java"

    // This one colides with HTTP 1.1
    // "207 Parital Update OK"
======= 18c0edc^:"java/org/apache/catalina/servlets/WebdavServlet.java"

    // This one colides with HTTP 1.1
======= 18c0edc^:"java/org/apache/catalina/servlets/WebdavServlet.java"

    // This one colides with HTTP 1.1
======= 18c0edc^:"java/org/apache/catalina/servlets/WebdavServlet.java"

        // HTTP 1.0 tatus Code
======= 18c0edc^:"java/org/apache/catalina/session/JDBCStore.java"

     * @return <code>Connection</code> if the connection suceeded
======= 18c0edc^:"java/org/apache/catalina/session/PersistentManagerBase.java"

 * persistence, even if onlyfor  restarts.
======= 18c0edc^:"java/org/apache/catalina/session/PersistentManagerBase.java"

     * Set the maximum number of actives Sessions allowed, or -1 for
======= 18c0edc^:"java/org/apache/catalina/session/StandardManager.java"

     * Set the maximum number of actives Sessions allowed, or -1 for
======= 18c0edc^:"java/org/apache/catalina/ssi/ExpressionParseTree.java"

                    // Similar stategy to NOT_EQ above, except this
                    // Similar stategy to NOT_EQ above, except this
======= 18c0edc^:"java/org/apache/catalina/ssi/SSIFsize.java"

    //We try to mimick Apache here, as we do everywhere
======= 18c0edc^:"java/org/apache/catalina/ssi/SSIServletExternalResolver.java"

            //cut off file namee
======= 18c0edc^:"java/org/apache/catalina/ssi/SSIStopProcessingException.java"

 * commands. This is used to mimick the Apache behavior in #set with invalid
======= 18c0edc^:"java/org/apache/catalina/tribes/Channel.java"

 *    registerering a <code>MembershipListener</code><br>
======= 18c0edc^:"java/org/apache/catalina/tribes/Channel.java"

     * SEND_OPTIONS_BYTE_MESSAGE - The message is a pure byte message and no marshalling or unmarshalling will
======= 18c0edc^:"java/org/apache/catalina/tribes/ChannelListener.java"

 * was processed by an above application or if it was just received and forgot about, a featuer required
======= 18c0edc^:"java/org/apache/catalina/tribes/Heartbeat.java"

     * Heartbeat invokation for resources cleanup etc
======= 18c0edc^:"java/org/apache/catalina/tribes/Member.java"

     * @return the listen port for this member, -1 if its not listening on an unsecure port
======= 18c0edc^:"java/org/apache/catalina/tribes/UniqueId.java"

 * <p>Title: Represents a globabally unique Id</p>
======= 18c0edc^:"java/org/apache/catalina/tribes/group/GroupChannel.java"

     * The first interceptor in the inteceptor stack.
======= 18c0edc^:"java/org/apache/catalina/tribes/group/GroupChannel.java"

     * sleep in between invokations of <code>Channel.heartbeat()</code>
======= 18c0edc^:"java/org/apache/catalina/tribes/group/interceptors/MessageDispatch15Interceptor.java"

 * except is ues an atomic long for the currentSize calculation
======= 18c0edc^:"java/org/apache/catalina/tribes/io/ObjectReader.java"

     * @return number of messages that sended to callback
======= 18c0edc^:"java/org/apache/catalina/tribes/membership/McastServiceImpl.java"

                 * On some plattforms (e.g. Linux) it is not possible to bind
======= 18c0edc^:"java/org/apache/catalina/tribes/transport/PooledSender.java"

        // no op, senders created upon demans
======= 18c0edc^:"java/org/apache/catalina/tribes/transport/bio/BioReplicationTask.java"

     * send a reply-acknowledgement (6,2,3)
======= 18c0edc^:"java/org/apache/catalina/tribes/transport/bio/BioSender.java"

     * After successfull sending update stats
     * WARNING: Subclasses must be very carefull that only one thread call this pushMessage at once!!!
======= 18c0edc^:"java/org/apache/catalina/tribes/transport/bio/BioSender.java"

     * Wait for Acknowledgement from other server
     * FIXME Please, not wait only for three charcters, better control that the wait ack message is correct.
======= 18c0edc^:"java/org/apache/catalina/tribes/transport/bio/util/FastQueue.java"

 * length when you have strange producer thread problemes.
======= 18c0edc^:"java/org/apache/catalina/tribes/transport/bio/util/FastQueue.java"

     * limit the queue legnth ( default is unlimited)
======= 18c0edc^:"java/org/apache/catalina/tribes/transport/nio/NioSender.java"

                //weve written everything, or we are starting a new package
======= 18c0edc^:"java/org/apache/catalina/tribes/transport/nio/ParallelNioSender.java"

                //timeout has occured
======= 18c0edc^:"java/org/apache/catalina/tribes/transport/nio/ParallelNioSender.java"

        //clean up any cancelled keys
======= 18c0edc^:"java/org/apache/catalina/users/MemoryUserDatabase.java"

     * The relative or absolute pathname ot the file in which we write
======= 18c0edc^:"java/org/apache/catalina/util/Base64.java"

     * Encodes hex octects into Base64.
======= 18c0edc^:"java/org/apache/catalina/util/Base64.java"

     * Decodes Base64 data into octects
======= 18c0edc^:"java/org/apache/catalina/util/DateTool.java"

     * US locale - all HTTP dates are in english
======= 18c0edc^:"java/org/apache/catalina/util/ExtensionValidator.java"

 * Ensures that all extension dependies are resolved for a WEB application
 * applicaiton and then validates those extensions.
======= 18c0edc^:"java/org/apache/catalina/util/ExtensionValidator.java"

     * Runtime validation of a Web Applicaiton.
======= 18c0edc^:"java/org/apache/catalina/util/ExtensionValidator.java"

        // Find the Manifest for the Web Applicaiton
======= 18c0edc^:"java/org/apache/catalina/util/ExtensionValidator.java"

     * This method should also provide static validation of a Web Applicaiton 
======= 18c0edc^:"java/org/apache/catalina/util/ExtensionValidator.java"

                // check the applicaion itself for the extension
======= 18c0edc^:"java/org/apache/catalina/util/IOTools.java"

     * @param buf the char array to use as a bufferx
======= 18c0edc^:"java/org/apache/catalina/util/ManifestResource.java"

     * Convienience method to check if this <code>ManifestResource</code>
======= 18c0edc^:"java/org/apache/catalina/util/ParameterMap.java"

     * @param map Map whose contents are dupliated in the new map
======= 18c0edc^:"java/org/apache/catalina/util/RequestUtil.java"

     * Convert a byte character value to hexidecimal digit value.
======= 18c0edc^:"java/org/apache/catalina/util/SchemaResolver.java"

     * The disgester instance for which this class is the entity resolver.
======= 18c0edc^:"java/org/apache/catalina/util/SchemaResolver.java"

     * all remote dtds and schema to a locat destination.
======= 18c0edc^:"java/org/apache/catalina/util/Strftime.java"

        //translate.put("s","seconds since ecpoch");
======= 18c0edc^:"java/org/apache/catalina/util/Strftime.java"

        //translate.put("U","week in year with first sunday as first day...");
        //translate.put("W","week in year with first monday as first day...");
======= 18c0edc^:"java/org/apache/catalina/valves/AccessLogValve.java"

     * performing conditional loggging. If null, every
======= 18c0edc^:"java/org/apache/catalina/valves/AccessLogValve.java"

                 * not enounter a closing } - then I ignore the {
======= 18c0edc^:"java/org/apache/catalina/valves/CometConnectionManagerValve.java"

     * List of current Coment connections.
======= 18c0edc^:"java/org/apache/catalina/valves/CometConnectionManagerValve.java"

            // Track the conection for webapp reload

======= 97ccffd^:"java/org/apache/naming/factory/webservices/ServiceProxy.java"

    private Hashtable portComponentRef = null;
======= 97ccffd^:"java/org/apache/naming/factory/webservices/ServiceProxy.java"

        Class serviceendpointClass = (Class) args[1];
        for (Iterator ports = service.getPorts(); ports.hasNext();) {
            QName portName = (QName) ports.next();
======= 97ccffd^:"java/org/apache/naming/factory/webservices/ServiceProxy.java"

    public void setPortComponentRef(Hashtable portComponentRef) {
======= 97ccffd^:"java/org/apache/naming/factory/webservices/ServiceProxy.java"

        Class serviceendpointClass = (Class) args[0];
        QName portname = (QName) this.portComponentRef.get(serviceendpointClass.getName());
======= 97ccffd^:"java/org/apache/naming/factory/webservices/ServiceRefFactory.java"

======= 97ccffd^:"java/org/apache/naming/factory/webservices/ServiceRefFactory.java"

            Hashtable environment)
======= 97ccffd^:"java/org/apache/naming/factory/webservices/ServiceRefFactory.java"

            Hashtable portComponentRef = new Hashtable();
======= 97ccffd^:"java/org/apache/naming/factory/webservices/ServiceRefFactory.java"

            Class serviceInterfaceClass = null;
======= 97ccffd^:"java/org/apache/naming/factory/webservices/ServiceRefFactory.java"

                    Map ports = wsdlservice.getPorts();
                    for (Iterator i = ports.keySet().iterator(); i.hasNext();) {
                        String portName = (String) i.next();
======= 97ccffd^:"java/org/apache/naming/factory/webservices/ServiceRefFactory.java"

            Class[] interfaces = null;
            Class[] serviceInterfaces = serviceInterfaceClass.getInterfaces();
            if (serviceInterfaceClass != null) {
                interfaces = new Class[serviceInterfaces.length + 1];
                for (int i = 0; i < serviceInterfaces.length; i++) {
                    interfaces[i] = serviceInterfaces[i];
                }
            } else {
                interfaces = new Class[1];
======= 97ccffd^:"java/org/apache/naming/factory/webservices/ServiceRefFactory.java"

                ArrayList soaproles = new ArrayList();
======= 97ccffd^:"java/org/apache/naming/factory/webservices/ServiceRefFactory.java"

                    Class handlerClass = null;
======= 97ccffd^:"java/org/apache/naming/factory/webservices/ServiceRefFactory.java"

                    ArrayList headers = new ArrayList();
                    Hashtable config = new Hashtable();
                    ArrayList portNames = new ArrayList();
======= 97ccffd^:"java/org/apache/naming/factory/webservices/ServiceRefFactory.java"

                    handlerref.setHeaders((QName []) headers.toArray(new QName[headers.size()]));
                        Iterator iter = portNames.iterator();
                            initHandlerChain(new QName((String) iter.next()), handlerRegistry,
                        Enumeration e = portComponentRef.elements();
                            initHandlerChain((QName) e.nextElement(), handlerRegistry,
======= 97ccffd^:"java/org/apache/naming/factory/webservices/ServiceRefFactory.java"

        List extensions = port.getExtensibilityElements();
        for (Iterator i = extensions.iterator(); i.hasNext();) {
            ExtensibilityElement ext = (ExtensibilityElement) i.next();
======= 97ccffd^:"java/org/apache/naming/factory/webservices/ServiceRefFactory.java"

            HandlerInfo handlerref, ArrayList soaprolesToAdd) {
======= 97ccffd^:"java/org/apache/naming/factory/webservices/ServiceRefFactory.java"

            soaproles[i+j] = (String) soaprolesToAdd.get(j);

======= 9204e4d^:"java/org/apache/catalina/core/ApplicationDispatcher.java"

     * called servlet will be propogated to the caller.
======= 9204e4d^:"java/org/apache/catalina/core/ApplicationDispatcher.java"

            // Servlet SRV.6.2.2. The Resquest/Response may have been wrapped
======= 9204e4d^:"java/org/apache/catalina/core/ApplicationDispatcher.java"

     * called servlet will be propogated to the caller.
======= 9204e4d^:"java/org/apache/catalina/core/ApplicationFilterFactory.java"

 * Factory for the creation and caching of Filters and creationg 
======= 9204e4d^:"java/org/apache/catalina/core/ApplicationFilterFactory.java"

     * Prevent instanciation outside of the getInstanceMethod().
======= 9204e4d^:"java/org/apache/catalina/core/ApplicationFilterFactory.java"

     * Return the fqctory instance.
======= 9204e4d^:"java/org/apache/catalina/core/ApplicationFilterFactory.java"

     * Convienience method which returns true if  the dispatcher type
======= 9204e4d^:"java/org/apache/catalina/core/ApplicationHttpRequest.java"

     * If this request is cross context, since this changes session accesss
======= 9204e4d^:"java/org/apache/catalina/core/ContainerBase.java"

     * @exception IllegalArgumentException if the specifie Valve refuses to be
======= 9204e4d^:"java/org/apache/catalina/core/ContainerBase.java"

     * Valve for this Pipeline (if any).  Prioer to setting the basic Valve,
======= 9204e4d^:"java/org/apache/catalina/core/ContainerBase.java"

     * Return the abbreviated name of this container for logging messsages
======= 9204e4d^:"java/org/apache/catalina/core/StandardContext.java"

     * before the mappings in the deploymenmt descriptor but must be inserted in
======= 9204e4d^:"java/org/apache/catalina/core/StandardContext.java"

     * @param docBase The orginal document root
======= 9204e4d^:"java/org/apache/catalina/core/StandardEngine.java"

    /** Allow the base dir to be specified explicitely for
======= 9204e4d^:"java/org/apache/catalina/core/StandardEngine.java"

        // This can be overriden at engine, context and host level  
======= 9204e4d^:"java/org/apache/catalina/core/StandardEngine.java"

            // for consistency...: we are probably in embeded mode
======= 9204e4d^:"java/org/apache/catalina/core/StandardHost.java"

     * Attribute value used to turn on/off XML namespace awarenes.
======= 9204e4d^:"java/org/apache/catalina/core/StandardHost.java"

     * that this host's child webapps should be discovred and automatically 
======= 9204e4d^:"java/org/apache/catalina/core/StandardHost.java"

     * @return true if namespace awarenes is enabled.
======= 9204e4d^:"java/org/apache/catalina/core/StandardHost.java"

      * Return the MBean Names of the Valves assoicated with this Host
======= 9204e4d^:"java/org/apache/catalina/core/StandardPipeline.java"

     * Valve for this Pipeline (if any).  Prioer to setting the basic Valve,
======= 9204e4d^:"java/org/apache/catalina/core/StandardPipeline.java"

     * @exception IllegalArgumentException if the specifie Valve refuses to be
======= 9204e4d^:"java/org/apache/catalina/core/StandardPipeline.java"

            // Unregister the removed valave
======= 9204e4d^:"java/org/apache/catalina/core/StandardService.java"

        // FIXME pero -- Why container stop first? KeepAlive connetions can send request! 
======= 9204e4d^:"java/org/apache/catalina/core/StandardService.java"

            // backward compat, nobody should bother to load it explicitely
======= 9204e4d^:"java/org/apache/catalina/core/StandardService.java"

        // Service shouldn't be used with embeded, so it doesn't matter
======= 9204e4d^:"java/org/apache/catalina/core/StandardWrapperFacade.java"

     * Create a new facede around a StandardWrapper.
======= 9204e4d^:"java/org/apache/catalina/core/StandardWrapperValve.java"

    // Some JMX statistics. This vavle is associated with a StandardWrapper.

======= a3fa5d3^:"java/javax/servlet/ServletContext.java"

======= a3fa5d3^:"java/javax/servlet/ServletContext.java"

======= a3fa5d3^:"java/javax/servlet/ServletContext.java"

======= a3fa5d3^:"java/javax/servlet/ServletContext.java"

======= a3fa5d3^:"java/javax/servlet/ServletRequest.java"

======= a3fa5d3^:"java/javax/servlet/ServletRequestWrapper.java"

======= a3fa5d3^:"java/javax/servlet/SingleThreadModel.java"

======= a3fa5d3^:"java/javax/servlet/UnavailableException.java"

======= a3fa5d3^:"java/javax/servlet/UnavailableException.java"

======= a3fa5d3^:"java/javax/servlet/UnavailableException.java"

======= a3fa5d3^:"java/javax/servlet/http/HttpServletRequest.java"

======= a3fa5d3^:"java/javax/servlet/http/HttpServletRequestWrapper.java"

======= a3fa5d3^:"java/javax/servlet/http/HttpServletResponse.java"

======= a3fa5d3^:"java/javax/servlet/http/HttpServletResponse.java"

======= a3fa5d3^:"java/javax/servlet/http/HttpServletResponse.java"

======= a3fa5d3^:"java/javax/servlet/http/HttpServletResponseWrapper.java"

======= a3fa5d3^:"java/javax/servlet/http/HttpServletResponseWrapper.java"

======= a3fa5d3^:"java/javax/servlet/http/HttpServletResponseWrapper.java"

     public void setStatus(int sc, String sm) {
======= a3fa5d3^:"java/javax/servlet/http/HttpSession.java"

======= a3fa5d3^:"java/javax/servlet/http/HttpSession.java"

======= a3fa5d3^:"java/javax/servlet/http/HttpSession.java"

======= a3fa5d3^:"java/javax/servlet/http/HttpSession.java"

======= a3fa5d3^:"java/javax/servlet/http/HttpSession.java"

======= a3fa5d3^:"java/javax/servlet/http/HttpSessionContext.java"

======= a3fa5d3^:"java/javax/servlet/http/HttpSessionContext.java"

======= a3fa5d3^:"java/javax/servlet/http/HttpSessionContext.java"

======= a3fa5d3^:"java/javax/servlet/http/HttpUtils.java"

======= a3fa5d3^:"java/javax/servlet/jsp/JspException.java"

======= a3fa5d3^:"java/javax/servlet/jsp/el/ELException.java"

======= a3fa5d3^:"java/javax/servlet/jsp/el/ELParseException.java"

======= a3fa5d3^:"java/javax/servlet/jsp/el/Expression.java"

======= a3fa5d3^:"java/javax/servlet/jsp/el/ExpressionEvaluator.java"

======= a3fa5d3^:"java/javax/servlet/jsp/el/FunctionMapper.java"

======= a3fa5d3^:"java/javax/servlet/jsp/el/VariableResolver.java"

======= a3fa5d3^:"java/javax/servlet/jsp/tagext/BodyTag.java"

======= a3fa5d3^:"java/org/apache/catalina/Cluster.java"

======= a3fa5d3^:"java/org/apache/catalina/Cluster.java"

======= a3fa5d3^:"java/org/apache/catalina/Manager.java"

======= a3fa5d3^:"java/org/apache/catalina/connector/Request.java"

======= a3fa5d3^:"java/org/apache/catalina/connector/Request.java"

======= a3fa5d3^:"java/org/apache/catalina/connector/Response.java"

======= a3fa5d3^:"java/org/apache/catalina/connector/Response.java"

======= a3fa5d3^:"java/org/apache/catalina/connector/Response.java"

======= a3fa5d3^:"java/org/apache/catalina/core/ApplicationContext.java"

======= a3fa5d3^:"java/org/apache/catalina/core/ApplicationContext.java"

======= a3fa5d3^:"java/org/apache/catalina/core/ApplicationContext.java"

======= a3fa5d3^:"java/org/apache/catalina/core/ApplicationContext.java"

======= a3fa5d3^:"java/org/apache/catalina/core/ApplicationContextFacade.java"

======= a3fa5d3^:"java/org/apache/catalina/core/ApplicationContextFacade.java"

======= a3fa5d3^:"java/org/apache/catalina/core/ApplicationContextFacade.java"

======= a3fa5d3^:"java/org/apache/catalina/core/ApplicationContextFacade.java"

======= a3fa5d3^:"java/org/apache/catalina/core/ApplicationHttpResponse.java"

======= a3fa5d3^:"java/org/apache/catalina/core/DummyRequest.java"

======= a3fa5d3^:"java/org/apache/catalina/core/DummyRequest.java"

======= a3fa5d3^:"java/org/apache/catalina/core/DummyResponse.java"

======= a3fa5d3^:"java/org/apache/catalina/core/DummyResponse.java"

======= a3fa5d3^:"java/org/apache/catalina/ha/session/DeltaSession.java"

======= a3fa5d3^:"java/org/apache/catalina/ha/session/DeltaSession.java"

======= a3fa5d3^:"java/org/apache/catalina/ha/session/DeltaSession.java"

======= a3fa5d3^:"java/org/apache/catalina/ha/tcp/SimpleTcpCluster.java"

======= a3fa5d3^:"java/org/apache/catalina/ha/tcp/SimpleTcpCluster.java"

======= a3fa5d3^:"java/org/apache/catalina/realm/JAASRealm.java"

======= a3fa5d3^:"java/org/apache/catalina/session/ManagerBase.java"

======= a3fa5d3^:"java/org/apache/catalina/session/StandardSession.java"

======= a3fa5d3^:"java/org/apache/catalina/session/StandardSession.java"

======= a3fa5d3^:"java/org/apache/catalina/session/StandardSession.java"

======= a3fa5d3^:"java/org/apache/catalina/session/StandardSession.java"

======= a3fa5d3^:"java/org/apache/catalina/session/StandardSession.java"

======= a3fa5d3^:"java/org/apache/catalina/session/StandardSession.java"

======= a3fa5d3^:"java/org/apache/catalina/session/StandardSession.java"

======= a3fa5d3^:"java/org/apache/catalina/session/StandardSession.java"

======= a3fa5d3^:"java/org/apache/catalina/session/StandardSessionFacade.java"

======= a3fa5d3^:"java/org/apache/catalina/session/StandardSessionFacade.java"

======= a3fa5d3^:"java/org/apache/catalina/session/StandardSessionFacade.java"

======= a3fa5d3^:"java/org/apache/catalina/session/StandardSessionFacade.java"

======= a3fa5d3^:"java/org/apache/catalina/session/StandardSessionFacade.java"

======= a3fa5d3^:"java/org/apache/catalina/startup/Catalina.java"

======= a3fa5d3^:"java/org/apache/catalina/startup/Catalina.java"

======= a3fa5d3^:"java/org/apache/catalina/tribes/io/XByteBuffer.java"

======= a3fa5d3^:"java/org/apache/catalina/tribes/io/XByteBuffer.java"

======= a3fa5d3^:"java/org/apache/catalina/tribes/io/XByteBuffer.java"

======= a3fa5d3^:"java/org/apache/catalina/tribes/membership/McastService.java"

======= a3fa5d3^:"java/org/apache/catalina/tribes/membership/McastService.java"

======= a3fa5d3^:"java/org/apache/catalina/tribes/membership/McastService.java"

======= a3fa5d3^:"java/org/apache/catalina/tribes/membership/McastService.java"

======= a3fa5d3^:"java/org/apache/catalina/tribes/membership/McastService.java"

======= a3fa5d3^:"java/org/apache/catalina/tribes/membership/McastService.java"

======= a3fa5d3^:"java/org/apache/catalina/tribes/membership/McastService.java"

======= a3fa5d3^:"java/org/apache/catalina/tribes/membership/McastService.java"

======= a3fa5d3^:"java/org/apache/catalina/tribes/membership/McastService.java"

======= a3fa5d3^:"java/org/apache/catalina/tribes/membership/McastService.java"

======= a3fa5d3^:"java/org/apache/catalina/tribes/membership/McastService.java"

======= a3fa5d3^:"java/org/apache/catalina/tribes/membership/McastService.java"

======= a3fa5d3^:"java/org/apache/catalina/tribes/transport/ReceiverBase.java"

======= a3fa5d3^:"java/org/apache/catalina/tribes/transport/ReceiverBase.java"

======= a3fa5d3^:"java/org/apache/catalina/tribes/transport/ReceiverBase.java"

======= a3fa5d3^:"java/org/apache/catalina/tribes/transport/ReceiverBase.java"

======= a3fa5d3^:"java/org/apache/catalina/tribes/transport/ReceiverBase.java"

======= a3fa5d3^:"java/org/apache/catalina/tribes/transport/ReceiverBase.java"

======= a3fa5d3^:"java/org/apache/catalina/tribes/transport/ReceiverBase.java"

======= a3fa5d3^:"java/org/apache/catalina/tribes/transport/ReceiverBase.java"

======= a3fa5d3^:"java/org/apache/el/parser/SimpleCharStream.java"

  public int getColumn() {
======= a3fa5d3^:"java/org/apache/el/parser/SimpleCharStream.java"

  public int getLine() {
======= a3fa5d3^:"java/org/apache/jasper/servlet/JspCServletContext.java"

======= a3fa5d3^:"java/org/apache/jasper/servlet/JspCServletContext.java"

======= a3fa5d3^:"java/org/apache/jasper/servlet/JspCServletContext.java"

======= a3fa5d3^:"java/org/apache/jasper/servlet/JspCServletContext.java"

======= a3fa5d3^:"java/org/apache/naming/resources/ResourceAttributes.java"

======= a3fa5d3^:"java/org/apache/tomcat/util/digester/Rule.java"

======= a3fa5d3^:"java/org/apache/tomcat/util/digester/Rule.java"

======= a3fa5d3^:"java/org/apache/tomcat/util/digester/Rule.java"

======= a3fa5d3^:"java/org/apache/tomcat/util/digester/SetNextRule.java"

======= a3fa5d3^:"java/org/apache/tomcat/util/digester/SetNextRule.java"

======= a3fa5d3^:"java/org/apache/tomcat/util/digester/SetPropertiesRule.java"

======= a3fa5d3^:"java/org/apache/tomcat/util/digester/SetPropertyRule.java"

======= a3fa5d3^:"java/org/apache/tomcat/util/digester/SetRootRule.java"

======= a3fa5d3^:"java/org/apache/tomcat/util/digester/SetRootRule.java"

======= a3fa5d3^:"java/org/apache/tomcat/util/digester/SetTopRule.java"

======= a3fa5d3^:"java/org/apache/tomcat/util/digester/SetTopRule.java"


======= 363b79a^:"java/org/apache/catalina/startup/WebRuleSet.java"

     * matching pattern prefix and default fargment setting.
======= 363b79a^:"java/org/apache/catalina/startup/WebRuleSet.java"

 * Rule to check that the <code>login-config</code> is occuring 
======= 363b79a^:"java/org/apache/catalina/startup/WebRuleSet.java"

 * Rule to check that the <code>jsp-config</code> is occuring 
======= 363b79a^:"java/org/apache/catalina/startup/WebRuleSet.java"

 * Rule to check that the <code>session-config</code> is occuring 

======= 5d9f68b^:"java/org/apache/catalina/startup/TldConfig.java"

     * Attribute value used to turn on/off TLD  namespace awarenes.
======= 5d9f68b^:"java/org/apache/catalina/startup/TldConfig.java"

     * @return true if namespace awarenes is enabled.

======= 7508847^:"java/org/apache/catalina/startup/SetNextNamingRule.java"

     *  (if you wish to use a primitive type, specify the corresonding

======= b6df018^:"java/org/apache/catalina/startup/ContextConfig.java"

        // Removing sercurity role
======= b6df018^:"java/org/apache/catalina/startup/ContextConfig.java"

     *                  segemnts) to read

======= 07e5982^:"java/org/apache/catalina/startup/HostConfig.java"

     * Attribute value used to turn on/off XML namespace awarenes.
======= 07e5982^:"java/org/apache/catalina/startup/HostConfig.java"

     * @return true if namespace awarenes is enabled.
======= 07e5982^:"java/org/apache/catalina/startup/HostConfig.java"

     * Set the namespace aware feature of the XML parser used when
======= 07e5982^:"java/org/apache/catalina/startup/HostConfig.java"

     * <code>false</code> if the applciation has not been deployed or does not
======= 07e5982^:"java/org/apache/catalina/startup/HostConfig.java"

     * Entry point for the admin webapp, and other JMX Context controlers.
======= 07e5982^:"java/org/apache/catalina/startup/HostConfig.java"

     * Entry point for the admin webapp, and other JMX Context controlers.

======= ae16eb2^:"java/org/apache/catalina/startup/Embedded.java"

     * Return true if redirction of standard streams is enabled.
======= ae16eb2^:"java/org/apache/catalina/startup/Embedded.java"

     * If tomcat is embeded in an application that already defines those -

======= 6908b18^:"java/org/apache/catalina/ant/jmx/JMXAccessorTask.java"

                if (project != null) {
                    project.log("wrong object reference " + refId + " - "
                }
======= 6908b18^:"java/org/apache/catalina/tribes/transport/bio/BioReceiver.java"

 * @version $Revision:$ $Date:$
======= 6908b18^:"java/org/apache/catalina/valves/JDBCAccessLogValve.java"

        String remoteHost = EMPTY;
        String user = EMPTY;
        if(request != null)
            user = request.getRemoteUser();
        String query="";
        if(request != null)
            query = request.getRequestURI();
======= 6908b18^:"java/org/apache/catalina/valves/JDBCAccessLogValve.java"

        if (pattern.equals("combined") && request != null) {
======= 6908b18^:"java/org/apache/tomcat/util/net/NioBlockingSelector.java"

                            if (sk!=null) sk.cancel();
======= 6908b18^:"java/org/apache/tomcat/util/net/NioBlockingSelector.java"


======= c060034^:"java/org/apache/catalina/startup/Bootstrap.java"

 * Boostrap loader for Catalina.  This application constructs a class loader
======= c060034^:"java/org/apache/catalina/startup/Bootstrap.java"

     * Stop the standlone server.
======= c060034^:"java/org/apache/catalina/startup/Bootstrap.java"

     * Stop the standlone server.

======= 481cfe9^:"java/org/apache/catalina/startup/Catalina.java"

 * <li><b>-help</b> - Display usage information.
 * <li><b>-stop</b> - Stop the currently running instance of Catalina.
======= 481cfe9^:"java/org/apache/catalina/startup/Catalina.java"

             + " [ -nonaming ] { start | stop }");

======= 3ef0f21^:"java/org/apache/catalina/startup/Bootstrap.java"

                args[0] = "start";
                args[0] = "stop";

======= f3b04b4^:"java/org/apache/jasper/compiler/Validator.java"

                            attrs.getURI(i), attrs.getLocalName(i), attrs
                                    .getValue(i), n, false);
======= f3b04b4^:"java/org/apache/jasper/compiler/Validator.java"

======= f3b04b4^:"java/org/apache/jasper/compiler/Validator.java"

                                    // The String litteral must be castable to what is declared as type

======= 14084ac^:"java/org/apache/catalina/connector/Response.java"

======= 14084ac^:"java/org/apache/catalina/connector/Response.java"

======= 14084ac^:"java/org/apache/catalina/connector/Response.java"

======= 14084ac^:"java/org/apache/catalina/connector/Response.java"

======= 14084ac^:"java/org/apache/catalina/connector/Response.java"

======= 14084ac^:"java/org/apache/catalina/connector/Response.java"


======= 7fc56b4^:"java/org/apache/catalina/connector/Request.java"

     * empty <code>Enumeration</code> if there are none.

======= d55f1d9^:"java/org/apache/catalina/startup/HostConfig.java"


======= deac657^:"java/org/apache/jasper/compiler/Parser.java"

                parseComment(parent);

======= 99f01fd^:"java/org/apache/catalina/manager/Constants.java"

        org.apache.catalina.util.TomcatCSS.TOMCAT_CSS +
======= 99f01fd^:"java/org/apache/catalina/manager/Constants.java"

======= 99f01fd^:"java/org/apache/catalina/manager/Constants.java"

        "<table cellspacing=\"4\" width=\"100%\" border=\"0\">\n" +
======= 99f01fd^:"java/org/apache/catalina/manager/Constants.java"

        "<table cellspacing=\"4\" width=\"100%\" border=\"0\">\n" +
======= 99f01fd^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

        String deployPath = request.getParameter("deployPath");
        String deployConfig = request.getParameter("deployConfig");
        String deployWar = request.getParameter("deployWar");
======= 99f01fd^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

        } else if (command.equals("/deploy")) {
            message = deployInternal(deployConfig, deployPath, deployWar);
        } else if (command.equals("/reload")) {
            message = reload(path);
        } else if (command.equals("/undeploy")) {
            message = undeploy(path);
        } else if (command.equals("/expire")) {
            message = expireSessions(path, request);
======= 99f01fd^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

        } else if (command.equals("/start")) {
            message = start(path);
        } else if (command.equals("/stop")) {
            message = stop(path);
======= 99f01fd^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

        if (command == null || !command.equals("/upload")) {
            doGet(request,response);
            return;
        }
        String message = upload(request);
======= 99f01fd^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

        "  <small>\n" +
        "  &nbsp;{1}&nbsp;\n" +
        "  &nbsp;<a href=\"{2}\" onclick=\"return(confirm('''Are you sure?'''))\">{3}</a>&nbsp;\n" +
        "  &nbsp;<a href=\"{4}\" onclick=\"return(confirm('''Are you sure?'''))\">{5}</a>&nbsp;\n" +
        "  &nbsp;<a href=\"{6}\" onclick=\"return(confirm('''Are you sure?'''))\">{7}</a>&nbsp;\n" +
        "  </small>\n" +
======= 99f01fd^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

        "  <small>\n" +
        "  &nbsp;<a href=\"{0}\" onclick=\"return(confirm('''Are you sure?'''))\">{1}</a>&nbsp;\n" +
        "  &nbsp;{3}&nbsp;\n" +
        "  &nbsp;{5}&nbsp;\n" +
        "  &nbsp;<a href=\"{6}\" onclick=\"return(confirm('''Are you sure?  This will delete the application.'''))\">{7}</a>&nbsp;\n" +
        "  </small>\n" +
        "  <small>\n" +
        "  &nbsp;{1}&nbsp;\n" +
        "  &nbsp;<a href=\"{2}\" onclick=\"return(confirm('''Are you sure?'''))\">{3}</a>&nbsp;\n" +
        "  &nbsp;<a href=\"{4}\" onclick=\"return(confirm('''Are you sure?'''))\">{5}</a>&nbsp;\n" +
        "  &nbsp;{7}&nbsp;\n" +
        "  </small>\n" +
        "  <small>\n" +
        "  &nbsp;<a href=\"{0}\" onclick=\"return(confirm('''Are you sure?'''))\">{1}</a>&nbsp;\n" +
        "  &nbsp;{3}&nbsp;\n" +
        "  &nbsp;{5}&nbsp;\n" +
        "  &nbsp;{7}&nbsp;\n" +
        "  </small>\n" +

======= 0f99904^:"java/org/apache/catalina/connector/CoyoteAdapter.java"

======= 0f99904^:"java/org/apache/catalina/connector/CoyoteAdapter.java"

======= 0f99904^:"java/org/apache/catalina/connector/CoyoteAdapter.java"

            if (semicolon2 >= 0) {
                request.setRequestedSessionId
                    (new String(uriBC.getBuffer(), start + sessionIdStart, 
                            semicolon2 - sessionIdStart));
                // Extract session ID from request URI
                byte[] buf = uriBC.getBuffer();
                for (int i = 0; i < end - start - semicolon2; i++) {
                    buf[start + semicolon + i] 
                        = buf[start + i + semicolon2];
                uriBC.setBytes(buf, start, end - start - semicolon2 + semicolon);
            } else {
                request.setRequestedSessionId
                    (new String(uriBC.getBuffer(), start + sessionIdStart, 
                            (end - start) - sessionIdStart));
                uriBC.setEnd(start + semicolon);
            request.setRequestedSessionURL(true);

======= 73bb9e4^:"java/org/apache/tomcat/util/net/JIoEndpoint.java"

            } catch (BindException be) {
                    throw new BindException(be.getMessage() + "<null>:" + getPort());
                    throw new BindException(be.getMessage() + " " +
                            getAddress().toString() + ":" + getPort());

======= 189181a^:"test/org/apache/catalina/startup/TestTomcat.java"

     * Simple servlet to test iJNDI 
======= 189181a^:"test/org/apache/catalina/startup/TestTomcat.java"

======= 189181a^:"test/org/apache/catalina/startup/TestTomcat.java"

        assertEquals(res.toString(), "Hello world");
        // Currently in sandbox/tomcat-lite
======= 189181a^:"test/org/apache/catalina/startup/TestTomcat.java"

        assertEquals(res.toString(), "Hello, Tomcat User");

======= a31d52f^:"java/org/apache/tomcat/util/http/mapper/Mapper.java"

                (path.getBuffer(), pathOffset, pathEnd);

======= aaf7b5d^:"java/org/apache/tomcat/util/net/AbstractEndpoint.java"

    public int getMaxThreads() { return maxThreads; }
======= aaf7b5d^:"java/org/apache/tomcat/util/threads/ResizableExecutor.java"


======= e9248d7^:"java/org/apache/catalina/core/AprLifecycleListener.java"

    protected static final int TCN_REQUIRED_PATCH = 8;
    protected static final int TCN_RECOMMENDED_PV = 16;
======= e9248d7^:"java/org/apache/coyote/http11/Http11AprProcessor.java"

                    if (clientCert != null) {
======= e9248d7^:"java/org/apache/coyote/http11/Http11AprProcessor.java"

                 // Consume and buffer the request body, so that it does not
                 // interfere with the client's handshake messages
                    // Renegociate certificates
                    SSLSocket.renegotiate(socket);
                    // Get client certificate and the certificate chain if present
                    int certLength = SSLSocket.getInfoI(socket, SSL.SSL_INFO_CLIENT_CERT_CHAIN);
                    byte[] clientCert = SSLSocket.getInfoB(socket, SSL.SSL_INFO_CLIENT_CERT);
                    X509Certificate[] certs = null;
                    if (clientCert != null) {
                        certs = new X509Certificate[certLength + 1];
                        CertificateFactory cf = CertificateFactory.getInstance("X.509");
                        certs[0] = (X509Certificate) cf.generateCertificate(new ByteArrayInputStream(clientCert));
                        for (int i = 0; i < certLength; i++) {
                            byte[] data = SSLSocket.getInfoB(socket, SSL.SSL_INFO_CLIENT_CERT_CHAIN + i);
                            certs[i+1] = (X509Certificate) cf.generateCertificate(new ByteArrayInputStream(data));
                    }
                    if (certs != null) {
                        request.setAttribute(AprEndpoint.CERTIFICATE_KEY, certs);
======= e9248d7^:"java/org/apache/tomcat/jni/SSLSocket.java"

     * usually there is no acknowledgment step between the headers and the
======= e9248d7^:"java/org/apache/tomcat/jni/SSLSocket.java"

     * Retrun SSL Info parameter as byte array.
======= e9248d7^:"java/org/apache/tomcat/jni/SSLSocket.java"

     * Retrun SSL Info parameter as String.
======= e9248d7^:"java/org/apache/tomcat/jni/SSLSocket.java"

     * Retrun SSL Info parameter as integer.

======= 59e88f1^:"java/org/apache/catalina/startup/Tomcat.java"

     * Sets the log level to WARN for the loggers that log information on
     * Tomcat start up. This prevents the usual startup information being
     * logged to the console.
    public void setSilent() {
            Logger.getLogger(s).setLevel(Level.WARNING);

======= 6cce550^:"java/org/apache/catalina/startup/Tomcat.java"

    public StandardWrapper addServlet(String contextPath, 
                                      String servletName, 
                                      String servletClass) {
        Container ctx = getHost().findChild(contextPath);
        return addServlet((StandardContext) ctx, 
                servletName, servletClass);
    }
    
======= 6cce550^:"java/org/apache/catalina/startup/Tomcat.java"

======= 6cce550^:"java/org/apache/catalina/startup/Tomcat.java"

    /** Use an existing servlet, no class.forName or initialization will be 
     *  performed
======= 6cce550^:"java/org/apache/catalina/startup/Tomcat.java"

======= 6cce550^:"java/org/apache/catalina/startup/Tomcat.java"

    /** Fix startup sequence - required if you don't use web.xml.
     *  The start() method in context will set 'configured' to false - and
     *  expects a listener to set it back to true.
======= 6cce550^:"java/org/apache/catalina/startup/Tomcat.java"

    /** Helper class for wrapping existing servlets. This disables servlet 

======= 720de5e^:"java/org/apache/catalina/startup/Bootstrap.java"

                log.debug("Expanded " + before + " to " + replace);

======= 6ab874a^:"java/org/apache/catalina/manager/ManagerServlet.java"


======= fe53ca9^:"java/org/apache/tomcat/util/http/mapper/Mapper.java"


======= 4f5a5e4^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/interceptor/AbstractCreateStatementInterceptor.java"

    public static final String[] statements = {"createStatement","prepareStatement","prepareCall"};
    public static final String[] executes = {"execute","executeQuery","executeUpdate","executeBatch"};
======= 4f5a5e4^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/interceptor/AbstractCreateStatementInterceptor.java"

            process = process(statements, method, process);
======= 4f5a5e4^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/interceptor/AbstractCreateStatementInterceptor.java"

     * @param method the method that was called. It will be one of the methods defined in {@link #statements}
======= 4f5a5e4^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/interceptor/AbstractCreateStatementInterceptor.java"

======= 4f5a5e4^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/interceptor/AbstractQueryReport.java"

        new Constructor[AbstractCreateStatementInterceptor.statements.length];
======= 4f5a5e4^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/interceptor/AbstractQueryReport.java"

        if (sql==null && compare(executes[3],name)) {
======= 4f5a5e4^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/interceptor/AbstractQueryReport.java"

        if (sql==null && compare(executes[3],name)) {
======= 4f5a5e4^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/interceptor/AbstractQueryReport.java"

        if (sql==null && compare(executes[3],name)) {
======= 4f5a5e4^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/interceptor/AbstractQueryReport.java"

            if (compare(statements[0],name)) {
                constructor = getConstructor(0,Statement.class);
            }else if (compare(statements[1],name)) {
                constructor = getConstructor(1,PreparedStatement.class);
            }else if (compare(statements[2],name)) {
                constructor = getConstructor(2,CallableStatement.class);
======= 4f5a5e4^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/interceptor/AbstractQueryReport.java"

            process = process(executes, method, process);

======= 278dedc^:"modules/jdbc-pool/test/org/apache/tomcat/jdbc/test/TestConcurrency.java"

        Driver.reset();
======= 278dedc^:"modules/jdbc-pool/test/org/apache/tomcat/jdbc/test/TestConcurrency.java"

                assertEquals("Size comparison:",10, ds.getPool().getSize());

======= abbb922^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/FairBlockingQueue.java"

     * @throws UnsupportedOperation - this operation is not supported
======= abbb922^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/FairBlockingQueue.java"

     * @throws UnsupportedOperation - this operation is not supported
======= abbb922^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/FairBlockingQueue.java"

     * @throws UnsupportedOperation - this operation is not supported
======= abbb922^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/FairBlockingQueue.java"

     * @throws UnsupportedOperation - this operation is not supported
======= abbb922^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/FairBlockingQueue.java"

     * @throws UnsupportedOperation - this operation is not supported
======= abbb922^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/FairBlockingQueue.java"

     * @throws UnsupportedOperation - this operation is not supported
======= abbb922^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/FairBlockingQueue.java"

     * @throws UnsupportedOperation - this operation is not supported
======= abbb922^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/FairBlockingQueue.java"

     * @throws UnsupportedOperation - this operation is not supported
======= abbb922^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/FairBlockingQueue.java"

     * @throws UnsupportedOperation - this operation is not supported
======= abbb922^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/FairBlockingQueue.java"

     * @throws UnsupportedOperation - this operation is not supported
======= abbb922^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/FairBlockingQueue.java"

     * @throws UnsupportedOperation - this operation is not supported
======= abbb922^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/MultiLockFairBlockingQueue.java"

     * @throws UnsupportedOperation - this operation is not supported
======= abbb922^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/MultiLockFairBlockingQueue.java"

     * @throws UnsupportedOperation - this operation is not supported
======= abbb922^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/MultiLockFairBlockingQueue.java"

     * @throws UnsupportedOperation - this operation is not supported
======= abbb922^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/MultiLockFairBlockingQueue.java"

     * @throws UnsupportedOperation - this operation is not supported
======= abbb922^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/MultiLockFairBlockingQueue.java"

     * @throws UnsupportedOperation - this operation is not supported
======= abbb922^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/MultiLockFairBlockingQueue.java"

     * @throws UnsupportedOperation - this operation is not supported
======= abbb922^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/MultiLockFairBlockingQueue.java"

     * @throws UnsupportedOperation - this operation is not supported
======= abbb922^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/MultiLockFairBlockingQueue.java"

     * @throws UnsupportedOperation - this operation is not supported
======= abbb922^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/MultiLockFairBlockingQueue.java"

     * @throws UnsupportedOperation - this operation is not supported
======= abbb922^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/MultiLockFairBlockingQueue.java"

     * @throws UnsupportedOperation - this operation is not supported
======= abbb922^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/MultiLockFairBlockingQueue.java"

     * @throws UnsupportedOperation - this operation is not supported

======= a9e00d5^:"test/org/apache/catalina/connector/TestRequest.java"

======= a9e00d5^:"test/org/apache/catalina/connector/TestRequest.java"

======= a9e00d5^:"test/org/apache/catalina/connector/TestRequest.java"

======= a9e00d5^:"test/org/apache/catalina/connector/TestRequest.java"

    private static class Bug37794Client extends SimpleHttpClient {
            Tomcat tomcat = new Tomcat();
                StandardContext root = tomcat.addContext("", TEMP_DIR);
                Tomcat.addServlet(root, "Bug37794", new Bug37794Servlet());
                root.addServletMapping("/test", "Bug37794");
                tomcat.start();
======= a9e00d5^:"test/org/apache/catalina/connector/TestRequest.java"

            } finally {
                try {
                    tomcat.stop();
                } catch (Exception e) {
                    // Ignore
                }
======= a9e00d5^:"test/org/apache/catalina/connector/TestRequest.java"

======= a9e00d5^:"test/org/apache/catalina/connector/TestRequest.java"

======= a9e00d5^:"test/org/apache/catalina/connector/TestRequest.java"

            socket = new Socket("localhost", 8080);
======= a9e00d5^:"test/org/apache/catalina/startup/TestTomcat.java"

    Tomcat tomcat;
    // if you run in eclipse - or tomcat src dir 
    String base = "./"; 
    File tempDir;
    static int port = 8001;
    long t0;
    
======= a9e00d5^:"test/org/apache/catalina/startup/TestTomcat.java"

    public void setUp() throws Exception {
        t0 = System.currentTimeMillis();
        tempDir = new File(base + "output/tmp");
        tempDir.mkdir();
        
        tomcat = new Tomcat();
        tomcat.setBaseDir(tempDir.getAbsolutePath());
        tomcat.getHost().setAppBase(tempDir.getAbsolutePath() + "/webapps");
          
        // If each test is running on same port - they
        // may interfere with each other (on unix at least)
        port++;
        tomcat.setPort(port);
    }
    
    public void tearDown() throws Exception {
        tomcat.stop();
        System.err.println("Test time: " + 
                (System.currentTimeMillis() - t0));
        ExpandWar.delete(tempDir);
    }
    
======= a9e00d5^:"test/org/apache/catalina/startup/TestTomcat.java"

            tomcat.addContext("/", 
                    tempDir.getAbsolutePath());
======= a9e00d5^:"test/org/apache/catalina/startup/TestTomcat.java"

        ByteChunk res = getUrl("http://localhost:" + port + "/");
            new File(base + "output/build/webapps/examples");
        ByteChunk res = getUrl("http://localhost:" + port + "/examples/servlets/servlet/HelloWorldExample");
        tomcat.addContext(null, "/", base);
    }

======= cfb18a0^:"test/org/apache/catalina/startup/TestTomcat.java"

        tempDir = new File("output/tmp");
        tomcat.getHost().setAppBase(tempDir.getAbsolutePath());
======= cfb18a0^:"test/org/apache/catalina/startup/TestTomcat.java"


======= 768af9f^:"java/org/apache/jasper/compiler/JspUtil.java"

        String targetType = expectedType.getName();

======= 50d0e6e^:"java/org/apache/jasper/servlet/JspServlet.java"

======= 50d0e6e^:"java/org/apache/jasper/servlet/JspServlet.java"

            log.debug("\t  Request Params: ");
            Enumeration<String> e = request.getParameterNames();
            while (e.hasMoreElements()) {
                String name = e.nextElement();
                log.debug("\t\t " + name + " = " 
                          + request.getParameter(name));
            }

======= 9dc93f5^:"java/org/apache/catalina/Valve.java"

     *     executing <code>context.invokeNext()</code>.
======= 9dc93f5^:"java/org/apache/catalina/Valve.java"

     *     <code>invokeNext()</code> method has returned.
     *     specified Response after the <code>invokeNext()</code> method has

======= a9f0239^:"java/org/apache/catalina/loader/WebappClassLoader.java"

            Iterator<ResourceEntry> loadedClasses = ((HashMap<String, ResourceEntry>) resourceEntries.clone()).values().iterator();

======= f0d447d^:"java/org/apache/catalina/ha/session/JvmRouteBinderValve.java"

======= f0d447d^:"java/org/apache/catalina/ha/session/JvmRouteBinderValve.java"

             && getCluster() != null
             if (manager != null && manager instanceof ClusterManager
                     && getCluster().getManager(((ClusterManager)manager).getName()) != null)
======= f0d447d^:"java/org/apache/catalina/ha/session/JvmRouteBinderValve.java"

        // now sending the change to all other clusternode!
        ClusterManager manager = (ClusterManager)catalinaSession.getManager();
        sendSessionIDClusterBackup(manager,request,sessionId, newSessionID);
======= f0d447d^:"java/org/apache/catalina/ha/session/JvmRouteBinderValve.java"

        if (cluster == null) {
            throw new RuntimeException("No clustering support at container "
                    + container.getName());
        }
        if (log.isInfoEnabled())

======= 83e98da^:"java/org/apache/catalina/ha/session/DeltaManager.java"

            if (msg != null) session.setLastTimeReplicated(System.currentTimeMillis());

======= 6f3e56e^:"java/org/apache/catalina/session/StandardSession.java"

    protected transient boolean expiring = false;
======= 6f3e56e^:"java/org/apache/catalina/session/StandardSession.java"

    protected boolean isValid = false;
======= 6f3e56e^:"java/org/apache/catalina/session/StandardSession.java"

        // Mark this session as "being expired" if needed
        if (expiring)

======= aa8a2d3^:"java/org/apache/catalina/tribes/membership/McastServiceImpl.java"

======= aa8a2d3^:"java/org/apache/catalina/tribes/membership/McastServiceImpl.java"

======= aa8a2d3^:"java/org/apache/catalina/tribes/membership/McastServiceImpl.java"

    protected ExecutorService executor = new ThreadPoolExecutor(0, 2, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<Runnable>());
======= aa8a2d3^:"java/org/apache/catalina/tribes/transport/ReceiverBase.java"

======= aa8a2d3^:"java/org/apache/catalina/tribes/transport/ReceiverBase.java"

======= aa8a2d3^:"java/org/apache/catalina/tribes/transport/ReceiverBase.java"

            TaskQueue taskqueue = new TaskQueue();
            executor = new ThreadPoolExecutor(minThreads, maxThreads, maxIdleTime, TimeUnit.MILLISECONDS,taskqueue, tf);
            taskqueue.setParent((ThreadPoolExecutor)executor);
======= aa8a2d3^:"java/org/apache/catalina/tribes/transport/ReceiverBase.java"

 // ---------------------------------------------- TaskQueue Inner Class
    class TaskQueue extends LinkedBlockingQueue<Runnable> {
        ThreadPoolExecutor parent = null;
        public TaskQueue() {
            super();
        }
        public TaskQueue(int initialCapacity) {
            super(initialCapacity);
        }
        public TaskQueue(Collection<? extends Runnable> c) {
            super(c);
        }
        public void setParent(ThreadPoolExecutor tp) {
            parent = tp;
        }
        
        public boolean force(Runnable o) {
            if ( parent.isShutdown() ) throw new RejectedExecutionException("Executor not running, can't force a command into the queue");
            return super.offer(o); //forces the item onto the queue, to be used if the task is rejected
        }
        public boolean offer(Runnable o) {
            //we can't do any checks
            if (parent==null) return super.offer(o);
            //we are maxed out on threads, simply queue the object
            if (parent.getPoolSize() == parent.getMaximumPoolSize()) return super.offer(o);
            //we have idle threads, just add it to the queue
            //this is an approximation, so it could use some tuning
            if (parent.getActiveCount()<(parent.getPoolSize())) return super.offer(o);
            //if we have less threads than maximum force creation of a new thread
            if (parent.getPoolSize()<parent.getMaximumPoolSize()) return false;
            //if we reached here, we need to add it to the queue
            return super.offer(o);
        }
    }
======= aa8a2d3^:"java/org/apache/catalina/tribes/transport/ReceiverBase.java"


======= 80f8ec6^:"java/org/apache/catalina/realm/GenericPrincipal.java"

======= 80f8ec6^:"java/org/apache/catalina/realm/GenericPrincipal.java"

======= 80f8ec6^:"java/org/apache/catalina/realm/GenericPrincipal.java"

======= 80f8ec6^:"java/org/apache/catalina/realm/GenericPrincipal.java"

======= 80f8ec6^:"java/org/apache/catalina/realm/JAASRealm.java"

        Principal principal = createPrincipal(username, subject);
======= 80f8ec6^:"java/org/apache/catalina/realm/JAASRealm.java"

    protected Principal createPrincipal(String username, Subject subject) {
======= 80f8ec6^:"java/org/apache/catalina/realm/JAASRealm.java"

        return new GenericPrincipal(this, username, null, roles, userPrincipal);
======= 80f8ec6^:"java/org/apache/catalina/session/StandardSession.java"

======= 80f8ec6^:"java/org/apache/catalina/session/StandardSession.java"

======= 80f8ec6^:"java/org/apache/catalina/session/StandardSession.java"


======= c1099f7^:"java/org/apache/catalina/ha/session/DeltaSession.java"

                    getDeltaRequest().execute(this);

======= 202a33e^:"java/org/apache/jasper/compiler/Generator.java"

======= 202a33e^:"java/org/apache/jasper/compiler/Generator.java"

======= 202a33e^:"java/org/apache/jasper/compiler/Generator.java"

            } else {
                // The object could be a custom action with an associated
                                + "(_jspx_page_context.getAttribute(\""
                                + "\", PageContext.PAGE_SCOPE), \""
======= 202a33e^:"java/org/apache/jasper/compiler/Generator.java"

======= 202a33e^:"java/org/apache/jasper/compiler/Generator.java"

======= 202a33e^:"java/org/apache/jasper/compiler/PageInfo.java"

======= 202a33e^:"java/org/apache/jasper/compiler/PageInfo.java"

======= 202a33e^:"java/org/apache/jasper/compiler/PageInfo.java"

======= 202a33e^:"java/org/apache/jasper/compiler/PageInfo.java"


======= c6818a0^:"java/org/apache/catalina/realm/JNDIRealm.java"

            // iPlanet support if the values starts with {SHA1}
            if (password.startsWith("{SHA}")) {

======= d92da6e^:"modules/jdbc-pool/test/org/apache/tomcat/jdbc/test/CheckOutThreadTest.java"

        this.datasource.getPoolProperties().setValidationQuery("SELECT 1");
======= d92da6e^:"modules/jdbc-pool/test/org/apache/tomcat/jdbc/test/CheckOutThreadTest.java"

        this.datasource.getPoolProperties().setValidationQuery("SELECT 1");
======= d92da6e^:"modules/jdbc-pool/test/org/apache/tomcat/jdbc/test/CheckOutThreadTest.java"

        this.datasource.getPoolProperties().setValidationQuery("SELECT 1");
======= d92da6e^:"modules/jdbc-pool/test/org/apache/tomcat/jdbc/test/CheckOutThreadTest.java"

        this.datasource.getPoolProperties().setValidationQuery("SELECT 1");
======= d92da6e^:"modules/jdbc-pool/test/org/apache/tomcat/jdbc/test/CheckOutThreadTest.java"

        this.datasource.getPoolProperties().setValidationQuery("SELECT 1");
======= d92da6e^:"modules/jdbc-pool/test/org/apache/tomcat/jdbc/test/CheckOutThreadTest.java"

        this.datasource.getPoolProperties().setValidationQuery("SELECT 1");
======= d92da6e^:"modules/jdbc-pool/test/org/apache/tomcat/jdbc/test/CheckOutThreadTest.java"

        this.datasource.getPoolProperties().setValidationQuery("SELECT 1");
======= d92da6e^:"modules/jdbc-pool/test/org/apache/tomcat/jdbc/test/CheckOutThreadTest.java"

        this.datasource.getPoolProperties().setValidationQuery("SELECT 1");
======= d92da6e^:"modules/jdbc-pool/test/org/apache/tomcat/jdbc/test/DefaultProperties.java"

        url = "jdbc:mysql://localhost:3306/mysql?autoReconnect=true";
        driverClassName = "com.mysql.jdbc.Driver";
        password = "password";
        username = "root";
======= d92da6e^:"modules/jdbc-pool/test/org/apache/tomcat/jdbc/test/DefaultProperties.java"

        validationQuery = "SELECT 1";
======= d92da6e^:"modules/jdbc-pool/test/org/apache/tomcat/jdbc/test/TestSlowQueryReport.java"

        String slowSql = "select 1";
            ResultSet rs = st.executeQuery(slowSql);

======= ef96fa2^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/PooledConnection.java"


======= 76a4eb3^:"java/org/apache/jasper/compiler/JspRuntimeContext.java"

                // Create a file read permission for web app tempdir (work)
                // directory
                        (new FilePermission(workDir,"read"));
                permissionCollection.add(new FilePermission(workDir,"read"));

======= 51fd68b^:"java/org/apache/catalina/tribes/membership/McastService.java"

======= 51fd68b^:"java/org/apache/catalina/tribes/membership/McastService.java"

                                    this);
======= 51fd68b^:"java/org/apache/catalina/tribes/membership/McastServiceImpl.java"

======= 51fd68b^:"java/org/apache/catalina/tribes/membership/McastServiceImpl.java"

======= 51fd68b^:"java/org/apache/catalina/tribes/membership/McastServiceImpl.java"

        MessageListener msgservice)
======= 51fd68b^:"java/org/apache/catalina/tribes/membership/McastServiceImpl.java"

======= 51fd68b^:"java/org/apache/catalina/tribes/membership/McastServiceImpl.java"

        socket.setLoopbackMode(true); //hint that we don't need loop back messages

======= c768090^:"java/org/apache/catalina/ha/session/DeltaManager.java"

        if(notifySessionListenersOnReplication)
        else

======= b3e2be4^:"java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java"


======= cc1f0dd^:"java/org/apache/catalina/startup/HostConfig.java"

                deployedApp.redeployResources.put
                    (xml.getAbsolutePath(), new Long(xml.lastModified()));
======= cc1f0dd^:"java/org/apache/catalina/startup/HostConfig.java"

======= cc1f0dd^:"java/org/apache/catalina/startup/HostConfig.java"

======= cc1f0dd^:"java/org/apache/catalina/startup/HostConfig.java"

                File xmlCopy = new File(configBase(), file + ".xml");
======= cc1f0dd^:"java/org/apache/catalina/startup/HostConfig.java"

                deployedApp.redeployResources.put
                    (xmlCopy.getAbsolutePath(), new Long(xmlCopy.lastModified()));
======= cc1f0dd^:"java/org/apache/catalina/startup/HostConfig.java"


======= 468f370^:"java/org/apache/catalina/session/StandardSession.java"

======= 468f370^:"java/org/apache/catalina/session/StandardSession.java"

======= 468f370^:"java/org/apache/catalina/session/StandardSession.java"

     * The <code>java.lang.Method</code> for the
     * <code>fireContainerEvent()</code> method of the
     * <code>org.apache.catalina.core.StandardContext</code> method,
     * if our Context implementation is of this class.  This value is
     * computed dynamically the first time it is needed, or after
     * a session reload (since it is declared transient).
     */
    protected transient Method containerEventMethod = null;
    /**
     * The method signature for the <code>fireContainerEvent</code> method.
     */
    protected static final Class<?> containerEventTypes[] =
        { String.class, Object.class };
    /**
======= 468f370^:"java/org/apache/catalina/session/StandardSession.java"

        if (!"org.apache.catalina.core.StandardContext".equals
            (context.getClass().getName())) {
            return; // Container events are not supported
        // NOTE:  Race condition is harmless, so do not synchronize
        if (containerEventMethod == null) {
            containerEventMethod =
                context.getClass().getMethod("fireContainerEvent",
                                             containerEventTypes);
        }
        Object containerEventParams[] = new Object[2];
        containerEventParams[0] = type;
        containerEventParams[1] = data;
        containerEventMethod.invoke(context, containerEventParams);

======= f00029e^:"java/org/apache/catalina/valves/AccessLogValve.java"

    private String dateStamp = "";
======= f00029e^:"java/org/apache/catalina/valves/AccessLogValve.java"

    private long currentMillis = 0;
======= f00029e^:"java/org/apache/catalina/valves/AccessLogValve.java"

            currentDate = new Date(System.currentTimeMillis());
            dateStamp = fileDateFormatter.format(currentDate);
======= f00029e^:"java/org/apache/catalina/valves/AccessLogValve.java"

                // We need a new currentDate
                currentDate = new Date(systime);
                String tsDate = fileDateFormatter.format(currentDate);
======= f00029e^:"java/org/apache/catalina/valves/AccessLogValve.java"

                    currentDate = new Date(System.currentTimeMillis());
                    dateStamp = fileDateFormatter.format(currentDate);

======= 36feee0^:"java/org/apache/coyote/http11/Http11Processor.java"

    public void parseHost(MessageBytes valueMB) {

======= 9fa7640^:"java/org/apache/catalina/tribes/membership/McastServiceImpl.java"

     * When was the service started
     */
    protected long serviceStartTime = System.currentTimeMillis();
    
    /**
======= 9fa7640^:"java/org/apache/catalina/tribes/membership/McastServiceImpl.java"

            serviceStartTime = System.currentTimeMillis();
======= 9fa7640^:"java/org/apache/catalina/tribes/membership/McastServiceImpl.java"

            serviceStartTime = Long.MAX_VALUE;
======= 9fa7640^:"java/org/apache/catalina/tribes/membership/McastServiceImpl.java"

       return this.serviceStartTime;

======= 96167ed^:"java/org/apache/tomcat/util/res/StringManager.java"

        this( packageName, Locale.getDefault() );
    }
    private StringManager(String packageName, Locale loc) {
        bundle = ResourceBundle.getBundle(bundleName, loc);
    private StringManager(ResourceBundle bundle ) {
        this.bundle=bundle;
        locale = bundle.getLocale();
    }
======= 96167ed^:"java/org/apache/tomcat/util/res/StringManager.java"

    /**
     * Get the StringManager for a particular package. If a manager for
     * a package already exists, it will be reused, else a new
     * StringManager will be created and returned.
     *
     * @param bundle The resource bundle
     */
    public synchronized static StringManager getManager(ResourceBundle bundle) {
        return new StringManager( bundle );
    }
    /**
     * Get the StringManager for a particular package and Locale. If a manager for
     * a package already exists, it will be reused, else a new
     * StringManager will be created for that Locale and returned.
     *
     * @param packageName The package name
     * @param loc The locale
     */
    public synchronized static StringManager getManager(String packageName,Locale loc) {
        StringManager mgr = managers.get(packageName+"_"+loc.toString());
        if (mgr == null) {
            mgr = new StringManager(packageName,loc);
            managers.put(packageName+"_"+loc.toString(), mgr);
        }
        return mgr;
    }

======= 1ad0501^:"java/org/apache/catalina/core/StandardHostValve.java"

======= 1ad0501^:"java/org/apache/catalina/core/StandardHostValve.java"

            String message = RequestUtil.filter(response.getMessage());

======= 54b9da9^:"java/org/apache/catalina/connector/MapperListener.java"

            host.removeContainerListener(this);
======= 54b9da9^:"java/org/apache/catalina/mbeans/MBeanUtils.java"

======= 54b9da9^:"java/org/apache/catalina/mbeans/MBeanUtils.java"

======= 54b9da9^:"java/org/apache/catalina/mbeans/MBeanUtils.java"

        if (connector.getClass().getName().indexOf("CoyoteConnector") >= 0 ) {
            try {
                String address = (String)
                    IntrospectionUtils.getProperty(connector, "address");
                Integer port = (Integer)
                    IntrospectionUtils.getProperty(connector, "port");
                StringBuffer sb = new StringBuffer(domain);
                sb.append(":type=Connector");
                sb.append(",port=" + port);
                if ((address != null) && (address.length()>0)) {
                    sb.append(",address=" + address);
                }
                name = new ObjectName(sb.toString());
                return (name);
            } catch (Exception e) {
                throw new MalformedObjectNameException
                    ("Cannot create object name for " + connector+e);
        } else {
                ("Cannot create object name for " + connector);
======= 54b9da9^:"java/org/apache/catalina/mbeans/MBeanUtils.java"

        connector.setService(service);
        String mname = createManagedName(connector);
        ManagedBean managed = registry.findManagedBean(mname);
        if (managed == null) {
            return;
        }
        String domain = managed.getDomain();
======= 54b9da9^:"java/org/apache/catalina/mbeans/MBeanUtils.java"

======= 54b9da9^:"java/org/apache/catalina/mbeans/MBeanUtils.java"

        String mname = createManagedName(context);
        ManagedBean managed = registry.findManagedBean(mname);
        if (managed == null) {
            return;
        }
        String domain = managed.getDomain();
======= 54b9da9^:"java/org/apache/catalina/mbeans/MBeanUtils.java"

======= 54b9da9^:"java/org/apache/catalina/mbeans/MBeanUtils.java"

        String mname = createManagedName(engine);
        ManagedBean managed = registry.findManagedBean(mname);
        if (managed == null) {
            return;
        }
        String domain = managed.getDomain();
======= 54b9da9^:"java/org/apache/catalina/mbeans/MBeanUtils.java"

        String mname = createManagedName(host);
        ManagedBean managed = registry.findManagedBean(mname);
        if (managed == null) {
            return;
        }
        String domain = managed.getDomain();
======= 54b9da9^:"java/org/apache/catalina/mbeans/MBeanUtils.java"

       if( mserver.isRegistered(oname) )
======= 54b9da9^:"java/org/apache/catalina/mbeans/MBeanUtils.java"

======= 54b9da9^:"java/org/apache/catalina/mbeans/MBeanUtils.java"

======= 54b9da9^:"java/org/apache/catalina/mbeans/ServerLifecycleListener.java"

        } else if (Lifecycle.STOP_EVENT.equals(event.getType())) {
======= 54b9da9^:"java/org/apache/catalina/mbeans/ServerLifecycleListener.java"

        // Create the MBean for the Service itself
        if (log.isDebugEnabled())
            log.debug("Creating MBean for Service " + service);
        //MBeanUtils.createMBean(service);
======= 54b9da9^:"java/org/apache/catalina/mbeans/ServerLifecycleListener.java"

======= 54b9da9^:"java/org/apache/catalina/mbeans/ServerLifecycleListener.java"

        //MBeanUtils.destroyMBean(context);
======= 54b9da9^:"java/org/apache/catalina/mbeans/ServerLifecycleListener.java"

        //MBeanUtils.destroyMBean(engine);
======= 54b9da9^:"java/org/apache/catalina/mbeans/ServerLifecycleListener.java"

        //MBeanUtils.destroyMBean(host);
======= 54b9da9^:"java/org/apache/catalina/mbeans/ServerLifecycleListener.java"

        //MBeanUtils.destroyMBean(server);
======= 54b9da9^:"java/org/apache/catalina/mbeans/ServerLifecycleListener.java"

            //destroyMBeans(engine);
        // Deregister the MBean for the Service itself
        if (log.isDebugEnabled()) {
            log.debug("Destroying MBean for Service " + service);
        //MBeanUtils.destroyMBean(service);

======= d04dd88^:"java/org/apache/catalina/realm/JNDIRealm.java"

 * <li>If the directory server contains nested roles, you can search for roles
 * recursively by setting <code>roleRecursionLimit</code> to some positive value.
 * The default value is <code>0</code>, so role searches do not recurse.</li>
======= d04dd88^:"java/org/apache/catalina/realm/JNDIRealm.java"

    /**
     * The maximum recursion depth when resolving roles recursively.
     * By default we don't resolve roles recursively.
     */
    protected int roleRecursionLimit = 0;
======= d04dd88^:"java/org/apache/catalina/realm/JNDIRealm.java"

======= d04dd88^:"java/org/apache/catalina/realm/JNDIRealm.java"

     * Return the maximum recursion depth for role searches.
     */
    public int getRoleRecursionLimit() {
        return (this.roleRecursionLimit);
    }
    /**
     * Set the maximum recursion depth for role searches.
     *
     * @param roleRecursionLimit The new recursion limit
     */
    public void setRoleRecursionLimit(int roleRecursionLimit) {
        this.roleRecursionLimit = roleRecursionLimit;
    }
    /**
======= d04dd88^:"java/org/apache/catalina/realm/JNDIRealm.java"

======= d04dd88^:"java/org/apache/catalina/realm/JNDIRealm.java"

    /**
     * Add roles to a user and search for other roles containing them themselves.
     * We search recursively with a limited depth.
     * By default the depth is 0, and we only use direct roles.
     * The search needs to use the distinguished role names,
     * but to return the role names.
     *
     * @param depth Recursion depth, starting at zero
     * @param context The directory context we are searching
     * @param recursiveMap The cumulative result map of role names and DNs.
     * @param recursiveSet The cumulative result set of role names.
     * @param groupName The role name to add to the list.
     * @param groupDName The distinguished name of the role.
     *
     * @exception NamingException if a directory server error occurs
     */
    private void getRolesRecursive(int depth, DirContext context, Map<String, String> recursiveMap, Set<String> recursiveSet,
                                     String groupName, String groupDName) throws NamingException {
        if (containerLog.isTraceEnabled())
            containerLog.trace("Recursive search depth " + depth + " for group '" + groupDName + " (" + groupName + ")'");
        // Adding the given group to the result set if not already found
        if (!recursiveSet.contains(groupDName)) {
            recursiveSet.add(groupDName);
            recursiveMap.put(groupDName, groupName);
            if (depth >= roleRecursionLimit) {
                if (roleRecursionLimit > 0)
                    containerLog.warn("Terminating recursive role search because of recursion limit " +
                                      roleRecursionLimit + ", results might be incomplete");
                return;
            }
            // Prepare the parameters for searching groups
            String filter = roleFormat.format(new String[] { groupDName });
            SearchControls controls = new SearchControls();
            controls.setSearchScope(roleSubtree ? SearchControls.SUBTREE_SCOPE : SearchControls.ONELEVEL_SCOPE);
            controls.setReturningAttributes(new String[] { roleName });
            if (containerLog.isTraceEnabled()) {
                containerLog.trace("Recursive search in role base '" + roleBase + "' for attribute '" + roleName + "'" +
                                   " with filter expression '" + filter + "'");
            }
            // Searching groups that assign the given group
            NamingEnumeration<SearchResult> results =
                context.search(roleBase, filter, controls);
            if (results != null) {
                // Iterate over the resulting groups
                try {
                    while (results.hasMore()) {
                        SearchResult result = results.next();
                        Attributes attrs = result.getAttributes();
                        if (attrs == null)
                            continue;
                        String dname = getDistinguishedName(context, roleBase, result);
                        String name = getAttributeValue(roleName, attrs);
                        if (name != null && dname != null) {
                           getRolesRecursive(depth+1, context, recursiveMap, recursiveSet, name, dname);
                        }
                    }
                } catch (PartialResultException ex) {
                    if (!adCompat)
                        throw ex;
                }
            }
        }
    }
======= d04dd88^:"java/org/apache/catalina/realm/JNDIRealm.java"

======= d04dd88^:"java/org/apache/catalina/realm/JNDIRealm.java"

            for (Iterator<String> i = keys.iterator(); i.hasNext();) {
                Object k = i.next();
                containerLog.trace(  "  Found direct role " + k + " -> " + groupMap.get(k));
        HashSet<String> recursiveSet = new HashSet<String>();
        HashMap<String, String> recursiveMap = new HashMap<String, String>();
        for (Iterator<String> i = keys.iterator(); i.hasNext();) {
            String k = i.next();
            getRolesRecursive(0, context, recursiveMap, recursiveSet, groupMap.get(k), k);
        }
        HashSet<String> resultSet = new HashSet<String>(list);
        resultSet.addAll(recursiveMap.values());
        if (containerLog.isTraceEnabled()) {
            containerLog.trace("  Returning " + resultSet.size() + " roles");
            for (Iterator<String> i = resultSet.iterator(); i.hasNext();)
                containerLog.trace(  "  Found role " + i.next());
        return new ArrayList<String>(resultSet);
        session attribute serializatyion. (mturk)

======= 04cacaf^:"java/org/apache/jasper/runtime/PageContextImpl.java"

======= 04cacaf^:"java/org/apache/jasper/runtime/PageContextImpl.java"

======= 04cacaf^:"java/org/apache/jasper/runtime/PageContextImpl.java"


======= c8cbc28^:"java/org/apache/catalina/core/Constants.java"

======= c8cbc28^:"java/org/apache/catalina/core/StandardWrapper.java"

                    req.setQueryString("jsp_precompile=true");

======= 90e8d0d^:"java/org/apache/catalina/realm/JNDIRealm.java"

======= 90e8d0d^:"java/org/apache/catalina/realm/JNDIRealm.java"

    protected String getDistinguishedName(DirContext context, String base, SearchResult result)
        throws NamingException {
        // Get the entry's distinguished name
        NameParser parser = context.getNameParser("");
        Name contextName = parser.parse(context.getNameInNamespace());
        Name baseName = parser.parse(base);
        // Bugzilla 32269
        Name entryName = parser.parse(new CompositeName(result.getName()).get(0));
        Name name = contextName.addAll(baseName);
        name = name.addAll(entryName);
        return name.toString();

======= 78a994a^:"java/org/apache/jasper/runtime/BodyContentImpl.java"

    // See comment in setWriter()
    private int bufferSizeSave;
    
======= 78a994a^:"java/org/apache/jasper/runtime/BodyContentImpl.java"

======= 78a994a^:"java/org/apache/jasper/runtime/BodyContentImpl.java"

        if (writer != null) {
            // According to the spec, the JspWriter returned by 
            // JspContext.pushBody(java.io.Writer writer) must behave as
            // though it were unbuffered. This means that its getBufferSize()
            // must always return 0. The implementation of
            // JspWriter.getBufferSize() returns the value of JspWriter's
            // 'bufferSize' field, which is inherited by this class. 
            // Therefore, we simply save the current 'bufferSize' (so we can 
            // later restore it should this BodyContentImpl ever be reused by
            // a call to PageContext.pushBody()) before setting it to 0.
            if (bufferSize != 0) {
                bufferSizeSave = bufferSize;
                bufferSize = 0;
            }
        } else {
            bufferSize = bufferSizeSave;

======= 42a093b^:"java/org/apache/coyote/http11/Http11AprProcessor.java"

            // Setting up filters, and parse some request headers
            rp.setStage(org.apache.coyote.Constants.STAGE_PREPARE);
            try {
                prepareRequest();
            } catch (Throwable t) {
                if (log.isDebugEnabled()) {
                    log.debug(sm.getString("http11processor.request.prepare"), t);
                // 400 - Internal Server Error
                response.setStatus(400);
                error = true;
======= 42a093b^:"java/org/apache/coyote/http11/Http11NioProcessor.java"

            // Setting up filters, and parse some request headers
            rp.setStage(org.apache.coyote.Constants.STAGE_PREPARE);
            try {
                prepareRequest();
            } catch (Throwable t) {
                if (log.isDebugEnabled()) {
                    log.debug(sm.getString("http11processor.request.prepare"), t);
                // 400 - Internal Server Error
                response.setStatus(400);
                error = true;
======= 42a093b^:"java/org/apache/coyote/http11/Http11Processor.java"

            // Setting up filters, and parse some request headers
            rp.setStage(org.apache.coyote.Constants.STAGE_PREPARE);
            try {
                prepareRequest();
            } catch (Throwable t) {
                if (log.isDebugEnabled()) {
                    log.debug(sm.getString("http11processor.request.prepare"), t);
                // 400 - Internal Server Error
                response.setStatus(400);
                error = true;
======= 42a093b^:"java/org/apache/coyote/http11/InternalAprInputBuffer.java"

======= 42a093b^:"java/org/apache/coyote/http11/InternalInputBuffer.java"

======= 42a093b^:"java/org/apache/coyote/http11/InternalNioInputBuffer.java"


======= f109fb9^:"java/org/apache/catalina/loader/WebappClassLoader.java"

                clazz = loader.loadClass(name);
======= f109fb9^:"java/org/apache/catalina/loader/WebappClassLoader.java"

                clazz = loader.loadClass(name);

======= 80b90ee^:"java/org/apache/jasper/compiler/Generator.java"

                            + ";"
                            + ((jreversion == null) ? "" : "version="
======= 80b90ee^:"java/org/apache/jasper/compiler/Generator.java"

                            + ";"
                            + ((jreversion == null) ? "" : "version="

======= 6ecc35d^:"java/org/apache/catalina/ssi/SSIServlet.java"


======= 0c48c98^:"java/org/apache/tomcat/util/threads/TaskThreadFactory.java"

    final ThreadGroup group;
    final AtomicInteger threadNumber = new AtomicInteger(1);
    final String namePrefix;
    final boolean daemon;
    final int threadPriority;

======= 4e1c4b2^:"java/org/apache/tomcat/util/threads/TaskQueue.java"

    ThreadPoolExecutor parent = null;
======= 4e1c4b2^:"java/org/apache/tomcat/util/threads/TaskQueue.java"

        //we can't do any checks
        if (parent==null) return super.offer(o);
        //we are maxed out on threads, simply queue the object
        if (parent.getPoolSize() == parent.getMaximumPoolSize()) return super.offer(o);
        //we have idle threads, just add it to the queue
        if (parent.getActiveCount()<(parent.getPoolSize())) return super.offer(o);
        //if we have less threads than maximum force creation of a new thread
        if (parent.getPoolSize()<parent.getMaximumPoolSize()) return false;
        //if we reached here, we need to add it to the queue
        return super.offer(o);

======= a228c06^:"java/org/apache/jk/server/JkCoyoteHandler.java"

        req.recycle();

======= f1fd999^:"java/org/apache/catalina/core/StandardContext.java"

======= f1fd999^:"java/org/apache/catalina/core/StandardContext.java"

======= f1fd999^:"java/org/apache/catalina/core/StandardContext.java"

======= f1fd999^:"java/org/apache/catalina/core/StandardContext.java"

======= f1fd999^:"java/org/apache/catalina/core/StandardContext.java"

======= f1fd999^:"java/org/apache/catalina/core/StandardContext.java"

======= f1fd999^:"java/org/apache/catalina/core/StandardContext.java"

======= f1fd999^:"java/org/apache/catalina/core/StandardContext.java"

======= f1fd999^:"java/org/apache/catalina/core/StandardContext.java"

======= f1fd999^:"java/org/apache/catalina/core/StandardContext.java"

======= f1fd999^:"java/org/apache/catalina/core/StandardContext.java"

        synchronized (applicationListeners) {
======= f1fd999^:"java/org/apache/catalina/core/StandardContext.java"

        synchronized (applicationParameters) {
======= f1fd999^:"java/org/apache/catalina/core/StandardContext.java"

        synchronized (constraints) {
======= f1fd999^:"java/org/apache/catalina/core/StandardContext.java"

        synchronized (filterMaps) {
======= f1fd999^:"java/org/apache/catalina/core/StandardContext.java"

        synchronized (filterMaps) {
======= f1fd999^:"java/org/apache/catalina/core/StandardContext.java"

        synchronized (instanceListeners) {
======= f1fd999^:"java/org/apache/catalina/core/StandardContext.java"

        synchronized (securityRoles) {
======= f1fd999^:"java/org/apache/catalina/core/StandardContext.java"

        synchronized (servletMappings) {
======= f1fd999^:"java/org/apache/catalina/core/StandardContext.java"

        synchronized (watchedResources) {
======= f1fd999^:"java/org/apache/catalina/core/StandardContext.java"

        synchronized (welcomeFiles) {
======= f1fd999^:"java/org/apache/catalina/core/StandardContext.java"

        synchronized (wrapperLifecycles) {
======= f1fd999^:"java/org/apache/catalina/core/StandardContext.java"

        synchronized (wrapperListeners) {
======= f1fd999^:"java/org/apache/catalina/core/StandardContext.java"

        synchronized (instanceListeners) {
======= f1fd999^:"java/org/apache/catalina/core/StandardContext.java"

        synchronized (wrapperLifecycles) {
======= f1fd999^:"java/org/apache/catalina/core/StandardContext.java"

        synchronized (wrapperListeners) {
======= f1fd999^:"java/org/apache/catalina/core/StandardContext.java"

        return (applicationParameters);
======= f1fd999^:"java/org/apache/catalina/core/StandardContext.java"

        return (instanceListeners);
======= f1fd999^:"java/org/apache/catalina/core/StandardContext.java"

        synchronized (securityRoles) {
======= f1fd999^:"java/org/apache/catalina/core/StandardContext.java"

        return (securityRoles);
======= f1fd999^:"java/org/apache/catalina/core/StandardContext.java"

        synchronized (servletMappings) {
======= f1fd999^:"java/org/apache/catalina/core/StandardContext.java"

        synchronized (servletMappings) {
======= f1fd999^:"java/org/apache/catalina/core/StandardContext.java"

        synchronized (welcomeFiles) {
======= f1fd999^:"java/org/apache/catalina/core/StandardContext.java"

        return watchedResources;
======= f1fd999^:"java/org/apache/catalina/core/StandardContext.java"

        return (welcomeFiles);
======= f1fd999^:"java/org/apache/catalina/core/StandardContext.java"

        return (wrapperLifecycles);
======= f1fd999^:"java/org/apache/catalina/core/StandardContext.java"

        return (wrapperListeners);
======= f1fd999^:"java/org/apache/catalina/core/StandardContext.java"

        synchronized (applicationListeners) {
======= f1fd999^:"java/org/apache/catalina/core/StandardContext.java"

        synchronized (applicationParameters) {
======= f1fd999^:"java/org/apache/catalina/core/StandardContext.java"

        synchronized (constraints) {
======= f1fd999^:"java/org/apache/catalina/core/StandardContext.java"

        synchronized (filterMaps) {
======= f1fd999^:"java/org/apache/catalina/core/StandardContext.java"

        synchronized (instanceListeners) {
======= f1fd999^:"java/org/apache/catalina/core/StandardContext.java"

        synchronized (securityRoles) {
======= f1fd999^:"java/org/apache/catalina/core/StandardContext.java"

        synchronized (servletMappings) {
======= f1fd999^:"java/org/apache/catalina/core/StandardContext.java"

        synchronized (watchedResources) {
======= f1fd999^:"java/org/apache/catalina/core/StandardContext.java"

        synchronized (welcomeFiles) {
======= f1fd999^:"java/org/apache/catalina/core/StandardContext.java"

        synchronized (wrapperLifecycles) {
======= f1fd999^:"java/org/apache/catalina/core/StandardContext.java"

        synchronized (wrapperListeners) {
======= f1fd999^:"java/org/apache/catalina/core/StandardContext.java"

        instanceListeners = new String[0];
======= f1fd999^:"java/org/apache/catalina/core/StandardHost.java"

======= f1fd999^:"java/org/apache/catalina/core/StandardHost.java"

        // Skip duplicate aliases
        for (int i = 0; i < aliases.length; i++) {
            if (aliases[i].equals(alias))
                return;
        // Add this alias to the list
        String newAliases[] = new String[aliases.length + 1];
        for (int i = 0; i < aliases.length; i++)
            newAliases[i] = aliases[i];
        newAliases[aliases.length] = alias;
        aliases = newAliases;
======= f1fd999^:"java/org/apache/catalina/core/StandardHost.java"

        return (this.aliases);
======= f1fd999^:"java/org/apache/catalina/core/StandardHost.java"

        synchronized (aliases) {
======= f1fd999^:"java/org/apache/catalina/core/StandardHost.java"

        return aliases;
======= f1fd999^:"java/org/apache/catalina/tribes/membership/Membership.java"

======= f1fd999^:"java/org/apache/catalina/tribes/membership/Membership.java"

        synchronized (members) {
======= f1fd999^:"java/org/apache/catalina/tribes/membership/Membership.java"

      synchronized (members) {
======= f1fd999^:"java/org/apache/catalina/tribes/membership/Membership.java"

        synchronized (members) {
======= f1fd999^:"java/org/apache/catalina/util/InstanceSupport.java"

======= f1fd999^:"java/org/apache/catalina/util/InstanceSupport.java"

      synchronized (listeners) {
======= f1fd999^:"java/org/apache/catalina/util/InstanceSupport.java"

        synchronized (listeners) {
======= f1fd999^:"java/org/apache/catalina/util/LifecycleSupport.java"

======= f1fd999^:"java/org/apache/catalina/util/LifecycleSupport.java"

      synchronized (listeners) {
======= f1fd999^:"java/org/apache/catalina/util/LifecycleSupport.java"

        synchronized (listeners) {

======= 81ebe8f^:"java/org/apache/catalina/ant/jmx/JMXAccessorTask.java"

    // ----------------------------------------------------- Instance Variables
    public static String JMX_SERVICE_PREFIX = "service:jmx:rmi:///jndi/rmi://";
    public static String JMX_SERVICE_SUFFIX = "/jmxrmi";

======= f497f12^:"java/org/apache/jasper/Constants.java"

======= f497f12^:"java/org/apache/jasper/Constants.java"

    public static final String[] STANDARD_IMPORTS = { 
======= f497f12^:"java/org/apache/jasper/Constants.java"

    public static final String[] CACHED_DTD_PUBLIC_IDS = {
    public static final String[] CACHED_DTD_RESOURCE_PATHS = {
======= f497f12^:"java/org/apache/jasper/compiler/PageInfo.java"

        for(int i = 0; i < Constants.STANDARD_IMPORTS.length; i++)
            imports.add(Constants.STANDARD_IMPORTS[i]);
======= f497f12^:"java/org/apache/jasper/xmlparser/ParserUtils.java"

        for (int i = 0; i < Constants.CACHED_DTD_PUBLIC_IDS.length; i++) {
            String cachedDtdPublicId = Constants.CACHED_DTD_PUBLIC_IDS[i];
                String resourcePath = Constants.CACHED_DTD_RESOURCE_PATHS[i];

======= 243aa86^:"java/org/apache/catalina/session/ManagerBase.java"

        public DataInputStream run(){               
======= 243aa86^:"java/org/apache/catalina/session/ManagerBase.java"

            }
======= 243aa86^:"java/org/apache/catalina/session/ManagerBase.java"

        // as a hack, you can use a static file - and genarate the same
            randomIS = AccessController.doPrivileged(new PrivilegedSetRandomFile());
======= 243aa86^:"java/org/apache/catalina/session/ManagerBase.java"

                try {
                    randomIS.close();
                } catch (Exception e) {
                    log.warn("Failed to close randomIS.");
                

======= a9a58fb^:"java/org/apache/catalina/manager/Constants.java"

        "<?xml-stylesheet type=\"text/xsl\" href=\"/manager/xform.xsl\" ?>";

======= 23c47da^:"java/org/apache/tomcat/util/res/StringManager.java"

    public String getString(String key, Object[] args) {
        String iString = null;
        // this check for the runtime exception is some pre 1.1.6
        // VM's don't do an automatic toString() on the passed in
        // objects and barf out
        try {
            // ensure the arguments are not null so pre 1.2 VM's don't barf
            if(args==null){
                args = new Object[1];
            }
            
            Object[] nonNullArgs = args;
            for (int i=0; i<args.length; i++) {
                if (args[i] == null) {
                    if (nonNullArgs==args){
                        nonNullArgs=args.clone();
                    }
                    nonNullArgs[i] = "null";
                }
            }
            if( value==null ) value=key;
            mf.setLocale(locale);
            iString = mf.format(nonNullArgs, new StringBuffer(), null).toString();
        } catch (IllegalArgumentException iae) {
            StringBuffer buf = new StringBuffer();
            buf.append(value);
            for (int i = 0; i < args.length; i++) {
                buf.append(" arg[" + i + "]=" + args[i]);
            }
            iString = buf.toString();
        return iString;
    }
    /**
     * Get a string from the underlying resource bundle and format it
     * with the given object argument. This argument can of course be
     * a String object.
     *
     * @param key
     * @param arg
     */
    public String getString(String key, Object arg) {
    /**
     * Get a string from the underlying resource bundle and format it
     * with the given object arguments. These arguments can of course
     * be String objects.
     *
     * @param key
     * @param arg1
     * @param arg2
     */
    public String getString(String key, Object arg1, Object arg2) {
    }
    
    /**
     * Get a string from the underlying resource bundle and format it
     * with the given object arguments. These arguments can of course
     * be String objects.
     *
     * @param key
     * @param arg1
     * @param arg2
     * @param arg3
     */
    public String getString(String key, Object arg1, Object arg2,
    }
    /**
     * Get a string from the underlying resource bundle and format it
     * with the given object arguments. These arguments can of course
     * be String objects.
     *
     * @param key
     * @param arg1
     * @param arg2
     * @param arg3
     * @param arg4
     */
    public String getString(String key, Object arg1, Object arg2,
    }
======= 23c47da^:"java/org/apache/tomcat/util/res/StringManager.java"


======= 360f8eb^:"java/org/apache/catalina/valves/AccessLogValve.java"

======= 360f8eb^:"java/org/apache/catalina/valves/AccessLogValve.java"

        Calendar calendar = Calendar.getInstance(timezone);
        int offset = calendar.get(Calendar.DST_OFFSET);

======= f36a2c4^:"java/org/apache/jasper/compiler/Compiler.java"


======= b10d9da^:"java/org/apache/catalina/core/StandardContext.java"

        support.firePropertyChange("delegate", new Boolean(oldDelegate),
                                   new Boolean(this.delegate));
======= b10d9da^:"java/org/apache/catalina/core/StandardContext.java"

                                   new Boolean(oldAntiJARLocking),
                                   new Boolean(this.antiJARLocking));
======= b10d9da^:"java/org/apache/catalina/core/StandardContext.java"

                                   new Boolean(oldAntiResourceLocking),
                                   new Boolean(this.antiResourceLocking));
======= b10d9da^:"java/org/apache/catalina/core/StandardContext.java"

                                   new Boolean(oldAvailable),
                                   new Boolean(this.available));
======= b10d9da^:"java/org/apache/catalina/core/StandardContext.java"

                                   new Boolean(oldConfigured),
                                   new Boolean(this.configured));
======= b10d9da^:"java/org/apache/catalina/core/StandardContext.java"

                                   new Boolean(oldCookies),
                                   new Boolean(this.cookies));
======= b10d9da^:"java/org/apache/catalina/core/StandardContext.java"

                new Boolean(oldUseHttpOnly),
                new Boolean(this.useHttpOnly));
======= b10d9da^:"java/org/apache/catalina/core/StandardContext.java"

                                   new Boolean(oldCrossContext),
                                   new Boolean(this.crossContext));
======= b10d9da^:"java/org/apache/catalina/core/StandardContext.java"

                                   new Boolean(oldDistributable),
                                   new Boolean(this.distributable));
======= b10d9da^:"java/org/apache/catalina/core/StandardContext.java"

        support.firePropertyChange("ignoreAnnotations", Boolean.valueOf(oldIgnoreAnnotations),
                Boolean.valueOf(this.ignoreAnnotations));
======= b10d9da^:"java/org/apache/catalina/core/StandardContext.java"

                                   new Boolean(oldPrivileged),
                                   new Boolean(this.privileged));
======= b10d9da^:"java/org/apache/catalina/core/StandardContext.java"

                                   new Boolean(oldReloadable),
                                   new Boolean(this.reloadable));
======= b10d9da^:"java/org/apache/catalina/core/StandardContext.java"

                                   new Boolean(oldOverride),
                                   new Boolean(this.override));
======= b10d9da^:"java/org/apache/catalina/core/StandardContext.java"

                                   new Boolean(oldReplaceWelcomeFiles),
                                   new Boolean(this.replaceWelcomeFiles));
======= b10d9da^:"java/org/apache/catalina/core/StandardContext.java"

                                   new Integer(oldSessionTimeout),
                                   new Integer(this.sessionTimeout));
======= b10d9da^:"java/org/apache/catalina/core/StandardContext.java"

                                   new Boolean(oldSwallowOutput),
                                   new Boolean(this.swallowOutput));
======= b10d9da^:"java/org/apache/catalina/core/StandardContext.java"

                                   new Long(oldUnloadDelay),
                                   new Long(this.unloadDelay));
======= b10d9da^:"java/org/apache/catalina/core/StandardContext.java"

                statusPages.put(new Integer(errorPage.getErrorCode()),
======= b10d9da^:"java/org/apache/catalina/core/StandardContext.java"

            return (statusPages.get(new Integer(errorCode)));
======= b10d9da^:"java/org/apache/catalina/core/StandardContext.java"

        ErrorPage errorPage = statusPages.get(new Integer(status));
======= b10d9da^:"java/org/apache/catalina/core/StandardContext.java"

                statusPages.remove(new Integer(errorPage.getErrorCode()));
======= b10d9da^:"java/org/apache/catalina/core/StandardContext.java"

            Integer key = new Integer(loadOnStartup);

======= fae26ce^:"java/org/apache/catalina/core/StandardServer.java"

                    random = new Random(System.currentTimeMillis());
======= fae26ce^:"java/org/apache/catalina/tribes/util/UUIDGenerator.java"

    protected static Random rand = new Random(System.currentTimeMillis());
======= fae26ce^:"test/org/apache/catalina/tribes/demos/LoadTest.java"

        public static Random r = new Random(System.currentTimeMillis());
======= fae26ce^:"test/org/apache/catalina/tribes/demos/MapDemo.java"

        public static Random random = new Random(System.currentTimeMillis());
======= fae26ce^:"test/org/apache/catalina/tribes/test/channel/TestDataIntegrity.java"

        public static Random r = new Random(System.currentTimeMillis());
======= fae26ce^:"test/org/apache/catalina/tribes/test/channel/TestMulticastPackages.java"

        public static Random r = new Random(System.currentTimeMillis());
======= fae26ce^:"test/org/apache/catalina/tribes/test/channel/TestRemoteProcessException.java"

        public static Random r = new Random(System.currentTimeMillis());
======= fae26ce^:"test/org/apache/catalina/tribes/test/channel/TestUdpPackages.java"

        public static Random r = new Random(System.currentTimeMillis());
======= fae26ce^:"test/org/apache/catalina/tribes/test/io/TestSenderConnections.java"

        static Random r = new Random(System.currentTimeMillis());

======= 08f7a5f^:"java/org/apache/catalina/valves/CometConnectionManagerValve.java"

                        Request[] reqs = (Request[])
                            session.getAttribute(cometRequestsAttribute);
======= 08f7a5f^:"java/org/apache/catalina/valves/CometConnectionManagerValve.java"

                                    session.setAttribute(cometRequestsAttribute,
                                            newConnectionInfos);
                                    session.removeAttribute(
                                            cometRequestsAttribute);

======= ac6369a^:"java/org/apache/coyote/http11/Http11Processor.java"

                if (!disableUploadTimeout && keptAlive) {

======= 3b1b7b3^:"modules/jdbc-pool/test/org/apache/tomcat/jdbc/test/StarvationTest.java"


======= 9752018^:"java/org/apache/catalina/connector/RequestFacade.java"

======= 9752018^:"java/org/apache/catalina/servlets/DefaultServlet.java"

======= 9752018^:"java/org/apache/catalina/servlets/DefaultServlet.java"

======= 9752018^:"java/org/apache/catalina/servlets/DefaultServlet.java"


======= 8d2b8ff^:"java/org/apache/catalina/startup/ContextConfig.java"

        if (docBase.startsWith(canonicalAppBase.getPath())) {

======= 156f1ca^:"java/org/apache/catalina/authenticator/SSLAuthenticator.java"

            response.sendError(HttpServletResponse.SC_BAD_REQUEST,

======= 2824a70^:"java/org/apache/jasper/compiler/Generator.java"

======= 2824a70^:"java/org/apache/jasper/compiler/Generator.java"

                            .getLocalName(), n.getAttributes(), n
                            .hasEmptyBody());
======= 2824a70^:"java/org/apache/jasper/compiler/Generator.java"

                    String shortName, Attributes attrs, boolean hasEmptyBody) {
                    String[] attrNames = new String[attrs.getLength()];

======= f0bd732^:"java/org/apache/catalina/servlets/WebdavServlet.java"

     * Default depth is infite.
     */
    private static final int INFINITY = 3; // To limit tree browsing a bit
    /**
======= f0bd732^:"java/org/apache/catalina/servlets/WebdavServlet.java"

======= f0bd732^:"java/org/apache/catalina/servlets/WebdavServlet.java"

======= f0bd732^:"java/org/apache/catalina/servlets/WebdavServlet.java"

        int depth = INFINITY;
            depth = INFINITY;
                depth = INFINITY;
======= f0bd732^:"java/org/apache/catalina/servlets/WebdavServlet.java"

            lock.depth = INFINITY;
                lock.depth = INFINITY;
======= f0bd732^:"java/org/apache/catalina/servlets/WebdavServlet.java"

                 (lock.depth == INFINITY) ) {
======= f0bd732^:"java/org/apache/catalina/servlets/WebdavServlet.java"

            if (depth == INFINITY) {

======= 7d7f757^:"java/org/apache/jasper/compiler/Validator.java"

         * @param pageDirEnc The value of the pageEncoding attribute of the page
        private void compareTagEncodings(String pageDirEnc,
======= 7d7f757^:"java/org/apache/jasper/compiler/Validator.java"

                String pageEnc = root.getPageEncoding();

======= 3aaac85^:"java/org/apache/jasper/compiler/ImplicitTagLibraryInfo.java"

======= 3aaac85^:"java/org/apache/jasper/compiler/JspUtil.java"

======= 3aaac85^:"java/org/apache/jasper/compiler/JspUtil.java"

======= 3aaac85^:"java/org/apache/jasper/compiler/JspUtil.java"

                className = "org.apache.jsp.tag.meta.";
======= 3aaac85^:"java/org/apache/jasper/compiler/JspUtil.java"

======= 3aaac85^:"java/org/apache/jasper/compiler/ParserController.java"

        Node.Nodes page = doParse(inFileName, null,
                ctxt.getTagFileJarUrl(inFileName));
======= 3aaac85^:"java/org/apache/jasper/compiler/TagFileProcessor.java"

======= 3aaac85^:"java/org/apache/jasper/compiler/TagFileProcessor.java"

            String tagClassName = JspUtil.getTagHandlerClassName(path, err);
======= 3aaac85^:"java/org/apache/jasper/compiler/TagFileProcessor.java"

            page = pc.parseTagFileDirectives(path);
======= 3aaac85^:"java/org/apache/jasper/compiler/TagFileProcessor.java"

        JspServletWrapper wrapper = rctxt.getWrapper(tagFilePath);
                        .getRuntimeContext(), ctxt.getTagFileJarUrl(tagFilePath));
                rctxt.addWrapper(tagFilePath, wrapper);
======= 3aaac85^:"java/org/apache/jasper/compiler/TagLibraryInfoImpl.java"

                parserController, name, path, this);
======= 3aaac85^:"java/org/apache/jasper/compiler/TagLibraryInfoImpl.java"

                ; // Do nothing

======= 1ca03ff^:"java/org/apache/jasper/servlet/JasperLoader.java"

        if( !name.startsWith(Constants.JSP_PACKAGE_NAME) ) {

======= e31998a^:"java/org/apache/catalina/realm/JDBCRealm.java"


======= 85fc30c^:"java/org/apache/catalina/core/StandardContext.java"

        setName(RequestUtil.URLDecode(path));
======= 85fc30c^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

======= 85fc30c^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

======= 85fc30c^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

======= 85fc30c^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

                args = new Object[6];
                args[0] = displayPath;
                args[1] = context.getDisplayName();
                if (args[1] == null) {
                    args[1] = "&nbsp;";
                args[2] = new Boolean(context.getAvailable());
                args[3] = response.encodeURL
                     "/html/sessions?path=" + displayPath);
                    args[4] = new Integer
                    args[4] = new Integer(0);
                args[5] = highlightColor;
======= 85fc30c^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

                     "/html/start?path=" + displayPath);
                     "/html/stop?path=" + displayPath);
                     "/html/reload?path=" + displayPath);
                     "/html/undeploy?path=" + displayPath);
                     "/html/expire?path=" + displayPath);
======= 85fc30c^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

        " <td class=\"row-left\" bgcolor=\"{5}\" rowspan=\"2\"><small><a href=\"{0}\">{0}</a>" +
        " <td class=\"row-left\" bgcolor=\"{5}\" rowspan=\"2\"><small>{1}</small></td>\n" +
        " <td class=\"row-center\" bgcolor=\"{5}\" rowspan=\"2\"><small>{2}</small></td>\n" +
        " <td class=\"row-center\" bgcolor=\"{5}\" rowspan=\"2\">" +
        "<small><a href=\"{3}\" target=\"_new\">{4}</a></small></td>\n";

======= 24bcb47^:"java/org/apache/jasper/compiler/Generator.java"

======= 24bcb47^:"java/org/apache/jasper/compiler/Generator.java"

======= 24bcb47^:"java/org/apache/jasper/compiler/Generator.java"

                                    tx.substring(mark, i+1), expectedType,

======= 7e6a2ec^:"java/org/apache/catalina/ha/deploy/FarmWarDeployer.java"

        if(econtainer == null && econtainer instanceof Engine) {

======= 5277185^:"java/org/apache/jasper/compiler/Generator.java"

            if (isPoolingEnabled) {

======= 99c5ca6^:"java/org/apache/tomcat/util/http/ServerCookie.java"

======= 99c5ca6^:"java/org/apache/tomcat/util/http/ServerCookie.java"

            if (version == 0) {
======= 99c5ca6^:"java/org/apache/tomcat/util/http/ServerCookie.java"

            } else {
                buf.append ("; Max-Age=");
                buf.append (maxAge);

======= a1e4c86^:"java/org/apache/catalina/security/SecurityUtil.java"

       } catch( PrivilegedActionException pe) {
            Throwable e = ((InvocationTargetException)pe.getException())

======= 408175f^:"modules/bayeux/java/org/apache/cometd/bayeux/Bayeux.java"

 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 * This interface represents the server side API for the Bayeux messaging protocol.
 * Bayeux is a simple subscribe/publish/receive methodology, not far from JMS, but much simplified.<br/>
 * It is used both by the actual implementation and by server side clients.<br/>
 * Server side clients use this to create, retrieve and subscribe to channels.
 * Server side clients are represented, just like remote clients, through the Client interface.
 * <br/>
 * The Bayeux implementations is intended to be thread safe and multiple threads may simultaneously call Bayeux methods.
 * <br/>
 * The Bayeux object, is the starting point for any cometd application relying on the Bayeux object.
 * Dependent on the container, the Bayeux object will be stored in the <code>javax.servlet.ServletContext</code> object
 * as an attribute under the name <code>Bayeux.DOJOX_COMETD_BAYEUX</code><br/>
 * To retrieve this object, one would simply call<br/>
 * <code>Bayeux bx = (Bayeux)getServletContext().getAttribute(Bayeux.DOJOX_COMETD_BAYEUX);
 * <br/><br/>
 * The Bayeux protocol is pretty straight forward and includes a bunch of messaging that is not needed to be known to clients,
 * both server side and remote clients.
 * This object gets initialized by a container dependent servlet, and the servlet then handles all Bayeux communication from the client.
 * Remote messsages are delivered to channels, and to server side clients using the <code>Listener</code> interface.<br/>
 * <br/>
 * A <code>Bayeux session</code> is active as long as the webapp hosting the Bayeux object is active.<br/>
 * When the webapplication shuts down, the Bayeux object will unsubscribe all clients and remove all the active channels.
 * 
 * @author Greg Wilkins
 * @author Filip Hanik
 */
    
    /**Meta definitions for channels*/
    public static final String META="/meta";
    /**Meta definitions for channels*/
    public static final String META_SLASH="/meta/";
    /**Meta definitions for channels - connect message*/
    public static final String META_CONNECT="/meta/connect";
    /**Meta definitions for channels - client messsage*/
    public static final String META_CLIENT="/meta/client";
    /**Meta definitions for channels - disconnect messsage*/
    public static final String META_DISCONNECT="/meta/disconnect";
    /**Meta definitions for channels - handshake messsage*/
    public static final String META_HANDSHAKE="/meta/handshake";
    /**Meta definitions for channels - ping messsage*/
    public static final String META_PING="/meta/ping";
    /**Meta definitions for channels - reconnect messsage
     * @deprecated
     */
    public static final String META_RECONNECT="/meta/reconnect";
    /**Meta definitions for channels - status messsage*/
    public static final String META_STATUS="/meta/status";
    /**Meta definitions for channels - subscribe messsage*/
    public static final String META_SUBSCRIBE="/meta/subscribe";
    /**Meta definitions for channels - unsubscribe messsage*/
    public static final String META_UNSUBSCRIBE="/meta/unsubscribe";
    /*Field names inside Bayeux messages*/
    /**Field names inside Bayeux messages - clientId field*/
    public static final String CLIENT_FIELD="clientId";
    /**Field names inside Bayeux messages - data field*/
    public static final String DATA_FIELD="data";
    /**Field names inside Bayeux messages - channel field*/
    public static final String CHANNEL_FIELD="channel";
    /**Field names inside Bayeux messages - id field*/
    public static final String ID_FIELD="id";
    /**Field names inside Bayeux messages - error field*/
    public static final String ERROR_FIELD="error";
    /**Field names inside Bayeux messages - timestamp field*/
    public static final String TIMESTAMP_FIELD="timestamp";
    /**Field names inside Bayeux messages - transport field*/
    public static final String TRANSPORT_FIELD="transport";
    /**Field names inside Bayeux messages - advice field*/
    public static final String ADVICE_FIELD="advice";
    /**Field names inside Bayeux messages - successful field*/
    public static final String SUCCESSFUL_FIELD="successful";
    /**Field names inside Bayeux messages - subscription field*/
    public static final String SUBSCRIPTION_FIELD="subscription";
    /**Field names inside Bayeux messages - ext field*/
    public static final String EXT_FIELD="ext";
    /**Field names inside Bayeux messages - connectionType field*/
    public static final String CONNECTION_TYPE_FIELD="connectionType";
    /**Field names inside Bayeux messages - version field*/
    public static final String VERSION_FIELD="version";
    /**Field names inside Bayeux messages - minimumVersion field*/
    public static final String MIN_VERSION_FIELD="minimumVersion";
    /**Field names inside Bayeux messages - supportedConnectionTypes field*/
    public static final String SUPP_CONNECTION_TYPE_FIELD="supportedConnectionTypes";
    /**Field names inside Bayeux messages - json-comment-filtered field*/
    public static final String JSON_COMMENT_FILTERED_FIELD="json-comment-filtered";
    /**Field names inside Bayeux messages - reconnect field*/
    public static final String RECONNECT_FIELD = "reconnect";
    /**Field names inside Bayeux messages - interval field*/
    public static final String INTERVAL_FIELD = "interval";
    /**Field values inside Bayeux messages - retry response*/
    public static final String RETRY_RESPONSE = "retry";
    /**Field values inside Bayeux messages - handshake response*/
    public static final String HANDSHAKE_RESPONSE = "handshake";
    /**Field values inside Bayeux messages - none response*/
    public static final String NONE_RESPONSE = "none";
    /**Service channel names-starts with*/
    public static final String SERVICE="/service";
    /**Service channel names-trailing slash*/
    public static final String SERVICE_SLASH="/service/";
    /*Transport types*/
    /**Transport types - long polling*/
    public static final String TRANSPORT_LONG_POLL="long-polling";
    /**Transport types - callback polling*/
    public static final String TRANSPORT_CALLBACK_POLL="callback-polling";
    /**Transport types - iframe*/
    public static final String TRANSPORT_IFRAME="iframe";
    /**Transport types - flash*/
    public static final String TRANSPORT_FLASH="flash";
    /** ServletContext attribute name used to obtain the Bayeux object */
    public static final String DOJOX_COMETD_BAYEUX="dojox.cometd.bayeux";
    /*http field names*/
    /**http helpers - text/json content type*/
    public static final String JSON_CONTENT_TYPE="text/json";
    /**http helpers - parameter name for json message*/
    public static final String MESSAGE_PARAMETER="message";
    /**http helpers - name of the jsonp parameter*/
    public static final String JSONP_PARAMETER="jsonp";
    /**http helpers - default name of the jsonp callback function*/
    public static final String JSONP_DEFAULT_NAME="jsonpcallback";
    /*--Client----------------------------------------------------------- */
    /**
     * Creates a new server side client. This method is to be invoked
     * by server side objects only. You cannot create a remote client by using this method.
     * A client represents an entity that can subscribe to channels and publish and receive messages
     * through these channels
     * @param idprefix String - the prefix string for the id generated, can be null
     * @param listener Listener - a callback object to be called when messages are to be delivered to the new client
     * @return Client - returns an implementation of the client interface.
     */
    public Client newClient(String idprefix, Listener listener);
    /**
     * retrieve a client based on an ID. Will return null if the client doesn't exist.
     * @param clientid String
     * @return Client-null if the client doesn't exist.returns the client if it does.
     */
    public Client getClient(String clientid);
    
    /**
     * Returns a non modifiable list of all the clients that are currently active
     * in this Bayeux session
     * @return List<Client> - a list containing all clients. The List can not be modified.
     */
    public List<Client> getClients();
    
    /**
     * Returns true if a client with the given id exists.<br/>
     * Same as executing <code>getClient(id)!=null</code>.
     * @param clientId String
     * @return boolean - true if the client exists
     */
    public boolean hasClient(String clientId);
    
    /**
     * Removes the client all together.
     * This will unsubscribe the client to any channels it may be subscribed to
     * and remove it from the list.
     * @param client Client
     * @return Client - returns the client that was removed, or null if no client was removed.
     */
    public Client remove(Client client);
    
    /*--Channel---------------------------------------------------------- */
    /**
     * Returns the channel for a given channel id.
     * If the channel doesn't exist, and the <code>create</code> parameter is set to true,
     * the channel will be created and added to the list of active channels.<br/>
     * if <code>create</code> is set to false, and the channel doesn't exist, null will be returned.
     * @param channelId String - the id of the channel to be retrieved or created
     * @param create boolean - true if the Bayeux impl should create the channel
     * @return Channel - null if <code>create</code> is set to false and the channel doesn't exist, 
     * otherwise it returns a channel object.
     */
    public Channel getChannel(String channelId, boolean create);
    
    /**
     * Returns a list of currently active channels in this Bayeux session.
     * @return List<Channel>
     */
    public List<Channel> getChannels();
    /**
     * Removes a channel from the Bayeux object.
     * This will also unsubscribe all the clients currently subscribed to the
     * the channel.
     * @param channel Channel - the channel to be removed
     * @return Channel - returns the channel that was removed, or null if no channel was removed.
     */
    public Channel remove(Channel channel);
    /**
     * returns true if a channel with the given channelId exists.
     * <br/>Same as executing <code>Bayeux.getChannel(channelId,false)!=null</code>
     * @param channelId String
     * @return boolean - true if the channel exists.
     */
    public boolean hasChannel(String channelId);
    /* --Message---------------------------------------------------------- */
    /**
     * Creates a new message to be sent by a server side client.
     * @return Message - returns a new Message object, that has a unique id.
     */
    public Message newMessage(Client from);
    /*--Security policy----------------------------------------------------------- */
    /**
     * Returns the security policy associated with this Bayeux session
     * @return SecurityPolicy
     */
    public SecurityPolicy getSecurityPolicy();
   
    /**
     * Sets the security policy to be used in this Bayeux session
     * @param securityPolicy SecurityPolicy
     */
    public void setSecurityPolicy(SecurityPolicy securityPolicy);
======= 408175f^:"modules/bayeux/java/org/apache/cometd/bayeux/Channel.java"

 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 * A Bayeux Channel represents a channel used to receive messages from and to publish messages to.
 * In order to publish messages to or receive messages from, one must subscribe to the channel.
 * This is easily done by invoking the <code>subscribe</code> method.
 * A channel is created by calling the <code>Bayeux.getChannel(channelId,true)</code> method.
 * A channel can be created either server side by invoking the getChannel, or client side
 * by using the /meta/subscribe message without a wildcard.
 * @author Greg Wilkins
 * @author Filip Hanik
 */
    /**
     * Returns the id for this channel. The id is unique within bayeux session.
     * @return String - will never be null.
     */
    public String getId();
    /** 
     * Publishes a message to all the subscribers of this channel.
     * The <code>from</code> is contained within the message, by calling
     * <code>msg.getClient()</code>
     * @param data - the message to be published, can not be null.
     */
    public void publish(Message msg);
    
    /** 
     * Publishes more than one message to all the subscribers of this channel.
     * The <code>from</code> is contained within the message, by calling
     * <code>msg[x].getClient()</code>
     * @param data - the message to be published, can not be null.
     */
    public void publish(Message[] msgs);
    /** 
     * Non persistent channels are removed when the last subscription is
     * removed. Persistent channels survive periods without any subscribers.
     * @return true if the Channel will persist without any subscription.
     */
    public boolean isPersistent();
    
    /**
     * @param persistent true if the Channel will persist without any subscription.
     * @see isPersistent
     */
    public void setPersistent(boolean persistent);
    
    /** 
     * Subscribes a client to a channel.
     * @param subscriber - the client to be subscribed. If the client
     * already is subscribed, this call will not create a duplicate subscription.
     */
    public void subscribe(Client subscriber);
    /** 
     * Unsubscribes a client from a channel
     * @param subscriber - the client to be subscribed.
     * @return - returns the client that was unsubscribed, or null if the client wasn't subscribed.
     */
    public Client unsubscribe(Client subscriber);
    /**
     * returns a non modifiable list of all the subscribers to this 
     * channel.
     * @return a list of subscribers
     */
    public List<Client> getSubscribers();
    
    /**
     * Adds a data filter to this channel. All messages received by this channel 
     * will run through this filter.
     * @param filter Filter
     */
    public void addFilter(DataFilter filter);
    
    /**
     * Removes a filter from this channel.
     * returns the filter that was removed, or null if the filter wasn't in the channel.
     * @param filter Filter
     * @return Filter - null if no filter was removed otherwise it returns the filter that was removed.
     */
    public DataFilter removeFilter(DataFilter filter);
======= 408175f^:"modules/bayeux/java/org/apache/cometd/bayeux/Client.java"

 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 * <p>
 * A client may subscribe to channels and publish messages to channels.
 * Client instances should not be directly created by uses, but should 
 * be obtained via the {@link Bayeux#getClient(String)} or {@link Bayeux#newClient(String, Listener)}
 * methods.
 * </p>
 * <p>
 * Three types of client may be represented by this interface:<nl>
 * <li>The server representation of a remote client connected via HTTP, 
 *     automatically created by the Bayeux server when a connect message comes in</li>
 * <li>A server side client, created by the application using the {@link Bayeux#newClient(String, Listener)} method</li>
 * <li>A java client connected to a remote Bayeux server - not implemented</li>
 * </nl>
 * @author Greg Wilkins
 * @author Filip Hanik
 */
    /**
     * Returns a unique id for this client. The id is unique within this Bayeux session.
     * @return String - will not be null
     */
    public String getId();
    /**
     * Returns true if this client is holding messages to be delivered to the remote client.
     * This method always returns false for local clients, since messages are delivered instantly using the 
     * Listener(callback) object
     * @return boolean
     */
    public boolean hasMessages();
    /** 
     * Deliver a message to this client only
     * Deliver a message directly to the client. The message is not 
     * filtered or published to a channel.
     * @param message
     */
    public void deliver(Message message);
    /** 
     * Deliver a batch of messages to this client only
     * Deliver a batch messages directly to the client. The messages are not 
     * filtered or published to a channel.
     * @param message
     */
    public void deliver(Message[] message);
    /**
     * @return True if the client is local. False if this client is either a remote HTTP client or
     * a java client to a remote server. 
     */
    public boolean isLocal();
    
    /**
     * Starts a batch, no messages will be delivered until endBatch is called.
     * Batches can be nested, and messages will only be delivered after
     * the last endBatch has been called.
     */
    public void startBatch();
    
    /**
     * Ends a batch. since batches can be nested, messages will only be delivered
     * after the endBatch has been called as many times as startBatch has.
     */
    public void endBatch();
    
    
======= 408175f^:"modules/bayeux/java/org/apache/cometd/bayeux/DataFilter.java"

 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 * Data Filter<br/>
 * Data filters are used to transform data as it is sent to a Channel.
 * Messages are filtered as the message is published to a channel, invoking the 
 * {@link Channel#publish(Message)} method.<br/>
 * This method gets invoked in two different scenarios, the first being when a message is received from
 * a remote client, and the Bayeux implementation invokes the publish method directly.
 * The second scenario is when a local client invokes {@link Channel#publish(Message)} directly in the local JVM.
 * @author Greg Wilkins
 * @author Filip Hanik
 *
 */
    /**
     * Runs a message through the filter. Filtering can only modify an existing object, it can not replace it.
     * @param data Message - the message to be filtered, may not be null
     */
    public void filter(Message data);
======= 408175f^:"modules/bayeux/java/org/apache/cometd/bayeux/Listener.java"

 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 * Cometd Listener interface.<br/>
 * For local clients, in order to receive messages, they pass in a callback object
 * when the local client is created using the {@link Bayeux#newClient(String,Listener)} method.
 * This callback object, implementing the Listener interface, is used to deliver messages to local, in JVM, clients.
 * @author Greg Wilkins
 * @author Filip Hanik
 *
 */
    /**
     * This method is called when the client is removed (explicitly or from a timeout)
     * @param timeout - true if the client was removed from a timeout
     * false if it was removed explicitly.
     */
    public void removed(boolean timeout);
    
    /**
     * Invoked when a message is delivered to the client.
     * The message contains the message itself, as well as what channel this message came through
     * and who the sender is. If someone invoked {@link Client#deliver(Message)} then the channel reference will
     * be null.
     * @param msg 
     */
    public void deliver(Message[] msg);
======= 408175f^:"modules/bayeux/java/org/apache/cometd/bayeux/Message.java"

 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 * A Bayeux Message<br/>
 * A Bayeux message is a Map of String/Object key value pairs representing the data in the message.
 * The message contains information about the channel it was published through and who the sender was
 * 
 * @author Greg Wilkins
 * @author Filip Hanik
 */
    /**
     * Returns a reference to the client that sent this message
     * @return Client - may be null
     */
    public Client getClient();
    /**
     * Returns a reference to the channel that this message was published throuhg
     * @return Channel - may be null
     */
    public Channel getChannel();
    /**
     * Returns the unique id of this message
     * @return String
     */
    public String getId();
    
    /**
     * Sets the time to live in milliseconds. If the message hasn't been delivered 
     * when the time passed after the creation time is longer than the TTL the message will
     * expire and removed from any delivery queues.
     * @param ttl long
     */
    public void setTTL(long ttl);
    
    /**
     * Returns the time to live (in milliseconds) for this message
     * @return long
     */
    public long getTTL();
    
    /**
     * returns the timestamp in milliseconds(System.currentTimeMillis()) of when this message was created.
     * @return long
     */
    public long getCreationTime();
======= 408175f^:"modules/bayeux/java/org/apache/cometd/bayeux/SecurityPolicy.java"

 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 * @author Greg Wilkins
 */
    boolean canHandshake(Message message);
    boolean canCreate(Client client,String channel,Message message);
    boolean canSubscribe(Client client,String channel,Message messsage);
    boolean canPublish(Client client,String channel,Message messsage);
======= 408175f^:"modules/bayeux/java/org/apache/tomcat/bayeux/BayeuxException.java"

 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 * 
 * @author Filip Hanik
 * @version 1.0
 */
    public BayeuxException() {
        super();
    }
    public BayeuxException(String message) {
        super(message);
    }
    public BayeuxException(String message, Throwable cause) {
        super(message, cause);
    }
    public BayeuxException(Throwable cause) {
        super(cause);
    }
======= 408175f^:"modules/bayeux/java/org/apache/tomcat/bayeux/BayeuxRequest.java"

 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 * An interface that defines methods for managing Bayeux request meta 
 * messages.
 *
 * @author Guy A. Molinari
 * @author Filip Hanik
 * @version 0.9
 */
    public static final String LAST_REQ_ATTR = "org.apache.cometd.bayeux.last_request";
    public static final String CURRENT_REQ_ATTR = "org.apache.cometd.bayeux.current_request";
    public static final String JSON_MSG_ARRAY = "org.apache.cometd.bayeux.json_msg_array";
    /**
     * Validates a specific request. 
     * This method must be called prior to process()
     * as a request can do pre processing in the validate method.
     * <br/>
     * Should the validation fail, an error object is returned 
     * containing an error message, and potentially a stack trace
     * if an exception was generated
     * @return HttpError - null if no error was detected, an HttpError object containing information about the error.
     */
    public HttpError validate();
    
    /**
     * processes a remote client Bayeux message
     * @param prevops - the operation requested by the previous request, in case of chained requests.
     * @return int - returns the interest operation for a CometEvent. Currently not used
     * @throws BayeuxException - if an error was detected, and the appropriate error response couldn't be delivered to the client. 
     */
    public int process(int prevops) throws BayeuxException;
======= 408175f^:"modules/bayeux/java/org/apache/tomcat/bayeux/BayeuxServlet.java"

 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 * 
 * @author Filip Hanik
 * @author Guy Molinari
 * @version 1.0
 */
    /**
     * Attribute to hold the TomcatBayeux object in the servlet context
     */
    public static final String TOMCAT_BAYEUX_ATTR = Bayeux.DOJOX_COMETD_BAYEUX;
    
    /**
     * Logger object
     */
    protected static Log log = LogFactory.getLog(BayeuxServlet.class);
    /**
     * Servlet config - for future use
     */
    protected ServletConfig servletConfig;
    
    /**
     * Reference to the global TomcatBayeux object
     */
    protected TomcatBayeux tb;
    
    /**
     * Upon servlet destruction, the servlet will clean up the 
     * TomcatBayeux object and terminate any outstanding events.
     */
    public void destroy() {
        servletConfig = null;
        //to do, close all outstanding comet events
        //tb.destroy();
        tb = null;//TO DO, close everything down
        
    }
    
    /**
     * Returns the preconfigured connection timeout.
     * If no timeout has been configured as a servlet init parameter named <code>timeout</code>
     * then the default of 2min will be used.
     * @return int - the timeout for a connection in milliseconds
     */
    protected int getTimeout() {
        String timeoutS = servletConfig.getInitParameter("timeout");
        int timeout = 120*1000; //2 min
        try {
            timeout = Integer.parseInt(timeoutS);
        }catch (NumberFormatException nfe) {
            //ignore, we have a default value
        }
        return timeout;
    }
    
    protected int getReconnectInterval() {
        String rs = servletConfig.getInitParameter("reconnectInterval");
        int rct = 1000; //1 seconds
        try {
            rct = Integer.parseInt(rs);
        }catch (NumberFormatException nfe) {
            //ignore, we have a default value
        }
        return rct;
    }
    public void event(CometEvent cometEvent) throws IOException, ServletException {
        CometEvent.EventType type = cometEvent.getEventType();
        if (log.isDebugEnabled()) {
            log.debug("["+Thread.currentThread().getName()+"] Received Comet Event type="+type+" subtype:"+cometEvent.getEventSubType());
        }
        synchronized (cometEvent) {
            if (type==CometEvent.EventType.BEGIN) {
                //begin event, set the timeout
                cometEvent.setTimeout(getTimeout());
                //checkBayeux(cometEvent); - READ event should always come
            } else if (type==CometEvent.EventType.READ) {
                checkBayeux(cometEvent);
            } else if (type==CometEvent.EventType.ERROR) {
                tb.remove(cometEvent);
                cometEvent.close();
            } else if (type==CometEvent.EventType.END) {
                tb.remove(cometEvent);
                cometEvent.close();
            }//end if
            
        }//synchronized
    }//event
    /**
     * 
     * @param cometEvent CometEvent
     * @return boolean - true if we comet event stays open
     * @throws IOException
     * @throws UnsupportedOperationException
     */
    protected void checkBayeux(CometEvent cometEvent) throws IOException, UnsupportedOperationException {
        //we actually have data.
        //data can be text/json or 
        if (Bayeux.JSON_CONTENT_TYPE.equals(cometEvent.getHttpServletRequest().getContentType())) {
            //read and decode the bytes according to content length
            log.warn("["+Thread.currentThread().getName()+"] JSON encoding not supported, will throw an exception and abort the request.");
            int contentlength = cometEvent.getHttpServletRequest().getContentLength();
            throw new UnsupportedOperationException("Decoding "+Bayeux.JSON_CONTENT_TYPE+" not yet implemented.");
        } else { //GET method or application/x-www-form-urlencoded
            String message = cometEvent.getHttpServletRequest().getParameter(Bayeux.MESSAGE_PARAMETER);
            if (log.isTraceEnabled()) {
                log.trace("["+Thread.currentThread().getName()+"] Received JSON message:"+message);
            }
            try {
                int action = handleBayeux(message, cometEvent);
                if (log.isDebugEnabled()) {
                    log.debug("["+Thread.currentThread().getName()+"] Bayeux handling complete, action result="+action);
                }
                if (action<=0) {
                    cometEvent.close();
                }
            }catch (Exception x) {
                x.printStackTrace();
                tb.remove(cometEvent);
                log.error(x);
                cometEvent.close();
            }
        }
    }
    
    protected int handleBayeux(String message, CometEvent event) throws IOException, ServletException {
        int result = 0;
        if (message==null || message.length()==0) return result;
        try {
            BayeuxRequest request = null;
            //a message can be an array of messages
            JSONArray jsArray = new JSONArray(message);
            for (int i = 0; i < jsArray.length(); i++) {
                JSONObject msg = jsArray.getJSONObject(i);
                
                if (log.isDebugEnabled()) {
                    log.debug("["+Thread.currentThread().getName()+"] Processing bayeux message:"+msg);
                }
                request = RequestFactory.getRequest(tb,event,msg);
                if (log.isDebugEnabled()) {
                    log.debug("["+Thread.currentThread().getName()+"] Processing bayeux message using request:"+request);
                }
                result = request.process(result);
                if (log.isDebugEnabled()) {
                    log.debug("["+Thread.currentThread().getName()+"] Processing bayeux message result:"+result);
                }
            }
            if (result>0 && request!=null) {
                event.getHttpServletRequest().setAttribute(BayeuxRequest.LAST_REQ_ATTR, request);
                ClientImpl ci = (ClientImpl)tb.getClient(((RequestBase)request).getClientId());
                ci.addCometEvent(event);
                if (log.isDebugEnabled()) {
                    log.debug("["+Thread.currentThread().getName()+"] Done bayeux message added to request attribute");
                }
            } else if (result == 0 && request!=null) {
                RequestBase.deliver(event,(ClientImpl)tb.getClient(((RequestBase)request).getClientId()));
                if (log.isDebugEnabled()) {
                    log.debug("["+Thread.currentThread().getName()+"] Done bayeux message, delivered to client");
                }
            }
            
        }catch (JSONException x) {
            log.error(x);//to do impl error handling
            result = -1;
        }catch (BayeuxException x) {
            log.error(x); //to do impl error handling
            result = -1;
        }
        return result;
    }
    public ServletConfig getServletConfig() {
        return servletConfig;
    }
    public String getServletInfo() {
        return "Tomcat/BayeuxServlet/1.0";
    }
    public void init(ServletConfig servletConfig) throws ServletException {
        
        this.servletConfig = servletConfig;
        ServletContext ctx = servletConfig.getServletContext();
        if (ctx.getAttribute(TOMCAT_BAYEUX_ATTR)==null)
            ctx.setAttribute(TOMCAT_BAYEUX_ATTR,new TomcatBayeux());
        this.tb = (TomcatBayeux)ctx.getAttribute(TOMCAT_BAYEUX_ATTR);
        tb.setReconnectInterval(getReconnectInterval());
    }
    public void service(ServletRequest servletRequest, ServletResponse servletResponse) throws ServletException, IOException {
        if (servletResponse instanceof HttpServletResponse) {
            ( (HttpServletResponse) servletResponse).sendError(500, "Misconfigured Tomcat server, must be configured to support Comet operations.");
        } else {
            throw new ServletException("Misconfigured Tomcat server, must be configured to support Comet operations for the Bayeux protocol.");
        }
    }
======= 408175f^:"modules/bayeux/java/org/apache/tomcat/bayeux/ChannelImpl.java"

 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 * 
 * @author Filip Hanik
 * @version 1.0
 */
    
    protected static Log log = LogFactory.getLog(ChannelImpl.class);
    
    /**
     * The unique id of this channel
     */
    protected String id = null;
    
    /**
     * A list of the current subscribers
     */
    protected LinkedList<Client> subscribers = new LinkedList<Client>();
    
    /**
     * A list of the current filters
     */
    protected LinkedList<DataFilter> filters = new LinkedList<DataFilter>();
    
    /**
     * Is this channel persistent, default value is true
     */
    protected boolean persistent = true; 
    
    /**
     * Creates a new channel
     * @param id String - the id of the channel, can not be null
     */
    protected ChannelImpl(String id) {
        assert id != null;
        this.id = id;
    }
    /**
     * returns the id of this channel
     * @return String
     */
    public String getId() {
        return id;
    }
    
    /**
     * Returns true if this channel matches the pattern to its id.
     * The channel pattern can be a complete name like <code>/service/mychannel</code>
     * or it can be a wild card pattern like <code>/service/app2/**</code>
     * @param pattern String according to the Bayeux specification section 2.2.1 Channel Globbing, can not be null.
     * @return boolean true if the id of this channel matches the pattern
     */
    public boolean matches(String pattern) {
        if (pattern == null)
            throw new NullPointerException("Channel pattern must not be null.");
        if (getId().equals(pattern))
            return true;
        int wildcardPos = pattern.indexOf("/*");
        if (wildcardPos == -1)
            return false;
        boolean multiSegment = pattern.indexOf("**") != -1;
        String leadSubstring = pattern.substring(0, wildcardPos);
        if (leadSubstring == null)
            return false;
        if (multiSegment) 
            return getId().startsWith(leadSubstring);
        else {
            if (getId().length() <= wildcardPos + 2)
                return false;
            return !(getId().substring(wildcardPos + 2).contains("/"));
        }
    }
    /**
     * @return returns a non modifiable list of the subscribers for this channel.
     */
    public List<Client> getSubscribers() {
        return Collections.unmodifiableList(subscribers);
    }
    /**
     * @return true if the Channel will persist without any subscription.
     */
    public boolean isPersistent() {
        return persistent;
    }
    
    public void publish(Message msg) {
        publish(new Message[] {msg});
    }
    public void publish(Message[] msgs) {
        if (msgs==null) return;
        MessageImpl[] imsgs = new MessageImpl[msgs.length];
        for (int i=0; msgs!=null && i<msgs.length; i++) {
            Message data = msgs[i];
            if (!(data instanceof MessageImpl)) 
                throw new IllegalArgumentException("Invalid message class, you can only publish messages "+
                                                   "created through the Bayeux.newMessage() method");
            if (log.isDebugEnabled()) {
                log.debug("Publishing message:"+data+" to channel:"+this);
            }
            //clone it so that we can set this channel as a reference
            MessageImpl msg = (MessageImpl)((MessageImpl)data).clone();
            //this is the channel it was delivered through
            msg.setChannel(this);
            //pass through filters
            for (Iterator<DataFilter> it = filters.iterator(); it.hasNext(); ) {
                it.next().filter(msg);
            }
            imsgs[i] = msg;
        }
        //deliver it to the clients
        for (Iterator<Client> it = subscribers.iterator(); it.hasNext(); ) {
            ClientImpl c = (ClientImpl)it.next();
            c.deliverInternal(this,imsgs);
        }
        
    }
    public void setPersistent(boolean persistent) {
        this.persistent = persistent;
    }
    public void subscribe(Client subscriber) {
        if (!subscribers.contains((subscriber))) { 
            subscribers.addLast(subscriber);
            ((ClientImpl)subscriber).subscribed(this);
        }
    }
    public Client unsubscribe(Client subscriber) {
        if (subscribers.remove(subscriber)) {
            ((ClientImpl)subscriber).unsubscribed(this);
            return subscriber;
        } else
            return null;
    }
    
    public void addFilter(DataFilter filter) {
        if (!filters.contains(filter)) 
            filters.addLast(filter);
    }
    public DataFilter removeFilter(DataFilter filter) {
        if ( filters.remove(filter) ) return filter;
        else return null;
    }
    
    public String toString() {
        StringBuffer buf = new StringBuffer(super.toString());
        buf.append("; channelId=").append(getId());
        return buf.toString();
    }
======= 408175f^:"modules/bayeux/java/org/apache/tomcat/bayeux/ClientImpl.java"

 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
    
    public static final int SUPPORT_CALLBACK_POLL = 0x1;
    public static final int SUPPORT_LONG_POLL = 0x2; 
    public static final String COMET_EVENT_ATTR = "org.apache.cometd.bayeux.client";
    
    protected static Log log = LogFactory.getLog(ClientImpl.class);
    protected static LinkedList<Message> EMPTY_LIST = new LinkedList<Message>();
    /**
     * queued message for remote clients.
     */
    protected LinkedList<Message> messages = null;
    
    /**
     * 
     */
    protected Queue<CometEvent> events = new LinkedList<CometEvent>();
    
    /**
     * Unique id representing this client
     */
    protected String id;
    
    /**
     * supported connection types, defaults to long-polling
     */
    protected int supportedConnTypes = SUPPORT_LONG_POLL | SUPPORT_CALLBACK_POLL;
    
    /**
     * The desired connection type
     */
    protected int desirectConnType = SUPPORT_LONG_POLL;
    
    /**
     * Does this client use json-comment-filtered messages
     */
    protected boolean useJsonFiltered = false;
    
    /**
     * Same JVM clients, get local=true
     */
    protected boolean local;
    
    /**
     * The callback object for local clients
     */
    protected Listener listener;
    
    protected AtomicInteger nrofsubscriptions = new AtomicInteger(0);
    
    protected ClientImpl(String id, boolean local) {
        this.id = id;
        this.local = local;
        if (!local) messages = new LinkedList<Message>();
    }
    
    protected ClientImpl(String id, CometEvent event) {
        this(id,false);
        events = new ConcurrentLinkedQueue<CometEvent>();
        addCometEvent(event);
    }
    public synchronized void deliver(Message message) {
        deliverInternal(null,new MessageImpl[] {(MessageImpl)message});
    }
    
    public synchronized void deliver(Message[] message) {
        deliverInternal(null,message);
    }
    protected synchronized void deliverInternal(ChannelImpl channel, MessageImpl message) {
        deliverInternal(channel,new MessageImpl[] {message});
    }
    protected synchronized void deliverInternal(ChannelImpl channel, Message[] msgs) {
        if (isLocal()) {
            //local clients must have a listener
            ArrayList<Message> list = new ArrayList<Message>();
            for (int i=0; msgs!=null && i<msgs.length; i++) {
                //dont deliver to ourselves
                if (this!=msgs[i].getClient()) list.add(msgs[i]);
            }
            if (getListener() != null && list.size()>0) {
                getListener().deliver(list.toArray(new Message[0]));
            }
        } else {
            for (int i=0; msgs!=null && i<msgs.length; i++) {
                MessageImpl message = (MessageImpl)msgs[i];
                if (this==message.getClient()) { 
                    //dont deliver to ourself
                    continue;
                }
                //we are not implementing forever responses, if the client is connected
                //then we will fire off the message
                //first we check to see if we have any existing connections we can piggy back on
                CometEvent event = events.poll();
                boolean delivered = false;
                //TODO TODO - check on thread safety, for writing and for getting last request.
                if (event!=null) {
                    synchronized (event) {
                        RequestBase rq = (RequestBase)event.getHttpServletRequest().getAttribute(RequestBase.LAST_REQ_ATTR);
                        if (rq!=null) {
                            Map map = new HashMap();
                            try {
                                map.put(Bayeux.CHANNEL_FIELD,message.getChannel().getId());
                                map.put(Bayeux.DATA_FIELD,message);
                                JSONObject json = new JSONObject(map);
                                if (log.isDebugEnabled()) {
                                    log.debug("Message instantly delivered to remote client["+this+"] message:"+json);
                                }
                                rq.addToDeliveryQueue(this, json);
                                //deliver the batch
                                if (i==(msgs.length-1)) {
                                    rq.deliver(event, this);
                                    event.close(); //todo, figure out a better way, this means only one message gets delivered
                                    removeCometEvent(event); //and delivered instantly
                                }
                                delivered = true;
                            } catch (Exception x) {
                                log.error(x);
                            }
                        }
                    }
                } 
                if (!delivered) {
                    if (log.isDebugEnabled()) {
                        log.debug("Message added to queue for remote client["+this+"] message:"+message);
                    }
                    //queue the message for the next round
                    messages.add(message);
                }
            }
        }
    }
    public String getId() {
        return this.id;
    }
    protected Listener getListener() {
        return listener;
    }
    public boolean hasMessages() {
        if (isLocal()) return false;
        else {
            return messages.size() > 0;
        }
    }
    public boolean isLocal() {
        return local;
    }
    public int getSupportedConnTypes() {
        return supportedConnTypes;
    }
    public int getDesirectConnType() {
        return desirectConnType;
    }
    public boolean useJsonFiltered() {
        return useJsonFiltered;
    }
    public void setListener(Listener listener) {
        this.listener = listener;
    }
    public void setSupportedConnTypes(int supportedConnTypes) {
        this.supportedConnTypes = supportedConnTypes;
    }
    public void setUseJsonFiltered(boolean useJsonFiltered) {
        this.useJsonFiltered = useJsonFiltered;
    }
    public void setDesirectConnType(int desirectConnType) {
        this.desirectConnType = desirectConnType;
    }
    public boolean supportsCallbackPoll() {
        return (supportedConnTypes & SUPPORT_CALLBACK_POLL) == SUPPORT_CALLBACK_POLL;
    }
    public boolean supportsLongPoll() {
        return (supportedConnTypes & SUPPORT_LONG_POLL) == SUPPORT_LONG_POLL;
    }
    public synchronized List<Message> takeMessages() {
        if (isLocal()) return null;
        if (messages.size()==0) return EMPTY_LIST;
        List result = new LinkedList(messages);
        messages.clear();
        return result;
    }
    
    public String toString() {
        StringBuffer buf = new StringBuffer(super.toString());
        buf.append(" id=").append(getId());
        return buf.toString();
    }
    
    public boolean isSubscribed() {
        return nrofsubscriptions.get()>0;
    }
    
    protected synchronized boolean addCometEvent(CometEvent event) {
        boolean result = false;
        if (!events.contains(event)) {
            events.add(event);
            result = true;
        }
        event.getHttpServletRequest().setAttribute(COMET_EVENT_ATTR,this);
        return result;
    }
    
    protected synchronized boolean removeCometEvent(CometEvent event) {
        boolean result = events.remove(event);
        event.getHttpServletRequest().removeAttribute(COMET_EVENT_ATTR);
        return result;
    }
    
    
    protected void subscribed(ChannelImpl ch) {
        nrofsubscriptions.addAndGet(1);
    }
    
    protected void unsubscribed(ChannelImpl ch) {
        nrofsubscriptions.addAndGet(-1);
    }
    
    public void startBatch(){
        //noop until improved
    }
    public void endBatch() {
        //noop until improved
    }
        
======= 408175f^:"modules/bayeux/java/org/apache/tomcat/bayeux/HttpError.java"

    private int code;
    private String status;
    private Throwable cause;
    public HttpError(int code, String status, Throwable cause) {
        this.code = code;
        this.status = status;
        this.cause = cause;
    }
    public void setCode(int code) {
        this.code = code;
    }
    public void setStatus(String status) {
        this.status = status;
    }
    public void setCause(Throwable exception) {
        this.cause = exception;
    }
    public int getCode() {
        return code;
    }
    public String getStatus() {
        return status;
    }
    public Throwable getCause() {
        return cause;
    }
    public String toString() {
        if (cause != null)
            return code + ":" + status + " - [" + cause + "]";
        else
            return code + ":" + status;
    }
======= 408175f^:"modules/bayeux/java/org/apache/tomcat/bayeux/MessageImpl.java"

 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
    
    protected Channel channel;
    protected Client client;
    protected String id;
    private long TTL = 1000*60*5; //5min is the default TTL for a message
    protected long creationTime = System.currentTimeMillis();
    public Object clone() {
        MessageImpl copy = new MessageImpl(id);
        copy.putAll(this);
        copy.channel = channel;
        copy.client = client;
        copy.id = id;
        copy.creationTime = creationTime;
        copy.TTL = TTL;
        return copy;
    }
    protected MessageImpl(String id) {
        assert id != null;
        this.id = id;
    }
    public Channel getChannel() {
        return channel;
    }
    public Client getClient() {
        return client;
    }
    public long getCreationTime() {
        return creationTime;
    }
    public long getTTL() {
        return TTL;
    }
    public String getId() {
        return id;
    }
    protected void setChannel(Channel channel) {
        this.channel = channel;
    }
    protected void setClient(Client client) {
        this.client = client;
    }
    public void setTTL(long TTL) {
        this.TTL = TTL;
    }
======= 408175f^:"modules/bayeux/java/org/apache/tomcat/bayeux/RequestBase.java"

 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 * Common functionality and member variables for all Bayeux requests.
 *
 * @author Guy A. Molinari
 * @author Filip Hanik
 * @version 0.9
 *
 */
    
    protected static final SimpleDateFormat timestampFmt =
        new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
    static {
        timestampFmt.setTimeZone(TimeZone.getTimeZone("GMT"));
    }
    //message properties, combined for all messages
    protected TomcatBayeux tomcatBayeux;
    protected String channel;
    protected String id;
    protected String clientId;
    protected String version = null;
    protected String[] suppConnTypes = null;
    protected int suppConnTypesFlag = 0;
    protected int desiredConnTypeFlag = 0;
    protected String minVersion = null;
    protected String subscription = null;
    protected String data = null;
    protected String conType = null;
    protected LinkedHashMap<String, Object> ext = new LinkedHashMap<String, Object> ();
    
    protected CometEvent event;
    
    protected HashMap<String, Object> response = null;
    
    protected static Log log = LogFactory.getLog(RequestBase.class);
    
    protected int reconnectInterval = 1000;
    
    protected RequestBase(TomcatBayeux tb, CometEvent event, JSONObject jsReq) throws JSONException {
        this.tomcatBayeux = tb;
        this.event = event;
        channel = jsReq.optString(Bayeux.CHANNEL_FIELD);
        id = jsReq.optString(Bayeux.ID_FIELD);
        clientId = jsReq.optString(Bayeux.CLIENT_FIELD);
        version = jsReq.optString(Bayeux.VERSION_FIELD);
        minVersion = jsReq.optString(Bayeux.MIN_VERSION_FIELD);
        conType = jsReq.optString(Bayeux.CONNECTION_TYPE_FIELD);
        subscription = jsReq.optString(Bayeux.SUBSCRIPTION_FIELD);
        data = jsReq.optString(Bayeux.DATA_FIELD);
        reconnectInterval = tb.getReconnectInterval();
        if (jsReq.has(Bayeux.EXT_FIELD)) {
            JSONObject jext = jsReq.getJSONObject(Bayeux.EXT_FIELD);
            for (Iterator<String> i = jext.keys(); i.hasNext(); ) {
                String key = i.next();
                ext.put(key, jext.get(key));
            }//for
        }//end if
        
        if (jsReq.has(Bayeux.SUPP_CONNECTION_TYPE_FIELD)) {
            JSONArray types = jsReq.getJSONArray(Bayeux.SUPP_CONNECTION_TYPE_FIELD);
            suppConnTypes = new String[types.length()];
            for (int i = 0; i < types.length(); i++) {
                suppConnTypes[i] = types.getString(i);
                if (Bayeux.TRANSPORT_CALLBACK_POLL.equals(suppConnTypes[i]))
                    suppConnTypesFlag = suppConnTypesFlag|ClientImpl.SUPPORT_CALLBACK_POLL;
                else if (Bayeux.TRANSPORT_LONG_POLL.equals(suppConnTypes[i]))
                    suppConnTypesFlag = suppConnTypesFlag|ClientImpl.SUPPORT_LONG_POLL;
            }//for
        }//end if
        if (conType!=null) {
            if (Bayeux.TRANSPORT_CALLBACK_POLL.equals(conType))
                desiredConnTypeFlag = ClientImpl.SUPPORT_CALLBACK_POLL;
            else if (Bayeux.TRANSPORT_LONG_POLL.equals(conType))
                desiredConnTypeFlag = ClientImpl.SUPPORT_LONG_POLL;
        }//end if
        
        //due to the fact that the javascript doesn't send up a required field
        //we have to fake it
        suppConnTypesFlag = ClientImpl.SUPPORT_CALLBACK_POLL | ClientImpl.SUPPORT_LONG_POLL;
    }
    public HttpError validate() {
        HttpError result = null;
        return result;
    }
    public TomcatBayeux getTomcatBayeux() {
        return tomcatBayeux;
    }
    public String getChannel() {
        return channel;
    }
    public String getId() {
        return id;
    }
    public String getClientId() {
        return clientId;
    }
    public LinkedHashMap getExt() {
        return ext;
    }
    public CometEvent getEvent() {
        return event;
    }
    
    protected static void deliver(CometEvent event, ClientImpl to) throws IOException, ServletException, BayeuxException {
        JSONArray jarray = getJSONArray(event,true);
        if ( jarray == null ) throw new BayeuxException("No message to send!");
        String jsonstring = jarray.toString();
        if (log.isDebugEnabled()) {
            log.debug("["+Thread.currentThread().getName()+"] Delivering message to[" + to + "] message:" + jsonstring);
        }
        if (to!=null) {
            if (to.useJsonFiltered()) {
                if (!event.getHttpServletResponse().isCommitted()) event.getHttpServletResponse().setContentType("text/json-comment-filtered");
            }else {	
                if (!event.getHttpServletResponse().isCommitted()) event.getHttpServletResponse().setContentType("text/json");
            }
        }
        PrintWriter out = event.getHttpServletResponse().getWriter();
        if (to==null) {
            //do nothing
        }else if ( (to.getDesirectConnType() == 0 && to.supportsLongPoll()) || to.getDesirectConnType() == ClientImpl.SUPPORT_LONG_POLL) {
            if (to.useJsonFiltered())
                out.print("/*");
        } else if ( (to.getDesirectConnType() == 0 && to.supportsCallbackPoll()) || to.getDesirectConnType() == ClientImpl.SUPPORT_CALLBACK_POLL) {
            String jsonp = event.getHttpServletRequest().getParameter(Bayeux.JSONP_PARAMETER);
            if (jsonp == null)
                jsonp = Bayeux.JSONP_DEFAULT_NAME;
            out.print(jsonp);
            out.print('(');
        } else {
            throw new BayeuxException("Client doesn't support any appropriate connection type.");
        }
        out.print(jsonstring);
        if ( to == null ) {
            //do nothing
        } else if ( (to.getDesirectConnType() == 0 && to.supportsLongPoll()) || to.getDesirectConnType() == ClientImpl.SUPPORT_LONG_POLL) {
            if (to.useJsonFiltered())
                out.print("*/");
        } else if ( (to.getDesirectConnType() == 0 && to.supportsCallbackPoll()) || to.getDesirectConnType() == ClientImpl.SUPPORT_CALLBACK_POLL) {
            out.print(");");
        } 
        out.flush();
        event.getHttpServletResponse().flushBuffer();
        
    }
    protected static JSONArray getJSONArray(CometEvent event, boolean nullok) {
        synchronized(event) {
            JSONArray jarray = (JSONArray) event.getHttpServletRequest().getAttribute(JSON_MSG_ARRAY);
            if (jarray == null && (!nullok)) {
                jarray = new JSONArray();
                event.getHttpServletRequest().setAttribute(JSON_MSG_ARRAY, jarray);
            }
            return jarray;
        }
    }
    protected JSONArray getJSONArray() {
        return getJSONArray(event,false);
    }
    protected void addToDeliveryQueue(ClientImpl to, JSONObject msg) throws IOException, ServletException, BayeuxException {
        synchronized (event) {
            getJSONArray().put(msg);
        }
    }
    
    protected void flushMessages(ClientImpl client) throws BayeuxException {
        List<Message> msgs = client.takeMessages();
        synchronized (event) {
            try {
                for (Iterator<Message> it = msgs.iterator(); it.hasNext(); ){
                    MessageImpl msg = (MessageImpl)it.next();
                    Map map = new HashMap();
                    map.put(Bayeux.CHANNEL_FIELD,msg.getChannel().getId());
                    if (msg.getClient()!=null) map.put(Bayeux.CLIENT_FIELD,msg.getClient().getId());
                    map.put(Bayeux.DATA_FIELD,msg);
                    JSONObject obj = new JSONObject(map);
                    addToDeliveryQueue(client, obj);
                }
            } catch (ServletException x) {
                throw new BayeuxException(x);
            } catch (IOException x) {
                throw new BayeuxException(x);
            }
        }
    }
    
    public int process(int prevops) throws BayeuxException {
        event.getHttpServletRequest().setAttribute(CURRENT_REQ_ATTR,this);
        return prevops;
    }
    
    public int getReconnectInterval() {
        return reconnectInterval;
    }
    public String getTimeStamp() {
        return timestampFmt.format(new Date(System.currentTimeMillis()));
    }
======= 408175f^:"modules/bayeux/java/org/apache/tomcat/bayeux/RequestFactory.java"

 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
    public static BayeuxRequest getRequest(TomcatBayeux tomcatBayeux, CometEvent event, JSONObject msg) throws JSONException {
        String channel = msg.optString(Bayeux.CHANNEL_FIELD);
        if (Bayeux.META_HANDSHAKE.equals(channel)) {
            return new MetaHandshakeRequest(tomcatBayeux,event,msg);
        }else if (Bayeux.META_CONNECT.equals(channel)) {
            return new MetaConnectRequest(tomcatBayeux,event,msg);
        }else if (Bayeux.META_DISCONNECT.equals(channel)) {
            return new MetaDisconnectRequest(tomcatBayeux,event,msg);
        }else if (Bayeux.META_SUBSCRIBE.equals(channel)) {
            return new MetaSubscribeRequest(tomcatBayeux,event,msg);
        }else if (Bayeux.META_UNSUBSCRIBE.equals(channel)) {
            return new MetaUnsubscribeRequest(tomcatBayeux,event,msg);
        } else {
            return new PublishRequest(tomcatBayeux,event,msg);
        }
    }
======= 408175f^:"modules/bayeux/java/org/apache/tomcat/bayeux/TomcatBayeux.java"

 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 * 
 * @author Filip Hanik
 * @version 1.0
 */
    
    protected int reconnectInterval = 5000;
    /**
     * a list of all active clients
     */
    protected HashMap<String,Client> clients = new HashMap<String,Client>();
    
    /**
     * a list of all active channels
     */
    protected LinkedHashMap<String, Channel> channels = new LinkedHashMap<String,Channel>();
    
    /**
     * security policy to be used.
     */
    protected SecurityPolicy securityPolicy = null;
    /**
     * default client to use when we need to send an error message but don't have a client valid reference
     */
    protected static ClientImpl errorClient = new ClientImpl("error-no-client",false);
    
    /**
     * returns the default error client
     * @return ClientImpl
     */
    public static ClientImpl getErrorClient() {
        return errorClient;
    }
    
    protected TomcatBayeux() {
    }
    
    /**
     * should be invoked when the servlet is destroyed or when the context shuts down
     */
    public void destroy() {
        throw new UnsupportedOperationException("TomcatBayeux.destroy() not yet implemented");
    }
    public Channel getChannel(String channelId, boolean create) {
        Channel result = channels.get(channelId);
        if (result==null && create) {
            result = new ChannelImpl(channelId);
            channels.put(channelId,result);
        }
        return result;
    }
    
    public Channel remove(Channel channel) {
        return channels.remove(channel.getId());
    }
    
    public Client remove(Client client) {
        if (client==null) return null;
        for (Channel ch : getChannels()) {
            ch.unsubscribe(client);
        }
        return clients.remove(client.getId());
    }
    public Client getClient(String clientId) {
        return clients.get(clientId);
    }
    
    public boolean hasClient(String clientId) {
        return clients.containsKey(clientId);
    }
    
    public List<Client> getClients() {
        return java.util.Arrays.asList(clients.entrySet().toArray(new Client[0]));
    }
    public SecurityPolicy getSecurityPolicy() {
        return securityPolicy;
    }
    public int getReconnectInterval() { 
        return reconnectInterval;
    }
    public boolean hasChannel(String channel) {
        return channels.containsKey(channel);
    }
    public Client newClient(String idprefix, Listener listener, boolean local, CometEvent event) {
        String id = createUUID(idprefix);
        ClientImpl client = new ClientImpl(id, local);
        client.setListener(listener);
        clients.put(id, client);
        return client;
    }
    public Client newClient(String idprefix, Listener listener) {
        assert listener!=null;
        //if this method gets called, someone is using the API inside
        //the JVM, this is a local client
        return newClient(idprefix,listener,true, null);
    }
    
    protected ClientImpl getClientImpl(CometEvent event) {
        return (ClientImpl)event.getHttpServletRequest().getAttribute(ClientImpl.COMET_EVENT_ATTR);
    }
    
    protected void remove(CometEvent event) {
        ClientImpl client = getClientImpl(event);
        if (client!=null) {
            client.removeCometEvent(event);
        }
    }
    public String createUUID(String idprefix) {
        if (idprefix==null) idprefix="";
        return idprefix + Arrays.toString(UUIDGenerator.randomUUID(false));
    }
    
    public List<Channel> getChannels() {
        return java.util.Arrays.asList(channels.entrySet().toArray(new Channel[0]));
    }
    protected Message newMessage() {
        String id = createUUID("msg-");
        return new MessageImpl(id);
    }
    public Message newMessage(Client from) {
        MessageImpl msg = (MessageImpl)newMessage();
        msg.setClient(from);
        return msg;
    }
    public void setSecurityPolicy(SecurityPolicy securityPolicy) {
        this.securityPolicy = securityPolicy;
    }
    public void setReconnectInterval(int reconnectTimeout) {
        this.reconnectInterval = reconnectTimeout;
    }
======= 408175f^:"modules/bayeux/java/org/apache/tomcat/bayeux/request/MetaConnectRequest.java"

 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 * Handshake request Bayeux message.
 *
 * @author Guy A. Molinari
 * @author Filip Hanik
 * @version 1.0
 *
 */
    protected static HashMap<String,Object> responseTemplate = new HashMap<String,Object>();
    static {
        responseTemplate.put(Bayeux.CHANNEL_FIELD,Bayeux.META_CONNECT);
        responseTemplate.put(Bayeux.SUCCESSFUL_FIELD,Boolean.TRUE);
        responseTemplate.put(Bayeux.ADVICE_FIELD, new HashMap<String, Object>());
    }
    public MetaConnectRequest(TomcatBayeux tb, CometEvent event, JSONObject jsReq) throws JSONException {
        super(tb, event, jsReq);
        if (clientId!=null && getTomcatBayeux().hasClient(clientId)) {
            event.getHttpServletRequest().setAttribute("client",getTomcatBayeux().getClient(clientId));
        }
    }
    /**
     * Check client request for validity.
     *
     * Per section 4.2.1 of the Bayuex spec a connect request must contain:
     *  1) The "/meta/connect" channel identifier.
     *  2) The clientId returned by the server after handshake.
     *  3) The desired connectionType (must be one of the server's supported
     *     types returned by handshake response.
     *  
     * @return HttpError This method returns null if no errors were found
     */
    public HttpError validate() {
        if(clientId==null|| (!getTomcatBayeux().hasClient(clientId)))
            return new HttpError(400,"Client Id not valid.", null);
        if (! (Bayeux.TRANSPORT_LONG_POLL.equals(conType) || Bayeux.TRANSPORT_CALLBACK_POLL.equals(conType)))
            return new HttpError(400,"Unsupported connection type.",null);
        return null;//no error
    }
    /**
     * Transition to connected state, flushing pending messages if
     * available.  If there are pending subscriptions and no messages to
     * flush then the connection is held until there is a pending publish
     * event to be delivered to this client (Section 4.2.2 of spec).
     */
    public int process(int prevops) throws BayeuxException {
        super.process(prevops);
        response = (HashMap<String, Object>)responseTemplate.clone();
        ClientImpl client = (ClientImpl)getTomcatBayeux().getClient(clientId);
        boolean success = false;
        HttpError error = validate();
        if (error == null) {
            client.setDesirectConnType(desiredConnTypeFlag);
            ((HashMap) response.get(Bayeux.ADVICE_FIELD)).put(Bayeux.RECONNECT_FIELD, Bayeux.RETRY_RESPONSE);
            ((HashMap) response.get(Bayeux.ADVICE_FIELD)).put(Bayeux.INTERVAL_FIELD, getReconnectInterval());
            success = true;
        }else {
            response.put(Bayeux.SUCCESSFUL_FIELD,Boolean.FALSE);
            response.put(Bayeux.ERROR_FIELD, error.toString());
            ((HashMap) response.get(Bayeux.ADVICE_FIELD)).put(Bayeux.RECONNECT_FIELD, Bayeux.HANDSHAKE_RESPONSE);
            if (client==null) client = TomcatBayeux.getErrorClient();
        }
        response.put(Bayeux.CLIENT_FIELD, client.getId());
        response.put(Bayeux.TIMESTAMP_FIELD,getTimeStamp());
        try {
            JSONObject obj = new JSONObject(response);
            addToDeliveryQueue(client, obj);
        } catch (ServletException x) {
            throw new BayeuxException(x);
        } catch (IOException x) {
            throw new BayeuxException(x);
        }
        
        //return immediately if there is no subscriptions
        //so that we can process the next message
        int result = client.isSubscribed()?1:0; 
        if (success && client!=null && client.hasMessages()) {
            //send out messages 
            flushMessages(client);
            result = 0; //flush out the messages
        }
        return result;
    }
======= 408175f^:"modules/bayeux/java/org/apache/tomcat/bayeux/request/MetaDisconnectRequest.java"

 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 * Handshake request Bayeux message.
 *
 * @author Guy A. Molinari
 * @author Filip Hanik
 * @version 1.0
 *
 */
    protected static HashMap<String,Object> responseTemplate = new HashMap<String,Object>();
    static {
        responseTemplate.put(Bayeux.CHANNEL_FIELD,Bayeux.META_DISCONNECT);
        responseTemplate.put(Bayeux.SUCCESSFUL_FIELD,Boolean.TRUE);
        responseTemplate.put(Bayeux.ADVICE_FIELD, new HashMap<String, Object>());
    }
    public MetaDisconnectRequest(TomcatBayeux tb, CometEvent event, JSONObject jsReq) throws JSONException {
        super(tb, event, jsReq);
    }
    /**
     * Check client request for validity.
     *
     * Per section 4.4.1 of the Bayuex spec a connect request must contain:
     *  1) The "/meta/disconnect" channel identifier.
     *  2) The clientId.
     *  
     * @return HttpError This method returns null if no errors were found
     */
    public HttpError validate() {
        if(clientId==null|| (!this.getTomcatBayeux().hasClient(clientId)))
            return new HttpError(400,"Client Id not valid.", null);
        return null;//no error
    }
    /**
     * Disconnect a client session.
     */
    public int process(int prevops) throws BayeuxException {
        super.process(prevops);
        response = (HashMap<String, Object>)responseTemplate.clone();
        ClientImpl client = (ClientImpl)getTomcatBayeux().getClient(clientId);
        HttpError error = validate();
        if (error == null) {
            ((HashMap) response.get(Bayeux.ADVICE_FIELD)).put("reconnect", "retry");
            ((HashMap) response.get(Bayeux.ADVICE_FIELD)).put("interval", getReconnectInterval());
        }else {
            getTomcatBayeux().remove(client);
            response.put(Bayeux.SUCCESSFUL_FIELD,Boolean.FALSE);
            response.put(Bayeux.ERROR_FIELD, error.toString());
            ((HashMap) response.get(Bayeux.ADVICE_FIELD)).put("reconnect", "none");
            if (client==null) client = TomcatBayeux.getErrorClient();
        }
        response.put(Bayeux.CLIENT_FIELD, client.getId());
        try {
            JSONObject obj = new JSONObject(response);
            addToDeliveryQueue(client, obj);
        } catch (ServletException x) {
            throw new BayeuxException(x);
        } catch (IOException x) {
            throw new BayeuxException(x);
        }
        return 0;
    }
======= 408175f^:"modules/bayeux/java/org/apache/tomcat/bayeux/request/MetaHandshakeRequest.java"

 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 * Handshake request Bayeux message.
 *
 * @author Guy A. Molinari
 * @author Filip Hanik
 * @version 1.0
 *
 */
    protected static HashMap<String,Object> responseTemplate = new HashMap<String,Object>();
    
    static {
        responseTemplate.put(Bayeux.CHANNEL_FIELD,Bayeux.META_HANDSHAKE);
        responseTemplate.put(Bayeux.VERSION_FIELD,"1.0");
        responseTemplate.put(Bayeux.SUPP_CONNECTION_TYPE_FIELD,new String[] { Bayeux.TRANSPORT_LONG_POLL, Bayeux.TRANSPORT_CALLBACK_POLL });
        responseTemplate.put(Bayeux.SUCCESSFUL_FIELD,Boolean.TRUE);
        responseTemplate.put(Bayeux.ADVICE_FIELD, new HashMap<String, Object>());
    }
    public MetaHandshakeRequest(TomcatBayeux tomcatBayeux, CometEvent event, JSONObject jsReq) throws JSONException {
        super(tomcatBayeux, event, jsReq);
    }
    
    public String getVersion() { return version; }
    public String getMinimumVersion() { return minVersion; }
    /**
     * Check client request for validity.
     *
     * Per section 4.1.1 of the Bayuex spec a handshake request must contain:
     *  1) The "/meta/handshake" channel identifier.
     *  2) The version of the protocol supported by the client
     *  3) The client's supported connection types.
     *  
     * @return HttpError This method returns null if no errors were found
     */
    public HttpError validate() {
        boolean error = (version==null || version.length()==0);
        if (!error) error = suppConnTypesFlag==0;
        if (error) return new HttpError(400,"Invalid handshake request, supportedConnectionType field missing.",null);
        else return null;
    }
    /**
     * Generate and return a client identifier.  Return a list of
     * supported connection types.  Must be a subset of or identical to
     * the list of types supported by the client.  See section 4.1.2 of
     * the Bayuex specification.
     */
    public int process(int prevops) throws BayeuxException {
        super.process(prevops);
        response = (HashMap<String, Object>)responseTemplate.clone();
        ClientImpl client = null;
        HttpError error = validate();
        if (error == null) {
            client = (ClientImpl) getTomcatBayeux().newClient("http-", null, false,getEvent());
            clientId = client.getId();
            client.setSupportedConnTypes(suppConnTypesFlag);
            client.setUseJsonFiltered(getExt().get(Bayeux.JSON_COMMENT_FILTERED_FIELD) != null);
            response.put(Bayeux.CLIENT_FIELD, client.getId());
            ((HashMap) response.get(Bayeux.ADVICE_FIELD)).put(Bayeux.RECONNECT_FIELD, Bayeux.RETRY_RESPONSE);
            ((HashMap) response.get(Bayeux.ADVICE_FIELD)).put(Bayeux.INTERVAL_FIELD, getReconnectInterval());
        }else {
            response.put(Bayeux.SUCCESSFUL_FIELD,Boolean.FALSE);
            response.put(Bayeux.ERROR_FIELD, error.toString());
            client = TomcatBayeux.getErrorClient();
            ((HashMap) response.get(Bayeux.ADVICE_FIELD)).put(Bayeux.RECONNECT_FIELD, Bayeux.NONE_RESPONSE);
        }
        try {
            JSONObject obj = new JSONObject(response);
            addToDeliveryQueue(client, obj);
        } catch (ServletException x) {
            throw new BayeuxException(x);
        } catch (IOException x) {
            throw new BayeuxException(x);
        }
        return 0;
    }
======= 408175f^:"modules/bayeux/java/org/apache/tomcat/bayeux/request/MetaSubscribeRequest.java"

 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 * Handshake request Bayeux message.
 *
 * @author Guy A. Molinari
 * @author Filip Hanik
 * @version 1.0
 */
    protected static HashMap<String,Object> responseTemplate = new HashMap<String,Object>();
    static {
        responseTemplate.put(Bayeux.CHANNEL_FIELD,Bayeux.META_SUBSCRIBE);
        responseTemplate.put(Bayeux.SUCCESSFUL_FIELD,Boolean.TRUE);
        responseTemplate.put(Bayeux.ADVICE_FIELD, new HashMap<String, Object>());
    }
    public MetaSubscribeRequest(TomcatBayeux tb, CometEvent event, JSONObject jsReq) throws JSONException {
        super(tb, event, jsReq);
    }
    /**
     * Check client request for validity.
     *
     * Per section 4.5.1 of the Bayuex spec a connect request must contain:
     *  1) The "/meta/subscribe" channel identifier.
     *  2) The clientId.
     *  3) The subscription.  This is the name of the channel of interest,
     *     or a pattern.
     *  
     * @return HttpError This method returns null if no errors were found
     */
    public HttpError validate() {
        if(clientId==null|| (!this.getTomcatBayeux().hasClient(clientId)))
            return new HttpError(400,"Client Id not valid.", null);
        if (subscription==null||subscription.length()==0)
            return new HttpError(400,"Subscription missing.",null);
        return null;//no error
    }
    /**
     * Register interest for one or more channels.  Per section 2.2.1 of the
     * Bayeux spec, a pattern may be specified.  Assign client to matching
     * channels and inverse client to channel reference.
     */
    public int process(int prevops) throws BayeuxException {
        super.process(prevops);
        response = (HashMap<String, Object>)this.responseTemplate.clone();
        ClientImpl client = (ClientImpl)getTomcatBayeux().getClient(clientId);
        HttpError error = validate();
        if (error == null) {
            boolean wildcard = subscription.indexOf('*')!=-1;
            boolean subscribed = false;
            if (wildcard) {
                List<Channel> channels = getTomcatBayeux().getChannels();
                Iterator<Channel> it = channels.iterator();
                while (it.hasNext()) {
                    ChannelImpl ch = (ChannelImpl)it.next();
                    if (ch.matches(subscription)) {
                        ch.subscribe(client);
                        subscribed = true;
                    }
                }
            }else {
                ChannelImpl ch = (ChannelImpl)getTomcatBayeux().getChannel(subscription,true);
                ch.subscribe(client);
                subscribed = true;
            }
            response.put(Bayeux.SUCCESSFUL_FIELD, Boolean.valueOf(subscribed));
            response.put(Bayeux.SUBSCRIPTION_FIELD,subscription);
            ((HashMap) response.get(Bayeux.ADVICE_FIELD)).put("reconnect", "retry");
            ((HashMap) response.get(Bayeux.ADVICE_FIELD)).put("interval", getReconnectInterval());
        }else {
            response.put(Bayeux.SUCCESSFUL_FIELD,Boolean.FALSE);
            response.put(Bayeux.ERROR_FIELD, error.toString());
            ((HashMap) response.get(Bayeux.ADVICE_FIELD)).put("reconnect", "handshake");
            if (client==null) client = TomcatBayeux.getErrorClient();
        }
        response.put(Bayeux.CLIENT_FIELD, client.getId());
        response.put(Bayeux.TIMESTAMP_FIELD,getTimeStamp());
        try {
            JSONObject obj = new JSONObject(response);
            addToDeliveryQueue(client, obj);
        } catch (ServletException x) {
            throw new BayeuxException(x);
        } catch (IOException x) {
            throw new BayeuxException(x);
        }
        return 0;
    }
======= 408175f^:"modules/bayeux/java/org/apache/tomcat/bayeux/request/MetaUnsubscribeRequest.java"

 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 * Handshake request Bayeux message.
 *
 * @author Guy A. Molinari
 * @author Filip Hanik
 * @version 1.0
 *
 */
    protected static HashMap<String,Object> responseTemplate = new HashMap<String,Object>();
    static {
        responseTemplate.put(Bayeux.CHANNEL_FIELD,Bayeux.META_UNSUBSCRIBE);
        responseTemplate.put(Bayeux.SUCCESSFUL_FIELD,Boolean.TRUE);
        responseTemplate.put(Bayeux.ADVICE_FIELD, new HashMap<String, Object>());
    }
    public MetaUnsubscribeRequest(TomcatBayeux tb, CometEvent event, JSONObject jsReq) throws JSONException {
        super(tb, event, jsReq);
    }
    /**
     * Check client request for validity.
     *
     * Per section 4.6.1 of the Bayuex spec a connect request must contain:
     *  1) The "/meta/unsubscribe" channel identifier.
     *  2) The clientId.
     *  3) The subscription.  This is the name of the channel of interest,
     *     or a pattern.
     *  
     * @return HttpError This method returns null if no errors were found
     */
    public HttpError validate() {
        if(clientId==null|| (!this.getTomcatBayeux().hasClient(clientId)))
            return new HttpError(400,"Client Id not valid.", null);
        if (subscription==null||subscription.length()==0)
            return new HttpError(400,"Subscription missing.",null);
        return null;//no error
    }
    /**
     * De-register interest for one or more channels.  Per section 2.2.1 of the
     * Bayeux spec, a pattern may be specified.  Sever relationships.
     */
    public int process(int prevops) throws BayeuxException {
        super.process(prevops);
        response = (HashMap<String, Object>)responseTemplate.clone();
        ClientImpl client = (ClientImpl)getTomcatBayeux().getClient(clientId);
        HttpError error = validate();
        if (error == null) {
            boolean wildcard = subscription.indexOf('*')!=-1;
            boolean unsubscribed = false;
            if (wildcard) {
                List<Channel> channels = getTomcatBayeux().getChannels();
                Iterator<Channel> it = channels.iterator();
                while (it.hasNext()) {
                    ChannelImpl ch = (ChannelImpl)it.next();
                    if (ch.matches(subscription)) {
                        ch.unsubscribe(client);
                        unsubscribed = true;
                    }
                }
            }else {
                ChannelImpl ch = (ChannelImpl)getTomcatBayeux().getChannel(subscription,true);
                ch.unsubscribe(client);
                unsubscribed = true;
            }
            response.put(Bayeux.SUCCESSFUL_FIELD, Boolean.valueOf(unsubscribed));
            response.put(Bayeux.SUBSCRIPTION_FIELD,subscription);
            ((HashMap) response.get(Bayeux.ADVICE_FIELD)).put("reconnect", "retry");
            ((HashMap) response.get(Bayeux.ADVICE_FIELD)).put("interval", getReconnectInterval());
        }else {
            response.put(Bayeux.SUCCESSFUL_FIELD,Boolean.FALSE);
            response.put(Bayeux.ERROR_FIELD, error.toString());
            ((HashMap) response.get(Bayeux.ADVICE_FIELD)).put("reconnect", "handshake");
            if (client==null) client = TomcatBayeux.getErrorClient();
        }
        response.put(Bayeux.CLIENT_FIELD, client.getId());
        response.put(Bayeux.TIMESTAMP_FIELD,getTimeStamp());
        try {
            JSONObject obj = new JSONObject(response);
            addToDeliveryQueue(client, obj);
        } catch (ServletException x) {
            throw new BayeuxException(x);
        } catch (IOException x) {
            throw new BayeuxException(x);
        }
        return 0;
    }
======= 408175f^:"modules/bayeux/java/org/apache/tomcat/bayeux/request/PublishRequest.java"

 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 * Handshake request Bayeux message.
 *
 * @author Guy A. Molinari
 * @author Filip Hanik
 * @version 1.0
 *
 */
    JSONObject msgData = null;
    protected static HashMap<String,Object> responseTemplate = new HashMap<String,Object>();
    static {
        responseTemplate.put(Bayeux.SUCCESSFUL_FIELD,Boolean.TRUE);
        responseTemplate.put(Bayeux.ADVICE_FIELD, new HashMap<String, Object>());
    }
    public PublishRequest(TomcatBayeux tb, CometEvent event, JSONObject jsReq) throws JSONException {
        super(tb, event, jsReq);
    }
    /**
     * Check client request for validity.
     *
     * Per section 5.1.1 of the Bayuex spec a connect request must contain:
     *  1) The channel identifier of the channel for publication.
     *  2) The data to send.
     *  
     * @return HttpError This method returns null if no errors were found
     */
    public HttpError validate() {
        if(channel==null|| (!this.getTomcatBayeux().hasChannel(channel)))
            return new HttpError(400,"Channel Id not valid.", null);
        if(data==null || data.length()==0)
            return new HttpError(400,"Message data missing.", null);
        try {
            this.msgData = new JSONObject(data);
        }catch (JSONException x) {
            return new HttpError(400,"Invalid JSON object in data attribute.",x);
        }
        if(clientId==null|| (!this.getTomcatBayeux().hasClient(clientId)))
            return new HttpError(400,"Client Id not valid.", null);
        return null;//no error
    }
    /**
     *  Send the event message to all registered subscribers.
     */
    public int process(int prevops) throws BayeuxException {
        super.process(prevops);
        response = (HashMap<String, Object>)responseTemplate.clone();
        ClientImpl client = clientId!=null?(ClientImpl)getTomcatBayeux().getClient(clientId):
                                           (ClientImpl)event.getHttpServletRequest().getAttribute("client");
        boolean success = false;
        HttpError error = validate();
        if (error == null) {
            ChannelImpl chimpl = (ChannelImpl)getTomcatBayeux().getChannel(channel,false);
            MessageImpl mimpl = (MessageImpl)getTomcatBayeux().newMessage(client);
            
            try {
                String[] keys = JSONObject.getNames(msgData);
                for (int i = 0; i < keys.length; i++) {
                    mimpl.put(keys[i], msgData.get(keys[i]));
                }
                success = true;
                ((HashMap) response.get(Bayeux.ADVICE_FIELD)).put(Bayeux.RECONNECT_FIELD, Bayeux.RETRY_RESPONSE);
                ((HashMap) response.get(Bayeux.ADVICE_FIELD)).put(Bayeux.INTERVAL_FIELD, getReconnectInterval());
            }catch (JSONException x) {
                if (log.isErrorEnabled()) log.error("Unable to parse:"+msgData,x);
                throw new BayeuxException(x);
            }
            chimpl.publish(mimpl);
        }
        if(!success) {
            response.put(Bayeux.SUCCESSFUL_FIELD,Boolean.FALSE);
            response.put(Bayeux.ERROR_FIELD, error.toString());
            ((HashMap) response.get(Bayeux.ADVICE_FIELD)).put(Bayeux.RECONNECT_FIELD, Bayeux.HANDSHAKE_RESPONSE);
            if (client==null) client = TomcatBayeux.getErrorClient();
        }
        response.put(Bayeux.CHANNEL_FIELD,channel);
        response.put(Bayeux.CLIENT_FIELD, client.getId());
        try {
            JSONObject obj = new JSONObject(response);
            addToDeliveryQueue(client, obj);
        } catch (ServletException x) {
            throw new BayeuxException(x);
        } catch (IOException x) {
            throw new BayeuxException(x);
        }
        
        if (success && client!=null && client.hasMessages()) {
            //send out messages 
            flushMessages(client);
        }
        return 0;
    }
======= 408175f^:"modules/bayeux/test/org/apache/cometd/bayeux/samples/BayeuxStockTicker.java"

        ServletContextAttributeListener, Listener {
    static AtomicInteger counter = new AtomicInteger(0);
    protected int id;
    protected Bayeux b;
    protected Client c;
    protected boolean alive = true;
    protected boolean initialized = false;
    protected TickerThread tt = new TickerThread();
    public BayeuxStockTicker() {
        id = counter.incrementAndGet();
        System.out.println("new listener created with id:" + id);
    }
    public void contextDestroyed(ServletContextEvent servletContextEvent) {
        alive = false;
        tt.run = false;
        tt.interrupt();
    }
    public void contextInitialized(ServletContextEvent servletContextEvent) {
    }
    public void attributeAdded(ServletContextAttributeEvent scae) {
        if (scae.getName().equals(Bayeux.DOJOX_COMETD_BAYEUX)) {
            if (initialized) return;
            initialized = true;
            System.out.println("Starting stock ticker server client!");
            b = (Bayeux) scae.getValue();
            c = b.newClient("stock-ticker-", this);
            tt.start();
        }
    }
    public void attributeRemoved(ServletContextAttributeEvent scae) {
        if (scae.getName().equals(Bayeux.DOJOX_COMETD_BAYEUX)) {
            initialized = false;
            b = (Bayeux) scae.getValue();
            List<Channel> chs = b.getChannels();
            for (Channel ch : chs) {
                ch.unsubscribe(c);
            }
        }
    }
    public void attributeReplaced(
            ServletContextAttributeEvent servletContextAttributeEvent) {
    }
    public void removed(boolean timeout) {
        System.out.println("Client removed.");
    }
    public void deliver(Message[] msgs) {
        for (int i = 0; msgs != null && i < msgs.length; i++) {
            Message msg = msgs[i];
            System.out.println("[stock ticker server client ]received message:" + msg);
        }
    }
    public class TickerThread extends Thread {
        public boolean run = true;
        public TickerThread() {
            setName("Ticker Thread");
        }
        public void run() {
            try {
                
                Stock[] stocks = new Stock[] { 
                        new Stock("GOOG", 435.43),
                        new Stock("YHOO", 27.88), 
                        new Stock("SPRG", 1015.55), };
                for (Stock s : stocks) {
                    Channel ch = b.getChannel("/stock/"+s.getSymbol(), true);
                    ch.subscribe(c);
                    
                }
                Random r = new Random(System.currentTimeMillis());
                while (run) {
                    for (int j = 0; j < 1; j++) {
                        int i = r.nextInt() % 3;
                        if (i < 0)
                            i = i * (-1);
                        Stock stock = stocks[i];
                        double change = r.nextDouble();
                        boolean plus = r.nextBoolean();
                        if (plus) {
                            stock.setValue(stock.getValue() + change);
                        } else {
                            stock.setValue(stock.getValue() - change);
                        }
                        Channel ch = b.getChannel("/stock/"+stock.getSymbol(), true);
                        Message m = b.newMessage(c);
                        m.put("stock", stock.toString());
                        m.put("symbol", stock.getSymbol());
                        m.put("price", stock.getValueAsString());
                        m.put("change", stock.getLastChangeAsString());
                        ch.publish(m);
                        System.out.println("Stock: "+stock.getSymbol()+" Price: "+stock.getValueAsString()+" Change: "+stock.getLastChangeAsString());
                    }
                    Thread.sleep(850);
                }
            } catch (InterruptedException ix) {
            } catch (Exception x) {
                x.printStackTrace();
            }
        }
    }
    public static class Stock {
        protected static DecimalFormat df = new DecimalFormat("0.00");
        protected String symbol = "";
        protected double value = 0.0d;
        protected double lastchange = 0.0d;
        protected int cnt = 0;
        public Stock(String symbol, double initvalue) {
            this.symbol = symbol;
            this.value = initvalue;
        }
        public void setCnt(int c) {
            this.cnt = c;
        }
        public int getCnt() {
            return cnt;
        }
        public String getSymbol() {
            return symbol;
        }
        public double getValue() {
            return value;
        }
        public void setValue(double value) {
            double old = this.value;
            this.value = value;
            this.lastchange = value - old;
        }
        public String getValueAsString() {
            return df.format(value);
        }
        public double getLastChange() {
            return this.lastchange;
        }
        public void setLastChange(double lastchange) {
            this.lastchange = lastchange;
        }
        public String getLastChangeAsString() {
            return df.format(lastchange);
        }
        public int hashCode() {
            return symbol.hashCode();
        }
        public boolean equals(Object other) {
            if (other instanceof Stock) {
                return this.symbol.equals(((Stock) other).symbol);
            } else {
                return false;
            }
        }
        
        public String toString(){
            StringBuffer buf = new StringBuffer("STOCK#");
            buf.append(getSymbol());
            buf.append("#");
            buf.append(getValueAsString());
            buf.append("#");
            buf.append(getLastChangeAsString());
            buf.append("#");
            buf.append(String.valueOf(getCnt()));
            return buf.toString();
         
        }
        public Object clone() {
            Stock s = new Stock(this.getSymbol(), this.getValue());
            s.setLastChange(this.getLastChange());
            s.setCnt(this.cnt);
            return s;
        }
    }
======= 408175f^:"modules/bayeux/test/org/apache/cometd/bayeux/samples/EchoChatClient.java"

    
    static AtomicInteger counter = new AtomicInteger(0);
    protected int id;
    protected Bayeux b;
    protected Client c;
    protected boolean alive = true;
    protected TimestampThread tt = new TimestampThread();
    public EchoChatClient() {
        id = counter.incrementAndGet();
        System.out.println("new listener created with id:"+id);
    }
    public void contextDestroyed(ServletContextEvent servletContextEvent) {
        alive = false;
        tt.interrupt();
    }
    public void contextInitialized(ServletContextEvent servletContextEvent) {
    }
    public void attributeAdded(ServletContextAttributeEvent scae) {
        if (scae.getName().equals(Bayeux.DOJOX_COMETD_BAYEUX)) {
            System.out.println("Starting echo chat client!");
            b = (Bayeux)scae.getValue();
            c = b.newClient("echochat-",this);
            Channel ch = b.getChannel("/chat/demo",true);
            ch.subscribe(c);
            tt.start();
        }
    }
    public void attributeRemoved(ServletContextAttributeEvent servletContextAttributeEvent) {
    }
    public void attributeReplaced(ServletContextAttributeEvent servletContextAttributeEvent) {
    }
    public void removed(boolean timeout) {
        System.out.println("Client removed.");
    }
    public void deliver(Message[] msgs) {
        for (int i=0; msgs!=null && i<msgs.length; i++) {
            Message msg = msgs[i];
            System.out.println("[echochatclient ]received message:" + msg);
            Message m = b.newMessage(c);
            m.putAll(msg);
            //echo the same message
            m.put("user", "echochatserver");
            if (m.containsKey("msg")) {
                //simple chat demo
                String chat = (String) m.get("msg");
                m.put("msg", "echochatserver|I received your message-" + chat.substring(chat.indexOf("|") + 1));
            }
            System.out.println("[echochatclient ]sending message:" + m);
            msg.getChannel().publish(m);
        }
    }
    public class TimestampThread extends Thread {
        public TimestampThread() {
            setDaemon(true);
        }
        
        public void run() {
            while (alive) {
                try {
                    sleep(5000);
                    Channel ch = b.getChannel("/chat/demo",false);
                    if (ch.getSubscribers().size()<=1) {
                        continue;
                    }
                    Message m = b.newMessage(c);
                    m.put("user","echochatserver");
                    m.put("chat","Time is:"+new java.sql.Date(System.currentTimeMillis()).toLocaleString());
                    m.put("join",false);
                    ch.publish(m);
                }catch (InterruptedException ignore) {
                    Thread.currentThread().interrupted();
                }catch (Exception x) {
                    x.printStackTrace();
                }
            }
        }
    }
   xmlns="http://java.sun.com/xml/ns/javaee" 
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
   version="2.5"> 
  <display-name>Cometd Test WebApp</display-name>
  
  <servlet>
    <servlet-name>cometd</servlet-name>
    <servlet-class>org.apache.tomcat.bayeux.BayeuxServlet</servlet-class>
    <init-param>
      <param-name>timeout</param-name>
      <param-value>120000000</param-value>
    </init-param>
    <init-param>
      <param-name>reconnectInterval</param-name>
      <param-value>250</param-value>
    </init-param>
    <load-on-startup>1</load-on-startup>
  </servlet>
  <servlet-mapping>
    <servlet-name>cometd</servlet-name>
    <url-pattern>/cometd/*</url-pattern>
  </servlet-mapping>
  
  <listener>
    <listener-class>org.apache.cometd.bayeux.samples.EchoChatClient</listener-class>
  </listener>
  <listener>
    <listener-class>org.apache.cometd.bayeux.samples.BayeuxStockTicker</listener-class>
  </listener>
  
  dojox.cometd.init("/cometd/cometd");
  dojox.cometd.startBatch();
  dojox.cometd.subscribe("/stock/GOOG", onMsgEvent);
  dojox.cometd.subscribe("/stock/YHOO", onMsgEvent);
  dojox.cometd.subscribe("/stock/SPRG", onMsgEvent);
  dojox.cometd.endBatch();
   if(node == undefined || node == null)
   {
      return;
   }
   var len = node.childNodes.length;
   // Break apart the text string into screen name and message parts.
   var symbol = event.data.symbol;
   var price = event.data.price;
   var pricechange = event.data.change;
   //alert("symbol: "+symbol+" price: "+price+" change: "+pricechange);
   var pricenode = dojo.byId("price."+symbol);
   var changenode = dojo.byId("change."+symbol);
   removeChildrenFromNode(pricenode);
   removeChildrenFromNode(changenode);
   var pricelabel = document.createTextNode(price);
   pricelabel.value = price;
   var changelabel = document.createTextNode(pricechange);
   changelabel.value = pricechange;
   pricenode.appendChild(pricelabel);
   changenode.appendChild(changelabel);
   var table = dojo.byId("stocktable");  
   var rows = table.getElementsByTagName("tr");  
   for(i = 0; i < rows.length; i++){
   }          
   //manipulate rows 
   var rowCurrent = dojo.byId("row."+symbol);
   if (pricechange<=0) {
       rowCurrent.bgColor = "red";
   } else {
   }
  <tr id="row.HEADER">
    <td>SYMBOL</td>
    <td>PRICE</td>
    <td>LAST CHANGE</td>
    <td>SUBSCRIBE</td></tr>
  <tr id="row.SPRG">
    <td>SPRG</td>
    <td id="price.SPRG"></td>
    <td id="change.SPRG"></td>
    <td id="check.SPRG"><input type="checkbox" id="check.SPRG" checked onClick="subscribe(this,'SPRG')"></td>
  </tr>
  <tr id="row.GOOG">
    <td>GOOG</td>
    <td id="price.GOOG"></td>
    <td id="change.GOOG"></td>
    <td id="check.GOOG"><input type="checkbox" id="check.GOOG" checked  onClick="subscribe(this,'GOOG')"></td>
  </tr>
  <tr id="row.YHOO">
    <td>YHOO</td>
    <td id="price.YHOO"></td>
    <td id="change.YHOO"></td>
    <td id="check.YHOO"><input type="checkbox" id="check.GOOG" checked  onClick="subscribe(this,'YHOO')"></td>
  </tr>
======= 408175f^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/interceptor/ConnectionState.java"

 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 * Interceptor that keep track of connection state to avoid roundtrips to the database
 * @author fhanik
 *
 */
    protected static Log log = LogFactory.getLog(ConnectionState.class);
    
    protected final String[] readState = {"getAutoCommit","getTransactionIsolation","isReadOnly","getCatalog"};
    protected final String[] writeState = {"setAutoCommit","setTransactionIsolation","setReadOnly","setCatalog"};
    protected Boolean autoCommit = null;
    protected Integer transactionIsolation = null;
    protected Boolean readOnly = null;
    protected String catalog = null;
    
    
    public void reset(ConnectionPool parent, PooledConnection con) {
        PoolProperties poolProperties = parent.getPoolProperties();
        if (poolProperties.getDefaultReadOnly()!=null) {
            try {
                if (readOnly==null || readOnly.booleanValue()!=poolProperties.getDefaultReadOnly().booleanValue()) {
                    con.getConnection().setReadOnly(poolProperties.getDefaultReadOnly().booleanValue());
                    readOnly = poolProperties.getDefaultReadOnly();
                }
            }catch (SQLException x) {
                readOnly = null;
                log.error("Unable to reset readonly state to connection.",x);
            }
        }
        if (poolProperties.getDefaultAutoCommit()!=null) {
            try {
                if (autoCommit==null || autoCommit.booleanValue()!=poolProperties.getDefaultAutoCommit().booleanValue()) {
                    con.getConnection().setAutoCommit(poolProperties.getDefaultAutoCommit().booleanValue());
                    autoCommit = poolProperties.getDefaultAutoCommit();
                }
            }catch (SQLException x) {
                autoCommit = null;
                log.error("Unable to reset autocommit state to connection.",x);
            }
        }
        if (poolProperties.getDefaultCatalog()!=null) {
            try {
                if (catalog==null || (!catalog.equals(poolProperties.getDefaultCatalog()))) {
                    con.getConnection().setCatalog(poolProperties.getDefaultCatalog());
                    catalog = poolProperties.getDefaultCatalog();
                }
            }catch (SQLException x) {
                catalog = null;
                log.error("Unable to reset default catalog state to connection.",x);
            }
        }
        if (poolProperties.getDefaultTransactionIsolation()!=DataSourceFactory.UNKNOWN_TRANSACTIONISOLATION) {
            try {
                if (transactionIsolation==null || transactionIsolation.intValue()!=poolProperties.getDefaultTransactionIsolation()) {
                    con.getConnection().setTransactionIsolation(poolProperties.getDefaultTransactionIsolation());
                    transactionIsolation = poolProperties.getDefaultTransactionIsolation();
                }
            }catch (SQLException x) {
                transactionIsolation = null;
                log.error("Unable to reset transaction isolation state to connection.",x);
            }
        }
    }
    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        String name = method.getName();
        boolean read = false;
        int index = -1;
        for (int i=0; (!read) && i<readState.length; i++) {
            read = compare(name,readState[i]);
            if (read) index = i;
        }
        boolean write = false;
        for (int i=0; (!write) && (!read) && i<writeState.length; i++) {
            write = compare(name,writeState[i]);
            if (write) index = i;
        }
        Object result = null;
        if (read) {
            switch (index) {
                case 0:{result = autoCommit; break;}
                case 1:{result = transactionIsolation; break;}
                case 2:{result = readOnly; break;}
                case 3:{result = catalog; break;}
                default: result = null;
            }
            //return cached result, if we have it
            if (result!=null) return result;
        }
        result = super.invoke(proxy, method, args);
        if (read || write) {
            switch (index) {
                case 0:{autoCommit = (Boolean) (read?result:args[0]); break;}
                case 1:{transactionIsolation = (Integer)(read?result:args[0]); break;}
                case 2:{readOnly = (Boolean)(read?result:args[0]); break;}
                case 3:{catalog = (String)(read?result:args[0]); break;}
            }
        }
        return result;
    }
======= 408175f^:"modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/interceptor/SlowQueryReport.java"

 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 * @author Filip Hanik
 * @version 1.0
 */
    protected final String[] statements = {"createStatement","prepareStatement","prepareCall"};
    protected final String[] executes = {"execute","executeQuery","executeUpdate","executeBatch"};
    protected static IdentityHashMap<ConnectionPool,HashMap<String,QueryStats>> perPoolStats = 
        new IdentityHashMap<ConnectionPool,HashMap<String,QueryStats>>();
    
    protected HashMap<String,QueryStats> queries = null;
    
    protected long threshold = 100; //don't report queries less than this
    protected int  maxQueries= 1000; //don't store more than this amount of queries
    
    
    public SlowQueryReport() {
        super();
    }
    public long getThreshold() {
        return threshold;
    }
    public void setThreshold(long threshold) {
        this.threshold = threshold;
    }
    @Override
    public void closeInvoked() {
        // TODO Auto-generated method stub
        
    }
    @Override
    public Object createStatement(Object proxy, Method method, Object[] args, Object statement) {
        // TODO Auto-generated method stub
        String sql = null;
        if (method.getName().startsWith("prepare")) {
            sql = (args.length>0 && (args[0] instanceof String))?(String)args[0]:null;
        }
        return new StatementProxy(statement,sql);
    }
    protected boolean process(final String[] names, Method method, boolean process) {
        for (int i=0; (!process) && i<names.length; i++) {
            process = compare(method.getName(),names[i]);
        }
        return process;
    }
    protected class QueryStats {
        private final String query;
        private int nrOfInvocations;
        private long maxInvocationTime;
        private long maxInvocationDate;
        private long minInvocationTime;
        private long minInvocationDate;
        private long totalInvocationTime;
        
        public QueryStats(String query) {
            this.query = query;
        }
        
        public void add(long invocationTime) {
            long now = -1;
            //not thread safe, but don't sacrifice performance for this kind of stuff
            maxInvocationTime = Math.max(invocationTime, maxInvocationTime);
            if (maxInvocationTime == invocationTime) {
                now = System.currentTimeMillis();
                maxInvocationDate = now;
            }
            minInvocationTime = Math.min(invocationTime, minInvocationTime);
            if (minInvocationTime==invocationTime) {
                now = (now==-1)?System.currentTimeMillis():now;
                minInvocationDate = now;
            }
            nrOfInvocations++;
            totalInvocationTime+=invocationTime;
        }
        
        public String getQuery() {
            return query;
        }
        public int getNrOfInvocations() {
            return nrOfInvocations;
        }
        public long getMaxInvocationTime() {
            return maxInvocationTime;
        }
        public long getMaxInvocationDate() {
            return maxInvocationDate;
        }
        public long getMinInvocationTime() {
            return minInvocationTime;
        }
        public long getMinInvocationDate() {
            return minInvocationDate;
        }
        public long getTotalInvocationTime() {
            return totalInvocationTime;
        }
        public int hashCode() {
            return query.hashCode();
        }
        
        public boolean equals(Object other) {
            if (other instanceof QueryStats) {
                QueryStats qs = (QueryStats)other;
                return SlowQueryReport.this.compare(qs.query,this.query);
            } 
            return false;
        }
    }
    
    protected class StatementProxy implements InvocationHandler {
        protected boolean closed = false;
        protected Object delegate;
        protected final String query;
        public StatementProxy(Object parent, String query) {
            this.delegate = parent;
            this.query = query;
        }
        
        public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
            final String name = method.getName();
            boolean close = compare(JdbcInterceptor.CLOSE_VAL,name);
            if (close && closed) return null; //allow close to be called multiple times
            if (closed) throw new SQLException("Statement closed.");
            boolean process = false;
            process = process(executes, method, process);
            long start = (process)?System.currentTimeMillis():0;
            //execute the query
            Object result =  method.invoke(delegate,args);
            long delta = (process)?(System.currentTimeMillis()-start):0;
            if (delta>threshold) {
                String sql = null;//TODO
                QueryStats qs = SlowQueryReport.this.queries.get(sql);
                if (qs == null) {
                    qs = new QueryStats(sql);
                    SlowQueryReport.this.queries.put((String)sql,qs);
                }
                qs.add(delta);
                return qs;
            }
            if (close) {
                closed=true;
                delegate = null;
            }
            return result;
        }
    }
    public void reset(ConnectionPool parent, PooledConnection con) {
        if (queries==null && SlowQueryReport.perPoolStats.get(parent)==null) {
            queries = new LinkedHashMap<String,QueryStats>() {
                @Override
                protected boolean removeEldestEntry(Entry<String, QueryStats> eldest) {
                    return size()>maxQueries;
                }
            };
        }
    }
                                 Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/
   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
   1. Definitions.
      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.
      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.
      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.
      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.
      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.
      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.
      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).
      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.
      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."
      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.
   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.
   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.
   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:
      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and
      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and
      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and
      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.
      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.
   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.
   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.
   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.
   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.
   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.
   END OF TERMS AND CONDITIONS
   APPENDIX: How to apply the Apache License to your work.
      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.
   Copyright [yyyy] [name of copyright owner]
   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at
       http://www.apache.org/licenses/LICENSE-2.0
   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

======= 8d5db6f^:"java/javax/el/CompositeELResolver.java"

======= 8d5db6f^:"java/javax/el/CompositeELResolver.java"

        private Iterator itr;
======= 8d5db6f^:"java/javax/el/CompositeELResolver.java"

        public boolean hasNext() {
            return this.itr != null;
            Object result = null;
            if (this.itr != null) {
                if (this.itr.hasNext()) {
                    result = this.itr.next();
                    if (!this.itr.hasNext()) {
                        this.itr = null;
                        this.guaranteeIterator();
                    }
                }
            }
            return (FeatureDescriptor) result;

======= b5a5094^:"java/org/apache/jasper/compiler/Compiler.java"

            if (tfp != null) {

======= 23a8ba0^:"java/org/apache/catalina/connector/MapperListener.java"

======= 23a8ba0^:"java/org/apache/catalina/connector/MapperListener.java"

    implements NotificationListener 
======= 23a8ba0^:"java/org/apache/catalina/connector/MapperListener.java"

======= 23a8ba0^:"java/org/apache/catalina/connector/MapperListener.java"

        // This should probablt be called later 
======= 23a8ba0^:"java/org/apache/catalina/connector/MapperListener.java"

            String[] aliases = (String[])
                mBeanServer.invoke(objectName, "findAliases", null, null);
======= 23a8ba0^:"java/org/apache/catalina/connector/MapperListener.java"

        mapper.removeHost(name);
        if(log.isDebugEnabled())
            log.debug(sm.getString
                 ("mapperListener.unregisterHost", name, domain));
======= 23a8ba0^:"java/org/apache/tomcat/util/http/mapper/Mapper.java"

======= 23a8ba0^:"java/org/apache/tomcat/util/http/mapper/Mapper.java"

     * Find a map elemnt given its name in a sorted array of map elements.

======= 4d5cca1^:"java/org/apache/catalina/ssi/SSIServletExternalResolver.java"

    protected String getPathWithoutContext(String servletPath) {
        String retVal = null;
        int secondSlash = servletPath.indexOf('/', 1);
        if (secondSlash >= 0) {
            //cut off context
            retVal = servletPath.substring(secondSlash);
        return retVal;
======= 4d5cca1^:"java/org/apache/catalina/ssi/SSIServletExternalResolver.java"

                    String noContext = getPathWithoutContext(normalized);

======= e148369^:"java/org/apache/catalina/core/ApplicationFilterChain.java"

                        ("doFilter", filter, classType, args);
======= e148369^:"java/org/apache/catalina/security/SecurityUtil.java"

     * Perform work as a particular </code>Subject</code>. Here the work
======= e148369^:"java/org/apache/catalina/security/SecurityUtil.java"

======= e148369^:"java/org/apache/catalina/security/SecurityUtil.java"

        execute(method, targetObject, targetArguments, null);

======= 38ef38d^:"java/org/apache/jasper/compiler/ParserController.java"

            compiler.getPageInfo().addDependant(absFileName);

======= e0489c8^:"java/org/apache/catalina/core/StandardHostValve.java"

        Class clazz = exception.getClass();
======= e0489c8^:"java/org/apache/catalina/core/StandardHostValve.java"

            // Reset the response if possible (else IllegalStateException)
            //hres.reset();
            Integer statusCodeObj =
                (Integer) request.getAttribute(Globals.STATUS_CODE_ATTR);
            int statusCode = statusCodeObj.intValue();
            String message =
                (String) request.getAttribute(Globals.ERROR_MESSAGE_ATTR);
            response.reset(statusCode, message);

======= f4bef20^:"java/org/apache/catalina/connector/CoyoteWriter.java"

    private static final char[] LINE_SEP = { '\r', '\n' };

======= d9def07^:"java/org/apache/catalina/authenticator/FormAuthenticator.java"

        

======= 85e71cf^:"java/org/apache/tomcat/util/http/fileupload/DeferredFileOutputStream.java"

        memoryOutputStream = new ByteArrayOutputStream(threshold);

======= 6344b96^:"java/org/apache/catalina/session/StandardSession.java"

    protected long lastAccessedTime = creationTime;
======= 6344b96^:"java/org/apache/catalina/session/StandardSession.java"

    protected long thisAccessedTime = creationTime;

======= 428c03b^:"java/org/apache/catalina/core/DefaultInstanceManager.java"

======= 428c03b^:"java/org/apache/catalina/core/DefaultInstanceManager.java"

======= 428c03b^:"java/org/apache/catalina/core/DefaultInstanceManager.java"

    protected void postConstruct(Object instance, Class<?> clazz)
        Method[] methods = clazz.getDeclaredMethods();
======= 428c03b^:"java/org/apache/catalina/core/DefaultInstanceManager.java"

            Field[] fields = clazz.getDeclaredFields();
======= 428c03b^:"java/org/apache/catalina/core/DefaultInstanceManager.java"

            Method[] methods = clazz.getDeclaredMethods();

======= e40c910^:"java/org/apache/naming/resources/ResourceAttributes.java"

     * @return strong ETag if available, else weak ETag.
        String result = null;
        if (attributes != null) {
            Attribute attribute = attributes.get(ETAG);
            if (attribute != null) {
                try {
                    result = attribute.get().toString();
                } catch (NamingException e) {
                    ; // No value for the attribute
                }
            }
        }
        if (result == null) {
            if (strongETag != null) {
                // The strong ETag must always be calculated by the resources
                result = strongETag;
            } else {
                // The weakETag is contentLength + lastModified
                if (weakETag == null) {
                    long contentLength = getContentLength();
                    long lastModified = getLastModified();
                    if ((contentLength >= 0) || (lastModified >= 0)) {
                        weakETag = "W/\"" + contentLength + "-" 
                        + lastModified + "\"";
                result = weakETag;
        return result;

======= e277f6c^:"java/org/apache/catalina/connector/CoyoteAdapter.java"

        // XXX the processor needs to set a correct scheme and port prior to this point, 
        // in ajp13 protocols dont make sense to get the port from the connector..

======= e85ed8c^:"java/org/apache/catalina/Globals.java"

    public static final String SESSION_COOKIE_NAME = "JSESSIONID";
    public static final String SESSION_PARAMETER_NAME = "jsessionid";
======= e85ed8c^:"java/org/apache/catalina/authenticator/Constants.java"

    public static final String SINGLE_SIGN_ON_COOKIE = "JSESSIONIDSSO";
======= e85ed8c^:"java/org/apache/jasper/Constants.java"

    public static final String SESSION_PARAMETER_NAME = "jsessionid";

======= f69637f^:"java/org/apache/catalina/core/StandardContext.java"

                if(getProcessTlds()) {
                    processTlds();
                }
                
======= f69637f^:"java/org/apache/catalina/core/StandardContext.java"

     * Processes TLDs.
     *
     * @throws LifecycleException If an error occurs
     */
     protected void processTlds() throws LifecycleException {
       TldConfig tldConfig = new TldConfig();
       tldConfig.setContext(this);
       // (1)  check if the attribute has been defined
       //      on the context element.
       tldConfig.setTldValidation(tldValidation);
       tldConfig.setTldNamespaceAware(tldNamespaceAware);
       // (2) if the attribute wasn't defined on the context
       //     try the host.
       if (!tldValidation) {
         tldConfig.setTldValidation
           (((StandardHost) getParent()).getXmlValidation());
       }
       if (!tldNamespaceAware) {
         tldConfig.setTldNamespaceAware
           (((StandardHost) getParent()).getXmlNamespaceAware());
       }
                    
       try {
         tldConfig.execute();
       } catch (Exception ex) {
         log.error("Error reading tld listeners " 
                    + ex.toString(), ex); 
       }
     }
    
    /**
======= f69637f^:"java/org/apache/catalina/core/StandardContext.java"

======= f69637f^:"java/org/apache/catalina/startup/TldConfig.java"

 * Startup event listener for a <b>Context</b> that configures the properties
 * of that Context, and the associated defined servlets.
======= f69637f^:"java/org/apache/catalina/startup/TldConfig.java"

     * Create (if necessary) and return a Digester configured to process a tag
     * library descriptor, looking for additional listener classes to be
     * registered.
     */
    private static Digester createTldDigester() {
        return DigesterFactory.newDigester(tldValidation, 
                                           tldNamespaceAware, 
                                           new TldRuleSet());
    }
    /**
======= f69637f^:"java/org/apache/catalina/startup/TldConfig.java"

        if (tldDigester == null){
            tldDigester = createTldDigester();
        }
        
======= f69637f^:"java/org/apache/catalina/startup/TldConfig.java"


======= c340c69^:"java/org/apache/catalina/ha/deploy/FarmWarDeployer.java"

======= c340c69^:"java/org/apache/catalina/ha/deploy/FileMessageFactory.java"

======= c340c69^:"java/org/apache/catalina/ha/deploy/FileMessageFactory.java"

     * The number of messages we have read or written
======= c340c69^:"java/org/apache/catalina/ha/deploy/FileMessageFactory.java"

======= c340c69^:"java/org/apache/catalina/ha/deploy/FileMessageFactory.java"

======= c340c69^:"java/org/apache/catalina/ha/deploy/FileMessageFactory.java"

        if (out != null) {
            out.write(msg.getData(), 0, msg.getDataLength());
            nrOfMessagesProcessed++;
            if (msg.getMessageNumber() == msg.getTotalNrOfMsgs()) {
            }//end if
        } else {
            if (log.isWarnEnabled())
                log.warn("Receive Message again -- Sender ActTimeout to short [ path: "
                                + msg.getContextPath()
                                + " war: "
                                + msg.getFileName()
                                + " data: "
                                + msg.getData()
                                + " data length: " + msg.getDataLength() + " ]");
======= c340c69^:"java/org/apache/catalina/ha/deploy/FileMessageFactory.java"

======= c340c69^:"java/org/apache/catalina/ha/deploy/FileMessageFactory.java"


======= 03097fa^:"java/org/apache/jk/common/JkInputStream.java"


======= 633545f^:"java/org/apache/catalina/servlets/DefaultServlet.java"

    
======= 633545f^:"java/org/apache/catalina/servlets/DefaultServlet.java"

======= 633545f^:"java/org/apache/catalina/servlets/DefaultServlet.java"


======= 2c0fffe^:"java/org/apache/catalina/core/ApplicationDispatcher.java"

                     servletPath);
======= 2c0fffe^:"java/org/apache/catalina/core/ApplicationDispatcher.java"

    
======= 2c0fffe^:"java/org/apache/catalina/core/ApplicationDispatcher.java"

                    servletPath);
======= 2c0fffe^:"java/org/apache/catalina/core/ApplicationDispatcher.java"

                    servletPath);

======= 678b516^:"java/org/apache/catalina/valves/AccessLogValve.java"

            buf.append(request.getHeader(header));

======= d69b378^:"java/org/apache/catalina/tribes/transport/nio/ParallelNioSender.java"


 Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
        <classpathentry excluding="**/.svn/**|org/apache/naming/factory/webservices/" kind="src" path="java"/>
  <target name="extras" depends="prepare,commons-logging,webservices">

======= 3773ec4^:"java/org/apache/catalina/util/ManifestResource.java"

            return false;

======= ccc1014^:"java/org/apache/jasper/runtime/JspContextWrapper.java"


======= 6d40691^:"java/org/apache/el/parser/ELParser.java"

                        jjtn000.setPrefix(t0.image.substring(0, t0.image.length() - 1));

======= 337d6a6^:"java/org/apache/jasper/compiler/Compiler.java"

            // Reset the temporary variable counter for the generator.
            JspUtil.resetTemporaryVariableName();
======= 337d6a6^:"java/org/apache/jasper/compiler/JspUtil.java"

    private static int tempSequenceNumber = 0;
    
======= 337d6a6^:"java/org/apache/jasper/compiler/JspUtil.java"

    /**
     * Resets the temporary variable name.
     * (not thread-safe)
     */
    public static void resetTemporaryVariableName() {
        tempSequenceNumber = 0;
    }
    /**
     * Generates a new temporary variable name.
     * (not thread-safe)
     */
    public static String nextTemporaryVariableName() {
        return Constants.TEMP_VARIABLE_NAME_PREFIX + (tempSequenceNumber++);
    }
======= 337d6a6^:"java/org/apache/jasper/compiler/Node.java"

======= 337d6a6^:"java/org/apache/jasper/compiler/Node.java"

======= 337d6a6^:"java/org/apache/jasper/compiler/Node.java"

======= 337d6a6^:"java/org/apache/jasper/compiler/Node.java"

                temporaryVariableName = JspUtil.nextTemporaryVariableName();
======= 337d6a6^:"java/org/apache/jasper/compiler/TagPluginManager.java"

            return JspUtil.nextTemporaryVariableName();

======= 6a1f316^:"java/org/apache/coyote/http11/Http11AprProtocol.java"


======= 46055c5^:"java/org/apache/catalina/core/AprLifecycleListener.java"

                        log.debug(sm.getString("aprListener.sslInit"));

======= fea7658^:"java/org/apache/tomcat/util/net/AprEndpoint.java"

        serverSock = Socket.create(family, Socket.SOCK_STREAM,

======= b266836^:"java/org/apache/juli/ClassLoaderLogManager.java"

                    info = (ClassLoaderLogInfo) classLoaderLoggers.get(current);
                        handler = (Handler) info.handlers.get(handlerName);
======= b266836^:"java/org/apache/juli/ClassLoaderLogManager.java"

        return (Logger) getClassLoaderInfo(classLoader).loggers.get(name);
======= b266836^:"java/org/apache/juli/ClassLoaderLogManager.java"

        String prefix = (String) this.prefix.get();
======= b266836^:"java/org/apache/juli/ClassLoaderLogManager.java"

                info = (ClassLoaderLogInfo) classLoaderLoggers.get(current);
======= b266836^:"java/org/apache/juli/ClassLoaderLogManager.java"

        ClassLoaderLogInfo info = (ClassLoaderLogInfo) classLoaderLoggers
                .get(classLoader);
======= b266836^:"java/org/apache/juli/ClassLoaderLogManager.java"

            info = (ClassLoaderLogInfo) classLoaderLoggers.get(classLoader);
======= b266836^:"java/org/apache/juli/ClassLoaderLogManager.java"

        ClassLoaderLogInfo info = 
            (ClassLoaderLogInfo) classLoaderLoggers.get(classLoader);
======= b266836^:"java/org/apache/juli/ClassLoaderLogManager.java"

                LogNode childNode = (LogNode) currentNode.children
                        .get(nextName);

======= 816ecb8^:"java/org/apache/catalina/core/StandardWrapper.java"

======= 816ecb8^:"java/org/apache/catalina/core/StandardWrapper.java"

    protected int countAllocated = 0;
======= 816ecb8^:"java/org/apache/catalina/core/StandardWrapper.java"

        return (this.countAllocated);
======= 816ecb8^:"java/org/apache/catalina/core/StandardWrapper.java"

                                countAllocated++;
======= 816ecb8^:"java/org/apache/catalina/core/StandardWrapper.java"

                    countAllocated++;
======= 816ecb8^:"java/org/apache/catalina/core/StandardWrapper.java"

            while (countAllocated >= nInstances) {
======= 816ecb8^:"java/org/apache/catalina/core/StandardWrapper.java"

            countAllocated++;
======= 816ecb8^:"java/org/apache/catalina/core/StandardWrapper.java"

            countAllocated--;
            countAllocated--;
======= 816ecb8^:"java/org/apache/catalina/core/StandardWrapper.java"

        if (countAllocated > 0) {
            while ((nRetries < 21) && (countAllocated > 0)) {
                                          new Integer(countAllocated)));

======= 6d78232^:"java/org/apache/catalina/realm/JAASCallbackHandler.java"

     * @param realm     Our associated JAASRealm instance
     * @param username  Username to be authenticated with
     * @param password  Password to be authenticated with
     * @param nonce     Server generated nonce
     * @param nc        Nonce count
     * @param cnonce    Client generated nonce
     * @param qop       Quality of protection aplied to the message
     * @param realmName Realm name
     * @param md5a2     Second MD5 digest used to calculate the digest
                               String md5a2) {
======= 6d78232^:"java/org/apache/catalina/realm/JAASCallbackHandler.java"

======= 6d78232^:"java/org/apache/catalina/realm/JAASCallbackHandler.java"

======= 6d78232^:"java/org/apache/catalina/realm/JAASCallbackHandler.java"

======= 6d78232^:"java/org/apache/catalina/realm/JAASCallbackHandler.java"

======= 6d78232^:"java/org/apache/catalina/realm/JAASMemoryLoginModule.java"

======= 6d78232^:"java/org/apache/catalina/realm/JAASMemoryLoginModule.java"

        Callback callbacks[] = new Callback[8];
======= 6d78232^:"java/org/apache/catalina/realm/JAASMemoryLoginModule.java"

======= 6d78232^:"java/org/apache/catalina/realm/JAASMemoryLoginModule.java"

======= 6d78232^:"java/org/apache/catalina/realm/JAASMemoryLoginModule.java"

======= 6d78232^:"java/org/apache/catalina/realm/JAASMemoryLoginModule.java"

        if (md5a2 == null) {
            // Not using DIGEST
        } else {
            // Must be using DIGEST
======= 6d78232^:"java/org/apache/catalina/realm/JAASRealm.java"

======= 6d78232^:"java/org/apache/catalina/realm/JAASRealm.java"

                        nc, cnonce, qop, realmName, md5a2));
======= 6d78232^:"java/org/apache/catalina/realm/JAASRealm.java"

        return (null);

======= c984c6a^:"java/org/apache/catalina/realm/JAASCallbackHandler.java"

======= c984c6a^:"java/org/apache/catalina/realm/JAASCallbackHandler.java"

======= c984c6a^:"java/org/apache/catalina/realm/JAASCallbackHandler.java"

     * This implementation only recognizes <code>NameCallback</code> and
     * <code>PasswordCallback</code> instances.
======= c984c6a^:"java/org/apache/catalina/realm/JAASCallbackHandler.java"

======= c984c6a^:"java/org/apache/catalina/realm/JAASMemoryLoginModule.java"

======= c984c6a^:"java/org/apache/catalina/realm/JAASMemoryLoginModule.java"

        Callback callbacks[] = new Callback[2];
======= c984c6a^:"java/org/apache/catalina/realm/JAASMemoryLoginModule.java"

        principal = super.authenticate(username, password);
======= c984c6a^:"java/org/apache/catalina/realm/JAASRealm.java"

======= c984c6a^:"java/org/apache/catalina/realm/JAASRealm.java"

     * Return the <code>Principal</code> associated with the specified username and
     * credentials, if there is one; otherwise return <code>null</code>.
     *
     * If there are any errors with the JDBC connection, executing
     * the query or anything we return null (don't authenticate). This
     * event is also logged, and the connection will be closed so that
     * a subsequent request will automatically re-open it.
======= c984c6a^:"java/org/apache/catalina/realm/JAASRealm.java"

            loginContext = new LoginContext
                (appName, new JAASCallbackHandler(this, username,
                                                  credentials));
======= c984c6a^:"java/org/apache/catalina/realm/JAASRealm.java"

     
    // -------------------------------------------------------- Package Methods
    // ------------------------------------------------------ Protected Methods
======= c984c6a^:"java/org/apache/catalina/realm/JAASRealm.java"

     * Return the password associated with the given principal's user name.

======= 38a62a6^:"java/org/apache/jk/server/JkMain.java"

        for( int i=0; i<wEnv.getHandlerCount(); i++ ) {
            if( wEnv.getHandler(i) != null ) {
                wEnv.getHandler(i).pause();

======= 9d3cad7^:"java/org/apache/catalina/realm/JDBCRealm.java"

======= 9d3cad7^:"java/org/apache/catalina/realm/JDBCRealm.java"

    protected Principal getPrincipal(String username) {

======= 4cab5f3^:"java/org/apache/catalina/core/StandardContext.java"


======= 92f847d^:"java/org/apache/catalina/connector/CoyoteReader.java"

                    if (pos == 0) {

======= d41f610^:"java/org/apache/catalina/servlets/CGIServlet.java"

                // Close the output stream used
                cgiOutput.close();

======= 252fca1^:"java/org/apache/catalina/startup/HostConfig.java"

                if (!docBase.getCanonicalPath().startsWith(appBase().getAbsolutePath())) {

======= 36bb5d9^:"java/org/apache/catalina/ha/session/DeltaManager.java"

                if (log.isWarnEnabled()) log.warn(sm.getString("deltaManager.waitForSessionState",getName(), mbr));

======= f23907d^:"java/org/apache/coyote/ajp/AjpMessage.java"


======= a2a7714^:"java/org/apache/catalina/tribes/membership/McastServiceImpl.java"


======= e0200b0^:"java/org/apache/naming/resources/DirContextURLConnection.java"

======= e0200b0^:"java/org/apache/naming/resources/DirContextURLConnection.java"

======= e0200b0^:"java/org/apache/naming/resources/DirContextURLConnection.java"

                  attributeValueList.add(attributeValues.next().toString());
======= e0200b0^:"java/org/apache/naming/resources/DirContextURLConnection.java"

                    return attribute.get(attribute.size()-1).toString();

======= f93376d^:"java/org/apache/coyote/http11/InternalAprInputBuffer.java"

            if (buf[pos] == Constants.SP) {
======= f93376d^:"java/org/apache/coyote/http11/InternalAprInputBuffer.java"

======= f93376d^:"java/org/apache/coyote/http11/InternalAprInputBuffer.java"

        space = false;
======= f93376d^:"java/org/apache/coyote/http11/InternalAprInputBuffer.java"

            if (buf[pos] == Constants.SP) {
======= f93376d^:"java/org/apache/coyote/http11/InternalAprInputBuffer.java"

======= f93376d^:"java/org/apache/coyote/http11/InternalInputBuffer.java"

            if (buf[pos] == Constants.SP) {
======= f93376d^:"java/org/apache/coyote/http11/InternalInputBuffer.java"

======= f93376d^:"java/org/apache/coyote/http11/InternalInputBuffer.java"

        space = false;
======= f93376d^:"java/org/apache/coyote/http11/InternalInputBuffer.java"

            if (buf[pos] == Constants.SP) {
======= f93376d^:"java/org/apache/coyote/http11/InternalInputBuffer.java"

======= f93376d^:"java/org/apache/coyote/http11/InternalNioInputBuffer.java"

                if (buf[pos] == Constants.SP) {
======= f93376d^:"java/org/apache/coyote/http11/InternalNioInputBuffer.java"

            boolean space = false;
                if (buf[pos] == Constants.SP) {
======= f93376d^:"java/org/apache/coyote/http11/InternalNioInputBuffer.java"


======= 3c84dcf^:"java/org/apache/jasper/compiler/Validator.java"

        private String comparePageEncodings(String pageDirEnc,
            String configEnc = root.getJspConfigPageEncoding();
======= 3c84dcf^:"java/org/apache/jasper/compiler/Validator.java"

                String pageEnc = root.getPageEncoding();

======= a9cb6a6^:"java/org/apache/catalina/core/StandardContext.java"

                // Start manager
                if ((manager != null) && (manager instanceof Lifecycle)) {
                    ((Lifecycle) getManager()).start();
                }
                // Start ContainerBackgroundProcessor thread
                super.threadStart();
======= a9cb6a6^:"java/org/apache/catalina/core/StandardContext.java"

            // Configure and call application event listeners and filters

======= 17b4436^:"java/org/apache/jasper/compiler/JspDocumentParser.java"

        if (JSP_URI.equals(uri) && TEXT_ACTION.equals(current.getLocalName())) {
======= 17b4436^:"java/org/apache/jasper/compiler/JspDocumentParser.java"

        String prefix = "";
        int colon = qName.indexOf(':');
        if (colon != -1) {
            prefix = qName.substring(0, colon);
        }
======= 17b4436^:"java/org/apache/jasper/compiler/JspDocumentParser.java"

        int index = qName.indexOf(':');
        if (index != -1) {
            String prefix = qName.substring(0, index);
======= 17b4436^:"java/org/apache/jasper/compiler/JspDocumentParser.java"


======= 332d0f0^:"java/org/apache/catalina/core/StandardContext.java"

            if (urlPattern.indexOf('/') < 0)
            else
                (urlPattern.indexOf("*.") < 0))
        else
======= 332d0f0^:"java/org/apache/catalina/deploy/SecurityCollection.java"

======= 332d0f0^:"java/org/apache/catalina/deploy/SecurityCollection.java"

    private static Log log = LogFactory.getLog(SecurityCollection.class);
======= 332d0f0^:"java/org/apache/catalina/deploy/SecurityCollection.java"

        // Bugzilla 34805: add friendly warning.
        if(pattern.endsWith("*")) {
          if (pattern.charAt(pattern.length()-1) != '/') {
            if (log.isDebugEnabled()) {
              log.warn("Suspicious url pattern: \"" + pattern + "\"" +
                       " - see http://java.sun.com/aboutJava/communityprocess/first/jsr053/servlet23_PFD.pdf" +
                       "  section 11.2" );
            }
          }
        }

======= e2524a8^:"java/org/apache/coyote/http11/Http11AprProcessor.java"

======= e2524a8^:"java/org/apache/coyote/http11/Http11NioProcessor.java"

======= e2524a8^:"java/org/apache/coyote/http11/Http11Processor.java"


======= fa91954^:"java/org/apache/catalina/startup/ClassLoaderFactory.java"

                URL url = file.toURL();
======= fa91954^:"java/org/apache/catalina/startup/ClassLoaderFactory.java"

                    URL url = file.toURL();
======= fa91954^:"java/org/apache/catalina/startup/ClassLoaderFactory.java"

                    URL url = directory.toURL();
======= fa91954^:"java/org/apache/catalina/startup/ClassLoaderFactory.java"

                    URL url = file.toURL();
======= fa91954^:"java/org/apache/catalina/startup/ClassLoaderFactory.java"

                        URL url = file.toURL();
======= fa91954^:"java/org/apache/jasper/JspCompilationContext.java"

            path = tagName.replace('.', '/');
            path = getServletPackageName().replace('.', '/');
                baseUrl = options.getScratchDir().toURL();
                String outUrlString = baseUrl.toString() + '/' + path;
                URL outUrl = new URL(outUrlString);
                outputDir = outUrl.getFile() + File.separator;

======= 6a8b1bb^:"java/org/apache/catalina/startup/HostConfig.java"

            if (files[i].toLowerCase().endsWith(".war")) {

======= f4a7632^:"java/org/apache/catalina/manager/ManagerServlet.java"

======= f4a7632^:"java/org/apache/catalina/manager/ManagerServlet.java"


======= dfa25f4^:"java/org/apache/jasper/compiler/Generator.java"


======= 48131cd^:"java/javax/annotation/security/DenyAll.java"

======= 48131cd^:"java/javax/ejb/EJB.java"

======= 48131cd^:"java/javax/persistence/PersistenceContext.java"

======= 48131cd^:"java/javax/persistence/PersistenceContext.java"


======= 0ea3e15^:"java/org/apache/jasper/compiler/AntCompiler.java"

                endorsedArg.setLine("-J-Djava.endorsed.dirs="+endorsed);
                info.append("    endorsed dir=" + endorsed + "\n");
======= 0ea3e15^:"java/org/apache/jasper/compiler/AntCompiler.java"

    

======= 06c23d8^:"java/org/apache/catalina/startup/ContextConfig.java"

        if (webDigester == null){
            webDigester = createWebDigester();
        }
        
======= 06c23d8^:"java/org/apache/catalina/startup/ContextConfig.java"

        if (webDigester == null){
            webDigester = createWebDigester();
        }
        
======= 06c23d8^:"java/org/apache/catalina/startup/ContextConfig.java"

        if (contextDigester == null){
            contextDigester = createContextDigester();
        }
======= 06c23d8^:"java/org/apache/catalina/startup/ContextConfig.java"


======= 2edf51e^:"java/org/apache/catalina/startup/TldConfig.java"

                    // Expect file URLs, these are %xx encoded or not depending on
                    // the class loader

======= 6723b35^:"java/org/apache/catalina/core/ApplicationContext.java"

    private final class DispatchData {

======= df75937^:"java/org/apache/catalina/ssi/SSIProcessor.java"

                        bIdx++;
                    if (c == '"') quotes++;

======= 75fbd91^:"java/org/apache/catalina/ssi/SSIEcho.java"

    	long lastModified = 0;
                String variableValue = ssiMediator.getVariableValue(
                        paramValue, encoding);
                if (variableValue == null) {
                    variableValue = MISSING_VARIABLE_VALUE;
                }
                writer.write(variableValue);
                lastModified = System.currentTimeMillis();
======= 75fbd91^:"java/org/apache/catalina/ssi/SSIEcho.java"

        return lastModified;
======= 75fbd91^:"java/org/apache/catalina/ssi/SSIMediator.java"

======= 75fbd91^:"java/org/apache/catalina/ssi/SSIMediator.java"

        // If it has no variable references then no work
        if (val.indexOf('$') < 0) return val;
======= 75fbd91^:"java/org/apache/catalina/ssi/SSIMediator.java"

            //Not sure how this is really different than none
            retVal = value;

======= 1f41c3d^:"java/org/apache/jasper/runtime/PageContextImpl.java"

======= 1f41c3d^:"java/org/apache/jasper/runtime/PageContextImpl.java"

        final ExpressionFactory exprFactory = JspFactory.getDefaultFactory().getJspApplicationContext(pageContext.getServletContext()).getExpressionFactory();

======= 0035fd4^:"java/org/apache/el/lang/FunctionMapperImpl.java"


======= c3c525b^:"java/org/apache/catalina/core/StandardThreadExecutor.java"

======= c3c525b^:"java/org/apache/catalina/core/StandardThreadExecutor.java"


======= 7be2374^:"java/org/apache/catalina/realm/RealmBase.java"

                    return (true);
                status = false;
            } else if(!denyfromall) {
======= 7be2374^:"java/org/apache/catalina/realm/RealmBase.java"

        if (allRolesMode != AllRolesMode.STRICT_MODE && !status && principal != null) {

======= ca41a27^:"java/org/apache/catalina/connector/InputBuffer.java"

======= ca41a27^:"java/org/apache/catalina/connector/InputBuffer.java"

======= ca41a27^:"java/org/apache/catalina/connector/InputBuffer.java"

======= ca41a27^:"java/org/apache/catalina/connector/InputBuffer.java"

======= ca41a27^:"java/org/apache/catalina/connector/InputBuffer.java"

======= ca41a27^:"java/org/apache/catalina/connector/InputBuffer.java"

======= ca41a27^:"java/org/apache/catalina/connector/InputBuffer.java"

======= ca41a27^:"java/org/apache/catalina/connector/InputBuffer.java"

======= ca41a27^:"java/org/apache/catalina/connector/InputBuffer.java"


======= fdac1d6^:"java/org/apache/catalina/valves/CometConnectionManagerValve.java"

======= fdac1d6^:"java/org/apache/catalina/valves/CometConnectionManagerValve.java"

======= fdac1d6^:"java/org/apache/catalina/valves/CometConnectionManagerValve.java"

     * Connection list.
    protected ConcurrentHashMap<String, ConnectionInfo[]> connections
        = new ConcurrentHashMap<String, ConnectionInfo[]>();
======= fdac1d6^:"java/org/apache/catalina/valves/CometConnectionManagerValve.java"

        // The webapp is getting stopped, so all current connections 
        // should be closed
        // Close all Comet connections associated with this session
        // Note: this will only be done if the container was not a Context
        // (otherwise, this needs to be done before stop, as the servlet would
        // be deallocated already)
        Iterator<ConnectionInfo[]> iterator = connections.values().iterator();
        while (iterator.hasNext()) {
            ConnectionInfo[] connectionInfos = iterator.next();
            if (connectionInfos != null) {
                for (int i = 0; i < connectionInfos.length; i++) {
                    ConnectionInfo connectionInfo = connectionInfos[i];
                    try {
                        connectionInfo.event.close();
                    } catch (Exception e) {
                        container.getLogger().warn(sm.getString("cometConnectionManagerValve.event"), e);
                    }
                }
            }
        }
        connections.clear();
            // The webapp is getting stopped, so all current connections 
            // should be closed
            // Close all Comet connections associated with this session
            Iterator<ConnectionInfo[]> iterator = connections.values().iterator();
                ConnectionInfo[] connectionInfos = iterator.next();
                if (connectionInfos != null) {
                    for (int i = 0; i < connectionInfos.length; i++) {
                        ConnectionInfo connectionInfo = connectionInfos[i];
                        try {
                            ((CometEventImpl) connectionInfo.event).setEventType(CometEvent.EventType.END);
                            ((CometEventImpl) connectionInfo.event).setEventSubType(CometEvent.EventSubType.WEBAPP_RELOAD);
                            getNext().event(connectionInfo.request, connectionInfo.response, connectionInfo.event);
                            connectionInfo.event.close();
                        } catch (Exception e) {
                            container.getLogger().warn(sm.getString("cometConnectionManagerValve.event"), e);
                        }
                    }
            connections.clear();
======= fdac1d6^:"java/org/apache/catalina/valves/CometConnectionManagerValve.java"

            ConnectionInfo newConnectionInfo = new ConnectionInfo();
            newConnectionInfo.request = request;
            newConnectionInfo.response = response;
            newConnectionInfo.event = request.getEvent();
                String id = session.getId();
                ConnectionInfo[] connectionInfos = connections.get(id);
                if (connectionInfos == null) {
                    connectionInfos = new ConnectionInfo[1];
                    connectionInfos[0] = newConnectionInfo;
                    connections.put(id, connectionInfos);
                    ConnectionInfo[] newConnectionInfos = 
                        new ConnectionInfo[connectionInfos.length + 1];
                    for (int i = 0; i < connectionInfos.length; i++) {
                        newConnectionInfos[i] = connectionInfos[i];
                    newConnectionInfos[connectionInfos.length] = newConnectionInfo;
                    connections.put(id, newConnectionInfos);
======= fdac1d6^:"java/org/apache/catalina/valves/CometConnectionManagerValve.java"

                            && !(event.getEventSubType() == CometEvent.EventSubType.TIMEOUT))) {
                // Remove from tracked list, the connection is done
                HttpSession session = request.getSession(true);
                synchronized (session) {
                    ConnectionInfo[] connectionInfos = connections.get(session.getId());
                    if (connectionInfos != null) {
                        boolean found = false;
                        for (int i = 0; !found && (i < connectionInfos.length); i++) {
                            found = (connectionInfos[i].request == request);
                        }
                        if (found) {
                            ConnectionInfo[] newConnectionInfos = 
                                new ConnectionInfo[connectionInfos.length - 1];
                            int pos = 0;
                            for (int i = 0; i < connectionInfos.length; i++) {
                                if (connectionInfos[i].request != request) {
                                    newConnectionInfos[pos++] = connectionInfos[i];
                            connections.put(session.getId(), newConnectionInfos);
                }                
        
======= fdac1d6^:"java/org/apache/catalina/valves/CometConnectionManagerValve.java"

        ConnectionInfo[] connectionInfos = connections.remove(se.getSession().getId());
        if (connectionInfos != null) {
            for (int i = 0; i < connectionInfos.length; i++) {
                ConnectionInfo connectionInfo = connectionInfos[i];
                    ((CometEventImpl) connectionInfo.event).setEventType(CometEvent.EventType.END);
                    ((CometEventImpl) connectionInfo.event).setEventSubType(CometEvent.EventSubType.SESSION_END);
                    getNext().event(connectionInfo.request, connectionInfo.response, connectionInfo.event);
                    connectionInfo.event.close();
                    container.getLogger().warn(sm.getString("cometConnectionManagerValve.event"), e);
    // --------------------------------------------- ConnectionInfo Inner Class
    
    protected class ConnectionInfo {
        public CometEvent event;
        public Request request;
        public Response response;
    }

======= 7bd915c^:"java/org/apache/tomcat/util/net/JIoEndpoint.java"

                throw new BindException(be.getMessage() + ":" + port);

======= 288b2ae^:"java/javax/servlet/http/HttpServlet.java"

======= 288b2ae^:"java/javax/servlet/http/HttpServlet.java"

 * A response that includes no body, for use in (dumb) "HEAD" support.
 * the content length appropriately.  All other methods delegate directly
 * to the HTTP Servlet Response object used to construct this one.
    private HttpServletResponse                resp;
        resp = r;
          resp.setContentLength(noBody.getContentLength());
        resp.setContentLength(len);
    public void setCharacterEncoding(String charset)
      { resp.setCharacterEncoding(charset); }
    public void setContentType(String type)
      { resp.setContentType(type); }
    public String getContentType()
      { return resp.getContentType(); }
    public ServletOutputStream getOutputStream() throws IOException
      { return noBody; }
    public String getCharacterEncoding()
        { return resp.getCharacterEncoding(); }
    public PrintWriter getWriter() throws UnsupportedEncodingException
    {
            OutputStreamWriter        w;
    public void setBufferSize(int size) throws IllegalStateException
      { resp.setBufferSize(size); }
    public int getBufferSize()
      { return resp.getBufferSize(); }
    public void reset() throws IllegalStateException
      { resp.reset(); }
      
      public void resetBuffer() throws IllegalStateException
      { resp.resetBuffer(); }
    public boolean isCommitted()
      { return resp.isCommitted(); }
    public void flushBuffer() throws IOException
      { resp.flushBuffer(); }
    public void setLocale(Locale loc)
      { resp.setLocale(loc); }
    public Locale getLocale()
      { return resp.getLocale(); }
    // HTTP SERVLET RESPONSE interface methods
    public void addCookie(Cookie cookie)
      { resp.addCookie(cookie); }
    public boolean containsHeader(String name)
      { return resp.containsHeader(name); }
    /** @deprecated */
    public void setStatus(int sc, String sm)
      { resp.setStatus(sc, sm); }
    public void setStatus(int sc)
      { resp.setStatus(sc); }
    public void setHeader(String name, String value)
      { resp.setHeader(name, value); }
    public void setIntHeader(String name, int value)
      { resp.setIntHeader(name, value); }
    public void setDateHeader(String name, long date)
      { resp.setDateHeader(name, date); }
    public void sendError(int sc, String msg) throws IOException
      { resp.sendError(sc, msg); }
    public void sendError(int sc) throws IOException
      { resp.sendError(sc); }
    public void sendRedirect(String location) throws IOException
      { resp.sendRedirect(location); }
    
    public String encodeURL(String url) 
      { return resp.encodeURL(url); }
    public String encodeRedirectURL(String url)
      { return resp.encodeRedirectURL(url); }
      
    public void addHeader(String name, String value)
      { resp.addHeader(name, value); }
      
    public void addDateHeader(String name, long value)
      { resp.addDateHeader(name, value); }
      
    public void addIntHeader(String name, int value)
      { resp.addIntHeader(name, value); }
      
    /**
     * @deprecated        As of Version 2.1, replaced by
     *                         {@link HttpServletResponse#encodeURL}.
     *
     */
    public String encodeUrl(String url) 
      { return this.encodeURL(url); }
      
    /**
     * @deprecated        As of Version 2.1, replaced by
     *                        {@link HttpServletResponse#encodeRedirectURL}.
     *
     */
    public String encodeRedirectUrl(String url)
      { return this.encodeRedirectURL(url); }

======= 8a3b14b^:"java/org/apache/catalina/servlets/DefaultServlet.java"

                throw new ServletException("Error opening readme resource", e);
======= 8a3b14b^:"java/org/apache/catalina/servlets/DefaultServlet.java"

                throw new ServletException("Error opening XSLT resource", e);

======= bf6ce6f^:"java/org/apache/tomcat/util/net/NioEndpoint.java"

======= bf6ce6f^:"java/org/apache/tomcat/util/net/NioEndpoint.java"

            // Start poller thread
            poller = new Poller();
            Thread pollerThread = new Thread(poller, getName() + "-ClientPoller");
            pollerThread.setPriority(threadPriority);
            pollerThread.setDaemon(true);
            pollerThread.start();

======= 948598d^:"java/org/apache/catalina/loader/WebappClassLoader.java"

======= 948598d^:"java/org/apache/catalina/loader/WebappClassLoader.java"

======= 948598d^:"java/org/apache/catalina/loader/WebappClassLoader.java"

        if ((log.isTraceEnabled()) && (clazz != null))
            log.debug("      Loaded by " + clazz.getClassLoader());

======= cdff09f^:"java/org/apache/catalina/core/StandardContext.java"

                if (listener.equals(applicationListeners[i]))

======= f9e41b8^:"java/org/apache/tomcat/util/net/jsse/JSSESocketFactory.java"


======= e14afee^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

======= e14afee^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

                args[11] = new Integer(context.getManager().getMaxInactiveInterval()/60);

======= 1cc6641^:"java/org/apache/coyote/http11/filters/ChunkedInputFilter.java"

            needCRLFParse = true;
======= 1cc6641^:"java/org/apache/coyote/http11/filters/ChunkedInputFilter.java"

======= 1cc6641^:"java/org/apache/coyote/http11/filters/ChunkedInputFilter.java"


======= 98b8ba2^:"java/org/apache/jasper/compiler/Parser.java"


======= 61ce1a3^:"java/org/apache/jasper/compiler/Node.java"

            if ((ret == null) && (body != null)) {
                StringBuffer buf = new StringBuffer();
                for (int i = 0; i < body.size(); i++) {
                    buf.append(body.getNode(i).getText());
                ret = buf.toString();

======= ccadbbc^:"java/org/apache/tomcat/util/modeler/ManagedBean.java"

                object = this;
======= ccadbbc^:"java/org/apache/tomcat/util/modeler/ManagedBean.java"

                object = this;

======= c5bcc98^:"java/org/apache/el/parser/AstValue.java"

======= c5bcc98^:"java/org/apache/el/parser/AstValue.java"

        ctx.getELResolver().setValue(ctx, t.base, t.property, value);

======= 2441155^:"java/org/apache/naming/resources/FileDirContext.java"

======= 2441155^:"java/org/apache/naming/resources/FileDirContext.java"

            creation = file.lastModified();
======= 2441155^:"java/org/apache/naming/resources/FileDirContext.java"

                creation = file.lastModified();
======= 2441155^:"java/org/apache/naming/resources/FileDirContext.java"

                lastModified = file.lastModified();

======= e452200^:"java/org/apache/catalina/connector/CoyoteAdapter.java"

======= e452200^:"java/org/apache/catalina/connector/CoyoteAdapter.java"

======= e452200^:"java/org/apache/catalina/connector/CoyoteAdapter.java"

            String redirectPath = redirectPathMB.toString();

======= fdb170e^:"java/org/apache/el/lang/EvaluationContext.java"

======= fdb170e^:"java/org/apache/el/lang/EvaluationContext.java"


======= c228054^:"java/org/apache/el/lang/ELArithmetic.java"

        throw new IllegalArgumentException(MessageFactory.get("el.convert", obj,
                objType));

======= df2b1e6^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

        "  &nbsp;<input type=\"submit\" value=\"{9}\">&nbsp;{10}&nbsp;<input type=\"text\" name=\"expire\" size=\"5\" value=\"{11}\">&nbsp;{12}&nbsp;\n" +
======= df2b1e6^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

        "  &nbsp;<input type=\"submit\" value=\"{9}\">&nbsp;{10}&nbsp;<input type=\"text\" name=\"expire\" size=\"5\" value=\"{11}\">&nbsp;{12}&nbsp;\n" +

======= 46721e4^:"java/org/apache/catalina/realm/JAASRealm.java"

      * Sets the list of comma-delimited classes that represent 
      * roles. The classes in the list must implement <code>java.security.Principal</code>.
      * When this accessor is called (for example, by a <code>Digester</code>
      * instance parsing the
      * configuration file), it will parse the class names and store the resulting
      * string(s) into the <code>ArrayList</code> field </code>roleClasses</code>.
         parseClassNames(roleClassNames, roleClasses);
      * in the provided List. Each class must implement <codejava.security.Principal</code>.
======= 46721e4^:"java/org/apache/catalina/realm/JAASRealm.java"

         
                 Class principalClass = Class.forName(classNames[i]);
======= 46721e4^:"java/org/apache/catalina/realm/JAASRealm.java"

     * Sets the list of comma-delimited classes that represent individual
     * users. The classes in the list must implement <code>java.security.Principal</code>.
     * When this accessor is called (for example, by a <code>Digester</code>
     * instance parsing the
     * configuration file), it will parse the class names and store the resulting
     * string(s) into the <code>ArrayList</code> field </code>userClasses</code>.
     */
        parseClassNames(userClassNames, userClasses);
======= 46721e4^:"java/org/apache/catalina/realm/JAASRealm.java"

        if (isUseContextClassLoader()) {
          ocl=Thread.currentThread().getContextClassLoader();
          Thread.currentThread().setContextClassLoader(this.getClass().getClassLoader());
======= 46721e4^:"java/org/apache/catalina/realm/JAASRealm.java"

            if( isUseContextClassLoader()) {
======= 46721e4^:"java/org/apache/catalina/realm/JAASRealm.java"

        Iterator principals = subject.getPrincipals().iterator();
            Principal principal = (Principal) principals.next();
======= 46721e4^:"java/org/apache/catalina/realm/JAASRealm.java"


======= 71bd193^:"java/org/apache/catalina/connector/Response.java"


======= 8f91433^:"java/org/apache/catalina/core/ApplicationContext.java"

        if (path == null)
======= 8f91433^:"java/org/apache/catalina/core/ApplicationContext.java"

        // Normalize the slashes and add leading slash if necessary

======= ffbbe88^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"


======= d1d0619^:"java/org/apache/coyote/http11/Http11AprProtocol.java"

            processor.setCompression(proto.compression);
======= d1d0619^:"java/org/apache/coyote/http11/Http11NioProtocol.java"

            processor.setCompression(proto.compression);
======= d1d0619^:"java/org/apache/coyote/http11/Http11Protocol.java"

            processor.setCompression(proto.compression);

======= eb87635^:"java/org/apache/jasper/compiler/ErrorDispatcher.java"

            javacError = new JavacErrorDetail(
                    fname,
                    lineNum,
                    errNode.getStart().getFile(),
                    errNode.getStart().getLineNumber(),
                    errMsgBuf,
                    ctxt);

======= 324387d^:"java/org/apache/catalina/servlets/WebdavServlet.java"


======= 9314e5b^:"java/org/apache/catalina/core/StandardWrapper.java"

            log.info("Error registering servlet with jmx " + this);
======= 9314e5b^:"java/org/apache/catalina/core/StandardWrapper.java"

                         instance);

======= 3c61f9b^:"java/org/apache/catalina/servlets/WebdavServlet.java"

 * are handled by the DefaultServlet.
======= 3c61f9b^:"java/org/apache/catalina/servlets/WebdavServlet.java"


  http://issues.apache.org/bugzilla/attachment.cgi?id=20883
  +1: remm, pero, funkman
  -1: 
  http://issues.apache.org/bugzilla/attachment.cgi?id=20930
  +1: remm, pero, funkman
  -1: 
  -1: 
  +1: jfclere
======= 16464d6^:"java/org/apache/tomcat/util/net/AprEndpoint.java"

            sendfileData.remove(data);
======= 16464d6^:"java/org/apache/tomcat/util/net/AprEndpoint.java"

======= 16464d6^:"java/org/apache/tomcat/util/net/AprEndpoint.java"

======= 16464d6^:"java/org/apache/tomcat/util/net/AprEndpoint.java"

======= 16464d6^:"java/org/apache/tomcat/util/net/AprEndpoint.java"

                    /* TODO: See if we need to call the maintain for sendfile poller */

======= 73b5e41^:"java/org/apache/catalina/core/StandardContext.java"

        return ((String) statusPages.get(new Integer(status)));
        Patch by Tuomas Kiviaho- tuomas.kiviahos at ikis fi

======= 5aed2f5^:"java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java"


======= 28da141^:"java/org/apache/coyote/http11/Http11NioProtocol.java"

    public boolean getClientAuth() { return ep.getClientAuth();}
    public void setClientAuth(boolean b ) { ep.setClientAuth(b);}
    
    
======= 28da141^:"java/org/apache/tomcat/util/net/NioEndpoint.java"

    public void setKeystoreFile(String s ) { this.keystoreFile = s; }
    public void setKeystore(String s ) { setKeystoreFile(s);}
    public String getKeystore() { return getKeystoreFile();}
    protected boolean clientAuth = false;
    public boolean getClientAuth() { return clientAuth;}
    public void setClientAuth(boolean b ) { this.clientAuth = b;}
======= 28da141^:"java/org/apache/tomcat/util/net/NioEndpoint.java"

            KeyStore ts = KeyStore.getInstance(getKeystoreType());
            ts.load(new FileInputStream(getKeystoreFile()), passphrase);
======= 28da141^:"java/org/apache/tomcat/util/net/NioEndpoint.java"

        engine.setNeedClientAuth(getClientAuth());

======= 4dd22a5^:"java/org/apache/catalina/core/ApplicationDispatcher.java"

            wrequest.recycle();
            unwrapRequest(state);
======= 4dd22a5^:"java/org/apache/catalina/core/ApplicationDispatcher.java"

            wrequest.recycle();
            unwrapRequest(state);
======= 4dd22a5^:"java/org/apache/catalina/core/ApplicationDispatcher.java"

            wrequest.recycle();
======= 4dd22a5^:"java/org/apache/catalina/core/ApplicationDispatcher.java"

            wrequest.recycle();
======= 4dd22a5^:"java/org/apache/catalina/core/ApplicationDispatcher.java"

======= 4dd22a5^:"java/org/apache/catalina/core/ApplicationDispatcher.java"


======= 9c37a01^:"java/org/apache/catalina/session/StandardManager.java"

                    session.endAccess();

======= 44e36ea^:"java/org/apache/catalina/util/RequestUtil.java"

     * servers.
======= 44e36ea^:"java/org/apache/catalina/util/RequestUtil.java"

     * Decode and return the specified URL-encoded String.
======= 44e36ea^:"java/org/apache/catalina/util/RequestUtil.java"

======= 44e36ea^:"java/org/apache/catalina/util/RequestUtil.java"

        return URLDecode(bytes, enc);
     * Decode and return the specified URL-encoded byte array.
======= 44e36ea^:"java/org/apache/catalina/util/RequestUtil.java"

     * Decode and return the specified URL-encoded byte array.
======= 44e36ea^:"java/org/apache/catalina/util/RequestUtil.java"

======= 44e36ea^:"java/org/apache/catalina/util/RequestUtil.java"

            if (b == '+') {

======= 8aa247e^:"webapps/examples/WEB-INF/classes/sessions/DummyCart.java"

======= 8aa247e^:"webapps/examples/WEB-INF/classes/sessions/DummyCart.java"

    public void processRequest(HttpServletRequest request) {
        if (submit == null) 
            addItem(item);
        if (submit.equals("add"))

======= a6ea14d^:"java/org/apache/catalina/core/ApplicationFilterFactory.java"

======= a6ea14d^:"java/org/apache/catalina/core/ApplicationFilterFactory.java"

            comet = req.isComet();

======= ba25bfb^:"java/org/apache/catalina/startup/WebRuleSet.java"

======= ba25bfb^:"java/org/apache/catalina/startup/WebRuleSet.java"

        digester.addCallMethod(prefix + "web-app/servlet/security-role-ref",
                               "addSecurityReference", 2);
        digester.addCallParam(prefix + "web-app/servlet/security-role-ref/role-link", 1);
        digester.addCallParam(prefix + "web-app/servlet/security-role-ref/role-name", 0);
======= ba25bfb^:"java/org/apache/catalina/startup/WebRuleSet.java"

        Context context = (Context) digester.peek(digester.getCount() - 1);
======= ba25bfb^:"java/org/apache/catalina/startup/WebRuleSet.java"

        override an env-entry in web.xml.

======= 6c6ad83^:"java/org/apache/jasper/compiler/JavacErrorDetail.java"

                String[] jspLines = readFile
                    (ctxt.getResourceAsStream(jspFileName));
                String[] javaLines = readFile
                    (new FileInputStream(ctxt.getServletJavaFileName()));
======= 6c6ad83^:"java/org/apache/jasper/compiler/JavacErrorDetail.java"


======= 53add24^:"java/org/apache/catalina/deploy/NamingResources.java"

======= 53add24^:"java/org/apache/catalina/deploy/NamingResources.java"

            if (findEnvironment(environment.getName()).getOverride()) {
                removeEnvironment(environment.getName());

======= 5b65cf4^:"java/org/apache/jasper/compiler/ELFunctionMapper.java"

    static private int currFunc = 0;
    private ErrorDispatcher err;
======= 5b65cf4^:"java/org/apache/jasper/compiler/ELFunctionMapper.java"

======= 5b65cf4^:"java/org/apache/jasper/compiler/ELFunctionMapper.java"

======= 5b65cf4^:"java/org/apache/jasper/compiler/ELFunctionMapper.java"


======= 0114b2d^:"java/org/apache/catalina/servlets/DefaultServlet.java"

        ArrayList result = new ArrayList();
======= 0114b2d^:"java/org/apache/catalina/servlets/DefaultServlet.java"

======= 0114b2d^:"java/org/apache/catalina/servlets/DefaultServlet.java"

         <bug>42449</bug>:
         JNDIRealm does not catch NullPointerException for Sun's
         LDAP provider (See bug for details) (funkman)
      </fix>
      <fix>
         <bug>42444</bug>: prevent NPE for AccessLogValve
         Patch provided by Nils Hammar (funkman)
         <bug>39875</bug>: Fix BPE in RealmBase.init(). Port of yoavs's fix from
         Tomcat 5. (markt)

======= 71eccb3^:"java/org/apache/catalina/valves/ErrorReportValve.java"

        if (response.isAppCommitted()) {

======= 0ea4c7c^:"java/org/apache/catalina/realm/RealmBase.java"

        ArrayList results = null;
======= 0ea4c7c^:"java/org/apache/catalina/realm/RealmBase.java"

                                results = new ArrayList();
======= 0ea4c7c^:"java/org/apache/catalina/realm/RealmBase.java"

                            results = new ArrayList();
======= 0ea4c7c^:"java/org/apache/catalina/realm/RealmBase.java"

                        results = new ArrayList();
======= 0ea4c7c^:"java/org/apache/catalina/realm/RealmBase.java"

                        results = new ArrayList();
======= 0ea4c7c^:"java/org/apache/catalina/realm/RealmBase.java"

    private SecurityConstraint [] resultsToArray(ArrayList results) {
======= 0ea4c7c^:"java/org/apache/catalina/realm/RealmBase.java"

        this.containerLog = container.getLogger();

======= 5e188bc^:"java/org/apache/jasper/compiler/Node.java"

            temporaryVariableName = JspUtil.nextTemporaryVariableName();
======= 5e188bc^:"java/org/apache/jasper/compiler/Node.java"


======= 33c9949^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

        "</tr>\n";
======= 33c9949^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

        "</tr>\n";
======= 33c9949^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

        "</tr>\n";

======= 776736f^:"java/org/apache/catalina/valves/AccessLogValve.java"

                buf.append(request.getProtocol());

======= 637acc5^:"java/org/apache/catalina/authenticator/FormAuthenticator.java"

                contentType.setString("application/x-www-form-urlencoded");
======= 637acc5^:"java/org/apache/catalina/authenticator/FormAuthenticator.java"

======= 637acc5^:"java/org/apache/catalina/authenticator/SavedRequest.java"


======= 9546005^:"java/org/apache/catalina/startup/Embedded.java"


======= 4a04722^:"java/org/apache/coyote/http11/Http11AprProcessor.java"

======= 4a04722^:"java/org/apache/coyote/http11/Http11AprProcessor.java"

        // Next request
        inputBuffer.nextRequest();
        outputBuffer.nextRequest();
        
======= 4a04722^:"java/org/apache/coyote/http11/Http11AprProtocol.java"

======= 4a04722^:"java/org/apache/coyote/http11/Http11NioProcessor.java"

======= 4a04722^:"java/org/apache/coyote/http11/Http11NioProcessor.java"

        // Next request
        inputBuffer.nextRequest();
        outputBuffer.nextRequest();
======= 4a04722^:"java/org/apache/coyote/http11/InternalNioInputBuffer.java"

        //System.out.println("LV-pos: " + (lastValid - pos));

======= f9ddaba^:"java/org/apache/catalina/startup/TldConfig.java"

======= f9ddaba^:"java/org/apache/catalina/startup/TldConfig.java"

        File file = new File(url.getFile());
        file = file.getCanonicalFile();
======= f9ddaba^:"java/org/apache/catalina/startup/TldConfig.java"

                    // Expect file URLs
                    File file = new File(urls[i].getFile());

======= 508f513^:"java/org/apache/jasper/servlet/JspServletWrapper.java"

                response.setDateHeader("Retry-After", available);
                response.sendError
                    (HttpServletResponse.SC_SERVICE_UNAVAILABLE,
                     Localizer.getMessage("jsp.error.unavailable"));

======= c3d2ce4^:"java/org/apache/catalina/core/StandardWrapperValve.java"

======= c3d2ce4^:"java/org/apache/catalina/core/StandardWrapperValve.java"

    private static Log log = LogFactory.getLog(StandardWrapperValve.class);
======= c3d2ce4^:"java/org/apache/catalina/core/StandardWrapperValve.java"


======= 4cf171a^:"java/org/apache/tomcat/util/http/ContentType.java"

    // Basically return everything after ";charset="
    // If no charset specified, use the HTTP default (ASCII) character set.
    public static String getCharsetFromContentType(String type) {
        if (type == null) {
            return null;
        }
        int semi = type.indexOf(";");
        if (semi == -1) {
            return null;
        }
        int charsetLocation = type.indexOf("charset=", semi);
        if (charsetLocation == -1) {
            return null;
        }
        // The charset value in a Content-Type header is allowed to be quoted
        // and charset values can't contain quotes.  Just convert any quote
        // chars into spaces and let trim clean things up.
        afterCharset = afterCharset.replace('"', ' ');
        String encoding = afterCharset.trim();
        return encoding;

======= fa2b746^:"java/org/apache/juli/ClassLoaderLogManager.java"

            // Add handlers to the root logger, if any are defined using the .handlers property.
            if (rootHandlers != null) {
                StringTokenizer tok2 = new StringTokenizer(rootHandlers, ",");
                while (tok2.hasMoreTokens()) {
                    String handlerName = (tok2.nextToken().trim());
                    Handler handler = (Handler) info.handlers.get(handlerName);
                    if (handler != null) {
                        localRootLogger.addHandler(handler);
                    }
                }
            }
            

======= 3d27771^:"java/org/apache/jasper/servlet/JspServletWrapper.java"

                        theServlet = (Servlet) servletClass.newInstance();
                           annotationProcessor.processAnnotations(theServlet);
                           annotationProcessor.postConstruct(theServlet);
======= 3d27771^:"java/org/apache/jasper/servlet/JspServletWrapper.java"

                    theServlet.init(config);

======= d721522^:"java/org/apache/catalina/manager/ManagerServlet.java"


======= 2049b78^:"java/org/apache/catalina/ha/authenticator/SingleSignOnMessage.java"


======= 12d912d^:"java/org/apache/catalina/ha/session/DeltaSession.java"

                                       ((DeltaManager)manager).getName(), 

======= 4f96d21^:"java/org/apache/catalina/core/ApplicationContext.java"

    void clearAttributes() {
======= 4f96d21^:"java/org/apache/catalina/ha/context/ReplicatedContext.java"

======= 4f96d21^:"java/org/apache/catalina/ha/context/ReplicatedContext.java"

======= 4f96d21^:"java/org/apache/catalina/ha/context/ReplicatedContext.java"

======= 4f96d21^:"java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java"

            if (getMapMembers().length > 0 ) {
======= 4f96d21^:"java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java"

    
            //only delete active keys
            Iterator keys = keySet().iterator();
            while ( keys.hasNext() ) remove(keys.next());
======= 4f96d21^:"java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java"

                MapEntry entry = (MapEntry)e.getValue();
                if ( entry.isPrimary() ) set.add(entry);
======= 4f96d21^:"java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java"

                MapEntry entry = (MapEntry)e.getValue();
                if ( entry.isPrimary() ) set.add(entry.getKey());
======= 4f96d21^:"java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java"

            this.value = (Serializable) value;
======= 4f96d21^:"java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java"

            this.key = (Serializable)key;

======= 7fd4fa8^:"java/org/apache/coyote/http11/Http11Processor.java"

======= 7fd4fa8^:"java/org/apache/coyote/http11/Http11Processor.java"

======= 7fd4fa8^:"java/org/apache/coyote/http11/Http11Processor.java"


======= 400d684^:"java/org/apache/catalina/realm/JAASRealm.java"

    protected List roleClasses = new ArrayList();
======= 400d684^:"java/org/apache/catalina/realm/JAASRealm.java"

    protected List userClasses = new ArrayList();
======= 400d684^:"java/org/apache/catalina/realm/JAASRealm.java"

    /**
     * Comma-delimited list of <code>java.security.Principal</code> classes
     * that represent security roles.
     */
    protected String roleClassNames = null;
    public String getRoleClassNames() {
        return (this.roleClassNames);
    }
======= 400d684^:"java/org/apache/catalina/realm/JAASRealm.java"

        roleClasses.clear();
        String temp = this.roleClassNames;
        if (temp == null) {
            return;
        }
        while (true) {
            int comma = temp.indexOf(',');
            if (comma < 0) {
                break;
            }
            roleClasses.add(temp.substring(0, comma).trim());
            temp = temp.substring(comma + 1);
        }
        temp = temp.trim();
        if (temp.length() > 0) {
            roleClasses.add(temp);
        }
    }
    /**
     * Comma-delimited list of <code>java.security.Principal</code> classes
     * that represent individual users.
     */
    protected String userClassNames = null;
    public String getUserClassNames() {
        return (this.userClassNames);
    }
======= 400d684^:"java/org/apache/catalina/realm/JAASRealm.java"

        userClasses.clear();
        String temp = this.userClassNames;
        if (temp == null) {
            return;
        }
        while (true) {
            int comma = temp.indexOf(',');
            if (comma < 0) {
                break;
            }
            userClasses.add(temp.substring(0, comma).trim());
            temp = temp.substring(comma + 1);
        }
        temp = temp.trim();
        if (temp.length() > 0) {
            userClasses.add(temp);
        }
======= 400d684^:"java/org/apache/catalina/realm/JAASRealm.java"

        List roles = new ArrayList();

======= 455b6f8^:"java/org/apache/jasper/compiler/JDTCompiler.java"

                    InputStreamReader isReader =
                        new InputStreamReader(new FileInputStream(sourceFile),
                                ctxt.getOptions().getJavaEncoding());
                    Reader reader = new BufferedReader(isReader);
======= 455b6f8^:"java/org/apache/jasper/compiler/JDTCompiler.java"


======= e33b67a^:"java/org/apache/catalina/realm/MemoryRealm.java"

            throw new LifecycleException("memoryRealm.readXml", e);

======= 9ac3428^:"java/org/apache/catalina/servlets/DefaultServlet.java"

                    && (lastModified <= headerValue + 1000)) {
======= 9ac3428^:"java/org/apache/catalina/servlets/DefaultServlet.java"

                if ( lastModified > (headerValue + 1000)) {

======= 01d38a5^:"java/org/apache/catalina/core/StandardContext.java"

            if (loadOnStartup == 0)     // Arbitrarily put them last
                loadOnStartup = Integer.MAX_VALUE;

======= 8ba8334^:"java/org/apache/catalina/core/StandardWrapperValve.java"

            container.getLogger().warn(sm.getString("standardWrapper.serviceException",
            container.getLogger().warn(sm.getString("standardWrapper.serviceException",
======= 8ba8334^:"java/org/apache/catalina/core/StandardWrapperValve.java"

            container.getLogger().warn(sm.getString("standardWrapper.serviceException",
            container.getLogger().warn(sm.getString("standardWrapper.serviceException",

======= 4612c8a^:"java/org/apache/jasper/runtime/JspFactoryImpl.java"

    private static final boolean THREAD_LOCAL_POOL = 
        Boolean.valueOf(System.getProperty("org.apache.jasper.runtime.JspFactoryImpl.THREAD_LOCAL_POOL", "true")).booleanValue();
    private SimplePool pool = new SimplePool( 100 );
======= 4612c8a^:"java/org/apache/jasper/runtime/JspFactoryImpl.java"

            if( USE_POOL ) {
                pc = (PageContext) pool.get();
                if( pc == null ) {
======= 4612c8a^:"java/org/apache/jasper/runtime/JspFactoryImpl.java"

            pool.put( pc );
======= 4612c8a^:"java/org/apache/jasper/runtime/JspFactoryImpl.java"


======= 1a8c492^:"java/org/apache/jasper/compiler/Generator.java"

        out.print(" = JspFactory.getDefaultFactory().getJspApplicationContext(");
======= 1a8c492^:"java/org/apache/jasper/compiler/Generator.java"

======= 1a8c492^:"java/org/apache/jasper/compiler/Generator.java"

        out.printil("JspFactory _jspxFactory = null;");
======= 1a8c492^:"java/org/apache/jasper/compiler/Generator.java"

        out.printil("_jspxFactory = JspFactory.getDefaultFactory();");
======= 1a8c492^:"java/org/apache/jasper/compiler/Generator.java"

                .printil("if (_jspxFactory != null) _jspxFactory.releasePageContext(_jspx_page_context);");
======= 1a8c492^:"java/org/apache/jasper/compiler/JspRuntimeContext.java"

======= 1a8c492^:"java/org/apache/jasper/runtime/HttpJspBase.java"

    static {
        if( JspFactory.getDefaultFactory() == null ) {
            JspFactoryImpl factory = new JspFactoryImpl();
            if( System.getSecurityManager() != null ) {
                String basePackage = "org.apache.jasper.";
                try {
                    factory.getClass().getClassLoader().loadClass( basePackage +
                                                                   "runtime.JspFactoryImpl$PrivilegedGetPageContext");
                    factory.getClass().getClassLoader().loadClass( basePackage +
                                                                   "runtime.JspFactoryImpl$PrivilegedReleasePageContext");
                    factory.getClass().getClassLoader().loadClass( basePackage +
                                                                   "runtime.JspRuntimeLibrary");
                    factory.getClass().getClassLoader().loadClass( basePackage +
                                                                   "runtime.JspRuntimeLibrary$PrivilegedIntrospectHelper");
                    factory.getClass().getClassLoader().loadClass( basePackage +
                                                                   "runtime.ServletResponseWrapperInclude");
                    factory.getClass().getClassLoader().loadClass( basePackage +
                                                                   "servlet.JspServletWrapper");
                } catch (ClassNotFoundException ex) {
                    org.apache.juli.logging.LogFactory.getLog( HttpJspBase.class )
                        .error("Jasper JspRuntimeContext preload of class failed: " +
                                       ex.getMessage(), ex);
                }
            }
            JspFactory.setDefaultFactory(factory);
        }
    }

======= 8b0d130^:"java/org/apache/catalina/core/ApplicationFilterFactory.java"

        if (filterMap.getAllMatch())
======= 8b0d130^:"java/org/apache/catalina/core/ApplicationFilterFactory.java"

======= 8b0d130^:"java/org/apache/catalina/deploy/FilterMap.java"

        String[] results = new String[servletNames.length + 1];
        System.arraycopy(servletNames, 0, results, 0, servletNames.length);
        results[servletNames.length] = servletName;
        servletNames = results;
     * The flag that indicates this mapping will match all.
    private boolean allMatch = false;
    public boolean getAllMatch() {
        return allMatch;
======= 8b0d130^:"java/org/apache/catalina/deploy/FilterMap.java"

            this.allMatch = true;

======= fce171f^:"java/org/apache/tomcat/util/net/NioSelectorPool.java"


======= f06d41f^:"webapps/examples/WEB-INF/classes/compressionFilters/CompressionFilterTestServlet.java"

======= f06d41f^:"webapps/examples/WEB-INF/classes/compressionFilters/CompressionResponseStream.java"

    protected GZIPOutputStream gzipstream = null;
======= f06d41f^:"webapps/examples/WEB-INF/classes/compressionFilters/CompressionResponseStream.java"

            response.addHeader("Content-Encoding", "gzip");
            gzipstream = new GZIPOutputStream(output);
======= f06d41f^:"webapps/examples/WEB-INF/classes/compressionFilters/CompressionServletResponseWrapper.java"

======= f06d41f^:"webapps/examples/WEB-INF/classes/compressionFilters/CompressionServletResponseWrapper.java"

    /**
     * Returns character from content type. This method was taken from tomcat.
     * @author rajo
     */
    private static String getCharsetFromContentType(String type) {
        if (type == null) {
            return null;
        }
        int semi = type.indexOf(";");
        if (semi == -1) {
            return null;
        }
        String afterSemi = type.substring(semi + 1);
        int charsetLocation = afterSemi.indexOf("charset=");
        if(charsetLocation == -1) {
            return null;
        } else {
            String afterCharset = afterSemi.substring(charsetLocation + 8);
            String encoding = afterCharset.trim();
            return encoding;
        }
    }

======= 39fe247^:"java/org/apache/jasper/EmbeddedServletOptions.java"

                if (this.checkInterval == 0) {
                    this.checkInterval = 300;
                    if (log.isWarnEnabled()) {
                        log.warn(Localizer.getMessage("jsp.warning.checkInterval"));
                    }
                }

======= dc33554^:"java/org/apache/catalina/authenticator/Constants.java"

    public static final String CERT_METHOD = "CLIENT-CERT";
======= dc33554^:"java/org/apache/catalina/authenticator/Constants.java"

     *     will return BASIC, CLIENT-CERT, DIGEST, FORM, or <code>null</code>
======= dc33554^:"java/org/apache/catalina/authenticator/SSLAuthenticator.java"

        // BASIC or FORM, which are less secure than the CLIENT-CERT auth-type
======= dc33554^:"java/org/apache/catalina/authenticator/SingleSignOn.java"

     * following DIGEST or CLIENT-CERT authentication) to be updated with
======= dc33554^:"java/org/apache/catalina/authenticator/SingleSignOn.java"

     * @param authType  the type of authenticator used (BASIC, CLIENT-CERT,
======= dc33554^:"java/org/apache/catalina/authenticator/SingleSignOnEntry.java"

     * @param authType  the type of authenticator used (BASIC, CLIENT-CERT,
======= dc33554^:"java/org/apache/catalina/authenticator/SingleSignOnEntry.java"

     * @return "BASIC", "CLIENT-CERT", "DIGEST", "FORM" or "NONE"
======= dc33554^:"java/org/apache/catalina/authenticator/SingleSignOnEntry.java"

     * @param authType  the type of authenticator used (BASIC, CLIENT-CERT,

======= 11b9c92^:"java/org/apache/catalina/authenticator/AuthenticatorBase.java"


======= 3a6225a^:"java/org/apache/jasper/servlet/JspServlet.java"

                                           jspUri);

======= a1b1bed^:"java/org/apache/catalina/core/JasperListener.java"

 * 
 * 
======= a1b1bed^:"java/org/apache/catalina/core/JasperListener.java"

    
======= a1b1bed^:"java/org/apache/catalina/core/JasperListener.java"

                this.getClass().getClassLoader().loadClass
                    ("org.apache.jasper.compiler.JspRuntimeContext");

======= 5f9c18d^:"java/org/apache/jasper/compiler/Generator.java"

                        // out.println( "<PARAM name=\"blah\"
                        out.printil("out.write( \"<PARAM name=\\\""
======= 5f9c18d^:"java/org/apache/jasper/compiler/Generator.java"

            // <OBJECT ...>
            String s0 = "<OBJECT"
======= 5f9c18d^:"java/org/apache/jasper/compiler/Generator.java"

            // <PARAM > for java_code
            s0 = "<PARAM name=\"java_code\"" + makeAttr("value", code) + '>';
            // <PARAM > for java_codebase
                s0 = "<PARAM name=\"java_codebase\""
            // <PARAM > for java_archive
                s0 = "<PARAM name=\"java_archive\""
            // <PARAM > for type
            s0 = "<PARAM name=\"type\""
======= 5f9c18d^:"java/org/apache/jasper/compiler/Generator.java"

             * generate a <PARAM> for each <jsp:param> in the plugin body
======= 5f9c18d^:"java/org/apache/jasper/compiler/Generator.java"

            out.printil("out.write(" + quote("<COMMENT>") + ");");
======= 5f9c18d^:"java/org/apache/jasper/compiler/Generator.java"

            out.printil("out.write(" + quote("<NOEMBED>") + ");");
======= 5f9c18d^:"java/org/apache/jasper/compiler/Generator.java"

            out.printil("out.write(" + quote("</NOEMBED>") + ");");
            out.printil("out.write(" + quote("</COMMENT>") + ");");
            out.printil("out.write(" + quote("</OBJECT>") + ");");

======= c6b3f71^:"java/org/apache/juli/FileHandler.java"

        configure();
        open();
        this();
======= c6b3f71^:"java/org/apache/juli/FileHandler.java"

        LogManager manager = LogManager.getLogManager();
        directory = getProperty(className + ".directory", "logs");
        prefix = getProperty(className + ".prefix", "juli.");
        suffix = getProperty(className + ".suffix", ".log");

======= 514256e^:"java/org/apache/jasper/compiler/ImplicitTagLibraryInfo.java"

    private static final String JSP_VERSION = "2.0";
======= 514256e^:"java/org/apache/jasper/compiler/PageDataImpl.java"

    private static final String JSP_VERSION = "2.0";
======= 514256e^:"java/org/apache/jasper/compiler/Validator.java"

            if (!version.equals("1.2") && !version.equals("2.0")) {

======= de5c3b7^:"java/org/apache/tomcat/util/buf/StringCache.java"

    /**
======= de5c3b7^:"java/org/apache/tomcat/util/buf/StringCache.java"

            if (byteEnabled) {
======= de5c3b7^:"java/org/apache/tomcat/util/buf/StringCache.java"

            if (charEnabled) {

======= b70962f^:"java/org/apache/catalina/servlets/CGIServlet.java"

            // If request is HEAD or GET and Query String does not contain
            // an unencoded "=" this is an indexed query. Parsed Query String
            // forms command line parameters for cgi command.
            if (!"GET".equals(req.getMethod()) &&
                    !"HEAD".equals(req.getMethod()))
                return;
            
            String qs = req.getQueryString();
            
            if (qs == null || qs.indexOf("=")>0)
                return;
            
            int delimIndex = 0;
            int lastDelimIndex = 0;
            delimIndex = qs.indexOf("+");
            
            while (delimIndex >0) {
                cmdLineParameters.add(URLDecoder.decode(qs.substring(
                        lastDelimIndex,delimIndex),parameterEncoding));
                lastDelimIndex = delimIndex + 1;
                delimIndex = qs.indexOf("+",lastDelimIndex);
            cmdLineParameters.add(URLDecoder.decode(qs.substring(
                    lastDelimIndex),parameterEncoding));

======= cb2c655^:"java/org/apache/catalina/servlets/DefaultServlet.java"

======= cb2c655^:"java/org/apache/catalina/servlets/DefaultServlet.java"

                sb.append(trimmed);
======= cb2c655^:"java/org/apache/catalina/servlets/DefaultServlet.java"

                sb.append(trimmed);

======= 6009702^:"java/org/apache/catalina/loader/StandardClassLoader.java"

 * Subclass implementation of <b>java.net.URLClassLoader</b> that knows how
 * to load classes from disk directories, as well as local and remote JAR
 * files.  It also implements the <code>Reloader</code> interface, to provide
 * automatic reloading support to the associated loader.
 * <p>
 * In all cases, URLs must conform to the contract specified by
 * <code>URLClassLoader</code> - any URL that ends with a "/" character is
 * assumed to represent a directory; all other URLs are assumed to be the
 * address of a JAR file.
 * <p>
 * <strong>IMPLEMENTATION NOTE</strong> - Local repositories are searched in
 * the order they are added via the initial constructor and/or any subsequent
 * calls to <code>addRepository()</code>.
 * <p>
 * <strong>IMPLEMENTATION NOTE</strong> - At present, there are no dependencies
 * from this class to any other Catalina class, so that it could be used
 * independently.
        <bug>37509</bug>: Do not remove whitespace from the end of values
        defined in logging.properties files. (markt)

======= e713e77^:"java/org/apache/catalina/connector/Request.java"

                ; // Ignore
======= e713e77^:"java/org/apache/tomcat/util/http/Parameters.java"

                // XXX log it ?
======= e713e77^:"java/org/apache/tomcat/util/http/Parameters.java"


======= a6d6962^:"java/org/apache/juli/ClassLoaderLogManager.java"

        String result = str.trim();

======= be9d523^:"java/org/apache/catalina/realm/JDBCRealm.java"

======= be9d523^:"java/org/apache/catalina/realm/JDBCRealm.java"

    protected String getPassword(String username) {
======= be9d523^:"java/org/apache/catalina/realm/JDBCRealm.java"

    protected PreparedStatement roles(Connection dbConnection, String username)

======= f7ca96d^:"java/org/apache/jasper/compiler/Validator.java"

                                if (!deferred && (tldAttrs[j].isDeferredMethod() || tldAttrs[j].isDeferredValue())) {

======= 22d1ad7^:"java/org/apache/catalina/core/ApplicationDispatcher.java"

======= 22d1ad7^:"java/org/apache/catalina/core/ApplicationDispatcher.java"

======= 22d1ad7^:"java/org/apache/catalina/core/ApplicationDispatcher.java"

======= 22d1ad7^:"java/org/apache/catalina/core/ApplicationFilterChain.java"

======= 22d1ad7^:"java/org/apache/catalina/core/ApplicationFilterChain.java"

======= 22d1ad7^:"java/org/apache/catalina/core/ApplicationFilterChain.java"

======= 22d1ad7^:"java/org/apache/catalina/core/ApplicationFilterChain.java"

======= 22d1ad7^:"java/org/apache/catalina/core/ApplicationFilterChain.java"


======= 6d274b4^:"java/org/apache/catalina/servlets/CGIServlet.java"

                cginame =
                currentLocation.getParent().substring(webAppRootDir.length())
                + File.separator
                + name;
======= 6d274b4^:"java/org/apache/catalina/servlets/CGIServlet.java"


======= 79631bb^:"java/org/apache/catalina/loader/WebappClassLoader.java"

        synchronized (this) {
        }
        // Looking up the package
        String packageName = null;
        int pos = name.lastIndexOf('.');
        if (pos != -1)
            packageName = name.substring(0, pos);
        Package pkg = null;
        if (packageName != null) {
            pkg = getPackage(packageName);
            // Define the package (if null)
            if (pkg == null) {
                if (entry.manifest == null) {
                    definePackage(packageName, null, null, null, null, null,
                                  null, null);
                } else {
                    definePackage(packageName, entry.manifest, entry.codeBase);
        }
        // Create the code source object
        CodeSource codeSource =
            new CodeSource(entry.codeBase, entry.certificates);
        if (securityManager != null) {
            // Checking sealing
            if (pkg != null) {
                boolean sealCheck = true;
                if (pkg.isSealed()) {
                    sealCheck = pkg.isSealed(entry.codeBase);
                } else {
                    sealCheck = (entry.manifest == null)
                        || !isPackageSealed(packageName, entry.manifest);
                if (!sealCheck)
                    throw new SecurityException
                        ("Sealing violation loading " + name + " : Package "
                         + packageName + " is sealed.");
        }
        synchronized (this) {
                        codeSource);

======= 9cb5aff^:"java/org/apache/catalina/valves/JDBCAccessLogValve.java"

 * ts TIMESTAMP NOT NULL,
======= 9cb5aff^:"java/org/apache/catalina/valves/JDBCAccessLogValve.java"

 * INDEX (ts),

======= 17eecdb^:"java/org/apache/coyote/http11/filters/SavedRequestInputFilter.java"


======= b18c29e^:"java/org/apache/catalina/core/StandardPipeline.java"


======= 1a5e6e7^:"java/org/apache/catalina/deploy/NamingResources.java"

            return;
        } else {
            entries.put(environment.getName(), environment.getType());

======= bbb8fe1^:"java/org/apache/catalina/servlets/CGIServlet.java"

                throw new IOException (e.toString());

======= fda223a^:"java/org/apache/catalina/core/StandardContextValve.java"

                    container.getLogger().error(sm.getString("requestListenerValve.requestInit",
======= fda223a^:"java/org/apache/catalina/core/StandardContextValve.java"

                    container.getLogger().error(sm.getString("requestListenerValve.requestDestroy",
======= fda223a^:"java/org/apache/catalina/core/StandardContextValve.java"

     * Report a "bad request" error for the specified resource.  FIXME:  We
     * should really be using the error reporting settings for this web
     * application, but currently that code runs at the wrapper level rather
     * than the context level.
     *
     * @param requestURI The request URI for the requested resource
     * @param response The response we are creating
     */
    private void badRequest(String requestURI, HttpServletResponse response) {
        try {
            response.sendError(HttpServletResponse.SC_BAD_REQUEST, requestURI);
        } catch (IllegalStateException e) {
            ;
        } catch (IOException e) {
            ;
        }
    }
    
    
    /**
     * Report a "forbidden" error for the specified resource. 
     *
     * @param requestURI The request URI for the requested resource
     * @param response The response we are creating
     */
    private void forbidden(String requestURI, HttpServletResponse response) {
        try {
            response.sendError(HttpServletResponse.SC_FORBIDDEN, requestURI);
        } catch (IllegalStateException e) {
            ;
        } catch (IOException e) {
            ;
        }
    }
    /**

======= 9dd8a23^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

======= 9dd8a23^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

======= 9dd8a23^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

                } else if (context.getAvailable()) {
                        STARTED_APPS_ROW_BUTTON_SECTION, args));
                        STOPPED_APPS_ROW_BUTTON_SECTION, args));
======= 9dd8a23^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

    private static final String STARTED_APPS_ROW_BUTTON_SECTION =
======= 9dd8a23^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

    private static final String STOPPED_APPS_ROW_BUTTON_SECTION =
======= 9dd8a23^:"java/org/apache/catalina/manager/HTMLManagerServlet.java"

======= 9dd8a23^:"java/org/apache/catalina/manager/ManagerServlet.java"

======= 9dd8a23^:"java/org/apache/catalina/manager/ManagerServlet.java"

======= 9dd8a23^:"java/org/apache/catalina/manager/ManagerServlet.java"

     * Invoke the check method on the deployer.
======= 9dd8a23^:"java/org/apache/catalina/manager/ManagerServlet.java"

     * Invoke the check method on the deployer.
======= 9dd8a23^:"java/org/apache/catalina/manager/ManagerServlet.java"

     * Invoke the check method on the deployer.
======= 9dd8a23^:"java/org/apache/catalina/startup/HostConfig.java"

======= 9dd8a23^:"java/org/apache/catalina/startup/HostConfig.java"

        boolean checkAdditionalDeployments = false;
        

======= 823101d^:"java/org/apache/jasper/compiler/Generator.java"

                return JspUtil.makeXmlJavaIdentifier(poolName);
======= 823101d^:"java/org/apache/jasper/compiler/Generator.java"

            return JspUtil.makeXmlJavaIdentifier(varName);

======= b55e9c2^:"java/org/apache/jasper/compiler/ELParser.java"


======= 2d6d717^:"java/org/apache/jasper/compiler/Generator.java"

            if (!simpleTag) {

======= c7f0f60^:"java/org/apache/jasper/JspCompilationContext.java"

 * Copyright 1999,2004 The Apache Software Foundation.
======= c7f0f60^:"java/org/apache/jasper/JspCompilationContext.java"

    private String baseOutputDir;
======= c7f0f60^:"java/org/apache/jasper/JspCompilationContext.java"

        if (removed > 1) {
            jspCompiler.removeGeneratedFiles();
            if( rctxt != null )
                rctxt.removeWrapper(jspUri);
======= c7f0f60^:"java/org/apache/jasper/JspCompilationContext.java"

======= c7f0f60^:"java/org/apache/jasper/JspCompilationContext.java"

                ex.printStackTrace();
======= c7f0f60^:"java/org/apache/jasper/compiler/Compiler.java"

 * Copyright 1999,2004-2005 The Apache Software Foundation.
======= c7f0f60^:"java/org/apache/jasper/compiler/Compiler.java"

            e.printStackTrace();
======= c7f0f60^:"java/org/apache/jasper/compiler/Compiler.java"

                e.printStackTrace();
======= c7f0f60^:"java/org/apache/jasper/servlet/JspServletWrapper.java"

 * Copyright 1999,2004-2005 The Apache Software Foundation.
======= c7f0f60^:"java/org/apache/jasper/servlet/JspServletWrapper.java"

======= c7f0f60^:"java/org/apache/jasper/servlet/JspServletWrapper.java"

======= c7f0f60^:"java/org/apache/jasper/servlet/JspServletWrapper.java"

        } catch (FileNotFoundException ex) {
            ctxt.incrementRemoved();
            String includeRequestUri = (String)
                request.getAttribute("javax.servlet.include.request_uri");
            if (includeRequestUri != null) {
                // This file was included. Throw an exception as
                // a response.sendError() will be ignored by the
                // servlet engine.
                throw new ServletException(ex);
            } else {
                try {
                    response.sendError(HttpServletResponse.SC_NOT_FOUND, 
                                      ex.getMessage());
                } catch (IllegalStateException ise) {
                    log.error(Localizer.getMessage("jsp.error.file.not.found",
                }
            }

======= a91b95e^:"java/org/apache/coyote/ajp/AjpAprProcessor.java"

======= a91b95e^:"java/org/apache/jk/core/MsgContext.java"


======= edc20fa^:"java/org/apache/el/lang/ELSupport.java"

======= edc20fa^:"java/org/apache/el/lang/ELSupport.java"

======= edc20fa^:"java/org/apache/el/lang/ELSupport.java"

======= edc20fa^:"java/org/apache/el/lang/ELSupport.java"

======= edc20fa^:"java/org/apache/jasper/servlet/JspServletWrapper.java"

======= edc20fa^:"java/org/apache/jasper/servlet/JspServletWrapper.java"

            return ((java.util.List) ((JspSourceDependent) target).getDependants());

======= 0f9844c^:"java/org/apache/catalina/ssi/SSIServletExternalResolver.java"

            if (retVal.equals("")) {

======= 8ed77be^:"java/org/apache/catalina/ssi/SSIProcessor.java"

                while (bIdx < cmd.length() && cmd.charAt(bIdx) != '"')
======= 8ed77be^:"java/org/apache/catalina/ssi/SSIProcessor.java"

                    if (c == '"' && !escaped) break;
======= 8ed77be^:"java/org/apache/catalina/ssi/SSIProcessor.java"


======= c30afec^:"java/org/apache/catalina/servlets/CGIServlet.java"

            rt = Runtime.getRuntime();
            proc = rt.exec(cmdAndArgs.toString(), hashToStringArray(env), wd);
            String sContentLength = (String) env.get("CONTENT_LENGTH");
            if(!"".equals(sContentLength)) {
                commandsStdIn = new BufferedOutputStream(proc.getOutputStream());
                IOTools.flow(stdin, commandsStdIn);
                commandsStdIn.flush();
                commandsStdIn.close();
            }
            /* we want to wait for the process to exit,  Process.waitFor()
             * is useless in our situation; see
             * http://developer.java.sun.com/developer/
             *                               bugParade/bugs/4223650.html
             */
            boolean isRunning = true;
            commandsStdErr = new BufferedReader
                (new InputStreamReader(proc.getErrorStream()));
            final BufferedReader stdErrRdr = commandsStdErr ;
            new Thread() {
                public void run () {
                    sendToLog(stdErrRdr) ;
                } ;
            }.start() ;
            InputStream cgiHeaderStream =
                new HTTPHeaderInputStream(proc.getInputStream());
            BufferedReader cgiHeaderReader =
                new BufferedReader(new InputStreamReader(cgiHeaderStream));
            while (isRunning) {
                try {
                    //set headers
                    String line = null;
                    while (((line = cgiHeaderReader.readLine()) != null)
                           && !("".equals(line))) {
                        if (debug >= 2) {
                            log("runCGI: addHeader(\"" + line + "\")");
                        }
                        if (line.startsWith("HTTP")) {
                            response.setStatus(getSCFromHttpStatusLine(line));
                        } else if (line.indexOf(":") >= 0) {
                            String header =
                                line.substring(0, line.indexOf(":")).trim();
                            String value =
                                line.substring(line.indexOf(":") + 1).trim(); 
                            if (header.equalsIgnoreCase("status")) {
                                response.setStatus(getSCFromCGIStatusHeader(value));
                                response.addHeader(header , value);
                        } else {
                            log("runCGI: bad header line \"" + line + "\"");
                    }
                    //write output
                    byte[] bBuf = new byte[2048];
                    OutputStream out = response.getOutputStream();
                    cgiOutput = proc.getInputStream();
                    try {
                        while ((bufRead = cgiOutput.read(bBuf)) != -1) {
                            if (debug >= 4) {
                                log("runCGI: output " + bufRead +
                                    " bytes of data");
                            out.write(bBuf, 0, bufRead);
                    } finally {
                        // Attempt to consume any leftover byte if something bad happens,
                        // such as a socket disconnect on the servlet side; otherwise, the
                        // external process could hang
                        if (bufRead != -1) {
                            while ((bufRead = cgiOutput.read(bBuf)) != -1) {}
                    proc.exitValue(); // Throws exception if alive
                    isRunning = false;
                } catch (IllegalThreadStateException e) {
                    try {
                        Thread.sleep(500);
                    } catch (InterruptedException ignored) {
                    }
            } //replacement for Process.waitFor()
            // Close the output stream used
            cgiOutput.close();

======= 01a9b59^:"java/org/apache/jasper/el/VariableResolverImpl.java"


======= 276e5ac^:"java/org/apache/catalina/core/StandardWrapper.java"

        ClassLoader oldCtxClassLoader =
            Thread.currentThread().getContextClassLoader();
        ClassLoader classLoader = instance.getClass().getClassLoader();
======= 276e5ac^:"java/org/apache/catalina/core/StandardWrapper.java"

            Thread.currentThread().setContextClassLoader(classLoader);
======= 276e5ac^:"java/org/apache/catalina/core/StandardWrapper.java"

            // restore the context ClassLoader
            Thread.currentThread().setContextClassLoader(oldCtxClassLoader);
======= 276e5ac^:"java/org/apache/catalina/core/StandardWrapper.java"

                Thread.currentThread().setContextClassLoader(classLoader);
======= 276e5ac^:"java/org/apache/catalina/core/StandardWrapper.java"

            } finally {
                // restore the context ClassLoader
                Thread.currentThread().setContextClassLoader
                    (oldCtxClassLoader);

======= 7b870a4^:"java/org/apache/catalina/core/StandardContext.java"

======= 7b870a4^:"java/org/apache/catalina/core/StandardContext.java"

======= 7b870a4^:"java/org/apache/catalina/core/StandardContext.java"

                if (manager == null) {
                    if ((getCluster() != null) && distributable) {
                        try {
                            setManager(getCluster().createManager(getName()));
                        } catch (Exception ex) {
                            log.error("standardContext.clusterFail", ex);
                            ok = false;
                        }
                    } else {
                        setManager(new StandardManager());
                    }
